<?xml version="1.0" encoding="UTF-8"?>
<!--
CAUTION: Do not modify this file unless you know what you are doing.
         Unexpected results may occur if the code is changed deliberately.
-->
<dbmodel pgmodeler-ver="0.8.2" last-position="1148,3741" last-zoom="1"
	 default-schema="public" default-owner="postgres">
<role name="dalcaraz"
      superuser="true"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="ggaleano"
      superuser="true"
      createdb="true"
      replication="true"
      createrole="true"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="jcabrera"
      superuser="true"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="mcaniza"
      superuser="true"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<role name="caquino"
      superuser="true"
      createrole="true"
      inherit="true"
      login="true"
      encrypted="true"
      password="********">
</role>

<database name="db_sicrh_20180620_173033" encoding="UTF8" lc-collate="es_PY" lc-ctype="es_PY">
	<role name="postgres"/>
	<tablespace name="pg_default"/>
</database>

<schema name="public" rect-visible="true" fill-color="#e1e1e1" sql-disabled="true">
</schema>

<schema name="salarios" rect-visible="true" fill-color="#dfd9bd">
	<role name="postgres"/>
</schema>

<function name="actualiza_estado_firmantes"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
	var_estado boolean := False;
	var_id_firmante_salario integer :=0;
	
BEGIN

IF (TG_OP = 'INSERT') THEN
	var_estado := not NEW.estado;
	-- Recupera el ultimo registro
	   SELECT id_firmante_salario
	     into var_id_firmante_salario
	   from salarios.firmantes_salarios 
	   where 
	            posicion = NEW.posicion
	        and id_administracion = NEW.id_administracion
		and estado = true; 

	-- Actualiza el estado del ultimo registro a false
	   UPDATE salarios.firmantes_salarios 
		set 
		estado = false, 
		vig_hasta = NEW.vig_desde,
		usu_modi = current_user::varchar(30), 
		fec_modi = current_date,
		ip_modi=inet_client_addr()::varchar(30)
	   where id_firmante_salario = var_id_firmante_salario;	
	   
        RETURN NEW;
END IF;
END;
]]></definition>
</function>

<function name="actualiza_gasto_representacion"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[

BEGIN

IF (TG_OP = 'UPDATE') THEN

        IF not(NEW.hasta isnull) THEN 
           UPDATE salarios.detalles_categorias SET vacante = TRUE, 
           usu_modi = current_user,
	   fec_modi = current_date 
           WHERE id_detalle_categoria = NEW.id_detalle_categoria;
        END IF;
       
        RETURN NEW;

END IF;
RETURN NULL;	
END;
]]></definition>
</function>

<function name="actualiza_importe_multas_solicitadas"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
valor numeric(12,2) := 0;
-- nombre_usuario text := user::text||' salarios.actualiza_importe_multas_aplicadas()' ;
nombre_usuario text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	valor := sum(monto_multa) from salarios.detalles_multas_solicitadas where id_multa_solicitada = OLD.id_multa_solicitada;
	IF valor IS NULL THEN 
		valor :=0;
	END IF;
	UPDATE salarios.multas_solicitadas SET total_multa=valor, usu_modi=nombre_usuario, fec_modi=now() WHERE id_multa_solicitada = OLD.id_multa_solicitada;
	RETURN OLD;

ELSIF (TG_OP = 'UPDATE') THEN
        valor := sum(monto_multa) from salarios.detalles_multas_solicitadas where id_multa_solicitada = NEW.id_multa_solicitada;
	IF valor IS NULL THEN 
		valor :=0;
	END IF;
	UPDATE salarios.multas_solicitadas SET total_multa=valor, usu_modi=nombre_usuario, fec_modi=now() WHERE id_multa_solicitada = NEW.id_multa_solicitada;
	RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN
	valor := sum(monto_multa) from salarios.detalles_multas_solicitadas where id_multa_solicitada = NEW.id_multa_solicitada;
	IF valor IS NULL THEN 
		valor :=0;
	END IF;
	UPDATE salarios.multas_solicitadas SET total_multa=valor, usu_modi=nombre_usuario, fec_modi=now() WHERE id_multa_solicitada = NEW.id_multa_solicitada;
	RETURN NEW;
END IF;
END;
]]></definition>
</function>

<function name="actualiza_importes_multas_aplicadas"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
	vSolicitado numeric(12,2) := 0;
	vAplicado numeric(12,2) := 0;
	vDiferencia numeric(12,2) := 0;
	nombre_usuario text := user::varchar(30);
BEGIN
IF (TG_OP = 'DELETE') THEN
	Select  sum(importe_solicitado), 
		sum(importe_aplicado), 
		sum(importe_diferencia) 
		into vSolicitado, vAplicado, vDiferencia 
	from salarios.detalles_multas_aplicadas 
	where id_multas_aplicadas = OLD.id_multas_aplicadas;

	IF vSolicitado IS NULL THEN 
		vSolicitado :=0;
	END IF;
	IF vAplicado IS NULL THEN 
		vAplicado :=0;
	END IF;

	IF vDiferencia IS NULL THEN 
		vDiferencia :=0;
	END IF;

	UPDATE salarios.multas_aplicadas 
	SET 	total_solicitado=vSolicitado, 
		total_aplicado=vAplicado, 
		total_diferencia=vDiferencia, 
		usu_modi=nombre_usuario, 
		fec_modi=now(),
		ip_modi=inet_client_addr()::varchar(30)
	where id_multas_aplicadas = OLD.id_multas_aplicadas;

	RETURN OLD;

ELSIF (TG_OP = 'UPDATE') THEN
	Select  sum(importe_solicitado), 
		sum(importe_aplicado), 
		sum(importe_diferencia) 
		into vSolicitado, vAplicado, vDiferencia 
	from salarios.detalles_multas_aplicadas 
	where id_multas_aplicadas = NEW.id_multas_aplicadas;

	IF vSolicitado IS NULL THEN 
		vSolicitado :=0;
	END IF;
	IF vAplicado IS NULL THEN 
		vAplicado :=0;
	END IF;

	IF vDiferencia IS NULL THEN 
		vDiferencia :=0;
	END IF;

	UPDATE salarios.multas_aplicadas 
	SET 	total_solicitado=vSolicitado, 
		total_aplicado=vAplicado, 
		total_diferencia=vDiferencia, 
		usu_modi=nombre_usuario, 
		fec_modi=now(),
		ip_modi=inet_client_addr()::varchar(30)
	where id_multas_aplicadas = NEW.id_multas_aplicadas;
	RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN
	Select  sum(importe_solicitado), 
		sum(importe_aplicado), 
		sum(importe_diferencia) 
		into vSolicitado, vAplicado, vDiferencia 
	from salarios.detalles_multas_aplicadas 
	where id_multas_aplicadas = NEW.id_multas_aplicadas;

	IF vSolicitado IS NULL THEN 
		vSolicitado :=0;
	END IF;
	IF vAplicado IS NULL THEN 
		vAplicado :=0;
	END IF;

	IF vDiferencia IS NULL THEN 
		vDiferencia :=0;
	END IF;

	UPDATE salarios.multas_aplicadas 
	SET 	total_solicitado=vSolicitado, 
		total_aplicado=vAplicado, 
		total_diferencia=vDiferencia, 
		usu_modi=nombre_usuario, 
		fec_modi=now(),
		ip_modi=inet_client_addr()::varchar(30)
	where id_multas_aplicadas = NEW.id_multas_aplicadas;
	RETURN NEW;
END IF;
END;
]]></definition>
</function>

<function name="actualiza_oficina_presta"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[

BEGIN

	-- Si la operacion es actualizar
	IF (TG_OP = 'UPDATE') THEN
		-- Si id_oficina_presta cambia se debe alterar el id_oficina_presta en legajos.situacion_administrativa_actual
		IF (NOT(NEW.id_oficina_presta = OLD.id_oficina_presta)) THEN
		   -- Actualiza la oficina con la nueva oficina
		   UPDATE legajos.situacion_administrativa_actual 
			set id_oficina_presta = NEW.id_oficina_presta, 
			usu_modi = current_user::varchar(30), 
			fec_modi = current_date,
			ip_modi=inet_client_addr()::varchar(30)
		   where id_funcionario = NEW.id_funcionario;
		END IF;
		RETURN NEW;
	--Si se inserta un nuevo registro	
	ELSIF (TG_OP = 'INSERT') THEN 
		-- Actualiza la oficina con la nueva oficina
		   UPDATE legajos.situacion_administrativa_actual 
			set id_oficina_presta = NEW.id_oficina_presta, 
			usu_modi = current_user::varchar(30), 
			fec_modi = current_date,
			ip_modi=inet_client_addr()::varchar(30)
		   where id_funcionario = NEW.id_funcionario;
		   RETURN NEW;
	END IF;
END;
]]></definition>
</function>

<function name="actualiza_parametro"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[BEGIN

IF (TG_OP = 'INSERT') THEN

       --var_estado := not NEW.estado;
       UPDATE salarios.parametros
	   SET estado   = False,
	       usu_modi = current_user,
	       fec_modi = current_date;
	

       RETURN NEW;

END IF;
END;
]]></definition>
</function>

<function name="actualiza_vacancia"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
var_estado boolean := False;
BEGIN

IF (TG_OP = 'INSERT') THEN
	

        --IF NEW.estado = True THEN 
        --        var_estado :=True;
	var_estado := not NEW.estado;
	   UPDATE salarios.detalles_categorias 
	   SET vacante  = var_estado,
	       usu_modi = current_user,
	       fec_modi = current_date
	   WHERE id_detalle_categoria = NEW.id_detalle_categoria;

        --END IF;

        RETURN NEW;
ELSIF (TG_OP = 'UPDATE') THEN

        --IF NEW.estado = False THEN 
        --     var_estado := False;
	 var_estado := not NEW.estado;
             UPDATE salarios.detalles_categorias 
	     SET vacante= var_estado,
	       usu_modi = current_user,
	       fec_modi = current_date
	     WHERE id_detalle_categoria = NEW.id_detalle_categoria;

        --END IF;
        

        RETURN NEW;
/*
--END IF;
--	RETURN NULL; -- result is ignored since this is an AFTER trigger
ELSIF (TG_OP = 'DELETE') THEN

        --IF NEW.estado = False THEN 
        --     var_estado := False;
	 var_estado := not NEW.estado;
             UPDATE salarios.detalles_categorias 
	     SET vacante= True,
	       usu_modi = current_user,
	       fec_modi = current_date
	     WHERE id_detalle_categoria = NEW.id_detalle_categoria;

        --END IF;
        

        RETURN NEW;
*/
END IF;
RETURN NULL;
END;
]]></definition>
</function>

<function name="actualiza_vacante_categoria"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
	var_estado boolean := False;
	var_id_detalle_categoria integer :=0;
	var_id_funcionario_categoria integer :=0;
BEGIN

IF (TG_OP = 'INSERT') THEN
	var_estado := not NEW.estado;
	-- Recupera el ultimo registro
	   SELECT id_funcionario_categoria, 
		  id_detalle_categoria 
	     into var_id_funcionario_categoria, 
		  var_id_detalle_categoria 
	   from salarios.funcionarios_categorias 
	   where id_funcionario = NEW.id_funcionario 
		and estado = true
		and gestion=NEW.gestion; 

	-- Actualiza el estado del ultimo registro a false
	   UPDATE salarios.funcionarios_categorias 
		set hasta = NEW.desde, 
		estado = false, 
		usu_modi = current_user::varchar(30), 
		fec_modi = current_date,
		ip_modi=inet_client_addr()::varchar(30)
	   where id_funcionario_categoria = var_id_funcionario_categoria;

	-- Actualiza en detalle_categoria, 
        -- pone la categoria anterior a vacante 
        -- y borra la observacion    
	   UPDATE salarios.detalles_categorias 
		SET vacante = true, 
		observacion =null, 
		usu_modi = current_user, 
		fec_modi = current_date,
		ip_modi=inet_client_addr()::varchar(30) 
	   WHERE id_detalle_categoria = var_id_detalle_categoria;

	-- Actualiza en detalle_categoria, pone la nueva categoria en usado 
        -- (vacante = false) y observacion
	   UPDATE salarios.detalles_categorias 
		SET vacante = false, 
		observacion ='Utilizado por id_funcionario='||NEW.id_funcionario::text, 
		usu_modi = current_user, 
		fec_modi = current_date,
		ip_modi=inet_client_addr()::varchar(30) 
	   WHERE id_detalle_categoria = NEW.id_detalle_categoria;   
	   
        RETURN NEW;
END IF;
END;
]]></definition>
</function>

<function name="anular_planilla_salario"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<comment><![CDATA[Esta función anula las demás planillas asociadas a la planilla de salario que fue anulada: plla de descuentos aplicados, multas aplicadas y pone a 0 el estado de multas solicitadas.-]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[ 
DECLARE 
BEGIN 
-- Esta función anula las demás planillas asociadas a esta
-- planilla de salario que fue anulada.-
-- Autor: Lic. Guillermo Galeano Fernández
-- Fecha: 2012-04-14

	-- anulamos la planilla de descuento:
	UPDATE salarios.planillas_descuentos
	   SET  estado=2,
		usu_modi=user::varchar(30), 
		fec_modi=now(), 
		ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_planilla_salario=NEW.id_planilla_salario;
-- hacer disponible los descuentos_aso 
-- y descuentos_judicales solicitados con estado=0:

	UPDATE salarios.descuentos_aso
	   SET estado=0, -- creado
		usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_descuento_aso in (
					Select id_descuento_aso 
					from salarios.detalles_planillas_descuentos 
					where id_planilla_descuento=(Select id_planilla_descuento from salarios.planillas_descuentos where id_planilla_salario=NEW.id_planilla_salario and estado=2) 
					and id_descuento_aso  is not null
				)
	;

	UPDATE salarios.descuentos_judiciales
	   SET estado=0, -- creado
		usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_descuento_judicial in (
					 Select id_descuento_judicial 
					from salarios.detalles_planillas_descuentos 
					where id_planilla_descuento=(Select id_planilla_descuento from salarios.planillas_descuentos where id_planilla_salario=NEW.id_planilla_salario and estado=2)
						and id_descuento_judicial is not null
					)
	;



	-- anulamos la planilla de multas aplicadas.
	UPDATE salarios.multas_aplicadas
	   SET  estado=2,
		usu_modi=user::varchar(30), 
		fec_modi=now(), 
		ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_planilla_salario=NEW.id_planilla_salario;

	-- dejamos disponible las multas_solicitadas.
	UPDATE salarios.multas_solicitadas
	   SET  estado=0,
		usu_modi=user::varchar(30), 
		fec_modi=now(), 
		ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_multa_solicitada= (Select id_multa_solicitada 
				     from salarios.multas_aplicadas 
					where id_planilla_salario=NEW.id_planilla_salario);

	RETURN NEW;
END; 
]]></definition>
</function>

<function name="aplicar_descuentos_varios"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record"/>
	</return-type>
	<parameter name="in_id_planilla_salario">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE

    plla_salarios RECORD;
    desc_de_un_funcionario RECORD;
    aplicado_no_acumulado numeric;
    in_id_planilla_descuento integer;
BEGIN
-- Se obtiene el ID de la planilla de descuento para este plla de salario.
-- si no existe se le asigna el valor por omisión 0.-
	Select z.id_planilla_descuento into in_id_planilla_descuento 
	from salarios.planillas_descuentos z 
	where z.id_planilla_salario = in_id_planilla_salario and z.estado = 0;
	IF (in_id_planilla_descuento IS NULL) THEN
		in_id_planilla_descuento:=0;
	END IF;

-- RETURN QUERY 

/*
Fecha: 2012-02-21
Autor: Lic. Guillermo Galeano Fernandez

Especificacion de CU de Calcular Aplicacion descuentos varios:

* Luego de cargar los descuentos solicitados el usuario creara una planilla (cabecera) de descuentos aplicados.

* Al aplicar los descuentos solicitados el sistema debera:
FLUJO BASICO:
Para cada funcionario del mes que se esta procesando el sistema realizara lo siguiente :
  a) Obtener el salario devengado (liquido en ese momento)

     Obtener los descuentos y por cada uno de ellos realizar lo siguiente:
     + Sumar el importe solicitado actual al importe solicitado acumulado.
  b) Verificar que el importe liquido sea mayor a cero.
  c) Verificar que el importe solicitado sea menor al importe liquido.
  d) Restar el importe solicitado del liquido y : 
      - almacenar la diferencia como nuevo liquido.
      - sumar el importe solicitado al importe aplicado acumulado.

FLUJOS ALTERNATIVOS:
A1. El importe liquido es igual o menor a cero. (en el paso b)
       El sistema debera sumar al acumulado del importe de diferencia
       (descuento solicitado no aplicado) el importe solicitado.-
A2. El importe solicitado es mayor al importe liquido. (en el paso c)
       El sistema debera realizar lo siguiente:  
       - almacenar como acumulado del importe de diferencia (descuento solicitado no aplicado)
         el resultado de restar el importe solicitado menos el liquido.-
       - sumar al importe aplicado acumulado el importe liquido.
       - almacenar como nuevo importe liquido: cero.
*/


FOR plla_salarios IN -- EXECUTE $select_plla_salarios$

-- 1) Select para obtener el importe liquido:
SELECT 
-- distinct on (id_funcionario) 
-- TODO: ticket #480: Cuando hay recategoriacion en mitad del mes
-- para jefes, se debe modificar esto, ya que un id_funcionario puede aparecer dos veces!!!

	a.id_detalle_planilla_salario, 
	a.id_administracion, 
	a.id_planilla_salario, 
        a.id_funcionario, 
	a.id_oficina, 
	a.dias_trabajados, 
	a.monto_presupuestado, 
        a.monto_devengado, 
	a.monto_aporte, 
	a.monto_multa, 
	a.monto_total_aporte,
	CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_inicial",
	CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_final"
        -- (a.monto_devengado - a.monto_total_aporte)::numeric AS "liquido_inicial",        
	-- (a.monto_devengado - a.monto_total_aporte)::numeric AS "liquido_final"
,(
-- aqui va lo solicitado:
0::numeric
) as "solicitado"

,(
-- aqui va lo aplicado:
0::numeric
) as "aplicado"
,(
-- aqui va la diferencia (solicitado-aplicado):
0::numeric
) as "diferencia"

FROM salarios.detalles_planillas_salarios a
      left join salarios.planillas_salarios b 
           on (a.id_planilla_salario=b.id_planilla_salario)
WHERE -- b.id_administracion = 0
      -- and b.gestion = 2011
      -- and b.id_mes = 1 
      -- and 
      b.id_estado=4 -- 4 = con multas aplicadas!!!
      and b.id_planilla_salario= in_id_planilla_salario -- 5
      -- and a.id_funcionario=195

-- $select_plla_salarios$
LOOP
-- Para cada registro (funcionario) del detalle de la planilla de salario:
-- TODO ticket #480: ojo con los funcionarios que pueden aparecer dos veces en la plla de salarios.
-- 2) Obtener el importe solicitado:
	FOR desc_de_un_funcionario IN -- EXECUTE $desc_de_un_func$
		Select 
                        g.id_funcionario,
                        g.monto,
                        g.ejecutado,
                        g.id_tipo_descuento,
                        g.id_descuento_aso,
                        g.id_descuento_judicial,
                        g.id_judicial,
                        g.orden,
                        g.aso 
		from salarios.obtener_descuentos_varios(
			(Select id_administracion from salarios.planillas_salarios where id_planilla_salario =in_id_planilla_salario ), -- 0, 
			(Select gestion::integer from salarios.planillas_salarios where id_planilla_salario =in_id_planilla_salario ), --2011,
			(Select id_mes from salarios.planillas_salarios where id_planilla_salario =in_id_planilla_salario ) -- 1
			) g
		where g.id_funcionario= plla_salarios.id_funcionario -- 195
		-- order by g.id_funcionario asc, g.orden asc, g.aso desc;
	-- $desc_de_un_func$
	LOOP
                -- La variable aplicado_no_acumulado solamente se utiliza al realizar el insert en el detalle de la planilla de descuentos.
                -- y almacena lo aplicado de este descuento.
                aplicado_no_acumulado :=0;

		-- Sumar el importe solicitado actual al importe solicitado acumulado.
		plla_salarios.solicitado=plla_salarios.solicitado+desc_de_un_funcionario.monto;

		-- 3) Aplicar los descuentos y Obtener la diferencia
                    -- FLUJO BASICO:
                    -- b) Verificar que el importe liquido sea mayor a cero.
		IF plla_salarios.liquido_final > 0 THEN
                    -- c) Verificar que el importe solicitado sea menor al importe liquido.
                    IF desc_de_un_funcionario.monto < plla_salarios.liquido_final THEN
                        --  d) Restar el importe solicitado del liquido y :
                        --      - almacenar la diferencia como nuevo liquido.
                        plla_salarios.liquido_final = (plla_salarios.liquido_final - desc_de_un_funcionario.monto);
                        --      - sumar el importe solicitado al importe aplicado acumulado.
                        plla_salarios.aplicado = (plla_salarios.aplicado + desc_de_un_funcionario.monto);
			-- cargarla en la variable aplicado_no_acumulado el importe aplicado:
			aplicado_no_acumulado = desc_de_un_funcionario.monto;

                    ELSE
                        -- A2. El importe solicitado es mayor al importe liquido. (en el paso c)
                        --       El sistema debera realizar lo siguiente:
                        --       - almacenar como acumulado del importe de diferencia (descuento solicitado no aplicado)
                        --         el resultado de restar el importe solicitado menos el liquido.-
                            plla_salarios.diferencia = plla_salarios.diferencia+(desc_de_un_funcionario.monto - plla_salarios.liquido_final);
                        --       - sumar al importe aplicado acumulado el importe liquido.
                            plla_salarios.aplicado = plla_salarios.aplicado+plla_salarios.liquido_final;
			    -- almacenar el liquido final como aplicado_no_acumulado:
			    aplicado_no_acumulado=plla_salarios.liquido_final;
                        --       - almacenar como nuevo importe liquido: cero.
                            plla_salarios.liquido_final=0;
                    END IF;
		ELSE
                    -- FLUJOS ALTERNATIVOS:
                    -- A1. El importe liquido es igual o menor a cero. (en el paso b)
                    -- El sistema debera sumar al acumulado del importe de diferencia
                    -- (descuento solicitado no aplicado) el importe solicitado.-
                    plla_salarios.diferencia = plla_salarios.diferencia+desc_de_un_funcionario.monto;
		END IF;
                    -- Insertar / Actualizar los descuentos ya procesados:
                    -- Insertar un registro en el detalle de la planilla de descuentos activa:
		    -- Siempre y cuando exista la planilla de descuento!
			
			-- Preparamos los valores:
			IF desc_de_un_funcionario.id_descuento_judicial = 0 THEN 
				desc_de_un_funcionario.id_descuento_judicial := NULL;
			ELSE
				desc_de_un_funcionario.id_descuento_aso := NULL; 
			END IF;
			-- Cuando no existe una planilla de descuento 
			-- el in_id_planilla_descuento = 0.
			IF (in_id_planilla_descuento !=0 ) THEN
				INSERT INTO salarios.detalles_planillas_descuentos (
				id_administracion,
				id_funcionario,
				id_planilla_descuento,
				monto_descuento, --aqui esto es el aplicado!
				monto_solicitado,
				id_descuento_judicial,
				id_descuento_aso,
				usu_alta,
				fec_alta,
				ip_alta
				) VALUES (
				plla_salarios.id_administracion, -- id_administracion,
				desc_de_un_funcionario.id_funcionario, --id_funcionario,
				in_id_planilla_descuento, -- id_planilla_descuento,
				aplicado_no_acumulado, -- monto_descuento, --aqui esto es el aplicado!
				desc_de_un_funcionario.monto, -- monto_solicitado,
				desc_de_un_funcionario.id_descuento_judicial, --id_descuento_judicial,
				desc_de_un_funcionario.id_descuento_aso, --id_descuento_aso,
				current_user::varchar(30), -- usu_alta,
				now(),
				inet_client_addr()::varchar(30) -- ip_alta -- ¿se recibira al llamar al sp?
				);

				-- Aquí se debe actualizar el saldo pendiente en Judiciales!
				IF desc_de_un_funcionario.id_descuento_judicial is not null THEN 
					UPDATE salarios.judiciales
					   SET monto_saldo=monto_saldo-aplicado_no_acumulado, 
					       usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
					WHERE id_judicial=(Select id_judicial 
								from salarios.descuentos_judiciales 
								where id_descuento_judicial=desc_de_un_funcionario.id_descuento_judicial)
					;
				END IF;

			END IF;
END LOOP; -- LOOP de los Descuentos
-- actualizar el detalle de la planilla de salarios:
UPDATE salarios.detalles_planillas_salarios
   SET 
	importe_liquido_sin_descuentos_varios=plla_salarios.liquido_inicial,
        importe_descuentos_varios_solicitado=plla_salarios.solicitado, 
       importe_descuentos_varios_aplicado=plla_salarios.aplicado, 
	importe_descuentos_varios_diferencia=plla_salarios.diferencia, 
       importe_liquido_con_descuentos_varios=plla_salarios.liquido_final, 
       usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
 WHERE id_detalle_planilla_salario=plla_salarios.id_detalle_planilla_salario;


RETURN NEXT plla_salarios;
END LOOP; -- LOOP de plla_salarios (de este funcioanrio)


-- actualizar plla de descuentos (cabecera)
-- Cuando no existe una planilla de descuento 
-- el in_id_planilla_descuento = 0.
IF (in_id_planilla_descuento !=0 ) THEN
	UPDATE salarios.planillas_descuentos
	   SET estado=1, 
	       total_importe_solicitado=coalesce((Select sum(monto_solicitado) 
					 from salarios.detalles_planillas_descuentos
					 where id_planilla_descuento = in_id_planilla_descuento
					),0), 
	       total_descuento=coalesce((Select sum(monto_descuento) 
					 from salarios.detalles_planillas_descuentos
					 where id_planilla_descuento = in_id_planilla_descuento
					),0), 
	       usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_planilla_descuento=in_id_planilla_descuento;

-- actualizar descuentos_aso y descuentos_judiciales estado=1 
-- de esta planilla de descuentos:
	UPDATE salarios.descuentos_aso
	   SET estado=1, -- procesado
		usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_descuento_aso in (
					Select id_descuento_aso 
					from salarios.detalles_planillas_descuentos 
					where id_planilla_descuento=in_id_planilla_descuento 
					and id_descuento_aso  is not null
				)
	;

	UPDATE salarios.descuentos_judiciales
	   SET estado=1, -- procesado
		usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_descuento_judicial in (
					 Select id_descuento_judicial 
					from salarios.detalles_planillas_descuentos 
					where id_planilla_descuento=in_id_planilla_descuento 
						and id_descuento_judicial is not null
					)
	;

END IF;

-- actualizar plla de salarios
-- Estado 3 = CON DESCUENTOS APLICADOS
UPDATE salarios.planillas_salarios
   SET id_estado=3, 
              usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
 WHERE id_planilla_salario=in_id_planilla_salario;


-- RETURN plla_salarios;
END;
]]></definition>
</function>

<function name="aplicar_descuentos_varios_v2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_detalle_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_multa">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_total_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_inicial">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_final">
		<type name="numeric"/>
	</parameter>
	<parameter name="solicitado">
		<type name="numeric"/>
	</parameter>
	<parameter name="aplicado">
		<type name="numeric"/>
	</parameter>
	<parameter name="diferencia">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE

-- cantidad de apariciones del funcionario en el detalle 
-- de la planilla de salarios.
    rApariciones RECORD;

-- Cursor utilizado cuando apariciones = 2
    cDetallePSA2 refcursor;

-- un registro del cursor
    rDetallePSA1 RECORD;
    rDetallePSA2 RECORD;

-- variables para los importes liquidos sin descuentos:
    nImporte_liquido1 numeric := 0;
    nImporte_liquido2 numeric := 0;

-- desc_de_un_funcionario : Este registro almacena un descuento
-- del funcionario activo
    desc_de_un_funcionario RECORD;

    -- la variable nImporte_solicitado: guarda el importe del descuento que esta
    -- siendo procesado actualmente, se utiliza esta variable
    -- por cuestiones de practicidad.
    nImporte_solicitado numeric := 0;

    -- importe_solicitado_acumulado: esta variable guarda la sumatoria
    -- de todos los descuentos solicitados para este funcionario.
    nImporte_solicitado_acumulado numeric := 0;

    nImporte_solicitado1 numeric := 0;
    nImporte_aplicado_acumulado1 numeric := 0;
    nImporte_diferencia1 numeric := 0;

    nImporte_solicitado2 numeric := 0;
    nImporte_aplicado_acumulado2 numeric := 0;
    nImporte_diferencia2 numeric := 0;
    nImporte_aplicado_de_este_concepto numeric :=0;

    in_id_planilla_descuento INTEGER :=0;
	id_judicial_cobro_guaranies INTEGER;
-- FIN --
-- Cursor utilizado para armar el resultado a ser devuelto al cliente:
--    cDetallePllaSalarioOUT refcursor;

BEGIN

	-- Se obtiene el ID de la planilla de descuento para este plla de salario.
	-- si no existe se cancela la ejecucion de la funcion, ticket #939
	Select z.id_planilla_descuento into in_id_planilla_descuento 
	from salarios.planillas_descuentos z 
	where z.id_planilla_salario = IN_ID_PLANILLA_SALARIO and z.estado = 0;
IF (in_id_planilla_descuento IS NOT NULL) THEN


/*
a) Identificar la cantidad de veces que aparece 
   cada funcionario en el detalle de la planilla de salarios 
   que se esta procesando.
*/
	FOR rApariciones IN
		SELECT 
			a.id_funcionario, 
			count(*) as cantidad
		FROM salarios.detalles_planillas_salarios a
		      left join salarios.planillas_salarios b 
			   on (a.id_planilla_salario=b.id_planilla_salario)
		WHERE b.id_estado=4 -- 4 es CON MULTAS APLICADAS
		      and b.id_planilla_salario= IN_ID_PLANILLA_SALARIO 
		group by a.id_funcionario
	LOOP
		-- limpiar las variables utilizadas por este funcionario:
		    nImporte_liquido1 := 0;
		    nImporte_liquido2 := 0;
		    nImporte_solicitado := 0;

		    nImporte_solicitado_acumulado := 0;

		    nImporte_solicitado1 := 0;
		    nImporte_aplicado_acumulado1 := 0;
		    nImporte_diferencia1 := 0;

		    nImporte_solicitado2 := 0;
		    nImporte_aplicado_acumulado2 := 0;
		    nImporte_diferencia2 := 0;
                    nImporte_aplicado_de_este_concepto :=0;
		-- fin de limpieza de variables.
	/*
	b) Por cada funcionario realizar lo siguiente:
	c) Obtener para este funcionario los importes liquido1 
	    y si la cantidad = 2 
	    tambien el importe del liquido2 junto a todos los demas datos
	    del detalle de la planilla de salarios.
	*/

	OPEN cDetallePSA2 SCROLL FOR 
		SELECT 
			a.id_detalle_planilla_salario, 
			a.id_administracion, 
			a.id_planilla_salario, 
			a.id_funcionario, 
			a.id_oficina, 
			a.dias_trabajados, 
			a.monto_presupuestado, 
			a.monto_devengado, 
			a.monto_aporte, 
			a.monto_multa, 
			a.monto_total_aporte,
			CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_inicial",
			CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_final"
			,(0::numeric) as "solicitado"
			,(0::numeric) as "aplicado"
			,(0::numeric) as "diferencia" -- diferencia = (solicitado-aplicado):

		FROM salarios.detalles_planillas_salarios a
		      left join salarios.planillas_salarios b 
			   on (a.id_planilla_salario=b.id_planilla_salario)
		WHERE -- b.id_administracion = 0
		      -- and b.gestion = 2011
		      -- and b.id_mes = 1 
		      -- and 
		      b.id_estado=4 -- 4 = con multas aplicadas!.
		      and b.id_planilla_salario= in_id_planilla_salario -- 5
		      and a.id_funcionario=rApariciones.id_funcionario
		ORDER BY a.monto_presupuestado ASC;

	-- Asumimos que un funcionario aparece como maximo 2 veces!!!
	FETCH NEXT FROM cDetallePSA2 INTO rDetallePSA1;
	-- Obtenemos el importe_liquido1:
	nImporte_liquido1 := rDetallePSA1.liquido_inicial;
	IF (rApariciones.cantidad = 2 ) THEN
		FETCH NEXT FROM cDetallePSA2 INTO rDetallePSA2;
		-- Obtenemos el importe_liquido2:
		nImporte_liquido2 := rDetallePSA2.liquido_inicial;
	END IF;

	CLOSE cDetallePSA2;

	/*
	d) obtener los descuentos de este funcionario
	*/
	FOR desc_de_un_funcionario IN 
		Select 
			g.id_funcionario,
			g.monto,
			g.ejecutado,
			g.id_tipo_descuento,
			g.id_descuento_aso,
			g.id_descuento_judicial,
			g.id_judicial,
			g.orden,
			g.aso 
		from salarios.obtener_descuentos_varios(
			(Select z.id_administracion from salarios.planillas_salarios z where z.id_planilla_salario = IN_ID_PLANILLA_SALARIO), -- 0,
			(Select z.gestion::integer from salarios.planillas_salarios z where z.id_planilla_salario = IN_ID_PLANILLA_SALARIO), --2011,
			(Select z.id_mes from salarios.planillas_salarios z where z.id_planilla_salario = IN_ID_PLANILLA_SALARIO) -- 1
			) g
		where g.id_funcionario= rApariciones.id_funcionario -- 195
		LOOP
			-- la variable nImporte_solicitado: guarda el importe del descuento que esta
			-- siendo procesado actualmente, se utiliza esta variable 
			-- por cuestiones de practicidad.
			nImporte_solicitado := desc_de_un_funcionario.monto;
			-- Ponemos a cero la variable que guarda el importe aplicado de este concepto.
			nImporte_aplicado_de_este_concepto := 0 ;
			/*
			f) Aplicar los descuentos a este funcionario
			*/
			-- INICIO - APLICACION DE DESCUENTOS ---------------------------------------
			/*
			d) Sumar el importe_solicitado al
			   importe_solicitado_acumulado.
			*/
			/*
			importe_solicitado_acumulado: esta variable guarda la sumatoria 
			de todos los descuentos solicitados para este funcionario.
			*/
			nImporte_solicitado_acumulado := nImporte_solicitado_acumulado + nImporte_solicitado;
			/*
			e) Verificar que el importe_liquido1 sea mayor a cero.

			f) Verificar que el importe_solicitado sea menor
			   al importe_liquido1.
			*/
			IF (nImporte_liquido1 > 0) THEN
				IF ( nImporte_solicitado < nImporte_liquido1) THEN
				/*
				g) Efectuar lo siguiente: 
				   g.0) importe_solicitado1=importe_solicitado1+importe_solicitado
				   g.1) liquido1 = liquido1 - importe_solicitado 
				   g.2) importe_aplicado_acumulado1 = importe_aplicado_acumulado1+ importe_solicitado
				*/
				/*
				importe_solicitado1: Esta variable guarda la sumatoria de todos 
				los descuentos solicitados al liquido1
				*/
					nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
					nImporte_liquido1 := nImporte_liquido1 - nImporte_solicitado;
					nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_solicitado;
                                        nImporte_aplicado_de_este_concepto := nImporte_solicitado;
				ELSE
					/*
					FLUJOS ALTERNATIVOS:
					FA1. En el punto f) si el solicitado es mayor a liquido1 
					     pero menor a liquido2:
					*/
					IF (nImporte_solicitado < nImporte_liquido2) THEN
					/*
					     Realizar el punto g) utilizando el liquido2 
					     y sus variables relacionadas (importe_solicitado2,importe_aplicado_acumulado2)
					     en vez del liquido1.
					*/
						nImporte_solicitado2 := nImporte_solicitado2 + nImporte_solicitado;
						nImporte_liquido2 := nImporte_liquido2 - nImporte_solicitado;
						nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_solicitado;
                                                nImporte_aplicado_de_este_concepto :=nImporte_solicitado;
					ELSE
						/*
						FA2. En el punto f) si el solicitado es mayor al liquido1 y liquido2
						     pero menor a (liquido1+liquido2):
						     realizar las siguientes operaciones: 
						*/
						IF (nImporte_solicitado < (nImporte_liquido1 + nImporte_liquido2)) THEN
						/*
						     a) importe_solicitado1=importe_solicitado1+importe_solicitado
						     b) diferencia1=solicitado-liquido1
						     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1 + liquido1
						     d) liquido1=0
						     e) importe_solicitado2=importe_solicitado2+diferencia1
						     f) liquido2=liquido2-diferencia1
						     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2 + diferencia1
						*/
							nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
							nImporte_diferencia1 := nImporte_solicitado - nImporte_liquido1;
							nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_liquido1;
                                                        nImporte_aplicado_de_este_concepto := nImporte_liquido1;
							nImporte_liquido1 := 0;
							nImporte_solicitado2 := nImporte_solicitado2 + nImporte_diferencia1;
							nImporte_liquido2 := nImporte_liquido2 - nImporte_diferencia1;
							nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_diferencia1;
                                                        nImporte_aplicado_de_este_concepto := nImporte_aplicado_de_este_concepto + nImporte_diferencia1;
						ELSE
						/*
						FA3. En el punto f) si el solicitado es mayor al liquido1, liquido2
						     y (liquido1+liquido2):
						     realizar las siguientes operaciones: 
						     a) importe_solicitado1=importe_solicitado1+importe_solicitado
						     b) diferencia1=solicitado-liquido1
						     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1 + liquido1
						     d) liquido1=0
						     e) importe_solicitado2=importe_solicitado2+diferencia1
						     f) diferencia2=diferencia1-liquido2
						     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2 + liquido2
						     h) liquido2=0
						*/
							nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
							nImporte_diferencia1 := nImporte_solicitado - nImporte_liquido1;
							nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_liquido1;
                                                        nImporte_aplicado_de_este_concepto := nImporte_liquido1;
							nImporte_liquido1 := 0;
							nImporte_solicitado2 := nImporte_solicitado2 + nImporte_diferencia1;
							nImporte_diferencia2 := nImporte_diferencia1 - nImporte_liquido2;
							nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_liquido2;
							nImporte_liquido2 := 0;
                                                        nImporte_aplicado_de_este_concepto := nImporte_aplicado_de_este_concepto + nImporte_liquido2;

						END IF;
					END IF;
				END IF;
			END IF;
                        -- Insertar los datos en el detalle de la planilla de descuento:

                        -- Insertar / Actualizar los descuentos ya procesados:
                        -- Insertar un registro en el detalle de la planilla de descuentos activa:
                        -- Siempre y cuando exista la planilla de descuento!

                            -- Preparamos los valores:
                            IF desc_de_un_funcionario.id_descuento_judicial = 0 THEN
                                    desc_de_un_funcionario.id_descuento_judicial := NULL;
                            ELSE
                                    desc_de_un_funcionario.id_descuento_aso := NULL;
                            END IF;
                            -- Cuando no existe una planilla de descuento
                            -- el in_id_planilla_descuento = 0.
                            IF (in_id_planilla_descuento !=0 ) THEN
                                    INSERT INTO salarios.detalles_planillas_descuentos (
                                    id_administracion,
                                    id_funcionario,
                                    id_planilla_descuento,
                                    monto_descuento, --aqui esto es el aplicado!
                                    monto_solicitado,
                                    id_descuento_judicial,
                                    id_descuento_aso,
                                    usu_alta,
                                    fec_alta,
                                    ip_alta
                                    ) VALUES (
                                    rDetallePSA1.id_administracion, -- id_administracion,
                                    rDetallePSA1.id_funcionario, --id_funcionario,
                                    in_id_planilla_descuento, -- id_planilla_descuento,
                                    nImporte_aplicado_de_este_concepto, -- monto_descuento, --aqui esto es el aplicado!
                                    desc_de_un_funcionario.monto, -- monto_solicitado,
                                    desc_de_un_funcionario.id_descuento_judicial, --id_descuento_judicial,
                                    desc_de_un_funcionario.id_descuento_aso, --id_descuento_aso,
                                    current_user::varchar(30), -- usu_alta,
                                    now(),
                                    inet_client_addr()::varchar(30) -- ip_alta -- se recibira al llamar al sp?
                                    );

                                    -- Aqui se debe actualizar el saldo pendiente en Judiciales!
                                    IF desc_de_un_funcionario.id_descuento_judicial is not null THEN
					-- verificar si es un descuento por prestacion alimenticia,
					-- en caso afirmativo no realizar la resta:
					Select g.id_judicial
						into id_judicial_cobro_guaranies
					from salarios.descuentos_judiciales g
						LEFT JOIN salarios.tipos_descuentos h
							ON (g.id_tipo_descuento=h.id_tipo_descuento)
					where g.id_descuento_judicial=desc_de_un_funcionario.id_descuento_judicial
					and h.abreviatura = 'DJCG';
					IF (id_judicial_cobro_guaranies IS NOT NULL) THEN
						   UPDATE salarios.judiciales
						       SET monto_saldo= (monto_saldo - nImporte_aplicado_de_este_concepto),
							   usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
						    WHERE id_judicial=(Select id_judicial
									    from salarios.descuentos_judiciales
									    where id_descuento_judicial=desc_de_un_funcionario.id_descuento_judicial)
						    ;
					END IF;

                                    END IF;

                            END IF;

			-- FIN    - APLICACION DE DESCUENTOS ---------------------------------------
		END LOOP; -- FIN de los descuentos de este funcionario.
			/*
			g) cargar los datos en el cursor que se utilizara
			   para devolver los datos de salida del detalle 
			   de la planilla de salarios.
			*/
			/*
			Se debe contemplar los casos cuando cantidad = 2
			*/
			-- variables comunes a las dos apariciones:
			id_administracion := rDetallePSA1.id_administracion; -- integer, 
			id_planilla_salario := rDetallePSA1.id_planilla_salario; -- integer, 
			id_funcionario := rDetallePSA1.id_funcionario; -- integer, 

			-- datos de la primera aparicion:
			id_detalle_planilla_salario := rDetallePSA1.id_detalle_planilla_salario; -- integer, 
			id_oficina := rDetallePSA1.id_oficina; -- integer, 
			dias_trabajados := rDetallePSA1.dias_trabajados; -- integer, 
			monto_presupuestado := rDetallePSA1.monto_presupuestado; -- numeric, 
			monto_devengado := rDetallePSA1.monto_devengado; -- numeric, 
			monto_aporte := rDetallePSA1.monto_aporte; -- numeric, 
			monto_multa := rDetallePSA1.monto_multa; -- numeric, 
			monto_total_aporte := rDetallePSA1.monto_total_aporte; -- numeric,
			liquido_inicial := rDetallePSA1.liquido_inicial; -- numeric,

			solicitado := nImporte_solicitado1; -- numeric,
			aplicado := nImporte_aplicado_acumulado1; -- numeric,
			diferencia := nImporte_diferencia1; -- numeric
			liquido_final := nImporte_liquido1; -- numeric,

                        -- actualizar el detalle de la planilla de salarios:
                        UPDATE salarios.detalles_planillas_salarios y
                           SET
                                importe_liquido_sin_descuentos_varios=rDetallePSA1.liquido_inicial,
                                importe_descuentos_varios_solicitado=nImporte_solicitado1,
                               importe_descuentos_varios_aplicado=nImporte_aplicado_acumulado1,
                               importe_descuentos_varios_diferencia=nImporte_diferencia1,
                               importe_liquido_con_descuentos_varios=nImporte_liquido1,
                               usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
                         WHERE y.id_detalle_planilla_salario=rDetallePSA1.id_detalle_planilla_salario;


			RETURN NEXT;

			IF (rApariciones.cantidad = 2) THEN
				-- datos de la SEGUNDA aparicion:
				id_detalle_planilla_salario := rDetallePSA2.id_detalle_planilla_salario; -- integer, 
				id_oficina := rDetallePSA2.id_oficina; -- integer, 
				dias_trabajados := rDetallePSA2.dias_trabajados; -- integer, 
				monto_presupuestado := rDetallePSA2.monto_presupuestado; -- numeric, 
				monto_devengado := rDetallePSA2.monto_devengado; -- numeric, 
				monto_aporte := rDetallePSA2.monto_aporte; -- numeric, 
				monto_multa := rDetallePSA2.monto_multa; -- numeric, 
				monto_total_aporte := rDetallePSA2.monto_total_aporte; -- numeric,
				liquido_inicial := rDetallePSA2.liquido_inicial; -- numeric,

				solicitado := nImporte_solicitado2; -- numeric,
				aplicado := nImporte_aplicado_acumulado2; -- numeric,
				diferencia := nImporte_diferencia2; -- numeric
				liquido_final := nImporte_liquido2; -- numeric,
                                -- actualizar el detalle de la planilla de salarios:
                                UPDATE salarios.detalles_planillas_salarios y
                                   SET
                                        importe_liquido_sin_descuentos_varios=rDetallePSA2.liquido_inicial,
                                        importe_descuentos_varios_solicitado=nImporte_solicitado2,
                                        importe_descuentos_varios_aplicado=nImporte_aplicado_acumulado2,
                                        importe_descuentos_varios_diferencia=nImporte_diferencia2,
                                        importe_liquido_con_descuentos_varios=nImporte_liquido2,
                                        usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
                                 WHERE y.id_detalle_planilla_salario=rDetallePSA2.id_detalle_planilla_salario;

				RETURN NEXT;
			END IF;


	END LOOP; -- FIN de este funcionario - rApariciones 

/*
	h) Al finalizar recorrer el cursor de salida y 
	   retornar los datos al cliente.

*/

/*
		h) guardar los descuentos aplicados (detalle)
		   y cambiar el estado a la cabecera a "PROCESADO".

		i) actualizar el detalle de la planilla de salario
		   con los importes actuales.

		j) actualizar el estado de la planilla de salario a:
		   "CON DESCUENTOS APLICADOS"

*/

-- ESTO SE HACE UNA SOLA VEZ PARA LA EJECUCION DE ESTA FUNCION

-- actualizar plla de descuentos (cabecera)
-- Cuando no existe una planilla de descuento
-- el in_id_planilla_descuento = 0.
IF (in_id_planilla_descuento !=0 ) THEN
	UPDATE salarios.planillas_descuentos
	   SET estado=1, -- procesado
	       total_importe_solicitado=coalesce((Select sum(monto_solicitado)
					 from salarios.detalles_planillas_descuentos
					 where id_planilla_descuento = in_id_planilla_descuento
					),0),
	       total_descuento=coalesce((Select sum(monto_descuento)
					 from salarios.detalles_planillas_descuentos
					 where id_planilla_descuento = in_id_planilla_descuento
					),0),
	       usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_planilla_descuento=in_id_planilla_descuento;

-- actualizar descuentos_aso y descuentos_judiciales estado=1
-- de esta planilla de descuentos:
	UPDATE salarios.descuentos_aso
	   SET estado=1, -- procesado
		usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_descuento_aso in (
					Select id_descuento_aso
					from salarios.detalles_planillas_descuentos
					where id_planilla_descuento=in_id_planilla_descuento
					and id_descuento_aso  is not null
				)
	;

	UPDATE salarios.descuentos_judiciales
	   SET estado=1, -- procesado
		usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_descuento_judicial in (
					 Select id_descuento_judicial
					from salarios.detalles_planillas_descuentos
					where id_planilla_descuento=in_id_planilla_descuento
						and id_descuento_judicial is not null
					)
	;

END IF;

-- actualizar plla de salarios
-- Estado 3 = CON DESCUENTOS APLICADOS
UPDATE salarios.planillas_salarios x
   SET id_estado=3,
              usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
 WHERE x.id_planilla_salario=in_id_planilla_salario;

ELSE
	RAISE EXCEPTION 'NO EXISTE PLANILLA DE DESCUENTOS VINCULADA A ESTA PLANILLA DE SALARIO';
END IF;



END;
]]></definition>
</function>

<function name="aplicar_descuentos_varios_v3"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_detalle_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_multa">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_total_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_inicial">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_final">
		<type name="numeric"/>
	</parameter>
	<parameter name="solicitado">
		<type name="numeric"/>
	</parameter>
	<parameter name="aplicado">
		<type name="numeric"/>
	</parameter>
	<parameter name="diferencia">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[ 
  DECLARE
-- cantidad de apariciones del funcionario en el detalle
-- de la planilla de salarios.
    rApariciones RECORD;
-- Cursor utilizado cuando apariciones = 2
    cDetallePSA2 refcursor;
-- un registro del cursor
    rDetallePSA1 RECORD;
    rDetallePSA2 RECORD;
-- variables para los importes liquidos sin descuentos:
    nImporte_liquido_a_percibir1 numeric := 0;
    nImporte_liquido_a_percibir2 numeric := 0;
    nImporte_liquido1 numeric := 0;
    nImporte_liquido2 numeric := 0;
-- desc_de_un_funcionario : Este registro almacena un descuento
-- del funcionario activo
    desc_de_un_funcionario RECORD;
    -- la variable nImporte_solicitado: guarda el importe del descuento que esta
    -- siendo procesado actualmente, se utiliza esta variable
    -- por cuestiones de practicidad.
    nImporte_solicitado numeric := 0;
    -- importe_solicitado_acumulado: esta variable guarda la sumatoria
    -- de todos los descuentos solicitados para este funcionario.
    nImporte_solicitado_acumulado numeric := 0;
    nImporte_solicitado1 numeric := 0;
    nImporte_aplicado_acumulado1 numeric := 0;
    nImporte_diferencia1 numeric := 0;
    nImporte_solicitado2 numeric := 0;
    nImporte_aplicado_acumulado2 numeric := 0;
    nImporte_diferencia2 numeric := 0;
    nImporte_aplicado_de_este_concepto numeric :=0;
    in_id_planilla_descuento INTEGER :=0;
	id_judicial_cobro_guaranies INTEGER;
-- FIN --
-- Cursor utilizado para armar el resultado a ser devuelto al cliente:
--    cDetallePllaSalarioOUT refcursor;
BEGIN
	-- Se obtiene el ID de la planilla de descuento para este plla de salario.
	-- si no existe se cancela la ejecucion de la funcion, ticket #939
	Select z.id_planilla_descuento into in_id_planilla_descuento 
	from salarios.planillas_descuentos z 
	where z.id_planilla_salario = IN_ID_PLANILLA_SALARIO and z.estado = 0; IF (in_id_planilla_descuento IS NOT NULL) THEN

/*
a) Identificar la cantidad de veces que aparece 
   cada funcionario en el detalle de la planilla de salarios 
   que se esta procesando.
*/
	FOR rApariciones IN
		SELECT 
			a.id_funcionario, 
			count(*) as cantidad
		FROM salarios.detalles_planillas_salarios a
		      left join salarios.planillas_salarios b 
			   on (a.id_planilla_salario=b.id_planilla_salario)
		WHERE b.id_estado=4 -- 4 es CON MULTAS APLICADAS
		      and b.id_planilla_salario= IN_ID_PLANILLA_SALARIO 
		group by a.id_funcionario
	LOOP
		-- limpiar las variables utilizadas por este funcionario:
		    nImporte_liquido1 := 0;
		    nImporte_liquido2 := 0;
		    nImporte_solicitado := 0;

		    nImporte_solicitado_acumulado := 0;

		    nImporte_solicitado1 := 0;
		    nImporte_aplicado_acumulado1 := 0;
		    nImporte_diferencia1 := 0;

		    nImporte_solicitado2 := 0;
		    nImporte_aplicado_acumulado2 := 0;
		    nImporte_diferencia2 := 0;
                    nImporte_aplicado_de_este_concepto :=0;
		-- fin de limpieza de variables.
	/*
	b) Por cada funcionario realizar lo siguiente:
	c) Obtener para este funcionario los importes liquido1 
	    y si la cantidad = 2 
	    tambien el importe del liquido2 junto a todos los demas datos
	    del detalle de la planilla de salarios.
	*/	
	/* SEGUNDA MODIFICACION
	   Modificado: 2014-01-21
	   Autor: Diego Alcaraz Osorio y Gustavo Alcaraz Bogado
	   ============================================
	*/
	OPEN cDetallePSA2 SCROLL FOR 
		SELECT 
			a.id_detalle_planilla_salario, 
			a.id_administracion, 
			a.id_planilla_salario, 
			a.id_funcionario, 
			a.id_oficina, 
			a.dias_trabajados, 
			a.monto_presupuestado, 
			a.monto_devengado, 
			a.monto_aporte, 
			a.monto_multa, 
			a.monto_total_aporte,
			-- ORIGINAL
			-- CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_inicial",
			-- CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_final"
			-- MODIFICADO 2014-01-21
			-- CASE WHEN a.monto_devengado > 0::numeric THEN ((a.monto_devengado - a.monto_aporte)*0.5)::numeric ELSE 0::numeric END AS "liquido_a_percibir",
			-- CASE WHEN a.monto_devengado > 0::numeric THEN (((a.monto_devengado - a.monto_aporte)*0.5)-a.monto_multa)::numeric ELSE 0::numeric END AS "liquido_inicial",
			-- CASE WHEN a.monto_devengado > 0::numeric THEN (((a.monto_devengado - a.monto_aporte)*0.5)-a.monto_multa)::numeric ELSE 0::numeric END AS "liquido_final"
			-- MODIFICADO 17-06-2014
			-- EL CONCEPTO DEL LIQUIDO A PERCIBIR EN CASO DE QUE LOS DESCUENTOS VARIOS SEAN MENOR AL 100%
			--CASE WHEN a.monto_devengado > 0::numeric THEN ((a.monto_devengado - a.monto_aporte)*0.0)::numeric ELSE 0::numeric END AS "liquido_a_percibir",
			--CASE WHEN a.monto_devengado > 0::numeric THEN (((a.monto_devengado - a.monto_aporte)*1.0)-a.monto_multa)::numeric ELSE 0::numeric END AS "liquido_inicial",
			--CASE WHEN a.monto_devengado > 0::numeric THEN (((a.monto_devengado - a.monto_aporte)*1.0)-a.monto_multa)::numeric ELSE 0::numeric END AS "liquido_final"
			-- MODIFICADO 24-01-2018
			-- EL CONCEPTO DEL LIQUIDO A PERCIBIR EN CASO DE QUE LOS DESCUENTOS VARIOS SEAN MENOR AL 50% excluyendo aporte y multa ley 6026/2018 art. 59			
			CASE WHEN a.monto_devengado > 0::numeric THEN ((CASE WHEN (a.monto_presupuestado*0.5)<(a.monto_devengado-a.monto_aporte-a.monto_multa) THEN (a.monto_devengado-a.monto_presupuestado*0.5-a.monto_aporte-a.monto_multa) ELSE 0 END))::numeric ELSE 0::numeric END AS "liquido_a_percibir",
			CASE WHEN a.monto_devengado > 0::numeric THEN ((CASE WHEN (a.monto_presupuestado*0.5)<(a.monto_devengado-a.monto_aporte-a.monto_multa) THEN (a.monto_presupuestado*0.5) ELSE (a.monto_devengado-a.monto_aporte-a.monto_multa) END))::numeric ELSE 0::numeric END AS "liquido_inicial",
			CASE WHEN a.monto_devengado > 0::numeric THEN ((CASE WHEN (a.monto_presupuestado*0.5)<(a.monto_devengado-a.monto_aporte-a.monto_multa) THEN (a.monto_presupuestado*0.5) ELSE (a.monto_devengado-a.monto_aporte-a.monto_multa) END))::numeric ELSE 0::numeric END AS "liquido_final"
			,(0::numeric) as "solicitado"
			,(0::numeric) as "aplicado"
			,(0::numeric) as "diferencia" -- diferencia = (solicitado-aplicado):
		FROM salarios.detalles_planillas_salarios a
		      left join salarios.planillas_salarios b 
			   on (a.id_planilla_salario=b.id_planilla_salario)
		WHERE -- b.id_administracion = 0
		      -- and b.gestion = 2011
		      -- and b.id_mes = 1 
		      -- and 
		      b.id_estado=4 -- 4 = con multas aplicadas!.
		      and b.id_planilla_salario= in_id_planilla_salario -- 5
		      and a.id_funcionario=rApariciones.id_funcionario
		ORDER BY a.monto_presupuestado ASC;
	-- Asumimos que un funcionario aparece como maximo 2 veces!!!
	FETCH NEXT FROM cDetallePSA2 INTO rDetallePSA1;
	-- Obtenemos el importe_liquido1:
	nImporte_liquido1 := rDetallePSA1.liquido_inicial;
	nImporte_liquido_a_percibir1 := rDetallePSA1.liquido_a_percibir;
	IF (rApariciones.cantidad = 2 ) THEN
		FETCH NEXT FROM cDetallePSA2 INTO rDetallePSA2;
		-- Obtenemos el importe_liquido2:
		nImporte_liquido2 := rDetallePSA2.liquido_inicial;
		nImporte_liquido_a_percibir2 := rDetallePSA2.liquido_a_percibir;
	END IF;
	CLOSE cDetallePSA2;
	/*
	d) obtener los descuentos de este funcionario
	*/
	FOR desc_de_un_funcionario IN 
		Select 
			g.id_funcionario,
			g.monto,
			g.ejecutado,
			g.id_tipo_descuento,
			g.id_descuento_aso,
			g.id_descuento_judicial,
			g.id_judicial,
			g.orden,
			g.aso 
		from salarios.obtener_descuentos_varios(
			(Select z.id_administracion from salarios.planillas_salarios z where z.id_planilla_salario = IN_ID_PLANILLA_SALARIO), -- 0,
			(Select z.gestion::integer from salarios.planillas_salarios z where z.id_planilla_salario = IN_ID_PLANILLA_SALARIO), --2011,
			(Select z.id_mes from salarios.planillas_salarios z where z.id_planilla_salario = IN_ID_PLANILLA_SALARIO) -- 1
			) g
		where g.id_funcionario= rApariciones.id_funcionario -- 195
		-- Modificación: 2014-02-20 Motivo: Se agregó para ordenar los descuentos judiciales Autor: Lic. Gustavo E. Alcaraz B.
		ORDER BY orden,(id_descuento_aso+id_descuento_judicial) -- Agregado
		--
		LOOP
			-- la variable nImporte_solicitado: guarda el importe del descuento que esta
			-- siendo procesado actualmente, se utiliza esta variable 
			-- por cuestiones de practicidad.
			nImporte_solicitado := desc_de_un_funcionario.monto;
			-- Ponemos a cero la variable que guarda el importe aplicado de este concepto.
			nImporte_aplicado_de_este_concepto := 0 ;
			/*
			f) Aplicar los descuentos a este funcionario
			*/
			-- INICIO - APLICACION DE DESCUENTOS---------------------------------------
			/*
			d) Sumar el importe_solicitado al importe_solicitado_acumulado.
			*/
			/*
			importe_solicitado_acumulado: esta variable guarda la sumatoria 
			de todos los descuentos solicitados para este funcionario.
			*/
			nImporte_solicitado_acumulado := nImporte_solicitado_acumulado + nImporte_solicitado;
			/*
			e) Verificar que el importe_liquido1 sea mayor a cero.

			f) Verificar que el importe_solicitado sea menor al importe_liquido1.
			*/
			IF (nImporte_liquido1 > 0) THEN
				IF ( nImporte_solicitado < nImporte_liquido1) THEN
				/*
				g) Efectuar lo siguiente: 
				   g.0) importe_solicitado1=importe_solicitado1+importe_solicitado
				   g.1) liquido1 = liquido1 - importe_solicitado 
				   g.2) importe_aplicado_acumulado1 = importe_aplicado_acumulado1+ importe_solicitado
				*/
				/*
				importe_solicitado1: Esta variable guarda la sumatoria de todos 
				los descuentos solicitados al liquido1
				*/
					nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
					nImporte_liquido1 := nImporte_liquido1 - nImporte_solicitado;
					nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_solicitado;
					nImporte_aplicado_de_este_concepto := nImporte_solicitado;
				ELSE
					/*
					FLUJOS ALTERNATIVOS:
					FA1. En el punto f) si el solicitado es mayor a liquido1 
					     pero menor a liquido2:
					*/
					IF (nImporte_solicitado < nImporte_liquido2) THEN
					/*
					     Realizar el punto g) utilizando el liquido2 
					     y sus variables relacionadas (importe_solicitado2,importe_aplicado_acumulado2)
					     en vez del liquido1.
					*/
						nImporte_solicitado2 := nImporte_solicitado2 + nImporte_solicitado;
						nImporte_liquido2 := nImporte_liquido2 - nImporte_solicitado;
						nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_solicitado;
						nImporte_aplicado_de_este_concepto :=nImporte_solicitado;
					ELSE
						/*
						FA2. En el punto f) si el solicitado es mayor al liquido1 y liquido2
						     pero menor a (liquido1+liquido2):
						     realizar las siguientes operaciones: 
						*/
						IF (nImporte_solicitado < (nImporte_liquido1 + nImporte_liquido2)) THEN
						/*
						     a) importe_solicitado1=importe_solicitado1+importe_solicitado
						     b) diferencia1=solicitado-liquido1
						     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1 + liquido1
						     d) liquido1=0
						     e) importe_solicitado2=importe_solicitado2+diferencia1
						     f) liquido2=liquido2-diferencia1
						     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2 + diferencia1
						*/
							nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
							nImporte_diferencia1 := nImporte_solicitado - nImporte_liquido1;
							nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_liquido1;
							nImporte_aplicado_de_este_concepto := nImporte_liquido1;
							nImporte_liquido1 := 0;
							nImporte_solicitado2 := nImporte_solicitado2 + nImporte_diferencia1;
							nImporte_liquido2 := nImporte_liquido2 - nImporte_diferencia1;
							nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_diferencia1;
							nImporte_aplicado_de_este_concepto := nImporte_aplicado_de_este_concepto + nImporte_diferencia1;
						ELSE
						/*
						FA3. En el punto f) si el solicitado es mayor al liquido1,liquido2
						     y (liquido1+liquido2):
						     realizar las siguientes operaciones: 
						     a) importe_solicitado1=importe_solicitado1+importe_solicitado
						     b) diferencia1=solicitado-liquido1
						     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1+ liquido1
						     d) liquido1=0
						     e) importe_solicitado2=importe_solicitado2+diferencia1
						     f) diferencia2=diferencia1-liquido2
						     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2+ liquido2
						     h) liquido2=0
						*/
							nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
							nImporte_diferencia1 := nImporte_solicitado - nImporte_liquido1;
							nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_liquido1;
							nImporte_aplicado_de_este_concepto := nImporte_liquido1;
							nImporte_liquido1 := 0;
							nImporte_solicitado2 := nImporte_solicitado2 + nImporte_diferencia1;
							nImporte_diferencia2 := nImporte_diferencia1 - nImporte_liquido2;
							nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_liquido2;
							nImporte_liquido2 := 0;
							nImporte_aplicado_de_este_concepto := nImporte_aplicado_de_este_concepto+ nImporte_liquido2;
						END IF;
					END IF;
				END IF;
			END IF;
                        -- Insertar los datos en el detalle de la planilla de descuento:
                        -- Insertar / Actualizar los descuentos ya procesados:
                        -- Insertar un registro en el detalle de la planilla de descuentos activa:
                        -- Siempre y cuando exista la planilla de descuento!
                            -- Preparamos los valores:
                            IF
				desc_de_un_funcionario.id_descuento_judicial = 0 THEN
				desc_de_un_funcionario.id_descuento_judicial := NULL;
                            ELSE
				desc_de_un_funcionario.id_descuento_aso := NULL;
                            END IF;
                            -- Cuando no existe una planilla de descuento
                            -- el in_id_planilla_descuento = 0.
                            IF (in_id_planilla_descuento !=0 ) THEN
                                    INSERT INTO salarios.detalles_planillas_descuentos (
                                    id_administracion,
                                    id_funcionario,
                                    id_planilla_descuento,
                                    monto_descuento, --aqui esto es el aplicado!
                                    monto_solicitado,
                                    id_descuento_judicial,
                                    id_descuento_aso,
                                    usu_alta,
                                    fec_alta,
                                    ip_alta
                                    ) VALUES (
                                    rDetallePSA1.id_administracion, -- id_administracion,
                                    rDetallePSA1.id_funcionario, --id_funcionario,
                                    in_id_planilla_descuento, -- id_planilla_descuento,
                                    nImporte_aplicado_de_este_concepto,-- monto_descuento, --aqui esto es el aplicado!
                                    desc_de_un_funcionario.monto, -- monto_solicitado,
                                    desc_de_un_funcionario.id_descuento_judicial, --id_descuento_judicial,
                                    desc_de_un_funcionario.id_descuento_aso, --id_descuento_aso,
                                    current_user::varchar(30), -- usu_alta,
                                    now(),
                                    inet_client_addr()::varchar(30) -- ip_alta -- se recibira al llamar al sp?
                                    );
                                    -- Aqui se debe actualizar el saldo pendiente en Judiciales!
                                    IF desc_de_un_funcionario.id_descuento_judicial is not null THEN
					-- verificar si es un descuento por prestacion alimenticia,
					-- en caso afirmativo no realizar la resta:
					Select g.id_judicial
						into id_judicial_cobro_guaranies
					from salarios.descuentos_judiciales g
						LEFT JOIN salarios.tipos_descuentos h
							ON (g.id_tipo_descuento=h.id_tipo_descuento)
					where
					g.id_descuento_judicial=desc_de_un_funcionario.id_descuento_judicial
					and h.abreviatura = 'DJCG';
					IF (id_judicial_cobro_guaranies IS NOT NULL) THEN
						   UPDATE salarios.judiciales
						       SET monto_saldo= (monto_saldo - nImporte_aplicado_de_este_concepto),
							   usu_modi=current_user::varchar(30), fec_modi=now(),
							   ip_modi=inet_client_addr()::varchar(30)
						    WHERE id_judicial=(Select id_judicial
									    from salarios.descuentos_judiciales
									    where
									    id_descuento_judicial=desc_de_un_funcionario.id_descuento_judicial)
						    ;
					END IF;
                                    END IF;
                            END IF;
			-- FIN APLICACION DE DESCUENTOS---------------------------------------
		END LOOP; -- FIN de los descuentos de este funcionario.
			/*
			g) cargar los datos en el cursor que se utilizara
			   para devolver los datos de salida del detalle 
			   de la planilla de salarios.
			*/
			/*
			Se debe contemplar los casos cuando cantidad = 2
			*/
			-- variables comunes a las dos apariciones:
			id_administracion := rDetallePSA1.id_administracion; -- integer, 
			id_planilla_salario := rDetallePSA1.id_planilla_salario; -- integer, 
			id_funcionario := rDetallePSA1.id_funcionario; -- integer, 
			-- datos de la primera aparicion:
			id_detalle_planilla_salario :=rDetallePSA1.id_detalle_planilla_salario; -- integer, 
			id_oficina := rDetallePSA1.id_oficina; -- integer, 
			dias_trabajados := rDetallePSA1.dias_trabajados; -- integer, 
			monto_presupuestado := rDetallePSA1.monto_presupuestado; -- numeric, 
			monto_devengado := rDetallePSA1.monto_devengado; -- numeric, 
			monto_aporte := rDetallePSA1.monto_aporte; -- numeric, 
			monto_multa := rDetallePSA1.monto_multa; -- numeric, 
			monto_total_aporte := rDetallePSA1.monto_total_aporte; -- numeric,
			liquido_inicial := rDetallePSA1.liquido_inicial; -- numeric,
			solicitado := nImporte_solicitado1; -- numeric,
			aplicado := nImporte_aplicado_acumulado1; -- numeric,
			diferencia := nImporte_diferencia1; -- numeric
			liquido_final := nImporte_liquido1+nImporte_liquido_a_percibir1; -- numeric,
                        -- actualizar el detalle de la planilla de salarios:
                        UPDATE salarios.detalles_planillas_salarios y
                           SET
                           importe_liquido_sin_descuentos_varios=rDetallePSA1.liquido_inicial+nImporte_liquido_a_percibir1,
                           importe_descuentos_varios_solicitado=nImporte_solicitado1,
                           importe_descuentos_varios_aplicado=nImporte_aplicado_acumulado1,
                           importe_descuentos_varios_diferencia=nImporte_diferencia1,
                           importe_liquido_con_descuentos_varios=nImporte_liquido1+nImporte_liquido_a_percibir1,
                           usu_modi=current_user::varchar(30),fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
                         WHERE
                         y.id_detalle_planilla_salario=rDetallePSA1.id_detalle_planilla_salario;
			RETURN NEXT;
			IF (rApariciones.cantidad = 2) THEN
				-- datos de la SEGUNDA aparicion:
				id_detalle_planilla_salario :=rDetallePSA2.id_detalle_planilla_salario; -- integer, 
				id_oficina := rDetallePSA2.id_oficina; -- integer, 
				dias_trabajados := rDetallePSA2.dias_trabajados; -- integer, 
				monto_presupuestado := rDetallePSA2.monto_presupuestado; -- numeric, 
				monto_devengado := rDetallePSA2.monto_devengado; -- numeric, 
				monto_aporte := rDetallePSA2.monto_aporte; -- numeric, 
				monto_multa := rDetallePSA2.monto_multa; -- numeric, 
				monto_total_aporte := rDetallePSA2.monto_total_aporte; -- numeric,
				liquido_inicial := rDetallePSA2.liquido_inicial; -- numeric,
				solicitado := nImporte_solicitado2; -- numeric,
				aplicado := nImporte_aplicado_acumulado2; -- numeric,
				diferencia := nImporte_diferencia2; -- numeric
				liquido_final := nImporte_liquido2+nImporte_liquido_a_percibir2; -- numeric,
                                -- actualizar el detalle de la planilla de salarios:
                                UPDATE salarios.detalles_planillas_salarios y
                                   SET
                                   importe_liquido_sin_descuentos_varios=rDetallePSA2.liquido_inicial+nImporte_liquido_a_percibir2,
                                   importe_descuentos_varios_solicitado=nImporte_solicitado2,
                                   importe_descuentos_varios_aplicado=nImporte_aplicado_acumulado2,
                                   importe_descuentos_varios_diferencia=nImporte_diferencia2,
                                   importe_liquido_con_descuentos_varios=nImporte_liquido2+nImporte_liquido_a_percibir2,
                                   usu_modi=current_user::varchar(30), fec_modi=now(),ip_modi=inet_client_addr()::varchar(30)
                                 WHERE
                                 y.id_detalle_planilla_salario=rDetallePSA2.id_detalle_planilla_salario;
				RETURN NEXT;
			END IF;
	END LOOP; -- FIN de este funcionario - rApariciones 

/*
	h) Al finalizar recorrer el cursor de salida y 
	   retornar los datos al cliente.
*/

/*
		h) guardar los descuentos aplicados (detalle)
		   y cambiar el estado a la cabecera a "PROCESADO".
		i) actualizar el detalle de la planilla de salario
		   con los importes actuales.
		j) actualizar el estado de la planilla de salario a:
		   "CON DESCUENTOS APLICADOS"

*/
-- ESTO SE HACE UNA SOLA VEZ PARA LA EJECUCION DE ESTA FUNCION
-- actualizar plla de descuentos (cabecera)
-- Cuando no existe una planilla de descuento
-- el in_id_planilla_descuento = 0.
IF (in_id_planilla_descuento !=0 ) THEN
	UPDATE salarios.planillas_descuentos
	   SET estado=1, -- procesado
	       total_importe_solicitado=coalesce((Select sum(monto_solicitado)
					 from salarios.detalles_planillas_descuentos
					 where id_planilla_descuento = in_id_planilla_descuento
					),0),
	       total_descuento=coalesce((Select sum(monto_descuento)
					 from salarios.detalles_planillas_descuentos
					 where id_planilla_descuento = in_id_planilla_descuento
					),0),
	       usu_modi=current_user::varchar(30), fec_modi=now(),ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_planilla_descuento=in_id_planilla_descuento;
-- actualizar descuentos_aso y descuentos_judiciales estado=1
-- de esta planilla de descuentos:
	UPDATE salarios.descuentos_aso
	   SET estado=1, -- procesado
		usu_modi=current_user::varchar(30), fec_modi=now(),ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_descuento_aso in (
					Select id_descuento_aso
					from salarios.detalles_planillas_descuentos
					where id_planilla_descuento=in_id_planilla_descuento
					and id_descuento_aso  is not null
				);
	UPDATE salarios.descuentos_judiciales
	   SET estado=1, -- procesado
		usu_modi=current_user::varchar(30), fec_modi=now(),ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_descuento_judicial in (
					 Select id_descuento_judicial
					from salarios.detalles_planillas_descuentos
					where id_planilla_descuento=in_id_planilla_descuento
						and id_descuento_judicial is not null
					);
END IF;
-- actualizar plla de salarios
-- Estado 3 = CON DESCUENTOS APLICADOS
UPDATE salarios.planillas_salarios x
   SET id_estado=3,
              usu_modi=current_user::varchar(30), fec_modi=now(),
ip_modi=inet_client_addr()::varchar(30)
 WHERE x.id_planilla_salario=in_id_planilla_salario;
ELSE
	RAISE EXCEPTION 'NO EXISTE PLANILLA DE DESCUENTOS VINCULADA A ESTA PLANILLA DE SALARIO'; END IF;

END;
]]></definition>
</function>

<function name="aplicar_horas_no_compensadas_permanentes"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario_hnc">
		<type name="integer"/>
	</parameter>
	<parameter name="descontado_hnc">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
-- --------------------------------------------------------------------------------------
-- Para emitir notificaciones de depuracion:
   bDebug boolean := false;
   tNombre_funcion text := '[salarios.aplicar_horas_no_compensadas_permanentes(IN IN_ID_PLANILLA_SALARIO integer)]';
-- --------------------------------------------------------------------------------------   
-- Almacena la estructura de filas obtenido a partir de la funcion de calculo de multas por horas no compensadas:
   rHorasNoCompensadasCalculadas RECORD;
-- --------------------------------------------------------------------------------------   
-- Variable para determinar si existe registros de funcionarios con horas no compesadas con estado CREADO (0) Y
-- para registrar si se pudo o no descontar:
   cantidad_registros_hnc integer;
   descontado text := ''::text;
-- --------------------------------------------------------------------------------------
BEGIN
-- --------------------------------------------------------------------------------------
--   Objetivo: Aplicar multas por horas no compensadas a funcionarios permanentes.
--     Creado: 13/09/2016 12:58:28
-- Modificado: 14/09/2016 06:53:15
--      Autor: Lic. Gustavo Eloy Alcaráz Bogado
-- --------------------------------------------------------------------------------------
   SELECT 
      count(id_hora_no_compensada) as registros
   INTO
      cantidad_registros_hnc
   FROM 
      salarios.horas_no_compensadas hnc
   WHERE
      estado=0;

   IF (bDebug IS TRUE) THEN
        RAISE  NOTICE 'FUNCION: %',tNombre_funcion;
	RAISE  NOTICE 'REGISTROS AFECTADOS: %',cantidad_registros_hnc;
	RAISE  NOTICE '';
   END IF;

   IF (cantidad_registros_hnc>0) THEN
      -- --------------------------------------------------------------------------------------
      -- Obtenemos los datos a partir de la función 
      -- salarios.calcular_aplicacion_horas_no_compensadas_permanentes(IN_ID_PLANILLA_SALARIO);
      -- --------------------------------------------------------------------------------------
        FOR rHorasNoCompensadasCalculadas IN
		SELECT 
		   id_planilla_salario, 
		   id_detalle_planilla_salario, 
		   id_funcionario, 
		   monto_presupuestado, 
		   monto_devengado, 
		   monto_aporte, 
		   monto_multa, 
		   monto_total_aporte, 
		   importe_liquido_sin_descuentos_varios, 
		   horas_hnc, -- 1
		   monto_hora_hnc,
		   monto_total_hnc, -- 2
		   monto_hnc_descontable, 
		   monto_multa_hnc, -- 3 
		   monto_total_aporte_hnc, -- 4 
		   importe_liquido_sin_descuentos_varios_hnc -- 5
		FROM salarios.calcular_aplicacion_horas_no_compensadas_permanentes(IN_ID_PLANILLA_SALARIO)
	LOOP
	   id_funcionario_hnc:=rHorasNoCompensadasCalculadas.id_funcionario;
	   descontado:='NO'::text;
	   -- --------------------------------------------------------------------------------------
	   -- VERIFICA SI SE PUEDE DESCONTAR EL REGISTRO ENCONTRADO
	   IF(rHorasNoCompensadasCalculadas.monto_hnc_descontable=1) THEN
              -- --------------------------------------------------------------------------------------
	      -- ACTUALIZA LA TABLA salarios.detalles_planillas_salarios
	      UPDATE salarios.detalles_planillas_salarios
              SET 
                 horas_no_compensadas = rHorasNoCompensadasCalculadas.horas_hnc, -- 1
                 monto_horas_no_compensadas = rHorasNoCompensadasCalculadas.monto_total_hnc, -- 2
	         monto_multa = rHorasNoCompensadasCalculadas.monto_multa_hnc, -- 3
	         monto_total_aporte = rHorasNoCompensadasCalculadas.monto_total_aporte_hnc, -- 4 
                 importe_liquido_sin_descuentos_varios = rHorasNoCompensadasCalculadas.importe_liquido_sin_descuentos_varios_hnc, -- 5 
                 usu_modi=current_user::varchar(30), 
                 fec_modi=now(), 
                 ip_modi=inet_client_addr()::varchar(30)
              WHERE 
                 id_detalle_planilla_salario = rHorasNoCompensadasCalculadas.id_detalle_planilla_salario;
              -- --------------------------------------------------------------------------------------   
              -- ACTUALIZA LA TABLA salarios.horas_no_compensadas
              UPDATE salarios.horas_no_compensadas
              SET
                 id_detalle_planilla_salario = rHorasNoCompensadasCalculadas.id_detalle_planilla_salario,
	         estado = 1,
                 usu_modi=current_user::varchar(30), 
                 fec_modi=now(), 
                 ip_modi=inet_client_addr()::varchar(30)
              WHERE 
                 id_funcionario = rHorasNoCompensadasCalculadas.id_funcionario AND estado=0;
              -- --------------------------------------------------------------------------------------   
              descontado:='SI'::text;
           END IF;
           -- --------------------------------------------------------------------------------------
           -- VISUALIZA VALORES RETORNADOS POR LA FUNCION EJECUTADA
           IF (bDebug IS TRUE) THEN
      	      RAISE  NOTICE 'id_funcionario: %',rHorasNoCompensadasCalculadas.id_funcionario;
      	      RAISE  NOTICE 'descontable: %',descontado;
	      RAISE  NOTICE 'id_detalle_planilla_salario: %',rHorasNoCompensadasCalculadas.id_detalle_planilla_salario;
	      RAISE  NOTICE 'horas_hnc: %',rHorasNoCompensadasCalculadas.horas_hnc;
	      RAISE  NOTICE 'monto_total_hnc: %',rHorasNoCompensadasCalculadas.monto_multa_hnc;
	      RAISE  NOTICE 'monto_multa_hnc: %',rHorasNoCompensadasCalculadas.monto_multa_hnc;
	      RAISE  NOTICE 'monto_total_aporte_hnc: %',rHorasNoCompensadasCalculadas.monto_total_aporte_hnc;
	      RAISE  NOTICE 'importe_liquido_sin_descuentos_varios_hnc: %',rHorasNoCompensadasCalculadas.importe_liquido_sin_descuentos_varios_hnc;
	      RAISE  NOTICE '';
	   END IF;
	   -- --------------------------------------------------------------------------------------
	   -- RETORNA VALORES DE LA FUNCION ACTUAL 
           id_funcionario_hnc := rHorasNoCompensadasCalculadas.id_funcionario;
	   descontado_hnc := descontado;
	   -- --------------------------------------------------------------------------------------
	   RETURN NEXT;
	END LOOP;
   ELSE
      RAISE NOTICE 'NO EXISTE REGISTRO DE MULTAS DE FUNCIONARIOS CON HORAS NO COMPENSADAS';
   END IF;

END;
]]></definition>
</function>

<function name="aplicar_multas_permanentes"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="out_id_detalle_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="out_id_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="out_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="out_monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_monto_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_importe_liquido_sin_multa">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_importe_multa_solicitada">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_importe_multa_aplicada">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_importe_multa_diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_importe_liquido_con_multa">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_monto_total_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_id_detalle_multa_solicitada">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE

	-- Para emitir notificaciones de depuracion:
	bDebug boolean :=false;
	tNombre_funcion text := '[salarios.aplicar_multas_permanentes(IN IN_ID_PLANILLA_SALARIO integer)]';
-- rdps= detallePlanillaSalario
    rDps RECORD;
-- rMultas = multas solicitadas
    rMultas RECORD;
-- registro obtenido a partir de la funcion de calculo de aplicación de multas
    rMultasCalculadas RECORD;

    aplicado_no_acumulado numeric;
    iId_multas_aplicadas integer;
    iId_multa_solicitada integer;
    iId_administracion integer;
BEGIN
-- Objetivo: Aplicar multas a funcionarios permanentes.
-- Fecha: 2012-05-19
-- Autor: Lic. Guillermo Galeano Fernández

-- Se obtiene el ID de la planilla de multas aplicadas para este plla de salario.
-- si no existe se cancela la operacion, ticket #937.-
	Select z.id_multas_aplicadas, 
		z.id_multa_solicitada, 
		z.id_administracion 
	into    iId_multas_aplicadas, 
		iId_multa_solicitada, 
		iId_administracion
	from salarios.multas_aplicadas z 
	where z.id_planilla_salario = IN_ID_PLANILLA_SALARIO 
		and z.estado = 0;

IF (bDebug IS TRUE) THEN
	RAISE NOTICE '% - % - 
iId_multa_solicitada=%, iId_multas_aplicadas=%, IN_ID_PLANILLA_SALARIO=%.-',tNombre_funcion, now(),iId_multa_solicitada, iId_multas_aplicadas,IN_ID_PLANILLA_SALARIO;
END IF;

IF (iId_multas_aplicadas IS NOT NULL) THEN


-- -------------------------------------------------------------------------
-- Obtenemos los datos a partir de la función 
-- salarios.calcular_aplicacion_multas_permanentes(IN_ID_PLANILLA_SALARIO);
-- -------------------------------------------------------------------------
	FOR rMultasCalculadas IN
		SELECT 
			* 
		FROM salarios.calcular_aplicacion_multas_permanentes(IN_ID_PLANILLA_SALARIO)
	LOOP
	    -- Cargar variables de salida!

		out_id_detalle_planilla_salario :=rMultasCalculadas.out_id_detalle_planilla_salario;
		out_id_planilla_salario :=rMultasCalculadas.out_id_planilla_salario;
		out_id_funcionario :=rMultasCalculadas.out_id_funcionario;

		out_monto_presupuestado :=rMultasCalculadas.out_monto_presupuestado;
		out_monto_devengado :=rMultasCalculadas.out_monto_devengado;
		out_monto_aporte :=rMultasCalculadas.out_monto_aporte; --jubilacion

		out_importe_liquido_sin_multa :=rMultasCalculadas.out_importe_liquido_sin_multa;
		out_importe_multa_solicitada :=rMultasCalculadas.out_importe_multa_solicitada;
		out_importe_multa_aplicada :=rMultasCalculadas.out_importe_multa_aplicada;
		out_importe_multa_diferencia :=rMultasCalculadas.out_importe_multa_diferencia;
		out_importe_liquido_con_multa :=rMultasCalculadas.out_importe_liquido_con_multa;
		out_monto_total_aporte :=rMultasCalculadas.out_monto_total_aporte; --- jubilacion + diferencia del (presupuestado-devengado) + multa
		out_id_detalle_multa_solicitada := rMultasCalculadas.out_id_detalle_multa_solicitada;
		-- ------------------------------------------------------------

	    -- Insertar / Actualizar las multas ya procesados:
	    -- Insertar un registro en el detalle de la planilla de multas aplicadas activa:
	    -- Siempre y cuando exista la planilla de multas aplicadas!
		
		-- Cuando no existe una planilla de multas aplicadas 
		-- el iId_multas_aplicadas = 0.

		IF (iId_multas_aplicadas !=0 ) THEN
			INSERT INTO salarios.detalles_multas_aplicadas
			(id_multas_aplicadas, 
			id_administracion, 
			id_funcionario, 
			id_detalle_multa_solicitada, 
			importe_solicitado, 
			importe_aplicado, 
			importe_diferencia, 
			usu_alta, 
			fec_alta, 
			ip_alta)
		    VALUES 	
			(iId_multas_aplicadas, 
			iId_administracion, 
			out_id_funcionario, 
			out_id_detalle_multa_solicitada, 
			out_importe_multa_solicitada, 
			out_importe_multa_aplicada, 
			out_importe_multa_diferencia, 
			current_user::varchar(30), -- usu_alta,
			now(),
			inet_client_addr()::varchar(30) -- ip_alta -- ¿se recibira al llamar al sp?
			);
		END IF;
		-- actualizar el detalle de la planilla de salarios:
		UPDATE salarios.detalles_planillas_salarios
		   SET 
			monto_multa=out_importe_multa_aplicada,
			monto_total_aporte=out_monto_total_aporte, 
		       importe_liquido_sin_descuentos_varios=out_importe_liquido_con_multa, 
		       usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
		 WHERE id_detalle_planilla_salario=out_id_detalle_planilla_salario;

		RETURN NEXT;
	END LOOP;


-- -------------------------------------------------------------------------

-- actualizar plla de multas aplicadas(cabecera)
-- Cuando no existe una planilla de multas aplicadas
-- el iId_multas_aplicadas = 0.
IF (bDebug IS TRUE) THEN
	RAISE NOTICE '% - % - 
iId_multas_aplicadas=%.-',tNombre_funcion, now(),iId_multas_aplicadas;
END IF;
IF (iId_multas_aplicadas !=0 ) THEN
	UPDATE salarios.multas_aplicadas
	   SET estado=1, -- 1 = procesado
	       usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_multas_aplicadas=iId_multas_aplicadas;
        
        -- bloqueamos las multas solicitadas (porque ya fueron utilizadas)
	UPDATE salarios.multas_solicitadas
	   SET estado=1,  -- 1 = procesado!
	       usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
	 WHERE id_multa_solicitada=iId_multa_solicitada;

END IF;

-- actualizar plla de salarios
-- Estado 4 = CON MULTAS APLICADAS
UPDATE salarios.planillas_salarios
   SET id_estado=4, 
              usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
 WHERE id_planilla_salario=IN_ID_PLANILLA_SALARIO;
 -- MULTAS POR HORAS NO COMPENSADAS
-- 14.09.2016 10:00
-- Se agrega llamada a la función aplicar_horas_no_compensadas_permanentes
PERFORM salarios.aplicar_horas_no_compensadas_permanentes(IN_ID_PLANILLA_SALARIO);

ELSE
	RAISE EXCEPTION 'NO EXISTE PLANILLA DE MULTAS APLICADAS VINCULADA A ESTA PLANILLA DE SALARIO';
END IF;
END;
]]></definition>
</function>

<function name="calcular_aplicacion_descuentos_varios"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="record"/>
	</return-type>
	<parameter name="in_id_planilla_salario">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE

    plla_salarios RECORD;
    desc_de_un_funcionario RECORD;
BEGIN
-- RETURN QUERY 

/*
Fecha: 2012-01-19
Autor: Lic. Guillermo Galeano Fernï¿½ndez

Especificacion de CU de Calcular Aplicacion descuentos varios:

* Luego de cargar los descuentos solicitados el usuario crearï¿½ una planilla (cabecera) de descuentos aplicados por cada tipo de descuento (conceptos).

* Al aplicar los descuentos solicitados el sistema deberï¿½:
FLUJO BASICO:
Para cada funcionario del mes que se estï¿½ procesando el sistema realizarï¿½ lo siguiente :
  a) Obtener el salario devengado (lï¿½quido en ese momento)

     Obtener los descuentos y por cada uno de ellos realizar lo siguiente:
     + Sumar el importe solicitado actual al importe solicitado acumulado.
  b) Verificar que el importe lï¿½quido sea mayor a cero.
  c) Verificar que el importe solicitado sea menor al importe lï¿½quido.
  d) Restar el importe solicitado del lï¿½quido y : 
      - almacenar la diferencia como nuevo lï¿½quido.
      - sumar el importe solicitado al importe aplicado acumulado.

FLUJOS ALTERNATIVOS:
A1. El importe lï¿½quido es igual o menor a cero. (en el paso b)
       El sistema deberï¿½ sumar al acumulado del importe de diferencia
       (descuento solicitado no aplicado) el importe solicitado.-
A2. El importe solicitado es mayor al importe lï¿½quido. (en el paso c)
       El sistema deberï¿½ realizar lo siguiente:  
       - almacenar como acumulado del importe de diferencia (descuento solicitado no aplicado)
         el resultado de restar el importe solicitado menos el lï¿½quido.-
       - sumar al importe aplicado acumulado el importe lï¿½quido.
       - almacenar como nuevo importe lï¿½quido: cero.
*/


FOR plla_salarios IN -- EXECUTE $select_plla_salarios$

-- 1) Select para obtener el importe liquido:
SELECT 
-- distinct on (id_funcionario) -- TODO: Cuando hay recategoriaciï¿½n en mitad del mes
-- para jefes, se debe modificar esto, ya que un id_funcionario puede aparecer dos veces!!!

	a.id_detalle_planilla_salario, 
	a.id_administracion, 
	a.id_planilla_salario, 
        a.id_funcionario, 
	a.id_oficina, 
	a.dias_trabajados, 
	a.monto_presupuestado, 
        a.monto_devengado, 
	a.monto_aporte, 
	a.monto_multa, 
	a.monto_total_aporte,
	CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_inicial",
	CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_final"

--        (a.monto_devengado - a.monto_total_aporte)::numeric AS "liquido_inicial",        
--	(a.monto_devengado - a.monto_total_aporte)::numeric AS "liquido_final"
,(
-- aqui va lo solicitado:
0::numeric
) as "solicitado"

,(
-- aqui va lo aplicado:
0::numeric
) as "aplicado"
,(
-- aqui va lo diferencia (solicitado-aplicado):
0::numeric
) as "diferencia"

FROM salarios.detalles_planillas_salarios a
      left join salarios.planillas_salarios b 
           on (a.id_planilla_salario=b.id_planilla_salario)
WHERE -- b.id_administracion = 0
      -- and b.gestion = 2011
      -- and b.id_mes = 1 
      -- and 
      b.id_estado=4 -- 4 = con multas aplicadas!.
      and b.id_planilla_salario= in_id_planilla_salario -- 5
      -- and a.id_funcionario=195

-- $select_plla_salarios$
LOOP
-- Para cada registro (funcionario) del detalle de la planilla de salario:
-- TODO ojo con los funcionarios que pueden aparecer dos veces en la plla de salarios.
-- 2) Obtener el importe solicitado:
	FOR desc_de_un_funcionario IN -- EXECUTE $desc_de_un_func$
		Select 
                        g.id_funcionario,
                        g.monto,
                        g.ejecutado,
                        g.id_tipo_descuento,
                        g.id_descuento_aso,
                        g.id_descuento_judicial,
                        g.id_judicial,
                        g.orden,
                        g.aso 
		from salarios.obtener_descuentos_varios(
			(Select id_administracion from salarios.planillas_salarios where id_planilla_salario =in_id_planilla_salario ), -- 0, 
			(Select gestion::integer from salarios.planillas_salarios where id_planilla_salario =in_id_planilla_salario ), --2011,
			(Select id_mes from salarios.planillas_salarios where id_planilla_salario =in_id_planilla_salario ) -- 1
			) g
		where g.id_funcionario= plla_salarios.id_funcionario -- 195
		-- order by g.id_funcionario asc, g.orden asc, g.aso desc;
	-- $desc_de_un_func$
	LOOP
		-- Sumar el importe solicitado actual al importe solicitado acumulado.
		plla_salarios.solicitado=plla_salarios.solicitado+desc_de_un_funcionario.monto;

		-- 3) Aplicar los descuentos y Obtener la diferencia
                    -- FLUJO BASICO:
                    -- b) Verificar que el importe lï¿½quido sea mayor a cero.
		IF plla_salarios.liquido_final > 0 THEN
                    -- c) Verificar que el importe solicitado sea menor al importe lï¿½quido.
                    IF desc_de_un_funcionario.monto < plla_salarios.liquido_final THEN
                        --  d) Restar el importe solicitado del lï¿½quido y :
                        --      - almacenar la diferencia como nuevo lï¿½quido.
                        plla_salarios.liquido_final = (plla_salarios.liquido_final - desc_de_un_funcionario.monto);
                        --      - sumar el importe solicitado al importe aplicado acumulado.
                        plla_salarios.aplicado = (plla_salarios.aplicado + desc_de_un_funcionario.monto);

                    ELSE
                        -- A2. El importe solicitado es mayor al importe lï¿½quido. (en el paso c)
                        --       El sistema debera realizar lo siguiente:
                        --       - almacenar como acumulado del importe de diferencia (descuento solicitado no aplicado)
                        --         el resultado de restar el importe solicitado menos el lï¿½quido.-
                            plla_salarios.diferencia = plla_salarios.diferencia+(desc_de_un_funcionario.monto - plla_salarios.liquido_final);
                        --       - sumar al importe aplicado acumulado el importe lï¿½quido.
                            plla_salarios.aplicado = plla_salarios.aplicado+plla_salarios.liquido_final;
                        --       - almacenar como nuevo importe lï¿½quido: cero.
                            plla_salarios.liquido_final=0;
                    END IF;
		ELSE
                    -- FLUJOS ALTERNATIVOS:
                    -- A1. El importe lï¿½quido es igual o menor a cero. (en el paso b)
                    -- El sistema deberï¿½ sumar al acumulado del importe de diferencia
                    -- (descuento solicitado no aplicado) el importe solicitado.-
                    plla_salarios.diferencia = plla_salarios.diferencia+desc_de_un_funcionario.monto;
		END IF;
                    -- Insertar / Actualizar los descuentos ya procesados:
                    -- Insertar un registro en el detalle de la planilla de descuentos activa:
/*                        INSERT INTO salarios.detalles_planillas_descuentos (
                        id_administracion,
                        id_funcionario,
                        id_planilla_descuento,
                        monto_descuento, --aqui esto es el aplicado!
                        monto_solicitado,
                        id_descuento_judicial,
                        id_descuento_aso,
                        usu_alta,
                        fec_alta,
                        ip_alta
                        ) VALUES (
                        id_administracion,
                        id_funcionario,
                        id_planilla_descuento,
                        monto_descuento, --aqui esto es el aplicado!
                        monto_solicitado,
                        id_descuento_judicial,
                        id_descuento_aso,
                        usu_alta,
                        fec_alta,
                        ip_alta
                        )
                        
*/

	END LOOP; -- LOOP de los Descuentos
RETURN NEXT plla_salarios;
END LOOP; -- LOOP de plla_salarios
-- RETURN plla_salarios;
END;
]]></definition>
</function>

<function name="calcular_aplicacion_descuentos_varios_v2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<comment><![CDATA[Utilizado desde el 2012-ago-09: Esta es la función para calcular la aplicación de descuentos varios a un funcionario. GGF.-]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_detalle_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_multa">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_total_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_inicial">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_final">
		<type name="numeric"/>
	</parameter>
	<parameter name="solicitado">
		<type name="numeric"/>
	</parameter>
	<parameter name="aplicado">
		<type name="numeric"/>
	</parameter>
	<parameter name="diferencia">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE

/*
Fecha: 2012-01-19
Autor: Lic. Guillermo Galeano Fernandez

Modificado: 2012-07-02:
============================================
Especificacion de CU para aplicar descuentos varios
a funcionarios con ascensos en un mes:
(contempla la solucion al ticket #480)
(funcionarios que aparecen
dos veces en la planilla de salario):

Flujo Basico:

a) Identificar la cantidad de veces que aparece el funcionario en 
   la planilla de salarios que se esta procesando.

b) Obtener los importes liquido1 y si la cantidad = 2 tambien el
    importe del liquido2 de este funcionario.

c) Obtener los descuentos del funcionario activo y por cada uno 
   de ellos realizar lo siguiente:

d) Sumar el importe_solicitado actual al
   importe_solicitado_acumulado.

e) Verificar que el importe_liquido1 sea mayor a cero.

f) Verificar que el importe_solicitado sea menor
   al importe_liquido1.

g) Efectuar lo siguiente: 
   g.0) importe_solicitado1=importe_solicitado1+importe_solicitado
   g.1) liquido1 = liquido1 - importe_solicitado 
   g.2) importe_aplicado_acumulado1 = importe_aplicado_acumulado1+ importe_solicitado


h) guardar los descuentos aplicados (detalle)
   y cambiar el estado a la cabecera a "PROCESADO".

i) actualizar el detalle de la planilla de salario
   con los importes actuales.

j) actualizar el estado de la planilla de salario a:
   "CON DESCUENTOS APLICADOS"

FLUJOS ALTERNATIVOS:
FA1. En el punto f) si el solicitado es mayor a liquido1 
     pero menor a liquido2:
     Realizar el punto g) utilizando el liquido2 
     y sus variables relacionadas (importe_solicitado2,importe_aplicado_acumulado2)
     en vez del liquido1.

FA2. En el punto f) si el solicitado es mayor al liquido1 y liquido2
     pero menor a (liquido1+liquido2):
     realizar las siguientes operaciones: 
     a) importe_solicitado1=importe_solicitado1+importe_solicitado
     b) diferencia1=solicitado-liquido1
     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1 + liquido1
     d) liquido1=0
     e) importe_solicitado2=importe_solicitado2+diferencia1
     f) liquido2=liquido2-diferencia1
     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2 + diferencia1

FA3. En el punto f) si el solicitado es mayor al liquido1, liquido2
     y (liquido1+liquido2):
     realizar las siguientes operaciones: 
     a) importe_solicitado1=importe_solicitado1+importe_solicitado
     b) diferencia1=solicitado-liquido1
     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1 + liquido1
     d) liquido1=0
     e) importe_solicitado2=importe_solicitado2+diferencia1
     f) diferencia2=diferencia1-liquido2
     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2 + liquido2
     h) liquido2=0


*/

/*
Algoritmo de la funcion:
a) Identificar la cantidad de veces que aparece 
   cada funcionario en el detalle de la planilla de salarios 
   que se esta procesando.
b) Por cada funcionario realizar lo siguiente:
c) Obtener para este funcionario los importes liquido1 
    y si la cantidad = 2 
    tambien el importe del liquido2 junto a todos los demï¿½s datos
    del detalle de la planilla de salarios.
d) obtener los descuentos de este funcionario
f) Aplicar los descuentos a este funcionario
g) cargar los datos en el cursor que se utilizara
   para devolver los datos de salida del detalle 
   de la planilla de salarios.
h) Al finalizar recorrer el cursor de salida y 
   retornar los datos al cliente.

*/

-- cantidad de apariciones del funcionario en el detalle 
-- de la planilla de salarios.
    rApariciones RECORD;

-- Cursor utilizado cuando apariciones = 2
    cDetallePSA2 refcursor;

-- un registro del cursor
    rDetallePSA1 RECORD;
    rDetallePSA2 RECORD;

-- variables para los importes liquidos sin descuentos:
    nImporte_liquido1 numeric := 0;
    nImporte_liquido2 numeric := 0;

-- desc_de_un_funcionario : Este registro almacena un descuento
-- del funcionario activo
    desc_de_un_funcionario RECORD;

    -- la variable nImporte_solicitado: guarda el importe del descuento que esta
    -- siendo procesado actualmente, se utiliza esta variable
    -- por cuestiones de practicidad.
    nImporte_solicitado numeric := 0;

    -- importe_solicitado_acumulado: esta variable guarda la sumatoria
    -- de todos los descuentos solicitados para este funcionario.
    nImporte_solicitado_acumulado numeric := 0;

    nImporte_solicitado1 numeric := 0;
    nImporte_aplicado_acumulado1 numeric := 0;
    nImporte_diferencia1 numeric := 0;

    nImporte_solicitado2 numeric := 0;
    nImporte_aplicado_acumulado2 numeric := 0;
    nImporte_diferencia2 numeric := 0;

-- FIN --
-- Cursor utilizado para armar el resultado a ser devuelto al cliente:
--    cDetallePllaSalarioOUT refcursor;

BEGIN
/*
a) Identificar la cantidad de veces que aparece 
   cada funcionario en el detalle de la planilla de salarios 
   que se esta procesando.
*/
	FOR rApariciones IN
		SELECT 
			a.id_funcionario, 
			count(*) as cantidad
		FROM salarios.detalles_planillas_salarios a
		      left join salarios.planillas_salarios b 
			   on (a.id_planilla_salario=b.id_planilla_salario)
		WHERE b.id_estado=4 -- 4 es CON MULTAS APLICADAS
		      and b.id_planilla_salario= IN_ID_PLANILLA_SALARIO 
		group by a.id_funcionario
	LOOP
		-- limpiar las variables utilizadas por este funcionario:
		    nImporte_liquido1 := 0;
		    nImporte_liquido2 := 0;
		    nImporte_solicitado := 0;

		    nImporte_solicitado_acumulado := 0;

		    nImporte_solicitado1 := 0;
		    nImporte_aplicado_acumulado1 := 0;
		    nImporte_diferencia1 := 0;

		    nImporte_solicitado2 := 0;
		    nImporte_aplicado_acumulado2 := 0;
		    nImporte_diferencia2 := 0;
		-- fin de limpieza de variables.
	/*
	b) Por cada funcionario realizar lo siguiente:
	c) Obtener para este funcionario los importes liquido1 
	    y si la cantidad = 2 
	    tambien el importe del liquido2 junto a todos los demas datos
	    del detalle de la planilla de salarios.
	*/

	OPEN cDetallePSA2 SCROLL FOR 
		SELECT 
			a.id_detalle_planilla_salario, 
			a.id_administracion, 
			a.id_planilla_salario, 
			a.id_funcionario, 
			a.id_oficina, 
			a.dias_trabajados, 
			a.monto_presupuestado, 
			a.monto_devengado, 
			a.monto_aporte, 
			a.monto_multa, 
			a.monto_total_aporte,
			CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_inicial",
			CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_final"
			,(0::numeric) as "solicitado"
			,(0::numeric) as "aplicado"
			,(0::numeric) as "diferencia" -- diferencia = (solicitado-aplicado):

		FROM salarios.detalles_planillas_salarios a
		      left join salarios.planillas_salarios b 
			   on (a.id_planilla_salario=b.id_planilla_salario)
		WHERE -- b.id_administracion = 0
		      -- and b.gestion = 2011
		      -- and b.id_mes = 1 
		      -- and 
		      b.id_estado=4 -- 4 = con multas aplicadas!.
		      and b.id_planilla_salario= in_id_planilla_salario -- 5
		      and a.id_funcionario=rApariciones.id_funcionario
		ORDER BY a.monto_presupuestado ASC;

	-- Asumimos que un funcionario aparece como maximo 2 veces!!!
	FETCH NEXT FROM cDetallePSA2 INTO rDetallePSA1;
	-- Obtenemos el importe_liquido1:
	nImporte_liquido1 := rDetallePSA1.liquido_inicial;
	IF (rApariciones.cantidad = 2 ) THEN
		FETCH NEXT FROM cDetallePSA2 INTO rDetallePSA2;
		-- Obtenemos el importe_liquido2:
		nImporte_liquido2 := rDetallePSA2.liquido_inicial;
	END IF;

	CLOSE cDetallePSA2;

	/*
	d) obtener los descuentos de este funcionario
	*/
	FOR desc_de_un_funcionario IN 
		Select 
			g.id_funcionario,
			g.monto,
			g.ejecutado,
			g.id_tipo_descuento,
			g.id_descuento_aso,
			g.id_descuento_judicial,
			g.id_judicial,
			g.orden,
			g.aso 
		from salarios.obtener_descuentos_varios(
			(Select z.id_administracion from salarios.planillas_salarios z where z.id_planilla_salario =in_id_planilla_salario ), -- 0, 
			(Select z.gestion::integer from salarios.planillas_salarios z where z.id_planilla_salario =in_id_planilla_salario ), --2011,
			(Select z.id_mes from salarios.planillas_salarios z where z.id_planilla_salario =in_id_planilla_salario ) -- 1
			) g
		where g.id_funcionario= rApariciones.id_funcionario -- 195
		LOOP
			-- la variable nImporte_solicitado: guarda el importe del descuento que esta
			-- siendo procesado actualmente, se utiliza esta variable 
			-- por cuestiones de practicidad.
			nImporte_solicitado := desc_de_un_funcionario.monto;
			/*
			f) Aplicar los descuentos a este funcionario
			*/
			-- INICIO - APLICACION DE DESCUENTOS ---------------------------------------
			/*
			d) Sumar el importe_solicitado al
			   importe_solicitado_acumulado.
			*/
			/*
			importe_solicitado_acumulado: esta variable guarda la sumatoria 
			de todos los descuentos solicitados para este funcionario.
			*/
			nImporte_solicitado_acumulado := nImporte_solicitado_acumulado + nImporte_solicitado;
			/*
			e) Verificar que el importe_liquido1 sea mayor a cero.

			f) Verificar que el importe_solicitado sea menor
			   al importe_liquido1.
			*/
			IF (nImporte_liquido1 > 0) THEN
				IF ( nImporte_solicitado < nImporte_liquido1) THEN
				/*
				g) Efectuar lo siguiente: 
				   g.0) importe_solicitado1=importe_solicitado1+importe_solicitado
				   g.1) liquido1 = liquido1 - importe_solicitado 
				   g.2) importe_aplicado_acumulado1 = importe_aplicado_acumulado1+ importe_solicitado
				*/
				/*
				importe_solicitado1: Esta variable guarda la sumatoria de todos 
				los descuentos solicitados al liquido1
				*/
					nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
					nImporte_liquido1 := nImporte_liquido1 - nImporte_solicitado;
					nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_solicitado;
				ELSE
					/*
					FLUJOS ALTERNATIVOS:
					FA1. En el punto f) si el solicitado es mayor a liquido1 
					     pero menor a liquido2:
					*/
					IF (nImporte_solicitado < nImporte_liquido2) THEN
					/*
					     Realizar el punto g) utilizando el liquido2 
					     y sus variables relacionadas (importe_solicitado2,importe_aplicado_acumulado2)
					     en vez del liquido1.
					*/
						nImporte_solicitado2 := nImporte_solicitado2 + nImporte_solicitado;
						nImporte_liquido2 := nImporte_liquido2 - nImporte_solicitado;
						nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_solicitado;
					ELSE
						/*
						FA2. En el punto f) si el solicitado es mayor al liquido1 y liquido2
						     pero menor a (liquido1+liquido2):
						     realizar las siguientes operaciones: 
						*/
						IF (nImporte_solicitado < (nImporte_liquido1 + nImporte_liquido2)) THEN
						/*
						     a) importe_solicitado1=importe_solicitado1+importe_solicitado
						     b) diferencia1=solicitado-liquido1
						     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1 + liquido1
						     d) liquido1=0
						     e) importe_solicitado2=importe_solicitado2+diferencia1
						     f) liquido2=liquido2-diferencia1
						     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2 + diferencia1
						*/
							nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
							nImporte_diferencia1 := nImporte_solicitado - nImporte_liquido1;
							nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_liquido1;
							nImporte_liquido1 := 0;
							nImporte_solicitado2 := nImporte_solicitado2 + nImporte_diferencia1;
							nImporte_liquido2 := nImporte_liquido2 - nImporte_diferencia1;
							nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_diferencia1;
						ELSE
						/*
						FA3. En el punto f) si el solicitado es mayor al liquido1, liquido2
						     y (liquido1+liquido2):
						     realizar las siguientes operaciones: 
						     a) importe_solicitado1=importe_solicitado1+importe_solicitado
						     b) diferencia1=solicitado-liquido1
						     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1 + liquido1
						     d) liquido1=0
						     e) importe_solicitado2=importe_solicitado2+diferencia1
						     f) diferencia2=diferencia1-liquido2
						     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2 + liquido2
						     h) liquido2=0
						*/
							nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
							nImporte_diferencia1 := nImporte_solicitado - nImporte_liquido1;
							nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_liquido1;
							nImporte_liquido1 := 0;
							nImporte_solicitado2 := nImporte_solicitado2 + nImporte_diferencia1;
							nImporte_diferencia2 := nImporte_diferencia1 - nImporte_liquido2;
							nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_liquido2;
							nImporte_liquido2 := 0;

						END IF;
					END IF;
				END IF;
			END IF;
			-- FIN    - APLICACION DE DESCUENTOS ---------------------------------------
		END LOOP; -- FIN de los descuentos de este funcionario.
			/*
			g) cargar los datos en el cursor que se utilizara
			   para devolver los datos de salida del detalle 
			   de la planilla de salarios.
			*/
			/*
			Se debe contemplar los casos cuando cantidad = 2
			*/
			-- variables comunes a las dos apariciones:
			id_administracion := rDetallePSA1.id_administracion; -- integer, 
			id_planilla_salario := rDetallePSA1.id_planilla_salario; -- integer, 
			id_funcionario := rDetallePSA1.id_funcionario; -- integer, 

			-- datos de la primera aparicion:
			id_detalle_planilla_salario := rDetallePSA1.id_detalle_planilla_salario; -- integer, 
			id_oficina := rDetallePSA1.id_oficina; -- integer, 
			dias_trabajados := rDetallePSA1.dias_trabajados; -- integer, 
			monto_presupuestado := rDetallePSA1.monto_presupuestado; -- numeric, 
			monto_devengado := rDetallePSA1.monto_devengado; -- numeric, 
			monto_aporte := rDetallePSA1.monto_aporte; -- numeric, 
			monto_multa := rDetallePSA1.monto_multa; -- numeric, 
			monto_total_aporte := rDetallePSA1.monto_total_aporte; -- numeric,
			liquido_inicial := rDetallePSA1.liquido_inicial; -- numeric,

			solicitado := nImporte_solicitado1; -- numeric,
			aplicado := nImporte_aplicado_acumulado1; -- numeric,
			diferencia := nImporte_diferencia1; -- numeric
			liquido_final := nImporte_liquido1; -- numeric,

			RETURN NEXT;

			IF (rApariciones.cantidad = 2) THEN
				-- datos de la SEGUNDA aparicion:
				id_detalle_planilla_salario := rDetallePSA2.id_detalle_planilla_salario; -- integer, 
				id_oficina := rDetallePSA2.id_oficina; -- integer, 
				dias_trabajados := rDetallePSA2.dias_trabajados; -- integer, 
				monto_presupuestado := rDetallePSA2.monto_presupuestado; -- numeric, 
				monto_devengado := rDetallePSA2.monto_devengado; -- numeric, 
				monto_aporte := rDetallePSA2.monto_aporte; -- numeric, 
				monto_multa := rDetallePSA2.monto_multa; -- numeric, 
				monto_total_aporte := rDetallePSA2.monto_total_aporte; -- numeric,
				liquido_inicial := rDetallePSA2.liquido_inicial; -- numeric,

				solicitado := nImporte_solicitado2; -- numeric,
				aplicado := nImporte_aplicado_acumulado2; -- numeric,
				diferencia := nImporte_diferencia2; -- numeric
				liquido_final := nImporte_liquido2; -- numeric,

				RETURN NEXT;
			END IF;


	END LOOP; -- FIN de este funcionario - rApariciones 

/*
	h) Al finalizar recorrer el cursor de salida y 
	   retornar los datos al cliente.

*/

/*
		h) guardar los descuentos aplicados (detalle)
		   y cambiar el estado a la cabecera a "PROCESADO".

		i) actualizar el detalle de la planilla de salario
		   con los importes actuales.

		j) actualizar el estado de la planilla de salario a:
		   "CON DESCUENTOS APLICADOS"

*/



					    -- Insertar / Actualizar los descuentos ya procesados:
					    -- Insertar un registro en el detalle de la planilla de descuentos activa:
			/*                        INSERT INTO salarios.detalles_planillas_descuentos (
						id_administracion,
						id_funcionario,
						id_planilla_descuento,
						monto_descuento, --aqui esto es el aplicado!
						monto_solicitado,
						id_descuento_judicial,
						id_descuento_aso,
						usu_alta,
						fec_alta,
						ip_alta
						) VALUES (
						id_administracion,
						id_funcionario,
						id_planilla_descuento,
						monto_descuento, --aqui esto es el aplicado!
						monto_solicitado,
						id_descuento_judicial,
						id_descuento_aso,
						usu_alta,
						fec_alta,
						ip_alta
						)
						
			*/

END;
]]></definition>
</function>

<function name="calcular_aplicacion_descuentos_varios_v3"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<comment><![CDATA[Utilizado desde el 2012-ago-09: Esta es la función para calcular la aplicación de descuentos varios a un funcionario. GGF.- MODIFICADO en fecha 2014-01-21. DMAO,GEAB]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_detalle_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_multa">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_total_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_inicial">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_final">
		<type name="numeric"/>
	</parameter>
	<parameter name="solicitado">
		<type name="numeric"/>
	</parameter>
	<parameter name="aplicado">
		<type name="numeric"/>
	</parameter>
	<parameter name="diferencia">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE

/*
Fecha: 2012-01-19
Autor: Lic. Guillermo Galeano Fernandez

PRIMERA MODIFICACION
Modificado: 2012-07-02:
============================================
Especificacion de CU para aplicar descuentos varios
a funcionarios con ascensos en un mes:
(contempla la solucion al ticket #480)
(funcionarios que aparecen
dos veces en la planilla de salario):

Flujo Basico:

a) Identificar la cantidad de veces que aparece el funcionario en 
   la planilla de salarios que se esta procesando.

b) Obtener los importes liquido1 y si la cantidad = 2 tambien el
    importe del liquido2 de este funcionario.

c) Obtener los descuentos del funcionario activo y por cada uno 
   de ellos realizar lo siguiente:

d) Sumar el importe_solicitado actual al
   importe_solicitado_acumulado.

e) Verificar que el importe_liquido1 sea mayor a cero.

f) Verificar que el importe_solicitado sea menor
   al importe_liquido1.

g) Efectuar lo siguiente: 
   g.0) importe_solicitado1=importe_solicitado1+importe_solicitado
   g.1) liquido1 = liquido1 - importe_solicitado 
   g.2) importe_aplicado_acumulado1 = importe_aplicado_acumulado1+ importe_solicitado


h) guardar los descuentos aplicados (detalle)
   y cambiar el estado a la cabecera a "PROCESADO".

i) actualizar el detalle de la planilla de salario
   con los importes actuales.

j) actualizar el estado de la planilla de salario a:
   "CON DESCUENTOS APLICADOS"

FLUJOS ALTERNATIVOS:
FA1. En el punto f) si el solicitado es mayor a liquido1 
     pero menor a liquido2:
     Realizar el punto g) utilizando el liquido2 
     y sus variables relacionadas (importe_solicitado2,importe_aplicado_acumulado2)
     en vez del liquido1.

FA2. En el punto f) si el solicitado es mayor al liquido1 y liquido2
     pero menor a (liquido1+liquido2):
     realizar las siguientes operaciones: 
     a) importe_solicitado1=importe_solicitado1+importe_solicitado
     b) diferencia1=solicitado-liquido1
     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1 + liquido1
     d) liquido1=0
     e) importe_solicitado2=importe_solicitado2+diferencia1
     f) liquido2=liquido2-diferencia1
     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2 + diferencia1

FA3. En el punto f) si el solicitado es mayor al liquido1, liquido2
     y (liquido1+liquido2):
     realizar las siguientes operaciones: 
     a) importe_solicitado1=importe_solicitado1+importe_solicitado
     b) diferencia1=solicitado-liquido1
     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1 + liquido1
     d) liquido1=0
     e) importe_solicitado2=importe_solicitado2+diferencia1
     f) diferencia2=diferencia1-liquido2
     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2 + liquido2
     h) liquido2=0


*/

/*
Algoritmo de la funcion:
a) Identificar la cantidad de veces que aparece 
   cada funcionario en el detalle de la planilla de salarios 
   que se esta procesando.
b) Por cada funcionario realizar lo siguiente:
c) Obtener para este funcionario los importes liquido1 
    y si la cantidad = 2 
    tambien el importe del liquido2 junto a todos los demï¿½s datos
    del detalle de la planilla de salarios.
d) obtener los descuentos de este funcionario
f) Aplicar los descuentos a este funcionario
g) cargar los datos en el cursor que se utilizara
   para devolver los datos de salida del detalle 
   de la planilla de salarios.
h) Al finalizar recorrer el cursor de salida y 
   retornar los datos al cliente.

*/

-- cantidad de apariciones del funcionario en el detalle 
-- de la planilla de salarios.
    rApariciones RECORD;

-- Cursor utilizado cuando apariciones = 2
    cDetallePSA2 refcursor;

-- un registro del cursor
    rDetallePSA1 RECORD;
    rDetallePSA2 RECORD;

-- variables para los importes liquidos sin descuentos:
    nImporte_liquido_a_percibir numeric := 0;
    nImporte_liquido1 numeric := 0;
    nImporte_liquido2 numeric := 0;

-- desc_de_un_funcionario : Este registro almacena un descuento
-- del funcionario activo
    desc_de_un_funcionario RECORD;

    -- la variable nImporte_solicitado: guarda el importe del descuento que esta
    -- siendo procesado actualmente, se utiliza esta variable
    -- por cuestiones de practicidad.
    nImporte_solicitado numeric := 0;

    -- importe_solicitado_acumulado: esta variable guarda la sumatoria
    -- de todos los descuentos solicitados para este funcionario.
    nImporte_solicitado_acumulado numeric := 0;

    nImporte_solicitado1 numeric := 0;
    nImporte_aplicado_acumulado1 numeric := 0;
    nImporte_diferencia1 numeric := 0;

    nImporte_solicitado2 numeric := 0;
    nImporte_aplicado_acumulado2 numeric := 0;
    nImporte_diferencia2 numeric := 0;

-- FIN --
-- Cursor utilizado para armar el resultado a ser devuelto al cliente:
--    cDetallePllaSalarioOUT refcursor;

BEGIN
/*
a) Identificar la cantidad de veces que aparece 
   cada funcionario en el detalle de la planilla de salarios 
   que se esta procesando.
*/
	FOR rApariciones IN
		SELECT 
			a.id_funcionario, 
			count(*) as cantidad
		FROM salarios.detalles_planillas_salarios a
		      left join salarios.planillas_salarios b 
			   on (a.id_planilla_salario=b.id_planilla_salario)
		WHERE b.id_estado=4 -- 4 es CON MULTAS APLICADAS
		      and b.id_planilla_salario= IN_ID_PLANILLA_SALARIO 
		group by a.id_funcionario
	LOOP
		-- limpiar las variables utilizadas por este funcionario:
		    nImporte_liquido1 := 0;
		    nImporte_liquido2 := 0;
		    nImporte_solicitado := 0;

		    nImporte_solicitado_acumulado := 0;

		    nImporte_solicitado1 := 0;
		    nImporte_aplicado_acumulado1 := 0;
		    nImporte_diferencia1 := 0;

		    nImporte_solicitado2 := 0;
		    nImporte_aplicado_acumulado2 := 0;
		    nImporte_diferencia2 := 0;
		-- fin de limpieza de variables.
	/*
	b) Por cada funcionario realizar lo siguiente:
	c) Obtener para este funcionario los importes liquido1 
	    y si la cantidad = 2 
	    tambien el importe del liquido2 junto a todos los demas datos
	    del detalle de la planilla de salarios.
	*/

/* SEGUNDA MODIFICACION
   Modificado: 2014-01-21
   Autor: Diego Alcaraz Osorio y Gustavo Alcaraz Bogado
   ============================================
*/
	OPEN cDetallePSA2 SCROLL FOR 
		SELECT 
			a.id_detalle_planilla_salario, 
			a.id_administracion, 
			a.id_planilla_salario, 
			a.id_funcionario, 
			a.id_oficina, 
			a.dias_trabajados, 
			a.monto_presupuestado, 
			a.monto_devengado, 
			a.monto_aporte, 
			a.monto_multa, 
			a.monto_total_aporte,
			-- ORIGINAL
			-- CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_inicial",
			-- CASE WHEN a.monto_devengado > 0::numeric THEN (a.monto_devengado - (a.monto_aporte+a.monto_multa))::numeric ELSE 0::numeric END AS "liquido_final"
			-- MODIFICADO2 2014-01-21
			-- CASE WHEN a.monto_devengado > 0::numeric THEN ((a.monto_devengado - a.monto_aporte)*0.5)::numeric ELSE 0::numeric END AS "liquido_a_percibir",
			-- CASE WHEN a.monto_devengado > 0::numeric THEN (((a.monto_devengado - a.monto_aporte)*0.5)-a.monto_multa)::numeric ELSE 0::numeric END AS "liquido_inicial",
			-- CASE WHEN a.monto_devengado > 0::numeric THEN (((a.monto_devengado - a.monto_aporte)*0.5)-a.monto_multa)::numeric ELSE 0::numeric END AS "liquido_final"
			-- MODIFICADO3 13062014

			-- EL CONCEPTO DEL LIQUIDO A PERCIBIR EN CASO DE QUE LOS DESCUENTOS VARIOS SEAN MENOR AL 100%
			CASE WHEN a.monto_devengado > 0::numeric THEN ((a.monto_devengado - a.monto_aporte)*0.0)::numeric ELSE 0::numeric END AS "liquido_a_percibir",

			CASE WHEN a.monto_devengado > 0::numeric THEN (((a.monto_devengado - a.monto_aporte)*1.0)-a.monto_multa)::numeric ELSE 0::numeric END AS "liquido_inicial",
			CASE WHEN a.monto_devengado > 0::numeric THEN (((a.monto_devengado - a.monto_aporte)*1.0)-a.monto_multa)::numeric ELSE 0::numeric END AS "liquido_final"
			
			,(0::numeric) as "solicitado"
			,(0::numeric) as "aplicado"
			,(0::numeric) as "diferencia" -- diferencia = (solicitado-aplicado):

		FROM salarios.detalles_planillas_salarios a
		      left join salarios.planillas_salarios b 
			   on (a.id_planilla_salario=b.id_planilla_salario)
		WHERE -- b.id_administracion = 0
		      -- and b.gestion = 2011
		      -- and b.id_mes = 1 
		      -- and 
		      b.id_estado=4 -- 4 = con multas aplicadas!.
		      and b.id_planilla_salario= in_id_planilla_salario -- 5
		      and a.id_funcionario=rApariciones.id_funcionario
		ORDER BY a.monto_presupuestado ASC;

	-- Asumimos que un funcionario aparece como maximo 2 veces!!!
	FETCH NEXT FROM cDetallePSA2 INTO rDetallePSA1;
	-- Obtenemos el importe_liquido1:
	nImporte_liquido1 := rDetallePSA1.liquido_inicial;
	nImporte_liquido_a_percibir := rDetallePSA1.liquido_a_percibir;
	IF (rApariciones.cantidad = 2 ) THEN
		FETCH NEXT FROM cDetallePSA2 INTO rDetallePSA2;
		-- Obtenemos el importe_liquido2:
		nImporte_liquido2 := rDetallePSA2.liquido_inicial;
	END IF;

	CLOSE cDetallePSA2;

	/*
	d) obtener los descuentos de este funcionario
	*/
	FOR desc_de_un_funcionario IN 
		Select 
			g.id_funcionario,
			g.monto,
			g.ejecutado,
			g.id_tipo_descuento,
			g.id_descuento_aso,
			g.id_descuento_judicial,
			g.id_judicial,
			g.orden,
			g.aso 
		from salarios.obtener_descuentos_varios(
			(Select z.id_administracion from salarios.planillas_salarios z where z.id_planilla_salario =in_id_planilla_salario ), -- 0, 
			(Select z.gestion::integer from salarios.planillas_salarios z where z.id_planilla_salario =in_id_planilla_salario ), --2011,
			(Select z.id_mes from salarios.planillas_salarios z where z.id_planilla_salario =in_id_planilla_salario ) -- 1
			) g
		where g.id_funcionario= rApariciones.id_funcionario -- 195
		-- Modificación: 2014-02-20 Motivo: Se agregó para ordenar los descuentos judiciales Autor: Lic. Gustavo E. Alcaraz B.
		ORDER BY orden,(id_descuento_aso+id_descuento_judicial) -- Agregado
		--
		LOOP
			-- la variable nImporte_solicitado: guarda el importe del descuento que esta
			-- siendo procesado actualmente, se utiliza esta variable 
			-- por cuestiones de practicidad.
			nImporte_solicitado := desc_de_un_funcionario.monto;
			/*
			f) Aplicar los descuentos a este funcionario
			*/
			-- INICIO - APLICACION DE DESCUENTOS ---------------------------------------
			/*
			d) Sumar el importe_solicitado al
			   importe_solicitado_acumulado.
			*/
			/*
			importe_solicitado_acumulado: esta variable guarda la sumatoria 
			de todos los descuentos solicitados para este funcionario.
			*/
			nImporte_solicitado_acumulado := nImporte_solicitado_acumulado + nImporte_solicitado;
			/*
			e) Verificar que el importe_liquido1 sea mayor a cero.

			f) Verificar que el importe_solicitado sea menor
			   al importe_liquido1.
			*/
			IF (nImporte_liquido1 > 0) THEN
				IF ( nImporte_solicitado < nImporte_liquido1) THEN
				/*
				g) Efectuar lo siguiente: 
				   g.0) importe_solicitado1=importe_solicitado1+importe_solicitado
				   g.1) liquido1 = liquido1 - importe_solicitado 
				   g.2) importe_aplicado_acumulado1 = importe_aplicado_acumulado1+ importe_solicitado
				*/
				/*
				importe_solicitado1: Esta variable guarda la sumatoria de todos 
				los descuentos solicitados al liquido1
				*/
					nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
					nImporte_liquido1 := nImporte_liquido1 - nImporte_solicitado;
					nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_solicitado;
				ELSE
					/*
					FLUJOS ALTERNATIVOS:
					FA1. En el punto f) si el solicitado es mayor a liquido1 
					     pero menor a liquido2:
					*/
					IF (nImporte_solicitado < nImporte_liquido2) THEN
					/*
					     Realizar el punto g) utilizando el liquido2 
					     y sus variables relacionadas (importe_solicitado2,importe_aplicado_acumulado2)
					     en vez del liquido1.
					*/
						nImporte_solicitado2 := nImporte_solicitado2 + nImporte_solicitado;
						nImporte_liquido2 := nImporte_liquido2 - nImporte_solicitado;
						nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_solicitado;
					ELSE
						/*
						FA2. En el punto f) si el solicitado es mayor al liquido1 y liquido2
						     pero menor a (liquido1+liquido2):
						     realizar las siguientes operaciones: 
						*/
						IF (nImporte_solicitado < (nImporte_liquido1 + nImporte_liquido2)) THEN
						/*
						     a) importe_solicitado1=importe_solicitado1+importe_solicitado
						     b) diferencia1=solicitado-liquido1
						     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1 + liquido1
						     d) liquido1=0
						     e) importe_solicitado2=importe_solicitado2+diferencia1
						     f) liquido2=liquido2-diferencia1
						     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2 + diferencia1
						*/
							nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
							nImporte_diferencia1 := nImporte_solicitado - nImporte_liquido1;
							nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_liquido1;
							nImporte_liquido1 := 0;
							nImporte_solicitado2 := nImporte_solicitado2 + nImporte_diferencia1;
							nImporte_liquido2 := nImporte_liquido2 - nImporte_diferencia1;
							nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_diferencia1;
						ELSE
						/*
						FA3. En el punto f) si el solicitado es mayor al liquido1, liquido2
						     y (liquido1+liquido2):
						     realizar las siguientes operaciones: 
						     a) importe_solicitado1=importe_solicitado1+importe_solicitado
						     b) diferencia1=solicitado-liquido1
						     c) importe_aplicado_acumulado1 = importe_aplicado_acumulado1 + liquido1
						     d) liquido1=0
						     e) importe_solicitado2=importe_solicitado2+diferencia1
						     f) diferencia2=diferencia1-liquido2
						     g) importe_aplicado_acumulado2 = importe_aplicado_acumulado2 + liquido2
						     h) liquido2=0
						*/
							nImporte_solicitado1 := nImporte_solicitado1 + nImporte_solicitado;
							nImporte_diferencia1 := nImporte_solicitado - nImporte_liquido1;
							nImporte_aplicado_acumulado1 := nImporte_aplicado_acumulado1 + nImporte_liquido1;
							nImporte_liquido1 := 0;
							nImporte_solicitado2 := nImporte_solicitado2 + nImporte_diferencia1;
							nImporte_diferencia2 := nImporte_diferencia1 - nImporte_liquido2;
							nImporte_aplicado_acumulado2 := nImporte_aplicado_acumulado2 + nImporte_liquido2;
							nImporte_liquido2 := 0;

						END IF;
					END IF;
				END IF;
			END IF;
			-- FIN    - APLICACION DE DESCUENTOS ---------------------------------------
		END LOOP; -- FIN de los descuentos de este funcionario.
			/*
			g) cargar los datos en el cursor que se utilizara
			   para devolver los datos de salida del detalle 
			   de la planilla de salarios.
			*/
			/*
			Se debe contemplar los casos cuando cantidad = 2
			*/
			-- variables comunes a las dos apariciones:
			id_administracion := rDetallePSA1.id_administracion; -- integer, 
			id_planilla_salario := rDetallePSA1.id_planilla_salario; -- integer, 
			id_funcionario := rDetallePSA1.id_funcionario; -- integer, 

			-- datos de la primera aparicion:
			id_detalle_planilla_salario := rDetallePSA1.id_detalle_planilla_salario; -- integer, 
			id_oficina := rDetallePSA1.id_oficina; -- integer, 
			dias_trabajados := rDetallePSA1.dias_trabajados; -- integer, 
			monto_presupuestado := rDetallePSA1.monto_presupuestado; -- numeric, 
			monto_devengado := rDetallePSA1.monto_devengado; -- numeric, 
			monto_aporte := rDetallePSA1.monto_aporte; -- numeric, 
			monto_multa := rDetallePSA1.monto_multa; -- numeric, 
			monto_total_aporte := rDetallePSA1.monto_total_aporte; -- numeric,
			liquido_inicial := rDetallePSA1.liquido_inicial; -- numeric,

			solicitado := nImporte_solicitado1; -- numeric,
			aplicado := nImporte_aplicado_acumulado1; -- numeric,
			diferencia := nImporte_diferencia1; -- numeric
			liquido_final := nImporte_liquido1+nImporte_liquido_a_percibir; -- numeric,

			RETURN NEXT;

			IF (rApariciones.cantidad = 2) THEN
				-- datos de la SEGUNDA aparicion:
				id_detalle_planilla_salario := rDetallePSA2.id_detalle_planilla_salario; -- integer, 
				id_oficina := rDetallePSA2.id_oficina; -- integer, 
				dias_trabajados := rDetallePSA2.dias_trabajados; -- integer, 
				monto_presupuestado := rDetallePSA2.monto_presupuestado; -- numeric, 
				monto_devengado := rDetallePSA2.monto_devengado; -- numeric, 
				monto_aporte := rDetallePSA2.monto_aporte; -- numeric, 
				monto_multa := rDetallePSA2.monto_multa; -- numeric, 
				monto_total_aporte := rDetallePSA2.monto_total_aporte; -- numeric,
				liquido_inicial := rDetallePSA2.liquido_inicial; -- numeric,

				solicitado := nImporte_solicitado2; -- numeric,
				aplicado := nImporte_aplicado_acumulado2; -- numeric,
				diferencia := nImporte_diferencia2; -- numeric
				liquido_final := nImporte_liquido2+nImporte_liquido_a_percibir; -- numeric,

				RETURN NEXT;
			END IF;


	END LOOP; -- FIN de este funcionario - rApariciones 

/*
	h) Al finalizar recorrer el cursor de salida y 
	   retornar los datos al cliente.

*/

/*
		h) guardar los descuentos aplicados (detalle)
		   y cambiar el estado a la cabecera a "PROCESADO".

		i) actualizar el detalle de la planilla de salario
		   con los importes actuales.

		j) actualizar el estado de la planilla de salario a:
		   "CON DESCUENTOS APLICADOS"

*/



					    -- Insertar / Actualizar los descuentos ya procesados:
					    -- Insertar un registro en el detalle de la planilla de descuentos activa:
			/*                        INSERT INTO salarios.detalles_planillas_descuentos (
						id_administracion,
						id_funcionario,
						id_planilla_descuento,
						monto_descuento, --aqui esto es el aplicado!
						monto_solicitado,
						id_descuento_judicial,
						id_descuento_aso,
						usu_alta,
						fec_alta,
						ip_alta
						) VALUES (
						id_administracion,
						id_funcionario,
						id_planilla_descuento,
						monto_descuento, --aqui esto es el aplicado!
						monto_solicitado,
						id_descuento_judicial,
						id_descuento_aso,
						usu_alta,
						fec_alta,
						ip_alta
						)
						
			*/

END;
]]></definition>
</function>

<function name="calcular_aplicacion_horas_no_compensadas_permanentes"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_detalle_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_multa">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_total_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_liquido_sin_descuentos_varios">
		<type name="numeric"/>
	</parameter>
	<parameter name="horas_hnc">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_hora_hnc">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_total_hnc">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_hnc_descontable">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_multa_hnc">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_total_aporte_hnc">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_liquido_sin_descuentos_varios_hnc">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
-- Objetivo: Calcular multas por horas no compensadas.
-- Fecha: 13/09/2016 11:27:58 AM
-- Autor: Lic. Gustavo Eloy Alcaraz Bogado
-- Objetivo: Obtener los datos necesarios para la funcionalidad de aplicar multas por horas no compensadas,
--           realiza la resultante posterior al aplicar multas administrativas.

RETURN QUERY 
SELECT 
   -- DATOS DETALLE PLANILLA SALARIO
   dps.id_planilla_salario,
   dps.id_detalle_planilla_salario,  
   dps.id_funcionario,
   dps.monto_presupuestado,
   dps.monto_devengado, 
   dps.monto_aporte, 
   dps.monto_multa, 
   dps.monto_total_aporte,
   dps.importe_liquido_sin_descuentos_varios,
   -- DATOS RESULTANTES SEGÚN HORAS NO COMPENSADAS POR FUNCIONARIOS AFECTADOS
   hnc.horas as horas_hnc,
   (dps.monto_presupuestado/30/8)::numeric(12,0) as monto_hora_hnc,
   ((dps.monto_presupuestado/30/8)::numeric(12,0)*hnc.horas)::numeric(12,0) as monto_total_hnc,
   CASE WHEN (dps.monto_presupuestado/30/8)::numeric(12,0)*hnc.horas::numeric(12,0)<=dps.importe_liquido_sin_descuentos_varios THEN 1 ELSE 0 END monto_hnc_descontable,
   (dps.monto_multa+(dps.monto_presupuestado/30/8)::numeric(12,0)*hnc.horas)::numeric(12,0) as monto_multa_hnc,
   (dps.monto_total_aporte+(dps.monto_presupuestado/30/8)::numeric(12,0)*hnc.horas)::numeric(12,0) as monto_total_aporte_hnc,
   (dps.importe_liquido_sin_descuentos_varios-(dps.monto_presupuestado/30/8)::numeric(12,0)*hnc.horas)::numeric(12,0) as importe_liquido_sin_descuentos_varios_hnc
FROM 
   salarios.detalles_planillas_salarios dps
   INNER JOIN salarios.planillas_salarios ps ON ps.id_planilla_salario=dps.id_planilla_salario AND ps.id_planilla_salario=in_id_planilla_salario
   INNER JOIN salarios.horas_no_compensadas hnc ON hnc.id_funcionario=dps.id_funcionario AND hnc.estado=0;
END;

]]></definition>
</function>

<function name="calcular_aplicacion_multas_permanentes"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="out_id_detalle_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="out_id_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="out_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="out_monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_monto_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_importe_liquido_sin_multa">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_importe_multa_solicitada">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_importe_multa_aplicada">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_importe_multa_diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_importe_liquido_con_multa">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_monto_total_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="out_id_detalle_multa_solicitada">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
-- cDps= detallePlanillaSalario
    cDps refcursor;
    rDps RECORD;

-- rMultas = multas solicitadas
    rMultas RECORD;
-- cantidad de apariciones del funcionario en el detalle 
-- de la planilla de salarios.
    rApariciones RECORD;

    iId_multas_aplicadas integer := 0;
    iId_multa_solicitada integer := 0;
    nImporte_diario numeric := 0;
    nGestion numeric := 0;
    iId_mes integer := 0;
    -- ******************************************************
    -- MODIFICACION POR CAMBIO PROCEDIMIENTO DE APLICACION DE MULTA 21/01/2015 10:47 AM
    -- Modifificado por: Lic. Gustavo Eloy Alcaraz Bogado
    -- variables adicionales: iId_mes_anterior y nGestion_anterior
    nGestion_anterior numeric:=0;
    iId_mes_anterior integer:=0;
    -- ******************************************************

	iImporte_liquido1_sin_multa numeric :=0;
	iImporte_liquido2_sin_multa numeric :=0;

	iImporte_liquido1_con_multa numeric :=0;
	iImporte_liquido2_con_multa numeric :=0;

	nImporte_multa_solicitada1 numeric :=0;
	nImporte_multa_solicitada2 numeric :=0;


	iImporte_multa_aplicada1 numeric :=0;
	iImporte_multa_aplicada2 numeric :=0;

	iImporte_diferencia1 numeric :=0;
	iImporte_diferencia2 numeric :=0;

	iId_detalle_planilla_salario1 integer :=0;
	nMonto_presupuestado1 numeric :=0;
	nMonto_devengado1 numeric :=0;
	nMonto_aporte1 numeric :=0;
	nMonto_total_aporte1 numeric :=0; -- jubilacion + diferencia del (presupuestado-devengado) + multa

	iId_detalle_planilla_salario2 integer :=0;
	nMonto_presupuestado2 numeric :=0;
	nMonto_devengado2 numeric :=0;
	nMonto_aporte2 numeric :=0;
	nMonto_total_aporte2 numeric :=0; -- jubilacion + diferencia del (presupuestado-devengado) + multa


BEGIN
-- Objetivo: Aplicar multas a funcionarios.
-- Fecha: 2012-05-18
-- Autor: Lic. Guillermo Galeano Fernández


/*
Para calcular la aplicación de multas de funcionarios que aparecen
dos veces en la planilla de salario:

Flujo Básico:

a-2) Identificar la cantidad de veces que aparece el funcionario en la planilla de salarios.
a-1) Identificar la cantidad de días de multa solicitada
a) Obtener los importes líquido1 y líquido2 de este funcionario.
b) Obtener el importe diario de la categoria actual del funcionario.
c) Calcular el importe solicitado multiplicando el importe diario 
   por la cantidad de días. 

d) si el importe solicitado es menor al liquido1:
   Realizar la siguiente operación: 
   importe_liquido_con_multas1 = liquido1 - solicitado.

e) guardar las multas aplicadas (detalle) y cambiar el estado a la cabecera a "procesado".
   ¿cambiar el estado en multas solicitadas tambien?
f) actualizar el detalle de la planilla de salario

g) actualizar el estado de la planilla de salario a: "con multas aplicadas"

Flujos Alternativos
FA1) En el punto d) si el solicitado es mayor a liquido1 pero menor a liquido2:
     Realizar el punto d) utilizando el liquido2 en vez del líquido1.
FA2) En el punto d) si el solicitado es mayor al liquido1 y liquido2 
     pero menor a (liquido1+liquido2):
     realizar las siguientes operaciones: 
       diferencia1=solicitado-liquido1
       importe_liquido_con_multas1=0
       importe_liquido_con_multas2=liquido2-diferencia1

FA3) En el punto d) si el solicitado es mayor al liquido1 y liquido2 
     y mayor a (liquido1+liquido2):
     realizar las siguientes operaciones: 
       diferencia1=solicitado-liquido1
       importe_liquido_con_multas1=0
       diferencia2=diferencia1-liquido2
       importe_liquido_con_multas2=0

FA4) En el punto d) si el solicitado es mayor al liquido1 y liquido2 
     y mayor a (liquido1+liquido2) y liquido2=0:
     realizar las siguientes operaciones: 
       diferencia1=solicitado-liquido1
       importe_liquido_con_multas1=0
*/


-- -------------------------------------------------------------------------



-- Se obtiene el ID de la planilla de multas aplicadas 
-- para este planilla de salario
-- si no existe se le asigna el valor por omisión 0.-
	Select 
		z.id_multas_aplicadas, 
		z.id_multa_solicitada 
	into 
		iId_multas_aplicadas, 
		iId_multa_solicitada
	from salarios.multas_aplicadas z 
	where z.id_planilla_salario = IN_ID_PLANILLA_SALARIO 
		and z.estado = 0;
	IF (iId_multas_aplicadas IS NULL) THEN
		iId_multas_aplicadas:=0;
	END IF;

	Select 
		x.gestion, 
		x.id_mes 
	into 
		nGestion, 
		iId_mes
	from salarios.planillas_salarios x 
	where x.id_planilla_salario = IN_ID_PLANILLA_SALARIO;

	-- a-2) Identificar la cantidad de veces que aparece el funcionario en la planilla de salarios.
	FOR rApariciones IN
		SELECT 
			a.id_funcionario, 
			count(*) as cantidad
		FROM salarios.detalles_planillas_salarios a
		      left join salarios.planillas_salarios b 
			   on (a.id_planilla_salario=b.id_planilla_salario)
		WHERE b.id_estado=0 -- 0 es recien creado.
		      and b.id_planilla_salario= IN_ID_PLANILLA_SALARIO 
		      and a.id_funcionario in (
			SELECT 
				y.id_funcionario 
			  FROM salarios.detalles_multas_solicitadas y
			where y.id_multa_solicitada=iId_multa_solicitada
			--- ESTO AGREGUE 20-08-2013--
			and y.cantidad_dias > 0
		)
		group by a.id_funcionario
	LOOP
	-- Poner a 0 las variables utilizadas!!!
		out_id_detalle_planilla_salario :=0;
		out_id_planilla_salario :=0;
		out_id_funcionario :=0;

		out_monto_presupuestado :=0;
		out_monto_devengado :=0;
		out_monto_aporte :=0; --jubilacion

		out_importe_liquido_sin_multa :=0;
		out_importe_multa_solicitada :=0;
		out_importe_multa_aplicada :=0;
		out_importe_multa_diferencia :=0;
		out_importe_liquido_con_multa :=0;
		out_monto_total_aporte :=0; --- jubilacion + diferencia del (presupuestado-devengado) + multa

    -- iId_multas_aplicadas := 0;
    -- iId_multa_solicitada := 0;
    nImporte_diario := 0;
    -- nGestion := 0;
    -- iId_mes := 0;

	iImporte_liquido1_sin_multa :=0;
	iImporte_liquido2_sin_multa :=0;

	iImporte_liquido1_con_multa :=0;
	iImporte_liquido2_con_multa :=0;

	nImporte_multa_solicitada1 :=0;
	nImporte_multa_solicitada2 :=0;


	iImporte_multa_aplicada1 :=0;
	iImporte_multa_aplicada2 :=0;

	iImporte_diferencia1 :=0;
	iImporte_diferencia2 :=0;

	iId_detalle_planilla_salario1 :=0;
	nMonto_presupuestado1 :=0;
	nMonto_devengado1 :=0;
	nMonto_aporte1  :=0;
	nMonto_total_aporte1  :=0; -- jubilacion + diferencia del (presupuestado-devengado) + multa

	iId_detalle_planilla_salario2 :=0;
	nMonto_presupuestado2 :=0;
	nMonto_devengado2 :=0;
	nMonto_aporte2 :=0;
	nMonto_total_aporte2 :=0; -- jubilacion + diferencia del (presupuestado-devengado) + multa




-- -------------------------------------------------------------------------------
		-- a-1) Identificar la cantidad de días de multas solicitada
		SELECT 
			a.id_detalle_multa_solicitada, 
			a.id_administracion, 
			a.id_multa_solicitada, 
			a.id_funcionario,
			a.cantidad_dias
			into rMultas
		FROM salarios.detalles_multas_solicitadas a
		where a.id_multa_solicitada= iId_multa_solicitada 
			and a.cantidad_dias > 0
			and a.id_funcionario= rApariciones.id_funcionario;
		


		-- a) Obtener los importes líquido1 y líquido2 de este funcionario.
		OPEN cDps SCROLL FOR 
		SELECT 
			a.id_detalle_planilla_salario, 
			a.id_funcionario, 
			a.monto_presupuestado, 
			a.monto_devengado, 
			a.monto_aporte, --jubilacion
			a.monto_total_aporte,
                        (a.monto_devengado-a.monto_aporte) as liquido
		FROM salarios.detalles_planillas_salarios a
		      left join salarios.planillas_salarios b 
			   on (a.id_planilla_salario=b.id_planilla_salario)
		WHERE b.id_estado=0 -- 0 es recien creado.
		      and b.id_planilla_salario= IN_ID_PLANILLA_SALARIO 
		      and a.id_funcionario = rMultas.id_funcionario
		ORDER BY a.monto_presupuestado asc;

		-- Se asumen que sólo aparece un funcionario 2 veces!!!
		FETCH NEXT FROM cDps INTO rDps;
		iImporte_liquido1_sin_multa:=coalesce(rDps.liquido,0);

               	iId_detalle_planilla_salario1  := rDps.id_detalle_planilla_salario;
		out_id_planilla_salario :=IN_ID_PLANILLA_SALARIO;
		out_id_funcionario :=rMultas.id_funcionario;

		nMonto_presupuestado1 := rDps.monto_presupuestado;
		nMonto_devengado1 := rDps.monto_devengado;
		nMonto_aporte1 := rDps.monto_aporte; -- jubilacion
		nMonto_total_aporte1 := rDps.monto_total_aporte; -- jubilacion + diferencia del (presupuestado-devengado) + multa

		IF (rApariciones.cantidad = 2 ) THEN
			FETCH NEXT FROM cDps INTO rDps;
			iImporte_liquido2_sin_multa:=coalesce(rDps.liquido,0);
			iId_detalle_planilla_salario2  := rDps.id_detalle_planilla_salario;
			nMonto_presupuestado2 := rDps.monto_presupuestado;
			nMonto_devengado2 := rDps.monto_devengado;
			nMonto_aporte2 := rDps.monto_aporte; -- jubilacion
			nMonto_total_aporte2 := rDps.monto_total_aporte; -- jubilacion + diferencia del (presupuestado-devengado) + multa
		END IF;
		CLOSE cDps;

		-- b) Obtener el importe diario de la categoria actual del funcionario.
			--  ¿Se debe contemplar aquí la categoría mapeada cuando es jefe interino?

                -- ******************************************************
                -- MODIFICACION POR CAMBIO PROCEDIMIENTO DE APLICACION DE MULTA 21/01/2015 10:47 AM
                -- OBTENER IMPORTE DIARIO SEGUN CATEGORIA DEL MES ANTERIOR
                -- ******************************************************
                -- Modifificado por: Lic. Gustavo Eloy Alcaraz Bogado
                -- CODIGOS AGREGADOS
	        IF (iId_mes=1) THEN
                   iId_mes_anterior := 12;    
                   nGestion_anterior := nGestion - 1;
                ELSE
                   iId_mes_anterior := iId_mes - 1;    
                   nGestion_anterior := nGestion;
                END IF; 
               
		Select 
			importe_diario 
			into nImporte_diario
		from salarios.importes_por_unidad_de_tiempo(iId_mes_anterior, rMultas.id_funcionario, nGestion_anterior);
                -- ******************************************************


                -- ****************ORIGINAL 2015-01-20********************** 
		--Select 
		--	importe_diario 
		--	into nImporte_diario 
		--from salarios.importes_por_unidad_de_tiempo(iId_mes, rMultas.id_funcionario, nGestion);
                --******************************************************** 


		-- c) Calcular el importe solicitado multiplicando el importe diario 
		--   por la cantidad de días. 
		out_importe_multa_solicitada :=nImporte_diario*rMultas.cantidad_dias;
		-- d) si el importe solicitado es menor al liquido1:
		--   Realizar la siguiente operación: 
		--   importe_liquido_con_multas1 = liquido1 - solicitado.
		IF (out_importe_multa_solicitada < iImporte_liquido1_sin_multa) THEN
			iImporte_liquido1_con_multa := iImporte_liquido1_sin_multa - out_importe_multa_solicitada;
			nImporte_multa_solicitada1 := out_importe_multa_solicitada;
			iImporte_multa_aplicada1 := out_importe_multa_solicitada;

			iImporte_liquido2_con_multa := iImporte_liquido2_sin_multa;

		ELSIF ((out_importe_multa_solicitada > iImporte_liquido1_sin_multa) AND (out_importe_multa_solicitada < iImporte_liquido2_sin_multa)) THEN
			-- Flujos Alternativos
			-- FA1) En el punto d) si el solicitado es mayor a liquido1 pero menor a liquido2:
			--     Realizar el punto d) utilizando el liquido2 en vez del líquido1.
			iImporte_liquido2_con_multa := iImporte_liquido2_sin_multa - out_importe_multa_solicitada;
			nImporte_multa_solicitada2 := out_importe_multa_solicitada;
			iImporte_multa_aplicada2 := out_importe_multa_solicitada;
			iImporte_liquido1_con_multa := iImporte_liquido1_sin_multa;

		ELSIF ((out_importe_multa_solicitada > iImporte_liquido1_sin_multa) 
			    AND (out_importe_multa_solicitada > iImporte_liquido2_sin_multa)
			    AND (out_importe_multa_solicitada < (iImporte_liquido1_sin_multa+iImporte_liquido2_sin_multa))
		) THEN
		-- FA2) En el punto d) si el solicitado es mayor al liquido1 y liquido2 
		--     pero menor a (liquido1+liquido2):
		--     realizar las siguientes operaciones: 
		--       diferencia1=solicitado-liquido1
		--       importe_liquido_con_multas1=0
		--       importe_liquido_con_multas2=liquido2-diferencia1
			iImporte_diferencia1:= out_importe_multa_solicitada - iImporte_liquido1_sin_multa;
			iImporte_multa_aplicada1 := iImporte_liquido1_sin_multa;
			nImporte_multa_solicitada1 := out_importe_multa_solicitada;
			iImporte_liquido1_con_multa :=0;

			iImporte_liquido2_con_multa := iImporte_liquido2_sin_multa - iImporte_diferencia1;
			iImporte_multa_aplicada2 := iImporte_diferencia1; 
			nImporte_multa_solicitada2 := iImporte_diferencia1;


		ELSIF ((out_importe_multa_solicitada > iImporte_liquido1_sin_multa) 
			    AND (out_importe_multa_solicitada > iImporte_liquido2_sin_multa)
			    AND (out_importe_multa_solicitada > (iImporte_liquido1_sin_multa+iImporte_liquido2_sin_multa))
		) THEN
		-- FA3) En el punto d) si el solicitado es mayor al liquido1 y liquido2 
		--     y mayor a (liquido1+liquido2):
		--     realizar las siguientes operaciones: 
		--       diferencia1=solicitado-liquido1
		--       importe_liquido_con_multas1=0
		--       diferencia2=diferencia1-liquido2
		--       importe_liquido_con_multas2=0
			iImporte_diferencia1:= out_importe_multa_solicitada - iImporte_liquido1_sin_multa;
			iImporte_multa_aplicada1 := iImporte_liquido1_sin_multa;
			iImporte_liquido1_con_multa :=0;
			nImporte_multa_solicitada1 := out_importe_multa_solicitada;

			iImporte_diferencia2:= iImporte_diferencia1 - iImporte_liquido2_sin_multa;
			iImporte_multa_aplicada2 := iImporte_liquido2_sin_multa;
			iImporte_liquido2_con_multa := 0;
			nImporte_multa_solicitada2 := iImporte_diferencia1;

		ELSIF ((out_importe_multa_solicitada > iImporte_liquido1_sin_multa) 
			    AND (out_importe_multa_solicitada > iImporte_liquido2_sin_multa)
			    AND (out_importe_multa_solicitada > (iImporte_liquido1_sin_multa+iImporte_liquido2_sin_multa))
			   AND iImporte_liquido2_sin_multa=0
		) THEN
		-- FA4) En el punto d) si el solicitado es mayor al liquido1 y liquido2 
		--     y mayor a (liquido1+liquido2) y liquido2=0:
		--     realizar las siguientes operaciones: 
		--       diferencia1=solicitado-liquido1
		--       importe_liquido_con_multas1=0
			iImporte_diferencia1:= out_importe_multa_solicitada - iImporte_liquido1_sin_multa;
			iImporte_multa_aplicada1 := iImporte_liquido1_sin_multa;
			iImporte_liquido1_con_multa :=0;
			nImporte_multa_solicitada1 := out_importe_multa_solicitada;

		END IF;
		-- e) insertar las multas aplicadas (detalle)

		-- Cargar variables de salida 
		-- para el registro1:
		out_id_detalle_multa_solicitada := rMultas.id_detalle_multa_solicitada;
		out_id_detalle_planilla_salario :=iId_detalle_planilla_salario1;
		-- out_id_planilla_salario :=0;
		-- out_id_funcionario :=0;
		out_monto_presupuestado := nMonto_presupuestado1;
		out_monto_devengado := nMonto_devengado1;
		out_monto_aporte := nMonto_aporte1; -- jubilacion

		out_importe_liquido_sin_multa := iImporte_liquido1_sin_multa;
		out_importe_multa_solicitada := nImporte_multa_solicitada1;
		out_importe_multa_aplicada := iImporte_multa_aplicada1;
		out_importe_multa_diferencia := iImporte_diferencia1;
		out_importe_liquido_con_multa := iImporte_liquido1_con_multa;
		out_monto_total_aporte := nMonto_aporte1 + (nMonto_presupuestado1 - nMonto_devengado1) + iImporte_multa_aplicada1; -- jubilacion + diferencia del (presupuestado-devengado) + multa

		-- Aquí devolvemos el contenido de las variables de salida
		-- registro 1
		RETURN NEXT; 

		IF (rApariciones.cantidad = 2 ) THEN
			-- cargar variables de salida registro 2

			out_id_detalle_planilla_salario :=iId_detalle_planilla_salario2;
			-- out_id_planilla_salario :=0;
			-- out_id_funcionario :=0;
			out_monto_presupuestado := nMonto_presupuestado2;
			out_monto_devengado := nMonto_devengado2;
			out_monto_aporte := nMonto_aporte2; -- jubilacion

			out_importe_liquido_sin_multa := iImporte_liquido2_sin_multa;
			out_importe_multa_solicitada := nImporte_multa_solicitada2;
			out_importe_multa_aplicada := iImporte_multa_aplicada2;
			out_importe_multa_diferencia := iImporte_diferencia2;
			out_importe_liquido_con_multa := iImporte_liquido2_con_multa;
			out_monto_total_aporte := nMonto_aporte2 + (nMonto_presupuestado2 - nMonto_devengado2) + iImporte_multa_aplicada2; -- jubilacion + diferencia del (presupuestado-devengado) + multa

			-- f) actualizar el detalle de la planilla de salario

			-- Aquí devolvemos el contenido de las variables de salida
			-- registro 2
			RETURN NEXT; 
		END IF;
END LOOP; -- LOOP de cDps (de este funcionario)


-- actualizar plla de descuentos (cabecera)
-- actualizar plla de salarios (cabecera)
-- Estado x = CON MULTAS APLICADAS

END;
]]></definition>
</function>

<function name="calculo_gratificacion_especial"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="ape_nom_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de gratificacion especial
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el importe por el pago de gratificacion especial 
  * ------------  
  */
	RETURN QUERY 
	SELECT distinct
		f.id_funcionario,
		f.cedula_funcionario, 
		f.ape_nom_funcionario,
		salarios.obtener_monto_gratificacion_especial(f.id_funcionario, in_id_mes, in_gestion) as importe_gratificacion,
		o.id_oficina,
		o.nivel1,
		o1.nombre,
		salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) as dias_trabajados
	FROM legajos.funcionarios f
	INNER JOIN salarios.funcionarios_categorias fc 
	        ON fc.id_funcionario = f.id_funcionario 
	        AND fc.estado
	INNER JOIN salarios.detalles_categorias dc 
	        ON fc.id_detalle_categoria = dc.id_detalle_categoria
	        AND dc.id_administracion = in_id_administracion
	INNER JOIN salarios.categorias c 
	        ON c.id_categoria = dc.id_categoria 
	        AND c.gestion = in_gestion
	INNER JOIN salarios.categoria_importe_mensual cim 
	        ON cim.id_categoria = c.id_categoria 
	        AND cim.id_mes = in_id_mes
	INNER JOIN legajos.oficinas o 
	        ON o.id_oficina = fc.id_oficina 
	        AND o.gestion = in_gestion
	INNER JOIN legajos.oficinas o1 
	        ON o.nivel1 = o1.nivel1 
	        AND o.nivel2 = o1.nivel2 
	        AND o1.nivel3 = 0 
	        AND o1.nivel4 = 0 
	        AND o1.nivel5 = 0 
	        AND o1.gestion = in_gestion;

END;]]></definition>
</function>

<function name="calculo_gratificacion_ocacional"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="ape_nom_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de gratificacion ocasional
  * Fecha: 2012-05-22
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el importe por el pago de gratificacion ocacional 
  * ------------  
  */
	RETURN QUERY 
	SELECT distinct
		f.id_funcionario,
		f.cedula_funcionario, 
		f.ape_nom_funcionario,
		salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje,
		fgo.monto,
		fgo.monto * salarios.obtener_aporte_porcentaje(f.id_funcionario, false) / 100,
		o.id_oficina,
		o.nivel1,
		o1.nombre
	FROM salarios.funcionarios_gratificaciones_ocasionales fgo
	INNER JOIN legajos.funcionarios f ON f.cedula_funcionario = fgo.cedula
	INNER JOIN salarios.funcionarios_categorias fc 
	        ON fc.id_funcionario = f.id_funcionario 
	        AND fc.estado
	INNER JOIN legajos.oficinas o 
	        ON o.id_oficina = fc.id_oficina_presta 
	        AND o.gestion = in_gestion
	INNER JOIN legajos.oficinas o1 
	        ON o.nivel1 = o1.nivel1 
	        AND o.nivel2 = o1.nivel2 
	        AND o1.nivel3 = 0 
	        AND o1.nivel4 = 0 
	        AND o1.nivel5 = 0 
	        AND o1.gestion = in_gestion
	WHERE fgo.id_mes = in_id_mes
	   AND fgo.gestion = in_gestion
	   AND fgo.id_administracion = in_id_administracion;

END;]]></definition>
</function>

<function name="calculo_ra_funcionarios"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto">
		<type name="numeric"/>
	</parameter>
	<parameter name="porcentaje_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="cantidad_horas">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_aplicada_hora_detalle">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_planilla_ra" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de RA de funcionarios
  * Fecha: 2012-04-24
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *	       in_id_planilla_ra
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el monto de ra por cada funcionario teniendo 
  * ------------  en cuenta el aporte y la cantidad de horas trabajadas
  */

RETURN QUERY 
  Select 
	ahd.id_oficina, 
	o.nombre, 
	o.nivel1, 
	o.nivel2, 
	o.nivel3, 
	o.nivel4, 
	o.nivel5, 
	f.id_funcionario, 
	f.cedula_funcionario AS cedula, 
	f.ape_nom_funcionario AS funcionario, 
	cim.id_mes, 
	c.gestion, 
	--salarios.obtener_monto_ra(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_ra)*ahd.horas_ra AS monto,
	((salarios.obtener_monto_ra(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_ra)::int)*(ahd.horas_ra::int))::numeric AS monto,
        /*
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS porcentaje_aporte, --false indica no nombramiento
        salarios.obtener_monto_re(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_re)*
        ahd.horas_re*
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false)/100::numeric AS aporte,
        */ 
        --Aporte para RA = 0
        0.0 AS porcentaje_aporte, 
        0.0 AS aporte, 
        
        --ahd.horas_ra AS cantidad_horas,
	((ahd.horas_ra)::int)::numeric AS cantidad_horas,
        ahd.id_aplicada_hora_detalle         
         
   FROM control.aplicadas_horas_detalle ahd
   INNER JOIN control.aplicadas_horas ah 
           ON ah.id_aplicada_hora = ahd.id_aplicada_hora
           AND ah.gestion = in_gestion
           AND ah.id_mes = in_id_mes
           AND ah.id_administracion = in_id_administracion
           --ESTADO DE LA PLANILLA DEBE SER 2
           AND ah.estado = 2
   INNER JOIN salarios.funcionarios_categorias fc 
           ON ahd.id_funcionario = fc.id_funcionario
           AND fc.estado
   INNER JOIN legajos.funcionarios f 
          ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc 
          ON dc.id_detalle_categoria = fc.id_detalle_categoria
          --AND dc.id_administracion = in_id_administracion --Verificar
   LEFT JOIN salarios.categorias c 
          ON c.id_categoria = dc.id_categoria 
          AND c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim 
          ON cim.id_categoria = c.id_categoria 
          AND cim.id_mes = in_id_mes
   LEFT JOIN legajos.oficinas o 
          ON o.id_oficina = ahd.id_oficina 
          AND o.gestion = in_gestion
          
   WHERE fc.estado 
     AND cim.id_mes = in_id_mes 
     AND c.gestion = in_gestion
  ORDER BY fc.id_oficina;

END;
]]></definition>
</function>

<function name="calculo_ra_funcionarios2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto">
		<type name="numeric"/>
	</parameter>
	<parameter name="porcentaje_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="cantidad_horas">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_aplicada_hora_detalle">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_planilla_ra" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de RA de funcionarios
  * Fecha: 2012-04-24
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *	       in_id_planilla_ra
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el monto de ra por cada funcionario teniendo 
  * ------------  en cuenta el aporte y la cantidad de horas trabajadas
  */

RETURN QUERY 
  Select 
	ahd.id_oficina, 
	o.nombre, 
	o.nivel1, 
	o.nivel2, 
	o.nivel3, 
	o.nivel4, 
	o.nivel5, 
	f.id_funcionario, 
	f.cedula_funcionario AS cedula, 
	f.ape_nom_funcionario AS funcionario, 
	cim.id_mes, 
	c.gestion, 
	--salarios.obtener_monto_ra(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_ra)*ahd.horas_ra AS monto,
	((salarios.obtener_monto_ra(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_ra)::int)*(ahd.horas_ra::int))::numeric AS monto,
        /*
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS porcentaje_aporte, --false indica no nombramiento
        salarios.obtener_monto_re(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_re)*
        ahd.horas_re*
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false)/100::numeric AS aporte,
        */ 
        --Aporte para RA = 0
        0.0 AS porcentaje_aporte, 
        0.0 AS aporte, 
        
        --ahd.horas_ra AS cantidad_horas,
	((ahd.horas_ra)::int)::numeric AS cantidad_horas,
        ahd.id_aplicada_hora_detalle         
         
   FROM control.aplicadas_horas_detalle ahd
   INNER JOIN control.aplicadas_horas ah 
           ON ah.id_aplicada_hora = ahd.id_aplicada_hora
           AND ah.gestion = in_gestion
           AND ah.id_mes = in_id_mes
           AND ah.id_administracion = in_id_administracion
           --ESTADO DE LA PLANILLA DEBE SER 2
           AND ah.estado = 2
   INNER JOIN salarios.funcionarios_categorias fc 
           ON ahd.id_funcionario = fc.id_funcionario
           AND fc.estado
   INNER JOIN legajos.funcionarios f 
          ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc 
          ON dc.id_detalle_categoria = fc.id_detalle_categoria
          --AND dc.id_administracion = in_id_administracion --Verificar
   LEFT JOIN salarios.categorias c 
          ON c.id_categoria = dc.id_categoria 
          AND c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim 
          ON cim.id_categoria = c.id_categoria 
          AND cim.id_mes = in_id_mes
   LEFT JOIN legajos.oficinas o 
          ON o.id_oficina = ahd.id_oficina 
          AND o.gestion = in_gestion
          
   WHERE fc.estado 
     AND cim.id_mes = in_id_mes 
     AND c.gestion = in_gestion
     AND ahd.horas_ra::int > 0
     AND ahd.id_aplicada_hora_detalle NOT IN (SELECT x.id_aplicada_hora_detalle 
					  FROM salarios.detalles_planillas_ra x
                                          INNER JOIN salarios.planillas_ra y ON x.id_planilla_ra = y.id_planilla_ra
                                          WHERE  y.gestion=in_gestion AND y.id_mes= in_id_mes AND
                                          NOT (x.id_aplicada_hora_detalle isnull))
  
  ORDER BY fc.id_oficina;

END;
]]></definition>
</function>

<function name="calculo_re_funcionarios"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto">
		<type name="numeric"/>
	</parameter>
	<parameter name="porcentaje_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="cantidad_horas">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_aplicada_hora_detalle">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_planilla_re" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de RE de funcionarios
  * Fecha: 2012-04-18
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *	       in_id_planilla_re
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el monto de re por cada funcionario teniendo 
  * ------------  en cuenta el aporte y la cantidad de horas trabajadas
  */

RETURN QUERY 
  Select 
	ahd.id_oficina, 
	o.nombre, 
	o.nivel1, 
	o.nivel2, 
	o.nivel3, 
	o.nivel4, 
	o.nivel5, 
	f.id_funcionario, 
	f.cedula_funcionario AS cedula, 
	f.ape_nom_funcionario AS funcionario, 
	cim.id_mes, 
	c.gestion, 
/*
	salarios.obtener_monto_re(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_re)*ahd.horas_re AS monto,
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS porcentaje_aporte, --false indica no nombramiento 
               
        salarios.obtener_monto_re(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_re)*
        ahd.horas_re*
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false)/100::numeric AS aporte,
        
        ahd.horas_re AS cantidad_horas,
        ahd.id_aplicada_hora_detalle         
 */
	(salarios.obtener_monto_re(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_re)::int)::numeric*(ahd.horas_re::int)::numeric AS monto,
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS porcentaje_aporte, --false indica no nombramiento 
               
        (((salarios.obtener_monto_re(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_re)::int)*
        (ahd.horas_re::int)*
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false)/100)::int)::numeric AS aporte,
        
        (ahd.horas_re::int)::numeric AS cantidad_horas,
        ahd.id_aplicada_hora_detalle                 

   FROM control.aplicadas_horas_detalle ahd
   INNER JOIN control.aplicadas_horas ah 
           ON ah.id_aplicada_hora = ahd.id_aplicada_hora
           AND ah.gestion = in_gestion
           AND ah.id_mes = in_id_mes
	   AND ah.id_administracion = in_id_administracion
	   --ESTADO DE LA PLANILLA DEBE SER 2
           AND ah.estado = 2
   INNER JOIN salarios.funcionarios_categorias fc 
           ON ahd.id_funcionario = fc.id_funcionario
           AND fc.estado
   INNER JOIN legajos.funcionarios f 
          ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc 
          ON dc.id_detalle_categoria = fc.id_detalle_categoria
          --AND dc.id_administracion = in_id_administracion --Verificar
   LEFT JOIN salarios.categorias c 
          ON c.id_categoria = dc.id_categoria 
          AND c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim 
          ON cim.id_categoria = c.id_categoria 
          AND cim.id_mes = in_id_mes
   LEFT JOIN legajos.oficinas o 
          ON o.id_oficina = ahd.id_oficina 
          AND o.gestion = in_gestion
          
   WHERE fc.estado 
     AND cim.id_mes = in_id_mes 
     AND c.gestion = in_gestion
  ORDER BY fc.id_oficina;

END;
]]></definition>
</function>

<function name="calculo_re_funcionarios2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto">
		<type name="numeric"/>
	</parameter>
	<parameter name="porcentaje_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="cantidad_horas">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_aplicada_hora_detalle">
		<type name="integer"/>
	</parameter>
	<parameter name="categoria">
		<type name="character varying"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_planilla_re" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de RE de funcionarios
  * Fecha: 2012-04-18
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *	       in_id_planilla_re
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el monto de re por cada funcionario teniendo 
  * ------------  en cuenta el aporte y la cantidad de horas trabajadas
  */

RETURN QUERY 
  Select 
	ahd.id_oficina, 
	o.nombre, 
	o.nivel1, 
	o.nivel2, 
	o.nivel3, 
	o.nivel4, 
	o.nivel5, 
	f.id_funcionario, 
	f.cedula_funcionario AS cedula, 
	f.ape_nom_funcionario AS funcionario, 
	cim.id_mes, 
	c.gestion, 

	(salarios.obtener_monto_re(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_re)::int)::numeric*(ahd.horas_re::int)::numeric AS monto,
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS porcentaje_aporte, --false indica no nombramiento 
               
        (((salarios.obtener_monto_re(f.id_funcionario, in_id_mes, in_gestion, in_id_planilla_re)::int)*
        (ahd.horas_re::int)*
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false)/100)::int)::numeric AS aporte,
        
        (ahd.horas_re::int)::numeric AS cantidad_horas,
        ahd.id_aplicada_hora_detalle,
        nombre_categoria as categoria                 

   FROM control.aplicadas_horas_detalle ahd
   INNER JOIN control.aplicadas_horas ah 
           ON ah.id_aplicada_hora = ahd.id_aplicada_hora
           AND ah.gestion = in_gestion
           AND ah.id_mes = in_id_mes
	   AND ah.id_administracion = in_id_administracion
	   --ESTADO DE LA PLANILLA DEBE SER 2
           AND ah.estado = 2
   INNER JOIN salarios.funcionarios_categorias fc 
           ON ahd.id_funcionario = fc.id_funcionario
           AND fc.estado
   INNER JOIN legajos.funcionarios f 
          ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc 
          ON dc.id_detalle_categoria = fc.id_detalle_categoria
          --AND dc.id_administracion = in_id_administracion --Verificar
   LEFT JOIN salarios.categorias c 
          ON c.id_categoria = dc.id_categoria 
          AND c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim 
          ON cim.id_categoria = c.id_categoria 
          AND cim.id_mes = in_id_mes
   LEFT JOIN legajos.oficinas o 
          ON o.id_oficina = ahd.id_oficina 
          AND o.gestion = in_gestion
          
   WHERE fc.estado 
     AND cim.id_mes = in_id_mes 
     AND c.gestion = in_gestion
     AND ahd.horas_re::int > 0
     AND ahd.id_aplicada_hora_detalle NOT IN (SELECT x.id_aplicada_hora_detalle FROM salarios.detalles_planillas_re x
                                                                            LEFT JOIN salarios.planillas_re y ON x.id_planilla_re = y.id_planilla_re 
                                                                            WHERE  y.gestion= in_gestion 
                                                                            AND y.id_mes= in_id_mes
                                                                            AND NOT (x.id_aplicada_hora_detalle isnull))
  ORDER BY fc.id_oficina;

END;
]]></definition>
</function>

<function name="calculo_sueldo_funcionarios"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_detalle_categoria">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de sueldos de funcionarios 
  * Fecha: 2012-04-16
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el sueldo devengado a partir del aporte de jubilacion
  * ------------  se tiene en cuenta todos los casos posibles para el calculo 
  *               
  */
RETURN QUERY 
  select * from salarios.calculo_sueldo_funcionarios_ascensos(in_id_mes, in_gestion, in_id_administracion)
  union
  select * from salarios.calculo_sueldo_funcionarios_recategorizados(in_id_mes, in_gestion, in_id_administracion)
  union
  select * from salarios.calculo_sueldo_funcionarios_normal(in_id_mes, in_gestion, in_id_administracion)
  union
  select * from salarios.calculo_sueldo_funcionarios_nombrados(in_id_mes, in_gestion, in_id_administracion)
  ORDER BY id_oficina;

END;
]]></definition>
</function>

<function name="calculo_sueldo_funcionarios_ascensos"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_detalle_categoria">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de sueldos de funcionarios con ascensos
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Cuando un funcionario tiene una recategorizacion del sueldo a mediado del mes 
  * ------------  se le tiene que aplicar el calculo los sueldos por los dias trabajados con la 
  *               categoria vieja y por los dias trabajados con la categoria nueva.
  */

RETURN QUERY 
Select 
	fc.id_oficina, 
	o.nombre, 
	o.nivel1, 
	o.nivel2, 
	o.nivel3, 
	o.nivel4, 
	o.nivel5, 
	f.id_funcionario, 
	f.cedula_funcionario AS cedula, 
	f.ape_nom_funcionario AS funcionario, 
	cim.id_mes, 
	c.gestion, 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje, --false indica no nombramiento
        dias_trabajados_old AS dias_trabajados, 
        cim.importe AS monto_presupuestado, 

        -- monto devengado = presupuestado / cantidad de dias * dias trabajados
        (cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado LIMIT 1
        ))::double precision * 
        dias_trabajados_old)::numeric AS monto_devengado, 

        
        (salarios.obtener_importe(in_id_mes,in_gestion,id_funcionario_categoria_old,1) / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado 
        ))::double precision * 
        dias_trabajados_old * 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) / 
        100::numeric + 
        (CASE WHEN salarios.obtener_aporte_porcentaje(f.id_funcionario, false)=0::numeric THEN 
		0::numeric 
	 ELSE 
		(cim.importe - salarios.obtener_importe(in_id_mes,in_gestion,id_funcionario_categoria_old,1)) 
	 END))::numeric AS jubilacion,

	 -- diferencia = sueldo presupuestado - sueldo devengado
	 cim.importe - (cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado LIMIT 1
        ))::double precision * 
        dias_trabajados_old)::numeric AS diferencia,

        fc.id_detalle_categoria
        
   FROM salarios.funcionarios_recategorizacion_ascenso fn 
   LEFT JOIN  salarios.funcionarios_categorias fc 
          ON  fc.id_funcionario_categoria = fn.id_funcionario_categoria_old 
   LEFT JOIN  legajos.funcionarios f 
          ON  f.id_funcionario = fc.id_funcionario
   LEFT JOIN  salarios.detalles_categorias dc 
          ON dc.id_detalle_categoria = fc.id_detalle_categoria
          AND dc.id_administracion = in_id_administracion --Verificar
   LEFT JOIN  salarios.categorias c 
          ON  c.id_categoria = dc.id_categoria 
          AND c.gestion = in_gestion
   LEFT JOIN  salarios.categoria_importe_mensual cim 
          ON  cim.id_categoria = c.id_categoria
          AND cim.id_mes = in_id_mes
   LEFT JOIN  legajos.oficinas o 
          ON  o.id_oficina = fc.id_oficina 
          AND o.gestion = in_gestion
   WHERE fn.activo 
     AND f.id_funcionario = fn.id_funcionario 
     AND fn.activo 
     AND fn.id_mes = in_id_mes 
     AND fn.gestion = in_gestion

union 

  (
Select 
	fc.id_oficina, 
	o.nombre, 
	o.nivel1, 
	o.nivel2, 
	o.nivel3, 
	o.nivel4, 
	o.nivel5, 
	f.id_funcionario, 
	f.cedula_funcionario AS cedula, 
	f.ape_nom_funcionario AS funcionario, 
	cim.id_mes, 
	c.gestion, 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje, --false indica no nombramiento 
        dias_trabajados_new AS dias_trabajados, 
        cim.importe AS monto_presupuestado, 
        
        (cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario 
           FROM parametros pmt 
           WHERE pmt.estado LIMIT 1
        ))::double precision * 
        dias_trabajados_new)::numeric AS monto_devengado, 
        
        (salarios.obtener_importe(in_id_mes,in_gestion,id_funcionario_categoria_new,1) / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
           WHERE pmt.estado LIMIT 1
        ))::double precision * 
        dias_trabajados_new * 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) / 
        100::numeric + 
        (CASE WHEN salarios.obtener_aporte_porcentaje(f.id_funcionario, false)=0::numeric THEN 
		0::numeric 
	 ELSE 
		(cim.importe - salarios.obtener_importe(in_id_mes,in_gestion,id_funcionario_categoria_new,1)) 
	 END))::numeric AS jubilacion,
	 cim.importe - (cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario 
           FROM parametros pmt 
           WHERE pmt.estado LIMIT 1
        ))::double precision * 
        dias_trabajados_new)::numeric AS diferencia,
        
        fc.id_detalle_categoria
	  

   FROM salarios.funcionarios_recategorizacion_ascenso fn 
   LEFT JOIN salarios.funcionarios_categorias fc 
          ON fc.id_funcionario_categoria = fn.id_funcionario_categoria_new 
   LEFT JOIN salarios.funcionarios_sinaportes fsa 
          ON fc.id_funcionario = fsa.id_funcionario 
          AND fsa.estado
   LEFT JOIN legajos.funcionarios f 
          ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc 
          ON dc.id_detalle_categoria = fc.id_detalle_categoria
          AND dc.id_administracion = in_id_administracion --Verificar   
   LEFT JOIN salarios.categorias c 
          ON c.id_categoria = dc.id_categoria 
          AND c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim 
          ON cim.id_categoria = c.id_categoria 
          AND cim.id_mes = in_id_mes
   LEFT JOIN legajos.oficinas o 
          ON o.id_oficina = fc.id_oficina 
          AND o.gestion = in_gestion
   WHERE fn.activo 
     AND f.id_funcionario = fn.id_funcionario 
     AND fn.activo 
     AND fn.id_mes = in_id_mes 
     AND fn.gestion = in_gestion
  )   
  ;

END;
]]></definition>
</function>

<function name="calculo_sueldo_funcionarios_nombrados"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_detalle_categoria">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de sueldos de funcionarios nombrados
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el sueldo devengado a partir del aporte de jubilacion 
  * ------------  
  */
RETURN QUERY 
  Select 
	fc.id_oficina, 
	o.nombre, 
	o.nivel1, 
	o.nivel2, 
	o.nivel3, 
	o.nivel4, 
	o.nivel5, 
	f.id_funcionario, 
	f.cedula_funcionario AS cedula, 
	f.ape_nom_funcionario AS funcionario, 
	cim.id_mes, 
	c.gestion, 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, true) AS aporte_porcentaje, --true indica nombramiento        
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) AS dias_trabajados, 
	-- MODIFICADO 23/09/2014 PARA FILTRA POR ADMINISTRACION
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion) AS dias_trabajados, 
        cim.importe AS monto_presupuestado, 

        -- monto devengado = presupuestado / cantidad de dias * dias trabajados
        (cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado LIMIT 1))::double precision * 
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion))::numeric AS monto_devengado, 
	-- salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion))::numeric AS monto_devengado, 
	-- monto de aporte = presupuestado / cantidad de dias * dias trabajados * porcentaje jubilacion / 100
        (cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
           WHERE pmt.estado  LIMIT 1
        ))::double precision * 
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) * 
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion) * 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, true) / 100::numeric)::numeric AS monto_aporte,

	--diferencia = presupuestado - devengado
	cim.importe - (cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
           WHERE pmt.estado LIMIT 1
        ))::double precision * 
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion))::numeric as diferencia,
	salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion))::numeric as diferencia,
        fc.id_detalle_categoria
        
        
   FROM salarios.funcionarios_categorias fc
   LEFT JOIN legajos.funcionarios f 
          ON f.id_funcionario = fc.id_funcionario
          AND fc.id_administracion = in_id_administracion --Verificar
   LEFT JOIN salarios.detalles_categorias dc 
          ON dc.id_detalle_categoria = fc.id_detalle_categoria
   LEFT JOIN salarios.categorias c 
          ON c.id_categoria = dc.id_categoria 
          AND c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim 
          ON cim.id_categoria = c.id_categoria 
          AND cim.id_mes = in_id_mes
   LEFT JOIN legajos.oficinas o 
          ON o.id_oficina = fc.id_oficina 
          AND o.gestion = in_gestion
   INNER JOIN salarios.funcionarios_nombrados fn 
           ON f.id_funcionario = fn.id_funcionario 
           AND fc.estado 
           AND fn.id_mes = in_id_mes 
           AND fn.gestion = in_gestion
  ORDER BY fc.id_oficina;

END;
]]></definition>
</function>

<function name="calculo_sueldo_funcionarios_normal"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_detalle_categoria">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de sueldos de funcionarios
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el sueldo devengado a partir del aporte de jubilacion 
  * ------------  
  */
RETURN QUERY 
  Select 
	fc.id_oficina, 
	o.nombre, 
	o.nivel1, 
	o.nivel2, 
	o.nivel3, 
	o.nivel4, 
	o.nivel5, 
	f.id_funcionario, 
	f.cedula_funcionario AS cedula, 
	f.ape_nom_funcionario AS funcionario, 
	cim.id_mes, 
	c.gestion, 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje, --false indica no nombramiento        
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) AS dias_trabajados, 
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion) AS dias_trabajados, 
        cim.importe AS monto_presupuestado, 
        
        /*(cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario 
           FROM parametros pmt 
           WHERE pmt.estado LIMIT 1
        ))::double precision * 
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion))::numeric AS monto_devengado, 
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion))::numeric AS monto_devengado, */

        ((cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario 
           FROM parametros pmt 
           WHERE pmt.estado LIMIT 1
        ))::double precision * 
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion))::numeric AS monto_devengado, 
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion))::int)::numeric AS monto_devengado, 
        
        /*(cim.importe_anterior / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
           WHERE pmt.estado LIMIT 1
        ))::double precision * 
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) * 
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion) * 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) /  --false indica no nombramiento 
        100::numeric + 
        --(CASE WHEN (salarios.obtener_aporte_porcentaje(f.id_funcionario, false) = 0) OR (salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) = 0) THEN 0::numeric 
        (CASE WHEN (salarios.obtener_aporte_porcentaje(f.id_funcionario, false) = 0) OR (salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion) = 0) THEN 0::numeric 
         ELSE(cim.importe - cim.importe_anterior) 
         END))::numeric AS jubilacion,*/

         ((cim.importe_anterior / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
           WHERE pmt.estado LIMIT 1
        ))::double precision * 
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) * 
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion) * 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) /  --false indica no nombramiento 
        100::numeric + 
        --(CASE WHEN (salarios.obtener_aporte_porcentaje(f.id_funcionario, false) = 0) OR (salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) = 0) THEN 0::numeric 
        (CASE WHEN (salarios.obtener_aporte_porcentaje(f.id_funcionario, false) = 0) OR (salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion) = 0) THEN 0::numeric 
         ELSE(cim.importe - cim.importe_anterior) 
         END))::int)::numeric AS jubilacion,


	(cim.importe - (cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario 
           FROM parametros pmt 
           WHERE pmt.estado LIMIT 1
        ))::double precision * 
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion))::numeric AS diferencia,
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion))::int)::numeric AS diferencia,

        fc.id_detalle_categoria
         
   FROM salarios.funcionarios_categorias fc
   LEFT JOIN legajos.funcionarios f 
          ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc 
          ON dc.id_detalle_categoria = fc.id_detalle_categoria
          AND dc.id_administracion = in_id_administracion --Verificar
   LEFT JOIN salarios.categorias c 
          ON c.id_categoria = dc.id_categoria 
          AND c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim 
          ON cim.id_categoria = c.id_categoria 
          AND cim.id_mes = in_id_mes
   LEFT JOIN legajos.oficinas o 
          ON o.id_oficina = fc.id_oficina 
          AND o.gestion = in_gestion
          
   WHERE fc.estado 
     AND f.id_funcionario NOT IN (SELECT a1.id_funcionario FROM salarios.calculo_sueldo_funcionarios_recategorizados(in_id_mes, in_gestion, in_id_administracion) a1)
     AND f.id_funcionario NOT IN (SELECT a2.id_funcionario FROM salarios.calculo_sueldo_funcionarios_nombrados(in_id_mes, in_gestion, in_id_administracion) a2)
     AND f.id_funcionario NOT IN (SELECT a3.id_funcionario FROM salarios.calculo_sueldo_funcionarios_ascensos(in_id_mes, in_gestion, in_id_administracion) a3)
     AND cim.id_mes = in_id_mes 
     AND c.gestion = in_gestion
  ORDER BY fc.id_oficina;

END;
]]></definition>
</function>

<function name="calculo_sueldo_funcionarios_recategorizados"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_detalle_categoria">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de sueldos de funcionarios recategorizados
  * Fecha: 2012-04-16
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el sueldo devengado a partir del aporte de jubilacion
  * ------------  se tiene en cuenta los registros cargados en la tabla 
  *               funcionarios_recategorizacion
  */
RETURN QUERY 
  Select 
	fc.id_oficina, 
	o.nombre, 
	o.nivel1, 
	o.nivel2, 
	o.nivel3, 
	o.nivel4, 
	o.nivel5, 
	f.id_funcionario, 
	f.cedula_funcionario AS cedula, 
	f.ape_nom_funcionario AS funcionario, 
	cim.id_mes, 
	c.gestion, 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje, --true indica nombramiento        
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) AS dias_trabajados,  
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion) AS dias_trabajados,  
        cim.importe AS monto_presupuestado,

        -- monto devengado = presupuestado / cantidad de dias * dias trabajados 
        (cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado LIMIT 1))::double precision * 
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion))::numeric AS monto_devengado, 
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion))::numeric AS monto_devengado, 

        -- monto de aporte = presupuestado / cantidad de dias * dias trabajados * porcentaje jubilacion / 100 + sueldo_nuevo - sueldo_viejo
        /*(salarios.obtener_importe(in_id_mes,in_gestion,fn.id_funcionario_categoria_old,2) / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado LIMIT 1 ))::double precision * 
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) * 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) / 
        100::numeric + 
        (CASE WHEN (salarios.obtener_aporte_porcentaje(f.id_funcionario, false) = 0 ) THEN 
		0::numeric 
	 ELSE(cim.importe - salarios.obtener_importe(in_id_mes,in_gestion,fn.id_funcionario_categoria_old,2)) 
	 END))::numeric AS jubilacion,*/
	(salarios.obtener_importe(in_id_mes,in_gestion,fn.id_funcionario_categoria_old,2) / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado LIMIT 1 ))::double precision * 
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) * 
        salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion) * 
        salarios.obtener_aporte_porcentaje(f.id_funcionario, false) / 
        100::numeric + 
        --(CASE WHEN (salarios.obtener_aporte_porcentaje(f.id_funcionario, false) = 0 ) OR (salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) = 0) THEN 
        (CASE WHEN (salarios.obtener_aporte_porcentaje(f.id_funcionario, false) = 0 ) OR (salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion) = 0) THEN 
		0::numeric 
	 ELSE(cim.importe - salarios.obtener_importe(in_id_mes,in_gestion,fn.id_funcionario_categoria_old,2)) 
	 END))::numeric AS jubilacion,

	 --diferencia = presupuestado - devengado
	cim.importe - (cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado = true LIMIT 1))::double precision * 
        --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion))::numeric as diferencia,
	salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion, in_id_administracion))::numeric as diferencia,
        fc.id_detalle_categoria
	 
	 
   FROM salarios.funcionarios_categorias fc
   /*LEFT JOIN salarios.funcionarios_sinaportes fsa 
	  ON fc.id_funcionario = fsa.id_funcionario 
	  AND fsa.estado*/
   LEFT JOIN legajos.funcionarios f 
	  ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc 
	  ON dc.id_detalle_categoria = fc.id_detalle_categoria
   LEFT JOIN salarios.categorias c 
	  ON c.id_categoria = dc.id_categoria 
	  AND c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim 
	  ON cim.id_categoria = c.id_categoria 
	  AND cim.id_mes = in_id_mes
   LEFT JOIN legajos.oficinas o 
	  ON o.id_oficina = fc.id_oficina 
	  AND o.gestion = in_gestion
   INNER JOIN salarios.funcionarios_recategorizacion fn 
           ON f.id_funcionario = fn.id_funcionario 
           AND fn.activo 
           AND fn.id_mes = in_id_mes 
           AND fn.gestion = in_gestion
   WHERE fc.estado AND fc.gestion = in_gestion
  ORDER BY fc.id_oficina;

END;
]]></definition>
</function>

<function name="cgr_informe_liquidaciones_funcionarios_permanentes"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="nombres">
		<type name="text"/>
	</parameter>
	<parameter name="apellidos">
		<type name="text"/>
	</parameter>
	<parameter name="n1">
		<type name="integer"/>
	</parameter>
	<parameter name="n2">
		<type name="integer"/>
	</parameter>
	<parameter name="n3">
		<type name="integer"/>
	</parameter>
	<parameter name="n4">
		<type name="integer"/>
	</parameter>
	<parameter name="n5">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel1">
		<type name="text"/>
	</parameter>
	<parameter name="nivel2">
		<type name="text"/>
	</parameter>
	<parameter name="nivel3">
		<type name="text"/>
	</parameter>
	<parameter name="nivel4">
		<type name="text"/>
	</parameter>
	<parameter name="nivel5">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="tipo">
		<type name="text"/>
	</parameter>
	<parameter name="pres_111">
		<type name="integer"/>
	</parameter>
	<parameter name="deve_111">
		<type name="integer"/>
	</parameter>
	<parameter name="dife_199">
		<type name="integer"/>
	</parameter>
	<parameter name="gast_113">
		<type name="integer"/>
	</parameter>
	<parameter name="gest_133">
		<type name="integer"/>
	</parameter>
	<parameter name="resp_133">
		<type name="integer"/>
	</parameter>
	<parameter name="anti_133">
		<type name="integer"/>
	</parameter>
	<parameter name="grad_133">
		<type name="integer"/>
	</parameter>
	<parameter name="gesp_137">
		<type name="integer"/>
	</parameter>
	<parameter name="goca_133">
		<type name="integer"/>
	</parameter>
	<parameter name="otc_849">
		<type name="integer"/>
	</parameter>
	<parameter name="subs_131">
		<type name="integer"/>
	</parameter>
	<parameter name="rext_123">
		<type name="integer"/>
	</parameter>
	<parameter name="radi_125">
		<type name="integer"/>
	</parameter>
	<parameter name="total">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado de las liquidaciones de los funcionarios permanentes/comisionados por mes y gestion
  * Creado    : 2014-01-14 14:37:00
  * Modificado: 2014-01-14 15:48:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado 
  * 
  * Descripcion:  Genera un listado de los funcionarios permanentes/comisionados referentes a las liquidaciones el mes y la gestion ingresado
  * ------------  
  */
RETURN QUERY 
SELECT
cgr.id::integer,
cgr.cedula_funcionario::text as cedula,
cgr.nombre_funcionario::text as nombres,
cgr.apellido_funcionario::text as apellidos,
cgr.nivel1::integer as n1,
cgr.nivel2::integer as n2,
cgr.nivel3::integer as n3,
cgr.nivel4::integer as n4,
cgr.nivel5::integer as n5,
cgr.nombre_nivel1::text as nivel1,
cgr.nombre_nivel2::text as nivel2,
cgr.nombre_nivel3::text as nivel3,
cgr.nombre_nivel4::text as nivel4,
cgr.nombre_nivel5::text as nivel5,
cgr.nombre_categoria::text as categoria,
cgr.nombre_cargo::text as cargo,
cgr.tipo_fun::text as tipo,
cgr.pres_111_fun::integer,
cgr.deve_111_fun::integer,
cgr.dife_199_fun::integer,
cgr.gast_113_fun::integer,
cgr.gest_133_fun::integer,
cgr.resp_133_fun::integer,
cgr.anti_133_fun::integer,
cgr.grad_133_fun::integer,
cgr.gesp_137_fun::integer,
cgr.goca_133_fun::integer,
cgr.otc_849_fun::integer,
cgr.subs_131_fun::integer,
cgr.rext_123_fun::integer,
cgr.radi_125_fun::integer,
(cgr.deve_111_fun+cgr.dife_199_fun+cgr.gast_113_fun+cgr.gest_133_fun+cgr.resp_133_fun+cgr.anti_133_fun+cgr.grad_133_fun+cgr.gesp_137_fun+cgr.goca_133_fun+cgr.otc_849_fun+cgr.subs_131_fun+cgr.rext_123_fun+cgr.radi_125_fun)::integer as total
FROM
(
SELECT
  f.id_funcionario as id,
  f.cedula_funcionario,
  f.nombre_funcionario,
  f.apellido_funcionario,
  ocd.nivel1,
  ocd.nivel2,
  ocd.nivel3,
  ocd.nivel4,
  ocd.nivel5,
  ocd.nombre_nivel1,
  ocd.nombre_nivel2,
  CASE WHEN trim(ocd.nombre_nivel3) is null THEN (CASE WHEN ocd.nombre_nivel4 is null THEN ocd.nombre_nivel5 ELSE ocd.nombre_nivel4 END) ELSE ocd.nombre_nivel3 END as nombre_nivel3,
  ocd.nombre_nivel4,
  ocd.nombre_nivel5,
  cat.nombre_categoria,
  car.nombre_cargo,
  CASE WHEN cat.es_comisionado THEN 'COM ['||UPPER(cat.abreviatura_entidad)||']' ELSE 'PER ['||UPPER(cat.abreviatura_entidad)||']' END as tipo_fun,
  cim.importe::integer as pres_111_fun,
  (
  --SALARIO PERMANENTE [111]
    COALESCE(
  (
  SELECT 
   sum(dps.monto_devengado) as presupuestado
  FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario = ps.id_planilla_salario
  WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=f.id_funcionario
     ),0)
 ) as deve_111_fun,
 (
 --DIFERENCIA SALARIAL [199]
   COALESCE(
  (
 SELECT
   pdsd.importe_monto_diferencia::integer as importe
 FROM salarios.planilla_diferencia_salarial pds
 LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial 
 LEFT JOIN salarios.funcionarios_superiores                fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
 WHERE
   pds.id_administracion=in_id_administracion AND 
   pds.id_mes=in_id_mes AND
   pds.gestion=in_gestion AND 
   pds.estado=1 AND 
   fs.id_funcionario=f.id_funcionario
     ),0)
 ) as dife_199_fun,
 (
 --GASTO REPRESENTACION [113]
   COALESCE(
  (
 SELECT
   sum(pgrd.devengado_parcial)::integer as importe
 FROM salarios.planilla_gasto_representacion pgr
 LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion 
 LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
 WHERE
   pgr.id_administracion=in_id_administracion AND 
   pgr.id_mes=in_id_mes AND
   pgr.gestion=in_gestion AND 
   pgr.estado=1 AND 
   fr.id_funcionario=f.id_funcionario
     ),0)
 ) as gast_113_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION PRESUPUESTARIA
   COALESCE(
  (
SELECT
  sum(dpb.monto_total::integer) as importe
FROM salarios.planillas_bonificaciones pb
LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
WHERE
   pb.id_administracion=in_id_administracion AND 
   pb.id_mes=in_id_mes AND
   pb.gestion=in_gestion AND 
   pb.estado=1 AND 
   replace(b.descripcion,'%','þ') not like '%þ%' AND
   fb.id_funcionario= f.id_funcionario
        ),0)
) as gest_133_fun,
(
--BONIFICACIONES Y GRATIFICACIONES [133] RESPONSABILIDAD
   COALESCE(
  (
SELECT
  sum(dpb.monto_total::integer) as importe
FROM salarios.planillas_bonificaciones pb
LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
WHERE
   pb.id_administracion=in_id_administracion AND 
   pb.id_mes=in_id_mes AND
   pb.gestion=in_gestion AND 
   pb.estado=1 AND 
   replace(b.descripcion,'%','þ') like '%þ%' AND 
   fb.id_funcionario= f.id_funcionario
        ),0)
) as resp_133_fun,
 (
--ANTIGUEDAD [133]
  COALESCE(
  (
 SELECT
   dpa.importe_antiguedad::integer as importe
 FROM salarios.planillas_antiguedad pa
 LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad 
 WHERE
   pa.id_administracion=in_id_administracion AND 
   pa.id_mes=in_id_mes AND
   pa.gestion=in_gestion AND 
   pa.estado=1 AND 
   dpa.id_funcionario=f.id_funcionario
     ),0)
 ) as anti_133_fun,
 (
 --GRADO ACADEMICO [133]
   COALESCE(
  (
 SELECT
   dpp.importe_profesional::integer as importe
 FROM salarios.planilla_profesionales pp
 LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional 
 LEFT JOIN salarios.funcionarios_profesionales       fp ON  fp.id_funcionario_profesional=dpp.id_funcionario_profesional
 WHERE
   pp.id_administracion=in_id_administracion AND 
   pp.id_mes=in_id_mes AND
   pp.gestion=in_gestion AND 
   pp.estado=1 AND 
   fp.id_funcionario=f.id_funcionario
     ),0)
 ) as grad_133_fun,
 (
--GRATIFICACION ESPECIAL [137]
  COALESCE(
  (
 (
  SELECT
   sum(ge.importe) as importe
  FROM
  (
   SELECT
    dpge.importe_gratificacion::integer as importe,  
    (row_number() over())+120 as linea
   FROM salarios.planilla_gratificacion_especial pge
   LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge ON dpge.id_planilla_gratificacion=pge.id_planilla_gratificacion
   WHERE
     pge.id_administracion=in_id_administracion AND 
     pge.id_mes=in_id_mes AND
     pge.gestion=in_gestion AND 
     pge.estado=1 AND 
     dpge.id_funcionario=f.id_funcionario
  ) ge)
    ),0)
 ) as gesp_137_fun,
 (
 --GRATIFICACION OCASIONAL [133]
   COALESCE(
  (
 SELECT
   dpgo.importe_gratificacion::integer as importe
 FROM salarios.planilla_gratificacion_ocacional pgo
 LEFT JOIN salarios.detalle_planilla_gratificacion_ocacional dpgo ON dpgo.id_planilla_gratificacion_ocacional=pgo.id_planilla_gratificacion_ocacional 
 WHERE
    pgo.id_administracion=in_id_administracion AND 
    pgo.id_mes=in_id_mes AND
    pgo.gestion=in_gestion AND 
    pgo.estado=1 AND 
    dpgo.id_funcionario=f.id_funcionario
      ),0)
 ) as goca_133_fun,
 (
 --OTRAS TRANSFERENCIAS CORRIENTES [849]
   COALESCE(
  (
 SELECT 
   sum(otc.importe_gratificacion_otra_transferencia_cte::integer) as importe
 FROM
 (SELECT
   14 as orden,
   potcd.importe_otra_transferencia_cte::integer as monto_liquido,
   potcd.importe_otra_transferencia_cte::integer as importe_gratificacion_otra_transferencia_cte,  
   0 as importe_aporte_gratificacion,
   (row_number() over())+140 as linea
 FROM salarios.planillas_otras_transferencias_ctes potc
 LEFT JOIN salarios.planillas_otras_transferencias_ctes_detalles potcd ON potcd.id_planilla_otra_transferencia_cte=potc.id_planilla_otra_transferencia_cte
 WHERE
   potc.id_administracion=in_id_administracion AND 
   potc.id_mes=in_id_mes AND
   potc.gestion=in_gestion AND 
   potc.estado=1 AND 
   potcd.id_funcionario=f.id_funcionario
 ) otc
   ),0)
 ) as otc_849_fun,
(
--SUBSIDIOS [131]
  COALESCE(
  (
SELECT
  sum(dps.importe_monto::integer) as importe
FROM salarios.planillas_subsidios ps
LEFT JOIN salarios.detalles_planillas_subsidios dps ON dps.id_planilla_subsidio=ps.id_planilla_subsidio 
LEFT JOIN salarios.funcionarios_subsidios       fsu ON fsu.id_funcionario_subsidio=dps.id_funcionario_subsidio
LEFT JOIN salarios.subsidios 		        sub ON sub.id_subsidio=fsu.id_subsidio
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.estado=1 AND 
   fsu.id_funcionario=f.id_funcionario
     ),0)
) as subs_131_fun,
 
 (
--REMUNERACION EXTRAORDINARIA [123]
  COALESCE(
  (
  SELECT 
    sum(re.monto)::integer as importe
  FROM
  (SELECT
    dpre.monto::integer as monto,   
    (row_number() over())+160 as linea
  FROM salarios.planillas_re pre
  LEFT JOIN salarios.detalles_planillas_re dpre ON dpre.id_planilla_re=pre.id_planilla_re
  WHERE
    pre.id_administracion=in_id_administracion AND 
    pre.id_mes=in_id_mes AND
    pre.gestion=in_gestion AND 
    pre.estado=1 AND 
    dpre.id_funcionario=f.id_funcionario
  ) re
  ),0)
  ) as rext_123_fun,
  (
  --REMUNERACION ADICIONAL [125]
  COALESCE(
  (
  SELECT 
   sum(ra.monto)::integer as importea
  FROM
   (SELECT
    17 as orden,
    dpra.cantidad_horas,  
    dpra.monto::integer as monto,
    '0'::text as descuento,   
    dpra.aporte::integer as aporte, 
    (row_number() over())+170 as linea
  FROM salarios.planillas_ra pra
  LEFT JOIN salarios.detalles_planillas_ra dpra ON dpra.id_planilla_ra=pra.id_planilla_ra
  WHERE
   pra.id_administracion=in_id_administracion AND 
   pra.id_mes=in_id_mes AND
   pra.gestion=in_gestion AND 
   pra.estado=1 AND 
   dpra.id_funcionario=f.id_funcionario
  ) ra
  ),0)
  ) as radi_125_fun
FROM 
  salarios.funcionarios_categorias fc
  LEFT JOIN salarios.detalles_categorias dc             ON dc.id_detalle_categoria=fc.id_detalle_categoria
  LEFT JOIN salarios.categorias cat                     ON cat.id_categoria=dc.id_categoria
  LEFT JOIN salarios.cargos car                         ON car.id_cargo=cat.id_cargo
  LEFT JOIN salarios.categoria_importe_mensual cim      ON cim.id_categoria=cat.id_categoria AND cim.id_mes = in_id_mes -- id_mes
  LEFT JOIN legajos.funcionarios f                      ON f.id_funcionario=fc.id_funcionario
  --LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f.id_funcionario
  LEFT JOIN legajos.oficinas_con_descripciones      ocd ON ocd.id_oficina=fc.id_oficina 
WHERE
  fc.gestion=in_gestion AND
  fc.hasta is null AND
  f.estado_funcionario AND
  f.id_administracion IN (0,in_id_administracion) AND
  cat.id_cargo>0 AND
--   AND
--   f.id_funcionario IN(466,218,2891,481,223,278,2987,305)
  f.id_funcionario NOT IN(1721,1789,1720,1122,1344,1415,1790)
ORDER BY f.ape_nom_funcionario
) cgr;

END;
]]></definition>
</function>

<function name="cgr_informe_liquidaciones_funcionarios_permanentes"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="nombres">
		<type name="text"/>
	</parameter>
	<parameter name="apellidos">
		<type name="text"/>
	</parameter>
	<parameter name="n1">
		<type name="integer"/>
	</parameter>
	<parameter name="n2">
		<type name="integer"/>
	</parameter>
	<parameter name="n3">
		<type name="integer"/>
	</parameter>
	<parameter name="n4">
		<type name="integer"/>
	</parameter>
	<parameter name="n5">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel1">
		<type name="text"/>
	</parameter>
	<parameter name="nivel2">
		<type name="text"/>
	</parameter>
	<parameter name="nivel3">
		<type name="text"/>
	</parameter>
	<parameter name="nivel4">
		<type name="text"/>
	</parameter>
	<parameter name="nivel5">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="tipo">
		<type name="text"/>
	</parameter>
	<parameter name="pres_111">
		<type name="integer"/>
	</parameter>
	<parameter name="deve_111">
		<type name="integer"/>
	</parameter>
	<parameter name="dife_199">
		<type name="integer"/>
	</parameter>
	<parameter name="gast_113">
		<type name="integer"/>
	</parameter>
	<parameter name="ga20_133">
		<type name="integer"/>
	</parameter>
	<parameter name="ga40_133">
		<type name="integer"/>
	</parameter>
	<parameter name="ga450_133">
		<type name="integer"/>
	</parameter>
	<parameter name="ga700_133">
		<type name="integer"/>
	</parameter>
	<parameter name="gp20_133">
		<type name="integer"/>
	</parameter>
	<parameter name="gp40_133">
		<type name="integer"/>
	</parameter>
	<parameter name="gp550_133">
		<type name="integer"/>
	</parameter>
	<parameter name="gp700_133">
		<type name="integer"/>
	</parameter>
	<parameter name="insal_133">
		<type name="integer"/>
	</parameter>
	<parameter name="resp_133">
		<type name="integer"/>
	</parameter>
	<parameter name="anti_133">
		<type name="integer"/>
	</parameter>
	<parameter name="grad_133">
		<type name="integer"/>
	</parameter>
	<parameter name="gesp_137">
		<type name="integer"/>
	</parameter>
	<parameter name="goca_133">
		<type name="integer"/>
	</parameter>
	<parameter name="otc_849">
		<type name="integer"/>
	</parameter>
	<parameter name="subs_131">
		<type name="integer"/>
	</parameter>
	<parameter name="rext_123">
		<type name="integer"/>
	</parameter>
	<parameter name="radi_125">
		<type name="integer"/>
	</parameter>
	<parameter name="total">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado de las liquidaciones de los funcionarios permanentes/comisionados por mes y gestion
  * Creado    : 2014-01-14 14:37:00
  * Modificado: 2014-04-24 11:18:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado 
  * 
  * Descripcion:  Genera un listado de los funcionarios permanentes/comisionados referentes a las liquidaciones el mes y la gestion ingresado
  * ------------  
  */
RETURN QUERY 
SELECT
*
FROM
(
SELECT
cgr.id::integer,
cgr.cedula_funcionario::text as cedula,
cgr.nombre_funcionario::text as nombres,
cgr.apellido_funcionario::text as apellidos,
cgr.nivel1::integer as n1,
cgr.nivel2::integer as n2,
cgr.nivel3::integer as n3,
cgr.nivel4::integer as n4,
cgr.nivel5::integer as n5,
cgr.nombre_nivel1::text as nivel1,
cgr.nombre_nivel2::text as nivel2,
cgr.nombre_nivel3::text as nivel3,
cgr.nombre_nivel4::text as nivel4,
cgr.nombre_nivel5::text as nivel5,
cgr.nombre_categoria::text as categoria,
cgr.nombre_cargo::text as cargo,
cgr.tipo_fun::text as tipo,
cgr.pres_111_fun::integer,
cgr.deve_111_fun::integer,
cgr.dife_199_fun::integer,
cgr.gast_113_fun::integer,

cgr.ga20_133_fun::integer,
cgr.ga40_133_fun::integer,
cgr.ga450_133_fun::integer,
cgr.ga700_133_fun::integer,
cgr.gp20_133_fun::integer,
cgr.gp40_133_fun::integer,
cgr.gp550_133_fun::integer,
cgr.gp700_133_fun::integer,
cgr.insal_133_fun::integer,

cgr.resp_133_fun::integer,


cgr.anti_133_fun::integer,
cgr.grad_133_fun::integer,
cgr.gesp_137_fun::integer,
cgr.goca_133_fun::integer,
cgr.otc_849_fun::integer,
cgr.subs_131_fun::integer,
cgr.rext_123_fun::integer,
cgr.radi_125_fun::integer,
(cgr.deve_111_fun+
cgr.dife_199_fun+
cgr.gast_113_fun+

cgr.ga20_133_fun+
cgr.ga40_133_fun+
cgr.ga450_133_fun+
cgr.ga700_133_fun+
cgr.gp20_133_fun+
cgr.gp40_133_fun+
cgr.gp550_133_fun+
cgr.gp700_133_fun+
cgr.insal_133_fun+

cgr.resp_133_fun+

cgr.anti_133_fun+
cgr.grad_133_fun+
cgr.gesp_137_fun+
cgr.goca_133_fun+
cgr.otc_849_fun+
cgr.subs_131_fun+
cgr.rext_123_fun+
cgr.radi_125_fun)::integer as total
FROM
(
SELECT
  f.id_funcionario as id,
  f.cedula_funcionario,
  f.nombre_funcionario,
  f.apellido_funcionario,
  ocd.nivel1,
  ocd.nivel2,
  ocd.nivel3,
  ocd.nivel4,
  ocd.nivel5,
  ocd.nombre_nivel1,
  ocd.nombre_nivel2,
  CASE WHEN trim(ocd.nombre_nivel3) is null THEN (CASE WHEN ocd.nombre_nivel4 is null THEN ocd.nombre_nivel5 ELSE ocd.nombre_nivel4 END) ELSE ocd.nombre_nivel3 END as nombre_nivel3,
  ocd.nombre_nivel4,
  ocd.nombre_nivel5,
  cat.nombre_categoria,
  car.nombre_cargo,
  CASE WHEN cat.es_comisionado THEN 'COM ['||UPPER(cat.abreviatura_entidad)||']' ELSE 'PER ['||UPPER(cat.abreviatura_entidad)||']' END as tipo_fun,
  cim.importe::integer as pres_111_fun,
  (
  --SALARIO PERMANENTE [111]
    COALESCE(
  (
  SELECT 
   sum(dps.monto_devengado) as presupuestado
  FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario = ps.id_planilla_salario
  WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=f.id_funcionario
     ),0)
 ) as deve_111_fun,
 (
 --DIFERENCIA SALARIAL [199]
   COALESCE(
  (
 SELECT
   pdsd.importe_monto_diferencia::integer as importe
 FROM salarios.planilla_diferencia_salarial pds
 LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial 
 LEFT JOIN salarios.funcionarios_superiores                fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
 WHERE
   pds.id_administracion=in_id_administracion AND 
   pds.id_mes=in_id_mes AND
   pds.gestion=in_gestion AND 
   pds.estado=1 AND 
   fs.id_funcionario=f.id_funcionario
     ),0)
 ) as dife_199_fun,
 (
 --GASTO REPRESENTACION [113]
   COALESCE(
  (
 SELECT
   sum(pgrd.devengado_parcial)::integer as importe
 FROM salarios.planilla_gasto_representacion pgr
 LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion 
 LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
 WHERE
   pgr.id_administracion=in_id_administracion AND 
   pgr.id_mes=in_id_mes AND
   pgr.gestion=in_gestion AND 
   pgr.estado=1 AND 
   fr.id_funcionario=f.id_funcionario
     ),0)
 ) as gast_113_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION ADMINISTRATIVA 20% SP
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
        LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
        LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
        LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
        pb.id_mes=in_id_mes AND
        pb.gestion=in_gestion AND 
        pb.estado=1 AND 
        (b.descripcion ilike '%GESTION ADMINISTRATIVA 20% SP%') AND
        fb.id_funcionario= f.id_funcionario
  ),0)
) as ga20_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION ADMINISTRATIVA 40% (SP + GR)
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
        LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
        LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
        LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
        pb.id_mes=in_id_mes AND
        pb.gestion=in_gestion AND 
        pb.estado=1 AND 
        (b.descripcion ilike '%GESTION ADMINISTRATIVA 40% (SP + GR)%') AND 
        fb.id_funcionario= f.id_funcionario 
   ),0)
) as ga40_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION ADMINISTRATIVA - 450.000
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
        LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
        LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
        LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
        pb.id_mes=in_id_mes AND
        pb.gestion=in_gestion AND 
        pb.estado=1 AND
        (b.descripcion ilike '%GESTION ADMINISTRATIVA - 450.000%') AND 
        fb.id_funcionario= f.id_funcionario 
   ),0)
) as ga450_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION ADMINISTRATIVA - 700.000
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
        LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
        LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
        LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
        pb.id_mes=in_id_mes AND
        pb.gestion=in_gestion AND 
        pb.estado=1 AND
        (b.descripcion ilike '%GESTION ADMINISTRATIVA - 700.000%') AND 
        fb.id_funcionario= f.id_funcionario 
   ),0)
) as ga700_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION PRESUPUESTARIA 20% SP
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
	LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
	LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
	pb.id_administracion=in_id_administracion AND 
	pb.id_mes=in_id_mes AND
	pb.gestion=in_gestion AND 
	pb.estado=1 AND
	(b.descripcion ilike '%GESTION PRESUPUESTARIA 20% SP%') AND 
        fb.id_funcionario= f.id_funcionario 
   ),0)
) as gp20_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION PRESUPUESTARIA 40% (SP + GR)
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
	LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
	LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
	pb.id_administracion=in_id_administracion AND 
	pb.id_mes=in_id_mes AND
	pb.gestion=in_gestion AND 
	pb.estado=1 AND
	(b.descripcion ilike '%GESTION PRESUPUESTARIA 40% (SP + GR)%') AND 
        fb.id_funcionario= f.id_funcionario  
   ),0)
) as gp40_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION PRESUPUESTARIA - 550.000
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
	LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
	LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
	pb.id_mes=in_id_mes AND
	pb.gestion=in_gestion AND 
	pb.estado=1 AND
	(b.descripcion ilike '%GESTION PRESUPUESTARIA - 550.000%') AND 
        fb.id_funcionario= f.id_funcionario  
   ),0)
) as gp550_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION PRESUPUESTARIA - 700.000
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
	LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
	LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
	pb.id_administracion=in_id_administracion AND 
	pb.id_mes=in_id_mes AND
	pb.gestion=in_gestion AND 
	pb.estado=1 AND
	(b.descripcion ilike '%GESTION PRESUPUESTARIA - 700.000%') AND 
        fb.id_funcionario= f.id_funcionario  
   ),0)
) as gp700_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION PRESUPUESTARIA - 700.000
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
	LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
	LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
	pb.id_administracion=in_id_administracion AND 
	pb.id_mes=in_id_mes AND
	pb.gestion=in_gestion AND 
	pb.estado=1 AND
	(b.descripcion ilike '%INSALUBRIDAD%') AND 
        fb.id_funcionario= f.id_funcionario    
   ),0)
) as insal_133_fun,
(
--BONIFICACIONES Y GRATIFICACIONES [133] RESPONSABILIDAD
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
        LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
        LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
        LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
        pb.id_mes=in_id_mes AND
        pb.gestion=in_gestion AND 
        pb.estado=1 AND 
        (b.descripcion ilike '%ABOGADO FISCAL%' OR b.descripcion ilike '%RESPONSABILIDAD EN EL CARGO 80% (SP + GR)%') AND 
        fb.id_funcionario= f.id_funcionario
        ),0)
) as resp_133_fun,
 (
--ANTIGUEDAD [133]
  COALESCE(
  (
 SELECT
   dpa.importe_antiguedad::integer as importe
 FROM salarios.planillas_antiguedad pa
 LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad 
 WHERE
   pa.id_administracion=in_id_administracion AND 
   pa.id_mes=in_id_mes AND
   pa.gestion=in_gestion AND 
   pa.estado=1 AND 
   dpa.id_funcionario=f.id_funcionario
     ),0)
 ) as anti_133_fun,
 (
 --GRADO ACADEMICO [133]
   COALESCE(
  (
 SELECT
   dpp.importe_profesional::integer as importe
 FROM salarios.planilla_profesionales pp
 LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional 
 LEFT JOIN salarios.funcionarios_profesionales       fp ON  fp.id_funcionario_profesional=dpp.id_funcionario_profesional
 WHERE
   pp.id_administracion=in_id_administracion AND 
   pp.id_mes=in_id_mes AND
   pp.gestion=in_gestion AND 
   pp.estado=1 AND 
   fp.id_funcionario=f.id_funcionario
     ),0)
 ) as grad_133_fun,
 (
--GRATIFICACION ESPECIAL [137]
  COALESCE(
  (
 (
  SELECT
   sum(ge.importe) as importe
  FROM
  (
   SELECT
    dpge.importe_gratificacion::integer as importe,  
    (row_number() over())+120 as linea
   FROM salarios.planilla_gratificacion_especial pge
   LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge ON dpge.id_planilla_gratificacion=pge.id_planilla_gratificacion
   WHERE
     pge.id_administracion=in_id_administracion AND 
     pge.id_mes=in_id_mes AND
     pge.gestion=in_gestion AND 
     pge.estado=1 AND 
     dpge.id_funcionario=f.id_funcionario
  ) ge)
    ),0)
 ) as gesp_137_fun,
 (
 --GRATIFICACION OCASIONAL [133]
   COALESCE(
  (
 SELECT
   dpgo.importe_gratificacion::integer as importe
 FROM salarios.planilla_gratificacion_ocacional pgo
 LEFT JOIN salarios.detalle_planilla_gratificacion_ocacional dpgo ON dpgo.id_planilla_gratificacion_ocacional=pgo.id_planilla_gratificacion_ocacional 
 WHERE
    pgo.id_administracion=in_id_administracion AND 
    pgo.id_mes=in_id_mes AND
    pgo.gestion=in_gestion AND 
    pgo.estado=1 AND 
    dpgo.id_funcionario=f.id_funcionario
      ),0)
 ) as goca_133_fun,
 (
 --OTRAS TRANSFERENCIAS CORRIENTES [849]
   COALESCE(
  (
 SELECT 
   sum(otc.importe_gratificacion_otra_transferencia_cte::integer) as importe
 FROM
 (SELECT
   14 as orden,
   potcd.importe_otra_transferencia_cte::integer as monto_liquido,
   potcd.importe_otra_transferencia_cte::integer as importe_gratificacion_otra_transferencia_cte,  
   0 as importe_aporte_gratificacion,
   (row_number() over())+140 as linea
 FROM salarios.planillas_otras_transferencias_ctes potc
 LEFT JOIN salarios.planillas_otras_transferencias_ctes_detalles potcd ON potcd.id_planilla_otra_transferencia_cte=potc.id_planilla_otra_transferencia_cte
 WHERE
   potc.id_administracion=in_id_administracion AND 
   potc.id_mes=in_id_mes AND
   potc.gestion=in_gestion AND 
   potc.estado=1 AND 
   potcd.id_funcionario=f.id_funcionario
 ) otc
   ),0)
 ) as otc_849_fun,
(
--SUBSIDIOS [131]
  COALESCE(
  (
SELECT
  sum(dps.importe_monto::integer) as importe
FROM salarios.planillas_subsidios ps
LEFT JOIN salarios.detalles_planillas_subsidios dps ON dps.id_planilla_subsidio=ps.id_planilla_subsidio 
LEFT JOIN salarios.funcionarios_subsidios       fsu ON fsu.id_funcionario_subsidio=dps.id_funcionario_subsidio
LEFT JOIN salarios.subsidios 		        sub ON sub.id_subsidio=fsu.id_subsidio
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.estado=1 AND 
   fsu.id_funcionario=f.id_funcionario
     ),0)
) as subs_131_fun,
 
 (
--REMUNERACION EXTRAORDINARIA [123]
  COALESCE(
  (
  SELECT 
    sum(re.monto)::integer as importe
  FROM
  (SELECT
    dpre.monto::integer as monto,   
    (row_number() over())+160 as linea
  FROM salarios.planillas_re pre
  LEFT JOIN salarios.detalles_planillas_re dpre ON dpre.id_planilla_re=pre.id_planilla_re
  WHERE
    pre.id_administracion=in_id_administracion AND 
    pre.id_mes=in_id_mes AND
    pre.gestion=in_gestion AND 
    pre.estado=1 AND 
    dpre.id_funcionario=f.id_funcionario
  ) re
  ),0)
  ) as rext_123_fun,
  (
  --REMUNERACION ADICIONAL [125]
  COALESCE(
  (
  SELECT 
   sum(ra.monto)::integer as importea
  FROM
   (SELECT
    17 as orden,
    dpra.cantidad_horas,  
    dpra.monto::integer as monto,
    '0'::text as descuento,   
    dpra.aporte::integer as aporte, 
    (row_number() over())+170 as linea
  FROM salarios.planillas_ra pra
  LEFT JOIN salarios.detalles_planillas_ra dpra ON dpra.id_planilla_ra=pra.id_planilla_ra
  WHERE
   pra.id_administracion=in_id_administracion AND 
   pra.id_mes=in_id_mes AND
   pra.gestion=in_gestion AND 
   pra.estado=1 AND 
   dpra.id_funcionario=f.id_funcionario
  ) ra
  ),0)
  ) as radi_125_fun
FROM 
  salarios.funcionarios_categorias fc
  LEFT JOIN salarios.detalles_categorias dc             ON dc.id_detalle_categoria=fc.id_detalle_categoria
  LEFT JOIN salarios.categorias cat                     ON cat.id_categoria=dc.id_categoria
  LEFT JOIN salarios.cargos car                         ON car.id_cargo=cat.id_cargo
  LEFT JOIN salarios.categoria_importe_mensual cim      ON cim.id_categoria=cat.id_categoria AND cim.id_mes = in_id_mes -- id_mes
  LEFT JOIN legajos.funcionarios f                      ON f.id_funcionario=fc.id_funcionario
  --LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f.id_funcionario
  LEFT JOIN legajos.oficinas_con_descripciones      ocd ON ocd.id_oficina=fc.id_oficina 
WHERE
  fc.gestion=in_gestion AND
  fc.id_funcionario_categoria in (SELECT x.id_funcionario_categoria
						 FROM salarios.funcionarios_categorias x
						 WHERE (in_id_mes BETWEEN  extract(MONTH from x.desde) AND
							extract(MONTH from x.hasta-1) OR x.hasta is null) AND 
							x.gestion=fc.gestion AND 
							x.id_funcionario = fc.id_funcionario AND
							(
							     CASE
								WHEN 
								   in_id_funcionario='0'
								THEN
								   fc.id_funcionario>0
								ELSE
								   fc.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
							     END  
							)
					        ORDER BY x.id_funcionario_categoria LIMIT 1) AND
  
--  fc.hasta is null AND
--  f.estado_funcionario AND
  f.id_administracion IN (0,in_id_administracion) AND
  cat.id_cargo>0 AND
  (
     CASE
        WHEN 
	   char_length(in_id_funcionario)>1 
        THEN 
	   f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
        ELSE
	   f.id_funcionario>0
     END  
   )
--   AND
--   f.id_funcionario IN(466,218,2891,481,223,278,2987,305)
--  f.id_funcionario NOT IN(1721,1789,1720,1122,1344,1415,1790)
ORDER BY f.ape_nom_funcionario
) cgr
) cgr2
WHERE
cgr2.total>0;

END;
]]></definition>
</function>

<function name="cgr_informe_liquidaciones_permanentes_integral"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="apellido">
		<type name="text"/>
	</parameter>
	<parameter name="nombre">
		<type name="text"/>
	</parameter>
	<parameter name="tipo">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="n1">
		<type name="integer"/>
	</parameter>
	<parameter name="n2">
		<type name="integer"/>
	</parameter>
	<parameter name="n3">
		<type name="integer"/>
	</parameter>
	<parameter name="n4">
		<type name="integer"/>
	</parameter>
	<parameter name="n5">
		<type name="integer"/>
	</parameter>
	<parameter name="oficina">
		<type name="text"/>
	</parameter>
	<parameter name="dias_trabajados_111">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_111">
		<type name="numeric"/>
	</parameter>
	<parameter name="devengado_111">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_111">
		<type name="numeric"/>
	</parameter>
	<parameter name="multa_111">
		<type name="numeric"/>
	</parameter>
	<parameter name="descuentos_111">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_111">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados_113">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_113">
		<type name="numeric"/>
	</parameter>
	<parameter name="devengado_113">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_113">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_113">
		<type name="numeric"/>
	</parameter>
	<parameter name="horas_123">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_123">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_123">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_123">
		<type name="numeric"/>
	</parameter>
	<parameter name="horas_125">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_125">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_125">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_125">
		<type name="numeric"/>
	</parameter>
	<parameter name="cantidad_131">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_131">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_131">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_131">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_1">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_1">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_1">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_2">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_2">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_2">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_3">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_3">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_3">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_4">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_4">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_4">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_5">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_5">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_5">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_6">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_6">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_6">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_7">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_7">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_7">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_8">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_8">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_8">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_9">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_9">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_9">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_10">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_10">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_10">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_11">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_11">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_11">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_12">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_12">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_12">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_13">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_13">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_13">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_14">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_14">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_14">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_15">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_15">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_15">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_16">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_16">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_16">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_17">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_17">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_17">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_18">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_18">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_18">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_19">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_19">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_19">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_20">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_20">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_20">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_21">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_21">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_21">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_22">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_22">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_22">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_23">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_23">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_23">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_24">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_24">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_24">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_25">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_25">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_25">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados_133_26">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_133_26">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_26">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_26">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados_133_27">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_133_27">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_27">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_27">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_133_28">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_133_28">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_133_28">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados_137">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_137">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_137">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_137">
		<type name="numeric"/>
	</parameter>
	<parameter name="cargo_199_ds">
		<type name="numeric"/>
	</parameter>
	<parameter name="categoria_199_ds">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_199_ds">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_199_ds">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_199_ds">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_199_opp">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_199_opp">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_199_opp">
		<type name="numeric"/>
	</parameter>
	<parameter name="pre_aviso_845">
		<type name="numeric"/>
	</parameter>
	<parameter name="indemnizacion_845">
		<type name="numeric"/>
	</parameter>
	<parameter name="vacaciones_845">
		<type name="numeric"/>
	</parameter>
	<parameter name="aguinaldo_845">
		<type name="numeric"/>
	</parameter>
	<parameter name="descuento_845">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido_845">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_849">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado detallado de las liquidaciones de los funcionarios permanentes/comisionados
  * por administracion, mes, gestion y/o id_funcionario
  * Creado    : 2015-08-28 08:46:00
  * Modificado: 2015-09-02 15:15:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado 
  * 	       in_id_funcionario    '0':todos '466,481,...':ids_funcionarios específicos
  * Descripcion:  Listado de pagos realizados a los funcionarios permanentes/comisionados"
  * ------------  
  */
RETURN QUERY
SELECT
   -- DATOS FUNCIONARIOS
   fun.id_funcionario,
   fun.cedula_funcionario::text,
   fun.apellido_funcionario::text,
   fun.nombre_funcionario::text,
   (CASE WHEN c.es_comisionado THEN 'COM' ELSE 'PER' END)::text as tipo,
   c.nombre_categoria::text,
   car.nombre_cargo::text,
   o.nivel1 as n1,
   o.nivel2 as n2,
   o.nivel3 as n3,
   o.nivel4 as n4,
   o.nivel5 as n5,
   o.nombre::text,
   
   -- [111] SALARIOS
   COALESCE(salarios.dias_trabajados,0)::int as dias_trabajados_111,
   COALESCE(salarios.presupuestado,0) as presupuestado_111,
   COALESCE(salarios.devengado,0) as devengado_111, 
   COALESCE(salarios.aporte,0) as aporte_111, 
   COALESCE(salarios.multa,0) as multa_111, 
   COALESCE(salarios.descuentos,0) as descuentos_111,
   COALESCE(salarios.liquido,0) as liquido_111,
   
   -- [113] GASTO DE REPRESENTACION
   COALESCE(gasto_representacion.dias_trabajados,0)::int as dias_trabajados_113,
   COALESCE(gasto_representacion.presupuestado,0) as presupuestado_113,
   COALESCE(gasto_representacion.devengado,0) as devengado_113, 
   COALESCE(gasto_representacion.aporte,0) as aporte_113, 
   COALESCE(gasto_representacion.liquido,0) as liquido_113,
   
   -- [123] REMUNERACION EXTRAORDINARIA (RE)
   COALESCE(re.horas,0)::int as horas_123,
   COALESCE(re.monto,0) as monto_123, 
   COALESCE(re.aporte,0) as aporte_123, 
   COALESCE(re.liquido,0) as liquido_123,
   
   -- [125] REMUNERACION ADICIONAL (RA)
   COALESCE(ra.horas,0)::int as horas_125,
   COALESCE(ra.monto,0) as monto_125, 
   COALESCE(ra.aporte,0) as aporte_125, 
   COALESCE(ra.liquido,0) as liquido_125,
   
   -- [131] SUBSIDIO
   COALESCE(subsidio.cantidad,0)::int as cantidad_131,
   COALESCE(subsidio.monto,0) as monto_131, 
   COALESCE(subsidio.aporte,0) as aporte_131, 
   COALESCE(subsidio.liquido,0) as liquido_131,
   -- ==========================================================
   -- [133] GRATIFICACIONES Y BONIFICACIONES: ABOGADO FISCAL (1)
   COALESCE(bg_abogado_fiscal.monto,0) as monto_133_1,
   COALESCE(bg_abogado_fiscal.aporte,0) as aporte_133_1,
   COALESCE(bg_abogado_fiscal.liquido,0) as liquido_133_1,
   
   -- [133] GRATIFICACIONES Y BONIFICACIONES: ABOGADO FISCAL 11% (2)
   COALESCE(bg_abogado_fiscal_11.monto,0) as monto_133_2,
   COALESCE(bg_abogado_fiscal_11.aporte,0) as aporte_133_2,
   COALESCE(bg_abogado_fiscal_11.liquido,0) as liquido_133_2,
      
   -- [133] GRATIFICACIONES Y BONIFICACIONES: BONIFICACION POR RESPONSABILIDAD EN EL CARGO 11% (3)
   COALESCE(bg_responsabilidad_cargo_11.monto,0) as monto_133_3,
   COALESCE(bg_responsabilidad_cargo_11.aporte,0) as aporte_133_3,
   COALESCE(bg_responsabilidad_cargo_11.liquido,0) as liquido_133_3,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: BONIFICACION POR RESPONSABILIDAD EN EL CARGO 30% (4)
   COALESCE(bg_responsabilidad_cargo_30.monto,0) as monto_133_4,
   COALESCE(bg_responsabilidad_cargo_30.aporte,0) as aporte_133_4,
   COALESCE(bg_responsabilidad_cargo_30.liquido,0) as liquido_133_4, 
   
   -- [133] GRATIFICACIONES Y BONIFICACIONES: BONIFICACION POR RESPONSABILIDAD EN EL CARGO 6% (5)
   COALESCE(bg_responsabilidad_cargo_6.monto,0) as monto_133_5,
   COALESCE(bg_responsabilidad_cargo_6.aporte,0) as aporte_133_5,
   COALESCE(bg_responsabilidad_cargo_6.liquido,0) as liquido_133_5,  

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION ADMINISTRATIVA 20% SP (6)
   COALESCE(bg_gestion_administrativa_20_sp.monto,0) as monto_133_6,
   COALESCE(bg_gestion_administrativa_20_sp.aporte,0) as aporte_133_6,
   COALESCE(bg_gestion_administrativa_20_sp.liquido,0) as liquido_133_6,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION ADMINISTRATIVA 40% (SP + GR) (7)
   COALESCE(bg_gestion_administrativa_40_sp_gr.monto,0) as monto_133_7,
   COALESCE(bg_gestion_administrativa_40_sp_gr.aporte,0) as aporte_133_7,
   COALESCE(bg_gestion_administrativa_40_sp_gr.liquido,0) as liquido_133_7,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION ADMINISTRATIVA - 450.000 (8)
   COALESCE(bg_gestion_administrativa_450000.monto,0) as monto_133_8,
   COALESCE(bg_gestion_administrativa_450000.aporte,0) as aporte_133_8,
   COALESCE(bg_gestion_administrativa_450000.liquido,0) as liquido_133_8,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION ADMINISTRATIVA - 700.000 (9)
   COALESCE(bg_gestion_administrativa_700000.monto,0) as monto_133_9,
   COALESCE(bg_gestion_administrativa_700000.aporte,0) as aporte_133_9,
   COALESCE(bg_gestion_administrativa_700000.liquido,0) as liquido_133_9,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA (10)
   COALESCE(bg_gestion_presupuestaria.monto,0) as monto_133_10,
   COALESCE(bg_gestion_presupuestaria.aporte,0) as aporte_133_10,
   COALESCE(bg_gestion_presupuestaria.liquido,0) as liquido_133_10,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA 20% SP (11)
   COALESCE(bg_gestion_presupuestaria_20_sp.monto,0) as monto_133_11,
   COALESCE(bg_gestion_presupuestaria_20_sp.aporte,0) as aporte_133_11,
   COALESCE(bg_gestion_presupuestaria_20_sp.liquido,0) as liquido_133_11,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA 40% (SP + GR) (12)
   COALESCE(bg_gestion_presupuestaria_40_sp_gr.monto,0) as monto_133_12,
   COALESCE(bg_gestion_presupuestaria_40_sp_gr.aporte,0) as aporte_133_12,
   COALESCE(bg_gestion_presupuestaria_40_sp_gr.liquido,0) as liquido_133_12,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA - 500.000 (13)
   COALESCE(bg_gestion_presupuestaria_500000.monto,0) as monto_133_13,
   COALESCE(bg_gestion_presupuestaria_500000.aporte,0) as aporte_133_13,
   COALESCE(bg_gestion_presupuestaria_500000.liquido,0) as liquido_133_13,   
   
   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA - 550.000 (14)
   COALESCE(bg_gestion_presupuestaria_550000.monto,0) as monto_133_14,
   COALESCE(bg_gestion_presupuestaria_550000.aporte,0) as aporte_133_14,
   COALESCE(bg_gestion_presupuestaria_550000.liquido,0) as liquido_133_14, 

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA - 700.000 (15)
   COALESCE(bg_gestion_presupuestaria_700000.monto,0) as monto_133_15,
   COALESCE(bg_gestion_presupuestaria_700000.aporte,0) as aporte_133_15,
   COALESCE(bg_gestion_presupuestaria_700000.liquido,0) as liquido_133_15,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: INSALUBRIDAD (16)
   COALESCE(bg_insalubridad.monto,0) as monto_133_16,
   COALESCE(bg_insalubridad.aporte,0) as aporte_133_16,
   COALESCE(bg_insalubridad.liquido,0) as liquido_133_16,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 11% (17)
   COALESCE(bg_ordenador_gasto_11.monto,0) as monto_133_17,
   COALESCE(bg_ordenador_gasto_11.aporte,0) as aporte_133_17,
   COALESCE(bg_ordenador_gasto_11.liquido,0) as liquido_133_17,  

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 24% (18)
   COALESCE(bg_ordenador_gasto_24.monto,0) as monto_133_18,
   COALESCE(bg_ordenador_gasto_24.aporte,0) as aporte_133_18,
   COALESCE(bg_ordenador_gasto_24.liquido,0) as liquido_133_18, 

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 25% (19)
   COALESCE(bg_ordenador_gasto_25.monto,0) as monto_133_19,
   COALESCE(bg_ordenador_gasto_25.aporte,0) as aporte_133_19,
   COALESCE(bg_ordenador_gasto_25.liquido,0) as liquido_133_19,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 30% (20)
   COALESCE(bg_ordenador_gasto_30.monto,0) as monto_133_20,
   COALESCE(bg_ordenador_gasto_30.aporte,0) as aporte_133_20,
   COALESCE(bg_ordenador_gasto_30.liquido,0) as liquido_133_20,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 31% (21)
   COALESCE(bg_ordenador_gasto_31.monto,0) as monto_133_21,
   COALESCE(bg_ordenador_gasto_31.aporte,0) as aporte_133_21,
   COALESCE(bg_ordenador_gasto_31.liquido,0) as liquido_133_21,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 35% (22)
   COALESCE(bg_ordenador_gasto_35.monto,0) as monto_133_22,
   COALESCE(bg_ordenador_gasto_35.aporte,0) as aporte_133_22,
   COALESCE(bg_ordenador_gasto_35.liquido,0) as liquido_133_22,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 40% (23)
   COALESCE(bg_ordenador_gasto_40.monto,0) as monto_133_23,
   COALESCE(bg_ordenador_gasto_40.aporte,0) as aporte_133_23,
   COALESCE(bg_ordenador_gasto_40.liquido,0) as liquido_133_23,   

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 5% (24)
   COALESCE(bg_ordenador_gasto_5.monto,0) as monto_133_24,
   COALESCE(bg_ordenador_gasto_5.aporte,0) as aporte_133_24,
   COALESCE(bg_ordenador_gasto_5.liquido,0) as liquido_133_24,  

   -- [133] GRATIFICACIONES Y BONIFICACIONES: RESPONSABILIDAD EN EL CARGO 80% (SP + GR) (25)
   COALESCE(bg_responsabilidad_cargo_80_sp_gr.monto,0) as monto_133_25,
   COALESCE(bg_responsabilidad_cargo_80_sp_gr.aporte,0) as aporte_133_25,
   COALESCE(bg_responsabilidad_cargo_80_sp_gr.liquido,0) as liquido_133_25,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GRADO ACADEMICO (26)
   COALESCE(bg_grado_academico.dias_trabajados,0) as dias_trabajados_133_26,
   COALESCE(bg_grado_academico.monto,0) as monto_133_26,
   COALESCE(bg_grado_academico.aporte,0) as aporte_133_26,
   COALESCE(bg_grado_academico.liquido,0) as liquido_133_26,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ANTIGUEDAD (27)
   COALESCE(bg_antiguedad.dias_trabajados,0) as dias_trabajados_133_27,
   COALESCE(bg_antiguedad.monto,0) as monto_133_27,
   COALESCE(bg_antiguedad.aporte,0) as aporte_133_27,
   COALESCE(bg_antiguedad.liquido,0) as liquido_133_27,

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GRATIFICACION OCASIONAL (28)
   COALESCE(bg_ocasional.monto,0) as monto_133_28,
   COALESCE(bg_ocasional.aporte,0) as aporte_133_28,
   COALESCE(bg_ocasional.liquido,0) as liquido_133_28,

   -- ==========================================================
   
   -- [137] GRATIFICACION POR SERVICIOS ESPECIALES 
   COALESCE(gratificacion_especial.dias_trabajados,0)::int as dias_trabajados_137,
   COALESCE(gratificacion_especial.monto,0) as monto_137, 
   COALESCE(gratificacion_especial.aporte,0) as aporte_137, 
   COALESCE(gratificacion_especial.liquido,0) as liquido_137,

   -- [199] DIFERENCIA SALARIAL 
   COALESCE(diferencia_salarial.cargo,0) as cargo_199_ds,
   COALESCE(diferencia_salarial.categoria,0) as categoria_199_ds,
   COALESCE(diferencia_salarial.monto,0) as monto_199_ds, 
   COALESCE(diferencia_salarial.aporte,0) as aporte_199_ds, 
   COALESCE(diferencia_salarial.liquido,0) as liquido_199_ds,
   
   -- [199] OTROS PAGOS DEL PERSONAL 
   COALESCE(otros_pagos_del_personal.monto,0) as monto_199_opp, 
   COALESCE(otros_pagos_del_personal.aporte,0) as aporte_199_opp, 
   COALESCE(otros_pagos_del_personal.liquido,0) as liquido_199_opp,
   
   -- [845] RETIROS VOLUNTARIOS 
   COALESCE(retiro_voluntario.pre_aviso,0) as pre_aviso_845,
   COALESCE(retiro_voluntario.indemnizacion,0) as indemnizacion_845,
   COALESCE(retiro_voluntario.vacaciones,0) as vacaciones_845,
   COALESCE(retiro_voluntario.aguinaldo,0) as aguinaldo_845,
   COALESCE(retiro_voluntario.descuento,0) as descuento_845,
   COALESCE(retiro_voluntario.liquido,0) as liquido_845, 
      
   -- [849] OTRAS TRNAFERENCIAS CORRIENTES 
   COALESCE(otras_transferencias_ctes.monto,0) as monto_849    
         
FROM
   legajos.funcionarios fun 
   -- [111] SALARIOS 
   LEFT JOIN (
   SELECT 
      dps.id_funcionario, 
      sum(dps.dias_trabajados) as dias_trabajados, 
      max(dps.monto_presupuestado)::numeric(12,0) as presupuestado,
      sum(dps.monto_devengado)::numeric(12,0) as devengado, 
      sum(dps.monto_aporte)::numeric(12,0) as aporte, 
      sum(dps.monto_multa)::numeric(12,0) as multa, 
      sum(dps.importe_descuentos_varios_aplicado)::numeric(12,0) as descuentos,
      trunc(sum(dps.importe_liquido_con_descuentos_varios))::numeric(12,0) as liquido
   FROM 
      salarios.detalles_planillas_salarios dps
      LEFT JOIN salarios.planillas_salarios ps ON ps.id_planilla_salario=dps.id_planilla_salario
   WHERE
      ps.id_estado=1 AND
      ps.id_administracion=in_id_administracion AND
      ps.gestion=in_gestion AND
      ps.id_mes=in_id_mes
   GROUP BY
      dps.id_funcionario
   ) salarios ON salarios.id_funcionario=fun.id_funcionario

   -- [113] GASTOS DE REPRESENTACION
   LEFT JOIN (
   SELECT 
      fr.id_funcionario,
      sum(pgrd.dias) as dias_trabajados,
      max(pgrd.presupuestado_parcial)::numeric(12,0) as presupuestado,
      sum(pgrd.devengado_parcial)::numeric(12,0) as devengado,
      sum(pgrd.aporte)::numeric(12,0) as aporte,
      (sum(pgrd.devengado_parcial)-sum(pgrd.aporte))::numeric(12,0) as liquido
   FROM 
      salarios.planilla_gasto_representacion_detalle pgrd
      LEFT JOIN salarios.planilla_gasto_representacion pgr ON pgr.id_planilla_gasto_representacion=pgrd.id_planilla_gasto_representacion
      LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
   WHERE
      pgr.estado=1 AND
      pgr.id_administracion=in_id_administracion AND
      pgr.gestion=in_gestion AND
      pgr.id_mes=in_id_mes
   GROUP BY
      fr.id_funcionario
   ) gasto_representacion ON gasto_representacion.id_funcionario=fun.id_funcionario

   -- [123] REMUNERACION EXTRAORDINARIA (RE) 
   LEFT JOIN (
   SELECT 
      dpre.id_funcionario, 
      sum(dpre.cantidad_horas)::numeric(12,0) as horas, 
      sum(dpre.monto)::numeric(12,0) as monto, 
      sum(dpre.aporte)::numeric(12,0) as aporte,
      (sum(dpre.monto)::numeric(12,0)-sum(dpre.aporte)::numeric(12,0))::numeric(12,0) as liquido
   FROM 
      salarios.detalles_planillas_re dpre
      LEFT JOIN salarios.planillas_re pre ON pre.id_planilla_re=dpre.id_planilla_re
   WHERE
      pre.estado=1 AND
      pre.id_administracion=in_id_administracion AND
      pre.gestion=in_gestion AND
      pre.id_mes=in_id_mes
   GROUP BY
      dpre.id_funcionario
   ) re ON re.id_funcionario=fun.id_funcionario

   -- [125] REMUNERACION ADICIONAL (RA) 
   LEFT JOIN (
   SELECT 
      dpra.id_funcionario, 
      sum(dpra.cantidad_horas)::numeric(12,0) as horas, 
      sum(dpra.monto)::numeric(12,0) as monto, 
      sum(dpra.aporte)::numeric(12,0) as aporte,
      (sum(dpra.monto)::numeric(12,0)-sum(dpra.aporte)::numeric(12,0))::numeric(12,0) as liquido
   FROM 
      salarios.detalles_planillas_ra dpra
      LEFT JOIN salarios.planillas_ra pra ON pra.id_planilla_ra=dpra.id_planilla_ra
   WHERE
      pra.estado=1 AND
      pra.id_administracion=in_id_administracion AND
      pra.gestion=in_gestion AND
      pra.id_mes=in_id_mes
   GROUP BY
      dpra.id_funcionario
   ) ra ON ra.id_funcionario=fun.id_funcionario

   -- [131] SUBSIDIO FAMILIAR 
   LEFT JOIN (
   SELECT 
      fs.id_funcionario, 
      sum(dps.cantidad)::numeric(12,0) as cantidad, 
      sum(dps.importe_monto)::numeric(12,0) as monto, 
      sum(dps.aporte)::numeric(12,0) as aporte,
      (sum(dps.importe_monto)::numeric(12,0)-sum(dps.aporte)::numeric(12,0))::numeric(12,0) as liquido
   FROM 
      salarios.detalles_planillas_subsidios dps
      LEFT JOIN salarios.planillas_subsidios ps ON ps.id_planilla_subsidio=dps.id_planilla_subsidio
      LEFT JOIN salarios.funcionarios_subsidios fs ON fs.id_funcionario_subsidio=dps.id_funcionario_subsidio
   WHERE
      ps.estado=1 AND
      ps.id_administracion=in_id_administracion AND
      ps.gestion=in_gestion AND
      ps.id_mes=in_id_mes
   GROUP BY
      fs.id_funcionario
   ) subsidio ON subsidio.id_funcionario=fun.id_funcionario

   -- [137] GRATIFICACION POR SERVICIOS ESPECIALES 
   LEFT JOIN (
   SELECT 
      dpge.id_funcionario, 
      sum(dpge.dias_trabajados)::numeric(12,0) as dias_trabajados, 
      sum(dpge.importe_gratificacion)::numeric(12,0) as monto, 
      sum(dpge.importe_aporte)::numeric(12,0) as aporte,
      (sum(dpge.importe_gratificacion)::numeric(12,0)-sum(dpge.importe_aporte)::numeric(12,0))::numeric(12,0) as liquido
   FROM 
      salarios.detalle_planilla_gratificacion_especial dpge
      LEFT JOIN salarios.planilla_gratificacion_especial pge ON pge.id_planilla_gratificacion=dpge.id_planilla_gratificacion
   WHERE
      pge.estado=1 AND
      pge.id_administracion=in_id_administracion AND
      pge.gestion=in_gestion AND
      pge.id_mes=in_id_mes
   GROUP BY
      dpge.id_funcionario
   ) gratificacion_especial ON gratificacion_especial.id_funcionario=fun.id_funcionario

   -- [199] DIFERENCIA SALARIAL 
   LEFT JOIN (
   SELECT 
      fsp.id_funcionario,
      sum(pdsd.importe_monto_cargo)::numeric(12,0) as cargo,
      sum(pdsd.importe_monto_categoria)::numeric(12,0) as categoria,
      sum(pdsd.importe_monto_diferencia)::numeric(12,0) as monto, 
      sum(pdsd.importe_monto_aporte)::numeric(12,0) as aporte,
      (sum(pdsd.importe_monto_diferencia)::numeric(12,0)-sum(pdsd.importe_monto_aporte)::numeric(12,0))::numeric(12,0) as liquido
   FROM 
      salarios.planilla_diferencia_salarial_detalle pdsd
      LEFT JOIN salarios.planilla_diferencia_salarial pds ON pds.id_planilla_diferencia_salarial=pdsd.id_planilla_diferencia_salarial
      LEFT JOIN salarios.funcionarios_superiores fsp ON fsp.id_funcionario_superior=pdsd.id_funcionario_superior
   WHERE
      pds.estado=1 AND
      pds.id_administracion=in_id_administracion AND
      pds.gestion=in_gestion AND
      pds.id_mes=in_id_mes AND
      pdsd.id_funcionario_superior IS NOT NULL
   GROUP BY
      fsp.id_funcionario
   ) diferencia_salarial ON diferencia_salarial.id_funcionario=fun.id_funcionario  

   -- [199] OTROS GASTOS DEL PERSONAL 
   LEFT JOIN (
   SELECT 
      pdsd.id_funcionario,
      sum(pdsd.importe_monto_diferencia)::numeric(12,0) as monto, 
      sum(pdsd.importe_monto_aporte)::numeric(12,0) as aporte,
      (sum(pdsd.importe_monto_diferencia)::numeric(12,0)-sum(pdsd.importe_monto_aporte)::numeric(12,0))::numeric(12,0) as liquido
   FROM 
      salarios.planilla_diferencia_salarial_detalle pdsd
      LEFT JOIN salarios.planilla_diferencia_salarial pds ON pds.id_planilla_diferencia_salarial=pdsd.id_planilla_diferencia_salarial
   WHERE
      pds.estado=1 AND
      pds.id_administracion=in_id_administracion AND
      pds.gestion=in_gestion AND
      pds.id_mes=in_id_mes AND
      pdsd.id_funcionario_superior IS NULL
   GROUP BY
      pdsd.id_funcionario
   ) otros_pagos_del_personal ON otros_pagos_del_personal.id_funcionario=fun.id_funcionario

   -- [845] RETIRO VOLUNTARIO 
   LEFT JOIN (
   SELECT 
      rvpd.id_funcionario,
      sum(rvpd.item_c_monto_pre_aviso)::numeric(12,0) as pre_aviso,
      sum(rvpd.item_d_monto_indemnizacion)::numeric(12,0) as indemnizacion,
      sum(rvpd.item_e_monto_vacaciones)::numeric(12,0) as vacaciones,
      sum(rvpd.item_f_monto_aguinaldo)::numeric(12,0) as aguinaldo,
      sum(descuentos_rv.descuento)::numeric(12,0) as descuento,
      (
      sum(rvpd.item_c_monto_pre_aviso)+
      sum(rvpd.item_d_monto_indemnizacion)+
      sum(rvpd.item_e_monto_vacaciones)+
      sum(rvpd.item_f_monto_aguinaldo)-
      COALESCE(sum(descuentos_rv.descuento),0)
      )::numeric(12,0) as liquido
   FROM 
      salarios.retiros_voluntarios_planillas_detalles rvpd
      LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
      LEFT JOIN (
	SELECT 
	   id_retiro_voluntario_planilla_detalle, 
	   sum(monto_descuento) as descuento
	FROM 
	   salarios.retiros_voluntarios_planillas_detalles_descuentos
	GROUP BY
           id_retiro_voluntario_planilla_detalle
      ) descuentos_rv ON descuentos_rv.id_retiro_voluntario_planilla_detalle=rvpd.id_retiro_voluntario_planilla_detalle
   WHERE
      rvp.id_estado=1 AND
      rvp.id_administracion=in_id_administracion AND
      rvp.gestion_retiro=in_gestion AND
      rvp.id_mes_retiro=in_id_mes
   GROUP BY
      rvpd.id_funcionario
   ) retiro_voluntario ON retiro_voluntario.id_funcionario=fun.id_funcionario

   -- [849] OTRAS TRANFERENCIAS CORRIENTES 
   LEFT JOIN (
   SELECT 
      potcd.id_funcionario,  
      sum(potcd.importe_otra_transferencia_cte)::numeric(12,0) as monto
   FROM 
      salarios.planillas_otras_transferencias_ctes_detalles potcd
      LEFT JOIN salarios.planillas_otras_transferencias_ctes potc ON potc.id_planilla_otra_transferencia_cte=potcd.id_planilla_otra_transferencia_cte
   WHERE
      potc.estado=1 AND
      potc.id_administracion=in_id_administracion AND
      potc.gestion=in_gestion AND
      potc.id_mes=in_id_mes
   GROUP BY
      potcd.id_funcionario
   ) otras_transferencias_ctes ON otras_transferencias_ctes.id_funcionario=fun.id_funcionario
   
   -- [133] GRATIFICACIONES Y BONIFICACIONES: ABOGADO FISCAL (1)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike 'ABOGADO FISCAL'
   GROUP BY
      fb.id_funcionario
   ) bg_abogado_fiscal ON bg_abogado_fiscal.id_funcionario=fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ABOGADO FISCAL (2)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%ABOGADO FISCAL 11þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_abogado_fiscal_11 ON bg_abogado_fiscal_11.id_funcionario=fun.id_funcionario   

   -- [133] GRATIFICACIONES Y BONIFICACIONES: BONIFICACION POR RESPONSABILIDAD EN EL CARGO 11% (3)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%BONIFICACION POR RESPONSABILIDAD EN EL CARGO 11þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_responsabilidad_cargo_11 ON bg_responsabilidad_cargo_11.id_funcionario=fun.id_funcionario 

   -- [133] GRATIFICACIONES Y BONIFICACIONES: BONIFICACION POR RESPONSABILIDAD EN EL CARGO 30% (4)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%BONIFICACION POR RESPONSABILIDAD EN EL CARGO 30þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_responsabilidad_cargo_30 ON bg_responsabilidad_cargo_30.id_funcionario=fun.id_funcionario 

   -- [133] GRATIFICACIONES Y BONIFICACIONES: BONIFICACION POR RESPONSABILIDAD EN EL CARGO 6% (5)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%BONIFICACION POR RESPONSABILIDAD EN EL CARGO 6þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_responsabilidad_cargo_6 ON bg_responsabilidad_cargo_6.id_funcionario=fun.id_funcionario    

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION ADMINISTRATIVA 20% SP (6)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%GESTION ADMINISTRATIVA 20þ SP%'
   GROUP BY
      fb.id_funcionario
   ) bg_gestion_administrativa_20_sp ON bg_gestion_administrativa_20_sp.id_funcionario=fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION ADMINISTRATIVA 40% (SP + GR) (7)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%GESTION ADMINISTRATIVA 40þ (SP + GR)%'
   GROUP BY
      fb.id_funcionario
   ) bg_gestion_administrativa_40_sp_gr ON bg_gestion_administrativa_40_sp_gr.id_funcionario=fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION ADMINISTRATIVA - 450.000 (8)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%GESTION ADMINISTRATIVA - 450.000%'
   GROUP BY
      fb.id_funcionario
   ) bg_gestion_administrativa_450000 ON bg_gestion_administrativa_450000.id_funcionario=fun.id_funcionario 
     
   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION ADMINISTRATIVA - 700.000 (9)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%GESTION ADMINISTRATIVA - 700.000%'
   GROUP BY
      fb.id_funcionario
   ) bg_gestion_administrativa_700000 ON bg_gestion_administrativa_700000.id_funcionario=fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA (10)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike 'GESTION PRESUPUESTARIA'
   GROUP BY
      fb.id_funcionario
   ) bg_gestion_presupuestaria ON bg_gestion_presupuestaria.id_funcionario=fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA (11)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%GESTION PRESUPUESTARIA 20þ SP%'
   GROUP BY
      fb.id_funcionario
   ) bg_gestion_presupuestaria_20_sp ON bg_gestion_presupuestaria_20_sp.id_funcionario=fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA 40% (SP + GR) (12)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%GESTION PRESUPUESTARIA 40þ (SP + GR)%'
   GROUP BY
      fb.id_funcionario
   ) bg_gestion_presupuestaria_40_sp_gr ON bg_gestion_presupuestaria_40_sp_gr.id_funcionario=fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA - 500.000 (13)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%GESTION PRESUPUESTARIA - 500.000%'
   GROUP BY
      fb.id_funcionario
   ) bg_gestion_presupuestaria_500000 ON bg_gestion_presupuestaria_500000.id_funcionario=fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA - 550.000 (14)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%GESTION PRESUPUESTARIA - 550.000%'
   GROUP BY
      fb.id_funcionario
   ) bg_gestion_presupuestaria_550000 ON bg_gestion_presupuestaria_550000.id_funcionario=fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GESTION PRESUPUESTARIA - 700.000 (15)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%GESTION PRESUPUESTARIA - 700.000%'
   GROUP BY
      fb.id_funcionario
   ) bg_gestion_presupuestaria_700000 ON bg_gestion_presupuestaria_700000.id_funcionario=fun.id_funcionario   
   
   -- [133] GRATIFICACIONES Y BONIFICACIONES: INSALUBRIDAD (16)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike 'INSALUBRIDAD'
   GROUP BY
      fb.id_funcionario
   ) bg_insalubridad ON bg_insalubridad.id_funcionario=fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 11% (17)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%HABILITADO PAGADOR 11þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_ordenador_gasto_11 ON bg_ordenador_gasto_11.id_funcionario =fun.id_funcionario 
      
   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 24% (18)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%HABILITADO PAGADOR 24þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_ordenador_gasto_24 ON bg_ordenador_gasto_24.id_funcionario =fun.id_funcionario 

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 25% (19)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%HABILITADO PAGADOR 25þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_ordenador_gasto_25 ON bg_ordenador_gasto_25.id_funcionario =fun.id_funcionario 

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 30% (20)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%HABILITADO PAGADOR 30þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_ordenador_gasto_30 ON bg_ordenador_gasto_30.id_funcionario =fun.id_funcionario 
 
   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 31% (21)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%HABILITADO PAGADOR 31þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_ordenador_gasto_31 ON bg_ordenador_gasto_31.id_funcionario =fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 35% (22)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%HABILITADO PAGADOR 35þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_ordenador_gasto_35 ON bg_ordenador_gasto_35.id_funcionario =fun.id_funcionario

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 40% (23)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%HABILITADO PAGADOR 40þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_ordenador_gasto_40 ON bg_ordenador_gasto_40.id_funcionario =fun.id_funcionario  

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR 5% (24)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%HABILITADO PAGADOR 5þ%'
   GROUP BY
      fb.id_funcionario
   ) bg_ordenador_gasto_5 ON bg_ordenador_gasto_5.id_funcionario =fun.id_funcionario 

   -- [133] GRATIFICACIONES Y BONIFICACIONES: RESPONSABILIDAD EN EL CARGO 80% (SP + GR) (25)
   LEFT JOIN (
   SELECT
      fb.id_funcionario,
      array_agg(b.descripcion),
      sum(dpb.monto_total)::numeric(12,0) as monto,
      sum(dpb.aporte)::numeric(12,0) as aporte,
      (sum(dpb.monto_total)-sum(dpb.aporte))::numeric(12,0) as liquido 
   FROM salarios.planillas_bonificaciones pb
      LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
      LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
   WHERE
      pb.id_administracion=in_id_administracion AND 
      pb.estado=1 AND
      pb.gestion=in_gestion AND
      pb.id_mes=in_id_mes AND
      trim(upper((replace(b.descripcion,'%','þ')))) ilike '%RESPONSABILIDAD EN EL CARGO 80þ (SP + GR)%'
   GROUP BY
      fb.id_funcionario
   ) bg_responsabilidad_cargo_80_sp_gr ON bg_responsabilidad_cargo_80_sp_gr.id_funcionario =fun.id_funcionario 

   -- [133] GRATIFICACIONES Y BONIFICACIONES: GRADO ACADEMICO (26)
   LEFT JOIN (
   SELECT
      fp.id_funcionario,
      max(dpga.dias_trabajados)::int as dias_trabajados,
      sum(dpga.importe_profesional)::numeric(12,0) as monto,
      sum(dpga.importe_aporte)::numeric(12,0) as aporte,
      (sum(dpga.importe_profesional)-sum(dpga.importe_aporte))::numeric(12,0) as liquido 
   FROM salarios.detalle_planillas_profesionales dpga
      LEFT JOIN salarios.planilla_profesionales pga ON pga.id_planilla_profesional=dpga.id_planilla_profesional
      LEFT JOIN salarios.funcionarios_profesionales fp ON fp.id_funcionario_profesional=dpga.id_funcionario_profesional
   WHERE
      pga.id_administracion=in_id_administracion AND 
      pga.estado=1 AND
      pga.gestion=in_gestion AND
      pga.id_mes=in_id_mes
   GROUP BY
      fp.id_funcionario
   ) bg_grado_academico ON bg_grado_academico.id_funcionario =fun.id_funcionario 

   -- [133] GRATIFICACIONES Y BONIFICACIONES: ANTIGUEDAD (27)
   LEFT JOIN (
   SELECT
      dpa.id_funcionario,
      max(dpa.dias_trabajados)::int as dias_trabajados,
      sum(dpa.importe_antiguedad)::numeric(12,0) as monto,
      sum(dpa.importe_aporte)::numeric(12,0) as aporte,
      (sum(dpa.importe_antiguedad)-sum(dpa.importe_aporte))::numeric(12,0) as liquido 
   FROM salarios.detalle_planilla_antiguedad dpa
      LEFT JOIN salarios.planillas_antiguedad pa ON pa.id_planilla_antiguedad=dpa.id_planilla_antiguedad
   WHERE
      pa.id_administracion=in_id_administracion AND 
      pa.estado=1 AND
      pa.gestion=in_gestion AND
      pa.id_mes=in_id_mes
   GROUP BY
      dpa.id_funcionario
   ) bg_antiguedad ON bg_antiguedad.id_funcionario =fun.id_funcionario 

    -- [133] GRATIFICACIONES Y BONIFICACIONES: GRATIFICACION OCASIONAL (28)
   LEFT JOIN (
   SELECT
      dpgo.id_funcionario,
      sum(dpgo.importe_gratificacion)::numeric(12,0) as monto,
      sum(dpgo.importe_aporte)::numeric(12,0) as aporte,
      (sum(dpgo.importe_gratificacion)-sum(dpgo.importe_aporte))::numeric(12,0) as liquido 
   FROM salarios.detalle_planilla_gratificacion_ocacional dpgo
      LEFT JOIN salarios.planilla_gratificacion_ocacional pgo ON pgo.id_planilla_gratificacion_ocacional=dpgo.id_planilla_gratificacion_ocacional
   WHERE
      pgo.id_administracion=in_id_administracion AND 
      pgo.estado=1 AND
      pgo.gestion=in_gestion AND
      pgo.id_mes=in_id_mes
   GROUP BY
      dpgo.id_funcionario
   ) bg_ocasional ON bg_ocasional.id_funcionario =fun.id_funcionario   

   -- CATEGORIA
   LEFT JOIN (
   SELECT 
      fc2.id_funcionario,
      max(fc2.id_funcionario_categoria) as id_funcionario_categoria
   FROM 
      salarios.funcionarios_categorias fc2
   WHERE 
      fc2.gestion = in_gestion 
      AND fc2.id_administracion IN(0,1,2)
      AND (in_id_mes BETWEEN  extract(MONTH from fc2.desde) AND extract(MONTH from fc2.hasta-1) OR fc2.hasta is null) 
   GROUP BY
      fc2.id_funcionario
   ) fc ON fc.id_funcionario=fun.id_funcionario
   LEFT JOIN salarios.funcionarios_categorias   fc3 ON (fc3.id_funcionario_categoria = fc.id_funcionario_categoria)
   LEFT JOIN salarios.detalles_categorias        dc ON (dc.id_detalle_categoria = fc3.id_detalle_categoria)
   LEFT JOIN salarios.categorias                  c ON (c.id_categoria = dc.id_categoria) AND c.gastos_de_representacion is false
   LEFT JOIN salarios.cargos                    car ON (car.id_cargo = c.id_cargo)
   LEFT JOIN legajos.oficinas                     o ON (o.id_oficina=fc3.id_oficina)

   -- FILTRA LOS IDS DE FUNCIONARIOS PERMANENTES QUE TUVIERON ALGUN PAGO EN LA GESTION BUSCADA
   /*INNER JOIN (
      SELECT
         id_funcionario
      FROM
         salarios.obtener_ids_funcionarios_mes_gestion(=in_id_administracion, 1, 1,2015)
   ) filtro_funcionarios ON filtro_funcionarios.id_funcionario=fun.id_funcionario*/
   WHERE
      CASE 
         WHEN in_id_funcionario='0' 
           THEN fun.id_funcionario>0 
           ELSE fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
     END
;
END;
]]></definition>
</function>

<function name="copiar_planilla_para_aguinaldo"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="in_n_tabla">
		<type name="character varying"/>
	</parameter>
	<parameter name="in_valor_id_cabecera">
		<type name="integer"/>
	</parameter>
	<parameter name="in_n_campo_monto">
		<type name="character varying"/>
	</parameter>
	<parameter name="in_id_administracion">
		<type name="character varying"/>
	</parameter>
	<parameter name="in_usuario">
		<type name="character varying"/>
	</parameter>
	<parameter name="in_ip_usuario">
		<type name="character varying"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    sql text;
    c_origen_detalle_tabla character varying;
    c_origen_detalle_id character varying;
    c_origen_cabecera_tabla character varying;
    c_origen_cabecera_id character varying;
    n_id_tipo_aguinaldo integer;
    cantidad_registros integer;
    --Para obtener id_funcionario
    vconsulta text;
    vretorna text;
    vtablaref text;
    vcamporef text;
    
BEGIN
/*
  * Funcion para copiar detalles de salarios en la tabla funcionarios_aguinaldo
  * Fecha: 2012-10-12
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_n_tabla corresponde al nombre de tabla de la cabecera 
  *            in_valor_id_cabecera corresponde al valor del id de la cabecera
  *            in_n_campo_monto corresponde al nombre del campo del monto pagado
  *	       in_id_administracion la administracion utilizada
  *	       in_usuario el usuario que realiza la operacion
  *	       in_ip_usuario el ip desde donde se realiza la operacion
  * 
  * Descripcion:  Arma el sql para realizar la insercion completa de la planilla correspondiente
  */
  
-- Se obtiene del nombre de la tabla que se recibe como parametro los datos de la tabla tipos_aguinaldos
	SELECT INTO n_id_tipo_aguinaldo, c_origen_detalle_tabla, c_origen_detalle_id, c_origen_cabecera_tabla, c_origen_cabecera_id
	id_tipo_aguinaldo, origen_detalle_tabla, origen_detalle_id, origen_cabecera_tabla, origen_cabecera_id
	FROM salarios.tipos_aguinaldos
	WHERE TRIM(UPPER(origen_cabecera_tabla))=TRIM(UPPER(in_n_tabla));
	
	IF (n_id_tipo_aguinaldo IS NULL) THEN
		cantidad_registros:=-9;
		RAISE EXCEPTION 'No se puede obtener el tipo de aguinaldo.  La tabla % No existe',in_n_tabla;
	ELSE
		vconsulta := '';
		vtablaref := '';
		vcamporef := '';
		-- Si la tabla no tiene id_funcionario directamente debe obtener de la tabla asociada a la tabla en cuestion
		-- Las siguientes tablas no contienen id_funcionario:
		-- ....PLANILLA_GASTO_REPRESENTACION_DETALLE, 
		-- ....DETALLES_PLANILLAS_BONIFICACIONES, 
		-- ....DETALLE_PLANILLAS_PROFESIONALES,
		-- ....DETALLE_PLANILLAS_SUBSIDIOS
		IF (upper(c_origen_detalle_tabla) in ('PLANILLA_GASTO_REPRESENTACION_DETALLE', 'DETALLES_PLANILLAS_BONIFICACIONES', 'DETALLE_PLANILLAS_PROFESIONALES', 'DETALLE_PLANILLAS_SUBSIDIOS')  ) THEN
			IF (upper(c_origen_detalle_tabla) in ('DETALLES_PLANILLAS_BONIFICACIONES')) THEN
			   vtablaref := 'salarios.funcionarios_bonificaciones';
			   vcamporef := 'id_funcionario_bonificacion';
			ELSIF (upper(c_origen_detalle_tabla) in ('PLANILLA_GASTO_REPRESENTACION_DETALLE')) THEN
			   vtablaref := 'salarios.funcionarios_representaciones';
			   vcamporef := 'id_funcionario_representacion';
			ELSIF (upper(c_origen_detalle_tabla) in ('DETALLE_PLANILLAS_PROFESIONALES')) THEN
			   vtablaref := 'salarios.funcionarios_profesionales';
			   vcamporef := 'id_funcionario_profesional';
			ELSIF (upper(c_origen_detalle_tabla) in ('DETALLE_PLANILLAS_SUBSIDIOS')) THEN
			   vtablaref := 'salarios.funcionarios_subsidios';
			   vcamporef := 'id_funcionario_subsidio';
			END IF;
			vconsulta = ' FROM salarios.'||c_origen_detalle_tabla||' d '||
			' INNER JOIN '||vtablaref||' w ON w.'||vcamporef||'= d.'||vcamporef||
			' INNER JOIN salarios.'||c_origen_cabecera_tabla ||' c ON c.'||c_origen_cabecera_id ||' = d.'||c_origen_cabecera_id ||
			' WHERE  c.'||c_origen_cabecera_id ||'='||in_valor_id_cabecera; 
		ELSE 
		-- Las siguientes tablas si contienen id_funcionario:
		-- ....detalle_planilla_antiguedad, 
		-- ....detalle_planilla_gratificacion_especial, 
		-- ....detalle_planilla_gratificacion_ocacional,
		-- ....detalles_planillas_ra,
		-- ....detalles_planillas_re,
		-- ....detalles_planillas_salarios,
		    vconsulta = ' FROM salarios.'||c_origen_detalle_tabla||' d '||
			' INNER JOIN salarios.'||c_origen_cabecera_tabla ||' c ON c.'||c_origen_cabecera_id ||' = d.'||c_origen_cabecera_id ||
			' WHERE  c.'||c_origen_cabecera_id ||'='||in_valor_id_cabecera;  
		END IF;
		-- Se concatena el insert into select
		sql = 'INSERT INTO salarios.funcionarios_aguinaldos( '
		    ||'id_administracion, id_funcionario, gestion, id_mes, '
		    ||'id_oficina, id_tipo_aguinaldo, monto, id_detalle_planilla, '
		    ||'estado, usu_alta, fec_alta, ip_alta) '
		    ||'SELECT '||in_id_administracion||',id_funcionario, c.gestion, c.id_mes, '
		    ||'d.id_oficina,'||n_id_tipo_aguinaldo||','||in_n_campo_monto||','||c_origen_detalle_id||
		    ',0,'||E'\''||in_usuario||E'\',now(),'||E'\''||in_ip_usuario||E'\' ';

	        sql = sql || vconsulta;

	        execute sql;

	        GET DIAGNOSTICS cantidad_registros = ROW_COUNT;
		IF cantidad_registros = 0 THEN
		   RAISE EXCEPTION 'No se copio ningun registro de la tabla % ',c_origen_detalle_tabla;
		END IF;
 	END IF; 

	
            
RETURN NEXT cantidad_registros;
END;
]]></definition>
</function>

<function name="descuentos_aso_con_autorizacion"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[ 
DECLARE
    iCantidad Integer;
 
BEGIN
    iCantidad:=0;
-- Autor: Lic. Guillermo Galeano Fernandez
-- Fecha: 2011-10-26
 
-- Esta función es para un trigger BEFOR Insert / Update 
-- Este trigger verifica que exista una autorizacion vigente para este tipo de 
-- descuento para este funcionario antes de realizar una inserción.

IF (TG_OP = 'INSERT') THEN 
    
    SELECT case when count(*)::integer is null then 0 else count(*)::integer end as cantidad into iCantidad
    FROM salarios.autorizaciones a
    WHERE a.estado is true and a.id_funcionario=NEW.id_funcionario and a.id_tipo_descuento=NEW.id_tipo_descuento;
    IF ( iCantidad=1) THEN
        -- Sí existe una autorización para este funcionario y para este concepto, 
        -- entonces insertar el registro.
        RETURN NEW;
    ELSE
        -- Lanzar una exception, avisando la cantidad de autorizaciones.
        RAISE EXCEPTION 'Cantidad de autorizaciones (%) diferente de 1, favor verificar autorizaciones de este funcionario.-',iCantidad;
        RETURN NULL;
    END IF;

ELSIF (TG_OP = 'UPDATE') THEN 
    -- Verificar que el importe ejecutado sea igual a cero, 
    -- esto significa que no fue procesado todavía.
    -- ya que no se permite modificar un descuento ya procesado.
    -- Además de que no se dispare cuando se esta ejecutando el proceso de descuento!
    -- TODO: Ver si exist trigger que verifique la existencia de descuentos, 
    --       antes de eliminar una autorizacion.
    IF (NEW.ejecutado = 0 AND OLD.ejecutado = 0) THEN
        -- Actualizamos el registro.
        RETURN NEW;
    ELSE
        -- Lanzar una exception, avisando que el ejecutado no es cero!.
        RAISE EXCEPTION 'Este descuento ya fue procesado.-';
        RETURN NULL;
    END IF; 

ELSIF (TG_OP = 'DELETE') THEN 
    IF (OLD.ejecutado = 0) THEN
        -- Borramos el registro.
        RETURN OLD;
    ELSE
        -- Lanzar una exception, avisando que el ejecutado no es cero!.
        RAISE EXCEPTION 'Este descuento ya fue procesado.-';
        RETURN NULL;
    END IF; 

END IF;

END; 
]]></definition>
</function>

<function name="deshacer_aplicacion_de_descuentos_varios_v2"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="void"/>
	</return-type>
	<parameter name="in_id_planilla_salario">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE

rDtosJudiciales RECORD;

ADMINISTRACION INTEGER := 0;
GESTION1 INTEGER := 0;
MES INTEGER := 0;

BEGIN

Select id_administracion,
gestion,
id_mes
INTO 
ADMINISTRACION, 
GESTION1, 
MES
from salarios.planillas_salarios 
where id_planilla_salario=IN_ID_PLANILLA_SALARIO;

-- Para deshacer los efectos de la aplicación de descuentos de un mes:

-- reiniciar el saldo en los descuentos judiciales:
FOR rDtosJudiciales IN
	Select 
		v.id_judicial,
		v.monto
	from salarios.descuentos_judiciales v
	where v.id_mes = MES
	and v.gestion = GESTION1
	and v.id_administracion = ADMINISTRACION
	and v.id_tipo_descuento = (Select id_tipo_descuento from salarios.tipos_descuentos where abreviatura='DJCG')
LOOP
	UPDATE salarios.judiciales 
	   SET monto_saldo = monto_saldo + rDtosJudiciales.monto,
		estado=0, 
	       usu_modi=user::varchar(30), 
		fec_modi=now(), 
		ip_modi=inet_client_addr()::varchar(30)
	where id_judicial = rDtosJudiciales.id_judicial
	;
END LOOP;

-- cambiar estado a los descuentos_judiciales a ser aplicados
-- solamente a los que fueron afectados en esta planilla de descuentos:
UPDATE salarios.descuentos_judiciales
   SET estado=0,
usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
WHERE id_descuento_judicial in (
Select z.id_descuento_judicial
FROM salarios.detalles_planillas_descuentos z
WHERE z.id_planilla_descuento = (Select a.id_planilla_descuento 
				from salarios.planillas_descuentos a
				where a.id_planilla_salario=IN_ID_PLANILLA_SALARIO)
AND z.id_descuento_judicial is not null
)
 ;

UPDATE salarios.descuentos_aso
   SET estado=0,
usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
WHERE id_descuento_aso in (
Select z.id_descuento_aso
FROM salarios.detalles_planillas_descuentos z
WHERE z.id_planilla_descuento = (Select a.id_planilla_descuento 
				from salarios.planillas_descuentos a
				where a.id_planilla_salario=IN_ID_PLANILLA_SALARIO)
AND z.id_descuento_aso is not null
)
;


-- borrar el detalle de la planilla de descuento
DELETE FROM salarios.detalles_planillas_descuentos
WHERE id_planilla_descuento = (Select a.id_planilla_descuento 
				from salarios.planillas_descuentos a
				where a.id_planilla_salario=IN_ID_PLANILLA_SALARIO)
;

DELETE FROM salarios.planillas_descuentos
WHERE id_planilla_descuento = (Select a.id_planilla_descuento 
				from salarios.planillas_descuentos a
				where a.id_planilla_salario=IN_ID_PLANILLA_SALARIO)
;


-- poner a cero los datos en el detalle de la planilla de salario
UPDATE salarios.detalles_planillas_salarios
   SET 
       importe_liquido_sin_descuentos_varios=0, 
	importe_descuentos_varios_solicitado=0, 
       importe_descuentos_varios_aplicado=0, 
	importe_descuentos_varios_diferencia=0, 
       importe_liquido_con_descuentos_varios=0,
	monto_multa=0, 
	monto_total_aporte=(monto_presupuestado-monto_devengado)+monto_aporte, 
	usu_modi=current_user::varchar(30), 
	fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
where id_planilla_salario=IN_ID_PLANILLA_SALARIO;

-- poner a cero los totales en la cabecera de la planilla de salario
-- cambiar a estado 0 (creado) a la planilla de salario
UPDATE salarios.planillas_salarios
   SET id_estado=0,
	usu_modi=current_user::varchar(30), fec_modi=now(), ip_modi=inet_client_addr()::varchar(30)
where id_planilla_salario=IN_ID_PLANILLA_SALARIO;


DELETE FROM salarios.detalles_multas_aplicadas
WHERE id_multas_aplicadas = (
Select y.id_multas_aplicadas 
from salarios.multas_aplicadas y
where y.id_planilla_salario=IN_ID_PLANILLA_SALARIO
);

UPDATE salarios.multas_solicitadas 
SET estado=0,
       usu_modi=user::varchar(30), 
	fec_modi=now(), 
	ip_modi=inet_client_addr()::varchar(30)
WHERE
id_multa_solicitada=(Select id_multa_solicitada 
from salarios.multas_aplicadas 
where id_planilla_salario=IN_ID_PLANILLA_SALARIO)
;

DELETE FROM salarios.multas_aplicadas
where id_planilla_salario=IN_ID_PLANILLA_SALARIO;

-- DESHACER MULTAS POR HORAS NO COMPENSADAS
-- 14.09.2016 11:10
-- Se agrega llamada a la función deshacer_horas_no_compensadas_aplicadas_permanentes
PERFORM salarios.deshacer_horas_no_compensadas_aplicadas_permanentes(IN_ID_PLANILLA_SALARIO);

RETURN;
END;
]]></definition>
</function>

<function name="deshacer_horas_no_compensadas_aplicadas_permanentes"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario_hnc">
		<type name="integer"/>
	</parameter>
	<parameter name="id_detalle_planilla_salario_hnc">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
-- --------------------------------------------------------------------------------------   
-- Almacena la estructura de filas obtenido a partir de la funcion de calculo de multas por horas no compensadas:
   rHorasNoCompensadasAplicadas RECORD;
-- --------------------------------------------------------------------------------------
BEGIN
-- --------------------------------------------------------------------------------------
--   Objetivo: Deshacer las multas por horas no compensadas a funcionarios permanentes aplicados.
--     Creado: 14/09/2016 10:54:28
-- Modificado: 
--      Autor: Lic. Gustavo Eloy Alcaráz Bogado
-- --------------------------------------------------------------------------------------

   FOR rHorasNoCompensadasAplicadas IN
      SELECT 
         hnc.id_funcionario, -- 1
         hnc.id_detalle_planilla_salario -- 2
      FROM 
         salarios.horas_no_compensadas hnc
         LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_detalle_planilla_salario=hnc.id_detalle_planilla_salario
         INNER JOIN salarios.planillas_salarios ps ON ps.id_planilla_salario=dps.id_planilla_salario AND ps.id_planilla_salario=IN_ID_PLANILLA_SALARIO
      WHERE
         hnc.estado=1
   LOOP
      -- --------------------------------------------------------------------------------------
      -- ACTUALIZA LA TABLA salarios.detalles_planillas_salarios
      UPDATE salarios.detalles_planillas_salarios
      SET 
         horas_no_compensadas = 0, -- 1
         monto_horas_no_compensadas = 0, -- 2
         usu_modi=current_user::varchar(30), 
         fec_modi=now(), 
         ip_modi=inet_client_addr()::varchar(30)
      WHERE 
         id_detalle_planilla_salario = rHorasNoCompensadasAplicadas.id_detalle_planilla_salario;
      -- --------------------------------------------------------------------------------------   
      -- ACTUALIZA LA TABLA salarios.horas_no_compensadas
      UPDATE salarios.horas_no_compensadas
      SET
         id_detalle_planilla_salario = 0,
	 estado = 0,
         usu_modi=current_user::varchar(30), 
         fec_modi=now(), 
         ip_modi=inet_client_addr()::varchar(30)
      WHERE 
         id_detalle_planilla_salario = rHorasNoCompensadasAplicadas.id_detalle_planilla_salario AND estado=1;
      -- -------------------------------------------------------------------------------------- 
      -- RETORNA VALORES DE LA FUNCION ACTUAL 
      id_funcionario_hnc := rHorasNoCompensadasAplicadas.id_funcionario;
      id_detalle_planilla_salario_hnc := rHorasNoCompensadasAplicadas.id_detalle_planilla_salario;
      -- --------------------------------------------------------------------------------------
      RETURN NEXT;
   END LOOP;
END;
]]></definition>
</function>

<function name="es_funcionario_superior_activo"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="boolean"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vretorna boolean;
BEGIN
  /*
  * Funcion para saber si un funcionario es superior activo
  * Fecha: 2012-04-18
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario el identificador del funcionario
  *            in_id_mes 
  *            in_gestion
  */
  
  IF (SELECT  count(*)  
      FROM salarios.funcionarios_superiores
      WHERE id_funcionario = in_id_funcionario AND gestion = in_gestion
        AND (hasta is null OR (hasta>=('01-'||in_id_mes::text||'-'||in_gestion::text)::date AND hasta<=((date_trunc('month', ('01-'||in_id_mes::text||'-'||in_gestion::text)::date) + interval '1 month') - interval '1 day')::date))
      )	> 0 THEN         -- Verifica si el funcionario es superior y activo para el mes y gestion
      vretorna := true;  -- Si no aporta porcentaje cero
  ELSE                   -- De lo contrario obtiene de la tabla parametros.
      vretorna := false;
  END IF;
  return vretorna;
END;
]]></definition>
</function>

<function name="funcion_auditoria_detalle_planilla_gratificacion_ocacional"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[ 
DECLARE 
BEGIN 
IF (TG_OP = 'DELETE') THEN 
INSERT INTO auditoria_salarios.detalle_planilla_gratificacion_ocacional(
	id_detalle_planilla_gratificacion_ocacional, 
	id_administracion, 
	id_oficina, 
	id_planilla_gratificacion_ocacional, 
	id_funcionario, 
	dias_trabajados, 
	importe_gratificacion, 
	usu_alta, 
	fec_alta, 
	usu_modi, 
	fec_modi, 
	ip_alta, 
	ip_modi, 
	operacion_auditoria, 
	usuario_auditoria, 
	fecha_auditoria
)
    VALUES (
	OLD.id_detalle_planilla_gratificacion_ocacional, 
	OLD.id_administracion, 
	OLD.id_oficina, 
	OLD.id_planilla_gratificacion_ocacional, 
	OLD.id_funcionario, 
	OLD.dias_trabajados, 
	OLD.importe_gratificacion, 
	OLD.usu_alta, 
	OLD.fec_alta, 
	OLD.usu_modi, 
	OLD.fec_modi, 
	OLD.ip_alta, 
	OLD.ip_modi, 
	'D', 
	current_user, 
	now())
;

RETURN OLD;

ELSIF (TG_OP = 'UPDATE') THEN 

INSERT INTO auditoria_salarios.detalle_planilla_gratificacion_ocacional(
	id_detalle_planilla_gratificacion_ocacional, 
	id_administracion, 
	id_oficina, 
	id_planilla_gratificacion_ocacional, 
	id_funcionario, 
	dias_trabajados, 
	importe_gratificacion, 
	usu_alta, 
	fec_alta, 
	usu_modi, 
	fec_modi, 
	ip_alta, 
	ip_modi, 
	operacion_auditoria, 
	usuario_auditoria, 
	fecha_auditoria
)
    VALUES (
	NEW.id_detalle_planilla_gratificacion_ocacional, 
	NEW.id_administracion, 
	NEW.id_oficina, 
	NEW.id_planilla_gratificacion_ocacional, 
	NEW.id_funcionario, 
	NEW.dias_trabajados, 
	NEW.importe_gratificacion, 
	NEW.usu_alta, 
	NEW.fec_alta, 
	NEW.usu_modi, 
	NEW.fec_modi, 
	NEW.ip_alta, 
	NEW.ip_modi, 
	'U', 
	current_user, 
	now())
;

RETURN NEW;

ELSIF (TG_OP = 'INSERT') THEN 

INSERT INTO auditoria_salarios.detalle_planilla_gratificacion_ocacional(
	id_detalle_planilla_gratificacion_ocacional, 
	id_administracion, 
	id_oficina, 
	id_planilla_gratificacion_ocacional, 
	id_funcionario, 
	dias_trabajados, 
	importe_gratificacion, 
	usu_alta, 
	fec_alta, 
	usu_modi, 
	fec_modi, 
	ip_alta, 
	ip_modi, 
	operacion_auditoria, 
	usuario_auditoria, 
	fecha_auditoria
)
    VALUES (
	NEW.id_detalle_planilla_gratificacion_ocacional, 
	NEW.id_administracion, 
	NEW.id_oficina, 
	NEW.id_planilla_gratificacion_ocacional, 
	NEW.id_funcionario, 
	NEW.dias_trabajados, 
	NEW.importe_gratificacion, 
	NEW.usu_alta, 
	NEW.fec_alta, 
	NEW.usu_modi, 
	NEW.fec_modi, 
	NEW.ip_alta, 
	NEW.ip_modi, 
	'I', 
	current_user, 
	now())
;

RETURN NEW;

END IF; 

END; 
]]></definition>
</function>

<function name="funcion_auditoria_detalle_planillas_vacantes"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[ 
DECLARE 
BEGIN 
-- Crea un registro en usuario_audit para reflejar las operaciones 
-- realizadas en usuario utiliza las variables especiales TG_OP para efectuar la operacion
IF (TG_OP = 'DELETE') THEN 
INSERT INTO auditoria_salarios.detalle_planillas_vacantes 
SELECT 
OLD.id_detalle_planilla_vacante, 
OLD.id_administracion, 
OLD.id_detalle_categoria, 
OLD.id_planilla_salario, 
OLD.importe, 
OLD.usu_alta, 
OLD.fec_alta, 
OLD.usu_modi, 
OLD.fec_modi, 
OLD.ip_alta, 
OLD.ip_modi, 
'D',  user, now(); 
RETURN OLD; 
ELSIF (TG_OP = 'UPDATE') THEN 
INSERT INTO auditoria_salarios.detalle_planillas_vacantes 
SELECT 
NEW.id_detalle_planilla_vacante, 
NEW.id_administracion, 
NEW.id_detalle_categoria, 
NEW.id_planilla_salario, 
NEW.importe, 
NEW.usu_alta, 
NEW.fec_alta, 
NEW.usu_modi, 
NEW.fec_modi, 
NEW.ip_alta, 
NEW.ip_modi,
'U',  user, now();
RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN 
INSERT INTO auditoria_salarios.detalle_planillas_vacantes 
SELECT 
NEW.id_detalle_planilla_vacante, 
NEW.id_administracion, 
NEW.id_detalle_categoria, 
NEW.id_planilla_salario, 
NEW.importe, 
NEW.usu_alta, 
NEW.fec_alta, 
NEW.usu_modi, 
NEW.fec_modi, 
NEW.ip_alta, 
NEW.ip_modi,
'I',  user, now(); 
RETURN NEW; 
END IF; 
RETURN NULL; -- el resultado es ignorado puesto que este es un trigger AFTER 
END; 
]]></definition>
</function>

<function name="funcion_auditoria_pedidos_fondos_detalles"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[ 
DECLARE 
BEGIN 
	IF (TG_OP = 'DELETE') THEN 
		INSERT INTO auditoria_salarios.pedidos_fondos_detalles(
			    id_pedido_fondo_detalle, id_estructura_presupuestaria, id_pedido_fondo, 
			    importe_solicitado, importe_aplicado, importe_tope, usu_alta, fec_alta, usu_modi, fec_modi, ip_alta, ip_modi,
			    operacion_auditoria, usuario_auditoria, fecha_auditoria) 
		SELECT 
			OLD.id_pedido_fondo_detalle, 
			OLD.id_estructura_presupuestaria, 
			OLD.id_pedido_fondo,
			OLD.importe_solicitado, 
			OLD.importe_aplicado, 
			OLD.importe_tope,
			OLD.usu_alta, 
			OLD.fec_alta, 
			OLD.usu_modi, 
			OLD.fec_modi, 
			OLD.ip_alta, 
			OLD.ip_modi,
			'D',  user, now(); 
			
		RETURN OLD; 

		
	ELSIF (TG_OP = 'UPDATE') THEN 
		INSERT INTO auditoria_salarios.pedidos_fondos_detalles(
			    id_pedido_fondo_detalle, id_estructura_presupuestaria, id_pedido_fondo, 
			    importe_solicitado, importe_aplicado, importe_tope, usu_alta, fec_alta, usu_modi, fec_modi, ip_alta, ip_modi,
			    operacion_auditoria, usuario_auditoria, fecha_auditoria) 
		SELECT 
			NEW.id_pedido_fondo_detalle, 
			NEW.id_estructura_presupuestaria, 
			NEW.id_pedido_fondo,
			NEW.importe_solicitado, 
			NEW.importe_aplicado, 
			NEW.importe_tope,
			NEW.usu_alta, 
			NEW.fec_alta, 
			NEW.usu_modi, 
			NEW.fec_modi, 
			NEW.ip_alta, 
			NEW.ip_modi,   
			'U',  user, now();
			
		RETURN NEW;

		
	ELSIF (TG_OP = 'INSERT') THEN 
		INSERT INTO auditoria_salarios.pedidos_fondos_detalles(
			    id_pedido_fondo_detalle, id_estructura_presupuestaria, id_pedido_fondo, 
			    importe_solicitado, importe_aplicado, importe_tope, usu_alta, fec_alta, usu_modi, fec_modi, ip_alta, ip_modi,
			    operacion_auditoria, usuario_auditoria, fecha_auditoria) 
		SELECT 
			NEW.id_pedido_fondo_detalle, 
			NEW.id_estructura_presupuestaria, 
			NEW.id_pedido_fondo,
			NEW.importe_solicitado, 
			NEW.importe_aplicado, 
			NEW.importe_tope,
			NEW.usu_alta, 
			NEW.fec_alta, 
			NEW.usu_modi, 
			NEW.fec_modi, 
			NEW.ip_alta, 
			NEW.ip_modi,  
			'I',  user, now(); 
		RETURN NEW; 
	END IF; 
	RETURN NULL;  
END; 
]]></definition>
</function>

<function name="funcion_auditoria_planilla_diferencia_salarial"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[ 
DECLARE 
BEGIN 
-- Crea un registro en usuario_audit para reflejar las operaciones 
-- realizadas en usuario utiliza las variables especiales TG_OP para efectuar la operacion
IF (TG_OP = 'DELETE') THEN 
INSERT INTO auditoria_salarios.planilla_diferencia_salarial 
SELECT 
OLD.id_planilla_diferencia_salarial,
OLD.id_administracion,
OLD.gestion,
OLD.id_mes,
OLD.fecha,
OLD.monto_aporte,
OLD.monto_categoria,
OLD.monto_cargo,
OLD.monto_diferencia,
OLD.estado,
OLD.usu_alta, 
OLD.fec_alta, 
OLD.usu_modi, 
OLD.fec_modi, 
OLD.ip_alta, 
OLD.ip_modi,
'D',  user, now(); 
RETURN OLD; 
ELSIF (TG_OP = 'UPDATE') THEN 
INSERT INTO auditoria_salarios.planilla_diferencia_salarial 
SELECT 
NEW.id_planilla_diferencia_salarial,
NEW.id_administracion,
NEW.gestion,
NEW.id_mes,
NEW.fecha,
NEW.monto_aporte,
NEW.monto_categoria,
NEW.monto_cargo,
NEW.monto_diferencia,
NEW.estado,
NEW.usu_alta, 
NEW.fec_alta, 
NEW.usu_modi, 
NEW.fec_modi, 
NEW.ip_alta, 
NEW.ip_modi, 
'U',  user, now();
RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN 
INSERT INTO auditoria_salarios.planilla_diferencia_salarial 
SELECT 
NEW.id_planilla_diferencia_salarial,
NEW.id_administracion,
NEW.gestion,
NEW.id_mes,
NEW.fecha,
NEW.monto_aporte,
NEW.monto_categoria,
NEW.monto_cargo,
NEW.monto_diferencia,
NEW.estado,
NEW.usu_alta, 
NEW.fec_alta, 
NEW.usu_modi, 
NEW.fec_modi, 
NEW.ip_alta, 
NEW.ip_modi, 
'I',  user, now(); 
RETURN NEW; 
END IF; 
RETURN NULL; -- el resultado es ignorado puesto que este es un trigger AFTER 
END; 
]]></definition>
</function>

<function name="funcion_auditoria_situacion_personal"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[ 
DECLARE 
BEGIN 
-- Crea un registro en usuario_audit para reflejar las operaciones 
-- realizadas en usuario utiliza las variables especiales TG_OP para efectuar la operacion
IF (TG_OP = 'DELETE') THEN 
INSERT INTO auditoria_salarios.situacion_personal 
SELECT 
OLD.id_situacion_personal,
OLD.id_administracion,
OLD.gestion,
OLD.id_mes,
OLD.fecha,
OLD.nro_documento,
OLD.documento,
OLD.estado,
OLD.usu_alta, 
OLD.fec_alta, 
OLD.usu_modi, 
OLD.fec_modi, 
OLD.ip_alta, 
OLD.ip_modi,
'D',  user, now(); 
RETURN OLD; 
ELSIF (TG_OP = 'UPDATE') THEN 
INSERT INTO auditoria_salarios.situacion_personal 
SELECT 
NEW.id_situacion_personal,
NEW.id_administracion,
NEW.gestion,
NEW.id_mes,
NEW.fecha,
NEW.nro_documento,
NEW.documento,
NEW.estado,
NEW.usu_alta,
NEW.fec_alta, 
NEW.usu_modi, 
NEW.fec_modi, 
NEW.ip_alta, 
NEW.ip_modi,
'U',  user, now();
RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN 
INSERT INTO auditoria_salarios.situacion_personal 
SELECT 
NEW.id_situacion_personal,
NEW.id_administracion,
NEW.gestion,
NEW.id_mes,
NEW.fecha,
NEW.nro_documento,
NEW.documento,
NEW.estado,
NEW.usu_alta,
NEW.fec_alta, 
NEW.usu_modi, 
NEW.fec_modi, 
NEW.ip_alta, 
NEW.ip_modi,
'I',  user, now(); 
RETURN NEW; 
END IF; 
RETURN NULL; -- el resultado es ignorado puesto que este es un trigger AFTER 
END; 
]]></definition>
</function>

<usertype name="registro_funcionarios_aguinaldos" configuration="composite">
	<schema name="public"/>
	<role name="jcabrera"/>
	<typeattrib name="id_funcionario">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="cedula_funcionario">
		<type name="character varying"/>
	</typeattrib>
	<typeattrib name="ape_nom_funcionario">
		<type name="character varying"/>
	</typeattrib>
	<typeattrib name="detalles_ids">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="detalles_meses">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="detalles_montos">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="detalles_oficinas">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="ultimo_id_oficina">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="monto_total">
		<type name="numeric" length="15" precision="2"/>
	</typeattrib>
	<typeattrib name="cantidad">
		<type name="integer"/>
	</typeattrib>
</usertype>

<function name="funcion_funcionarios_aguinaldos"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.registro_funcionarios_aguinaldos"/>
	</return-type>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_tipo_aguinaldo">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[ 
DECLARE   returnrec registro_funcionarios_aguinaldos; 

/*
--Definicion de registro_reporte
DROP TYPE registro_funcionarios_aguinaldos;
CREATE TYPE registro_funcionarios_aguinaldos AS ( 
				id_funcionario integer, 
				cedula_funcionario varchar, 
				ape_nom_funcionario varchar, 
				detalles_ids text,
				detalles_meses text,
				detalles_montos text,
				detalles_oficinas text,
				ultimo_id_oficina integer,
				monto_total numeric(15,2),
				cantidad integer);
*/
DECLARE 
  v_id_func_agu integer;
  v_id_ofic integer;
  v_id_mes integer;
  v_monto numeric(12,2);
  

BEGIN 
/*
  * Funcion para obtener funcionarios_aguinaldos para el detalle de aguinaldos 
  * Fecha: 2012-10-27
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion
  *            in_id_tipo_aguinaldo, identificador del tipo de aguinaldo solicitado 
  * 
  * Descripcion:  Obtener funcionarios agrupando los detalles de los montos percibidos en los meses
  * ------------   
  *               
  */  
       
	FOR returnrec IN 
		SELECT a.id_funcionario, b.cedula_funcionario, b.ape_nom_funcionario, null, null, null, null, null, sum(monto) as monto_total, count(monto) as cantidad
		FROM salarios.funcionarios_aguinaldos a
		INNER JOIN legajos.funcionarios b ON a.id_funcionario = b.id_funcionario
		WHERE a.id_administracion = in_id_administracion and a.gestion = in_gestion and a.id_tipo_aguinaldo=in_id_tipo_aguinaldo and a.estado = 0
		GROUP BY a.id_funcionario, b.cedula_funcionario, b.ape_nom_funcionario
		ORDER BY a.id_funcionario
	LOOP  
		FOR v_id_func_agu,v_id_ofic, v_id_mes, v_monto  IN 
		SELECT t2.id_funcionario_aguinaldo, t2.id_oficina, t2.id_mes, t2.monto
		FROM salarios.funcionarios_aguinaldos t2
		WHERE t2.id_administracion = in_id_administracion and t2.gestion = in_gestion AND t2.id_tipo_aguinaldo=in_id_tipo_aguinaldo AND t2.estado = 0 AND t2.id_funcionario = returnrec.id_funcionario
		ORDER BY t2.id_mes
		LOOP
			IF returnrec.detalles_ids isnull THEN
			   returnrec.detalles_ids := v_id_func_agu::text;
			   returnrec.detalles_meses := v_id_mes::text;
			   returnrec.detalles_montos := v_monto::text;
			   returnrec.detalles_oficinas := v_id_ofic::text;
			ELSE
			   returnrec.detalles_ids := returnrec.detalles_ids||' - '|| v_id_func_agu::text;
			   returnrec.detalles_meses := returnrec.detalles_meses||' - '||v_id_mes::text;
			   returnrec.detalles_montos := returnrec.detalles_montos||' - '||v_monto::text;
			   returnrec.detalles_oficinas := returnrec.detalles_oficinas||' - '||v_id_ofic::text;
			END IF;
			returnrec.ultimo_id_oficina = v_id_ofic;
			--returnrec.ultimo_nivel1 = v_nivel1;
		END LOOP;
	        
		RETURN NEXT returnrec;     
	END LOOP; 
		
END; 
]]></definition>
</function>

<function name="funcionario_profesional"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario_profesional">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="ape_nom_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_profesional_bruto">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_profesional_neto">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_aporte">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    pago_grado_academico numeric;
    cantidad_dias integer;
    
BEGIN
/*
  * Funcion para obtener planilla de funcionarios profesionales
  * Fecha: 2012-04-30
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el importe para los funcionarios profesionales 
  * ------------  
  */

SELECT INTO pago_grado_academico, cantidad_dias   grado_academico, cantidad_dias_pa_hallar_importe_diario
FROM parametros 
WHERE estado
LIMIT 1;

RETURN QUERY 

	SELECT distinct
	fp.id_funcionario_profesional, 
	o.id_oficina, 
	o1.nombre, 
	o1.nivel1,
	f.id_funcionario, 
	f.cedula_funcionario,
	f.ape_nom_funcionario,

	--salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion) AS dias_trabajados,
	fp.dias_trabajados,

	salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje,
	  
	pago_grado_academico as importe_profesional_bruto,
	
	((pago_grado_academico / 
		(cantidad_dias) * 
		 --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion)
		 fp.dias_trabajados
	)::int)::numeric as importe_profesional_neto,

	(((pago_grado_academico / 
		(cantidad_dias) * 
		 --salarios.obtener_dias_trabajados(f.id_funcionario, in_id_mes, in_gestion)
		 fp.dias_trabajados
	) * salarios.obtener_aporte_porcentaje(f.id_funcionario, false)  / 100.0)::int)::numeric AS importe_aporte

	FROM salarios.funcionarios_profesionales fp
	INNER JOIN legajos.funcionarios f 
		ON fp.id_funcionario = f.id_funcionario
        --INNER JOIN legajos.situacion_administrativa_actual saa
	--	ON fp.id_funcionario = saa.id_funcionario
	INNER JOIN legajos.oficinas o 
		ON fp.id_oficina = o.id_oficina 
		AND o.gestion = in_gestion
	INNER JOIN legajos.oficinas o1 
		ON o1.nivel1 = o.nivel1 
		AND o1.nivel2 = o.nivel2 
		AND o1.nivel3 = 0 
		AND o1.nivel4 = 0 
		AND o1.nivel5 = 0 
		AND o1.gestion = in_gestion
	WHERE fp.id_funcionario_profesional > 0 
	  AND fp.activo
	  AND fp.id_administracion = in_id_administracion

	/*AND fp.id_funcionario_profesional NOT IN (SELECT dpp.id_funcionario_profesional
	FROM salarios.detalle_planillas_profesionales dpp
	INNER JOIN salarios.planilla_profesionales pp ON dpp.id_planilla_profesional = pp.id_planilla_profesional
	WHERE pp.id_mes = in_id_mes AND pp.gestion = in_gestion ) */
	ORDER BY fp.id_funcionario_profesional ASC;

END;
]]></definition>
</function>

<function name="funcionarios_ascensos"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_multa">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
Select 
	fc.id_oficina, o.nombre, o.nivel1, o.nivel2, o.nivel3, o.nivel4, o.nivel5, f.id_funcionario, f.cedula_funcionario AS cedula, f.ape_nom_funcionario AS funcionario, cim.id_mes, c.gestion, 
        CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
        END AS aporte_porcentaje, 
        
        dias_trabajados_old AS dias_trabajados, 
        
        cim.importe AS monto_presupuestado, 
        
        cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado = true))::numeric * 
        dias_trabajados_old
         AS monto_devengado, 
        
        salarios.obtener_importe(in_id_mes,in_gestion,id_funcionario_categoria_old,2) / (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
          WHERE pmt.estado = true))::numeric * 
        dias_trabajados_old * 
        ( CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
        END)/ 
        100::numeric + (CASE WHEN fsa.estado IS TRUE THEN 0::numeric ELSE (cim.importe - salarios.obtener_importe(in_id_mes,in_gestion,id_funcionario_categoria_old,2)) END ) AS jubilacion, 
        
        CASE
            WHEN dpm.monto_multa IS NULL THEN 0::numeric
            ELSE dpm.monto_multa
        END AS monto_multa
   FROM salarios.funcionarios_recategorizacion_ascenso fn 
   LEFT JOIN salarios.funcionarios_categorias fc ON fc.id_funcionario_categoria = fn.id_funcionario_categoria_old 
   LEFT JOIN salarios.funcionarios_sinaportes fsa ON fc.id_funcionario = fsa.id_funcionario and fsa.estado
   LEFT JOIN legajos.funcionarios f ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria = fc.id_detalle_categoria
   LEFT JOIN salarios.categorias c ON c.id_categoria = dc.id_categoria and c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim ON cim.id_categoria = c.id_categoria and cim.id_mes = in_id_mes
   --LEFT JOIN salarios.detalle_situacion_personal sp ON sp.id_funcionario = f.id_funcionario 
   --LEFT JOIN salarios.situacion_personal spx ON sp.id_situacion_personal = spx.id_situacion_personal and spx.id_mes = in_id_mes and spx.gestion = in_gestion
   LEFT JOIN salarios.situacion_personal spx ON   spx.id_mes = in_id_mes and spx.gestion = in_gestion
   LEFT JOIN salarios.detalle_situacion_personal sp ON sp.id_funcionario = f.id_funcionario and sp.id_situacion_personal = spx.id_situacion_personal
   LEFT JOIN legajos.oficinas o ON o.id_oficina = fc.id_oficina and o.gestion = in_gestion
   --LEFT JOIN salarios.detalles_multas_aplicadas dpm ON dpm.id_funcionario = f.id_funcionario
   --LEFT JOIN salarios.multas_aplicadas ma ON ma.id_multa_aplicada = dpm.id_multa_aplicada AND ma.id_mes = in_id_mes
   left JOIN salarios.multas_aplicadas ma ON ma.id_mes = in_id_mes and ma.gestion = in_gestion
   LEFT JOIN salarios.detalles_multas_aplicadas dpm ON ma.id_multa_aplicada = dpm.id_multa_aplicada and dpm.id_funcionario = f.id_funcionario
   
   WHERE fn.activo AND f.id_funcionario = fn.id_funcionario AND fn.activo and fn.id_mes = in_id_mes and fn.gestion = in_gestion

union 

  (
Select 
	fc.id_oficina, o.nombre, o.nivel1, o.nivel2, o.nivel3, o.nivel4, o.nivel5, f.id_funcionario, f.cedula_funcionario AS cedula, f.ape_nom_funcionario AS funcionario, cim.id_mes, c.gestion, 
        CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
        END AS aporte_porcentaje, 
        
        dias_trabajados_new AS dias_trabajados, 
        
        cim.importe AS monto_presupuestado, 
        
        cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado = true))::numeric * 
        dias_trabajados_new
         AS monto_devengado, 
        
        salarios.obtener_importe(in_id_mes,in_gestion,id_funcionario_categoria_new,1) / (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
          WHERE pmt.estado = true))::numeric * 
        dias_trabajados_new * 
        ( SELECT pmt.aporte_jubilatorio FROM parametros pmt WHERE pmt.estado = true) / 
        100::numeric + (cim.importe - salarios.obtener_importe(in_id_mes,in_gestion,id_funcionario_categoria_new,1)) AS jubilacion, 
        
        CASE
            WHEN dpm.monto_multa IS NULL THEN 0::numeric
            ELSE dpm.monto_multa
        END AS monto_multa
   FROM salarios.funcionarios_recategorizacion_ascenso fn 
   LEFT JOIN salarios.funcionarios_categorias fc ON fc.id_funcionario_categoria = fn.id_funcionario_categoria_new 
   LEFT JOIN salarios.funcionarios_sinaportes fsa ON fc.id_funcionario = fsa.id_funcionario and fsa.estado
   LEFT JOIN legajos.funcionarios f ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria = fc.id_detalle_categoria
   LEFT JOIN salarios.categorias c ON c.id_categoria = dc.id_categoria and c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim ON cim.id_categoria = c.id_categoria and cim.id_mes = in_id_mes
   --LEFT JOIN salarios.detalle_situacion_personal sp ON sp.id_funcionario = f.id_funcionario 
   --LEFT JOIN salarios.situacion_personal spx ON sp.id_situacion_personal = spx.id_situacion_personal and spx.id_mes = in_id_mes and spx.gestion = in_gestion
   LEFT JOIN salarios.situacion_personal spx ON   spx.id_mes = in_id_mes and spx.gestion = in_gestion
   LEFT JOIN salarios.detalle_situacion_personal sp ON sp.id_funcionario = f.id_funcionario and sp.id_situacion_personal = spx.id_situacion_personal
   LEFT JOIN legajos.oficinas o ON o.id_oficina = fc.id_oficina and o.gestion = in_gestion
   --LEFT JOIN salarios.detalles_multas_aplicadas dpm ON dpm.id_funcionario = f.id_funcionario
   --LEFT JOIN salarios.multas_aplicadas ma ON ma.id_multa_aplicada = dpm.id_multa_aplicada AND ma.id_mes = in_id_mes
   left JOIN salarios.multas_aplicadas ma ON ma.id_mes = in_id_mes and ma.gestion = in_gestion
   LEFT JOIN salarios.detalles_multas_aplicadas dpm ON ma.id_multa_aplicada = dpm.id_multa_aplicada and dpm.id_funcionario = f.id_funcionario
   
   WHERE fn.activo AND f.id_funcionario = fn.id_funcionario AND fn.activo and fn.id_mes = in_id_mes and fn.gestion = in_gestion
  )   
  ;

END;
]]></definition>
</function>

<function name="funcionarios_bonificacion"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_admin_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario_bonificacion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="cargo">
		<type name="character varying"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto">
		<type name="numeric"/>
	</parameter>
	<parameter name="porcentaje_bonificacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="gasto_representacion">
		<type name="boolean"/>
	</parameter>
	<parameter name="importe_gasto">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_superior">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_normal">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="bonificacion">
		<type name="character varying"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
SELECT f.id_administracion as id_admin_funcionario,
	o.id_oficina,
	o.nombre as nombre_oficina,
	o.nivel1, 
	o.nivel2,
	fb.id_funcionario_bonificacion,
	f.id_funcionario, 
	f.cedula_funcionario,
	f.ape_nom_funcionario,
	cgn.nombre_cargo,
	CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
        END AS aporte_porcentaje,
	b.monto,
	b.porcentaje,
	b.gasto_representacion,
	--fgr.id_detalle_categoria as id_detalle_cat_gasto_representacion,
	CASE WHEN cimgr.importe IS NULL THEN 0::numeric ELSE cimgr.importe END AS importe_gasto,
	--fs.id_categoria as id_cat_superior,
	cimfs.importe as importe_superior,
	--fc.id_detalle_categoria as id_detalle_cat_normal,
	cimn.importe as importe_normal,
	(b.monto
	 + porcentaje/100.0*(CASE WHEN cimfs.importe IS NULL THEN cimn.importe ELSE cimfs.importe END)
	 +(CASE WHEN cimgr.importe IS NULL THEN 0::numeric ELSE cimgr.importe END)) AS importe_total,
	 (b.monto
	 + porcentaje/100.0*(CASE WHEN cimfs.importe IS NULL THEN cimn.importe ELSE cimfs.importe END)
	 +(CASE WHEN cimgr.importe IS NULL THEN 0::numeric ELSE cimgr.importe END))
	 *(CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
           END)/100 AS aporte_jubilacion,
           fb.id_mes,
           fb.gestion,
           b.descripcion as bonificacion
from salarios.funcionarios_bonificaciones fb
LEFT JOIN salarios.funcionarios_sinaportes fsa ON fb.id_funcionario = fsa.id_funcionario and fsa.estado
INNER JOIN salarios.bonificaciones b ON fb.id_bonificacion = b.id_bonificacion
INNER JOIN legajos.funcionarios f ON fb.id_funcionario = f.id_funcionario
INNER JOIN legajos.oficinas o ON fb.id_oficina = o.id_oficina
INNER JOIN salarios.funcionarios_categorias fc ON fc.id_funcionario = f.id_funcionario
INNER JOIN salarios.detalles_categorias dcn ON fc.id_detalle_categoria = dcn.id_detalle_categoria
INNER JOIN salarios.categorias cn ON cn.id_categoria = dcn.id_categoria
INNER JOIN salarios.categoria_importe_mensual cimn ON cimn.id_categoria = cn.id_categoria AND cimn.id_mes = in_id_mes
inner join salarios.cargos cgn On cn.id_cargo = cgn.id_cargo
LEFT JOIN salarios.funcionarios_representaciones fgr ON fgr.id_funcionario = f.id_funcionario
LEFT JOIN salarios.detalles_categorias dcgr ON fgr.id_detalle_categoria = dcgr.id_detalle_categoria
LEFT JOIN salarios.categorias cgr ON cgr.id_categoria = dcgr.id_categoria
LEFT JOIN salarios.categoria_importe_mensual cimgr ON cimgr.id_categoria = cgr.id_categoria AND cimgr.id_mes = in_id_mes
LEFT JOIN salarios.funcionarios_superiores fs ON fs.id_funcionario = f.id_funcionario
LEFT JOIN salarios.categoria_importe_mensual cimfs ON cimfs.id_categoria = fs.id_categoria AND cimfs.id_mes = in_id_mes

where fb.id_mes = in_id_mes and fb.gestion = in_gestion  
order by o.id_oficina asc;

END;
]]></definition>
</function>

<function name="funcionarios_bonificacion"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_admin_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario_bonificacion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="cantidad_dias">
		<type name="integer"/>
	</parameter>
	<parameter name="monto">
		<type name="numeric"/>
	</parameter>
	<parameter name="porcentaje_bonificacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="gasto_representacion">
		<type name="boolean"/>
	</parameter>
	<parameter name="importe_gasto">
		<type name="numeric"/>
	</parameter>
	<parameter name="sueldo_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="bonificacion">
		<type name="character varying"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de pago de bonificacion de funcionarios
  * Fecha: 2012-04-25
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el sueldo devengado a partir del aporte de jubilacion 
  * ------------  
  */
	RETURN QUERY 
	SELECT  f.id_administracion as id_admin_funcionario,
		o.id_oficina,
		o.nombre as nombre_oficina,
		o.nivel1, 
		o.nivel2,
		fb.id_funcionario_bonificacion,
		f.id_funcionario, 
		f.cedula_funcionario,
		f.ape_nom_funcionario,
		salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje, --true indica nombramiento 
		fb.cantidad_dias,       
		b.monto,
		b.porcentaje as porcentaje_bonificacion,
		b.gasto_representacion,
		salarios.obtener_importe_gasto_representacion(f.id_funcionario, in_id_mes, in_gestion) * porcentaje/100 AS importe_gasto,
		salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion) as sueldo_presupuestado,
		(porcentaje/100.0*salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion)) AS importe_presupuesto,
		(b.monto
		 + (porcentaje/100.0*salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion))
		 + (salarios.obtener_importe_gasto_representacion(f.id_funcionario, in_id_mes, in_gestion) * porcentaje/100)) AS importe_total,
		 (b.monto
		 + (porcentaje/100.0*salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion))
		 + (salarios.obtener_importe_gasto_representacion(f.id_funcionario, in_id_mes, in_gestion) * porcentaje/100))
		 *(salarios.obtener_aporte_porcentaje(f.id_funcionario, false))/100 AS aporte_jubilacion,
		   fb.id_mes,
		   fb.gestion,
		   b.descripcion as bonificacion
	from salarios.funcionarios_bonificaciones fb
	INNER JOIN salarios.bonificaciones b 
		ON fb.id_bonificacion = b.id_bonificacion
	INNER JOIN legajos.funcionarios f 
		ON fb.id_funcionario = f.id_funcionario
	INNER JOIN legajos.oficinas o 
		ON fb.id_oficina = o.id_oficina
		AND o.gestion = in_gestion
	WHERE  fb.id_mes = in_id_mes
	   AND fb.gestion = in_gestion 
	   AND  fb.id_administracion = in_id_administracion
	order by o.id_oficina asc;

END;
]]></definition>
</function>

<function name="funcionarios_bonificacion2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_admin_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario_bonificacion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="cantidad_dias">
		<type name="integer"/>
	</parameter>
	<parameter name="monto">
		<type name="numeric"/>
	</parameter>
	<parameter name="porcentaje_bonificacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="gasto_representacion">
		<type name="boolean"/>
	</parameter>
	<parameter name="importe_gasto">
		<type name="numeric"/>
	</parameter>
	<parameter name="sueldo_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="bonificacion">
		<type name="character varying"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de pago de bonificacion de funcionarios
  * Fecha: 2012-04-25
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el sueldo devengado a partir del aporte de jubilacion 
  * ------------  
  */
	RETURN QUERY 
	SELECT  f.id_administracion as id_admin_funcionario,
		o.id_oficina,
		o.nombre as nombre_oficina,
		o.nivel1, 
		o.nivel2,
		o.nivel3, 
		o.nivel4,
		o.nivel5, 		
		fb.id_funcionario_bonificacion,
		f.id_funcionario, 
		f.cedula_funcionario,
		f.ape_nom_funcionario,
		salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje, --true indica nombramiento 
		fb.cantidad_dias,       
		b.monto,
		b.porcentaje as porcentaje_bonificacion,
		b.gasto_representacion,
		CASE WHEN b.gasto_representacion is FALSE THEN 0 ELSE salarios.obtener_importe_gasto_representacion(f.id_funcionario, in_id_mes, in_gestion) * porcentaje/100 END AS importe_gasto,
		salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion) as sueldo_presupuestado,
		(porcentaje/100.0*salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion)) AS importe_presupuesto,
		((((b.monto
		 + (porcentaje/100.0*salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion))
		 + (CASE WHEN b.gasto_representacion is FALSE THEN 0 ELSE salarios.obtener_importe_gasto_representacion(f.id_funcionario, in_id_mes, in_gestion) END * porcentaje/100))/30)*fb.cantidad_dias)::int)::numeric AS importe_total,
		 (((((b.monto
		 + porcentaje/100.0*salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion)
		 + CASE WHEN b.gasto_representacion is FALSE THEN 0 ELSE salarios.obtener_importe_gasto_representacion(f.id_funcionario, in_id_mes, in_gestion) END * porcentaje/100)/30)*fb.cantidad_dias)
		 *(salarios.obtener_aporte_porcentaje(f.id_funcionario, false))/100)::int)::numeric AS aporte_jubilacion,
		   fb.id_mes,
		   fb.gestion,
		   b.descripcion as bonificacion
	from salarios.funcionarios_bonificaciones fb
	INNER JOIN salarios.bonificaciones b 
		ON fb.id_bonificacion = b.id_bonificacion
	INNER JOIN legajos.funcionarios f 
		ON fb.id_funcionario = f.id_funcionario
	INNER JOIN legajos.oficinas o 
		ON fb.id_oficina = o.id_oficina
		AND o.gestion = in_gestion
	WHERE  fb.id_mes = in_id_mes
	   AND fb.gestion = in_gestion 
	   AND  fb.id_administracion = in_id_administracion
	   AND (fb.id_funcionario_bonificacion not in (SELECT z.id_funcionario_bonificacion
                                                       FROM salarios.detalles_planillas_bonificaciones z
                                                       INNER JOIN salarios.planillas_bonificaciones y ON z.id_planilla_bonificacion = y.id_planilla_bonificacion
                                                       WHERE y.gestion = in_gestion and y.id_mes = in_id_mes AND y.estado in (0,1)  
                                                       ))
	order by o.nivel1,o.nivel2,o.nivel3, o.nivel4, o.nivel5 asc;

END;
]]></definition>
</function>

<function name="funcionarios_gratificaciones_especiales"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="ape_nom_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion que retorna la lista de funcionarios con el importe a ser percibido en concepto
  * de gratificacion especial
  * Fecha: 2012-06-06
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Lee de la tabla funcionarios_gratificaciones_especiales todos los funcionarios 
  * ------------  para aplicarle la gratificacion especial
  */

	RETURN QUERY 
	SELECT distinct
		f.id_funcionario,
		f.cedula_funcionario, 
		f.ape_nom_funcionario,
		--salarios.obtener_monto_gratificacion_especial(f.id_funcionario, in_id_mes, in_gestion),
		(salarios.obtener_monto_gratificacion_especial(f.id_funcionario, in_id_mes, in_gestion)::int)::numeric,
		fge.id_oficina,
		op.nivel1,
		o1.nombre,
		fge.dias_trabajados
	FROM salarios.funcionarios_gratificaciones_especiales fge
	INNER JOIN legajos.funcionarios f ON fge.id_funcionario = f.id_funcionario
	INNER JOIN legajos.oficinas op ON op.id_oficina = fge.id_oficina AND op.gestion = in_gestion
	INNER JOIN legajos.oficinas o1 ON op.nivel1 = o1.nivel1 AND op.nivel2 = o1.nivel2 AND o1.nivel3 = 0 AND o1.nivel4 = 0 AND o1.nivel5 = 0 AND o1.gestion = in_gestion
	WHERE fge.activo AND fge.id_funcionario_gratificacion_especial > 0 AND fge.id_administracion = in_id_administracion;
END;]]></definition>
</function>

<function name="funcionarios_nombrados"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_multa">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
  Select 
	fc.id_oficina, o.nombre, o.nivel1, o.nivel2, o.nivel3, o.nivel4, o.nivel5, f.id_funcionario, f.cedula_funcionario AS cedula, f.ape_nom_funcionario AS funcionario, cim.id_mes, c.gestion, 
        CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio_nombramiento
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
        END AS aporte_porcentaje, 
        CASE
            WHEN sp.dias_trabajados IS NULL THEN ( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
               FROM parametros pmt
              WHERE pmt.estado = true)
            ELSE sp.dias_trabajados
        END AS dias_trabajados, 
        cim.importe AS monto_presupuestado, 
        cim.importe / (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
          WHERE pmt.estado = true))::numeric * 
        CASE
            WHEN sp.dias_trabajados IS NULL THEN ( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
               FROM parametros pmt
              WHERE pmt.estado = true)
            ELSE sp.dias_trabajados
        END::numeric AS monto_devengado, cim.importe / (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
          WHERE pmt.estado = true))::numeric * 
        CASE
            WHEN sp.dias_trabajados IS NULL THEN ( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
               FROM parametros pmt
              WHERE pmt.estado = true)
            ELSE sp.dias_trabajados
        END::numeric * 
        ( CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio_nombramiento
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
        END)/ 100::numeric AS monto_aporte, 
        CASE
            WHEN dpm.monto_multa IS NULL THEN 0::numeric
            ELSE dpm.monto_multa
        END AS monto_multa
   FROM salarios.funcionarios_categorias fc
   LEFT JOIN salarios.funcionarios_sinaportes fsa ON fc.id_funcionario = fsa.id_funcionario and fsa.estado
   LEFT JOIN legajos.funcionarios f ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria = fc.id_detalle_categoria
   LEFT JOIN salarios.categorias c ON c.id_categoria = dc.id_categoria and c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim ON cim.id_categoria = c.id_categoria and cim.id_mes = in_id_mes
   --LEFT JOIN salarios.detalle_situacion_personal sp ON sp.id_funcionario = f.id_funcionario 
   --LEFT JOIN salarios.situacion_personal spx ON sp.id_situacion_personal = spx.id_situacion_personal and spx.id_mes = in_id_mes and spx.gestion = in_gestion
   LEFT JOIN salarios.situacion_personal spx ON   spx.id_mes = in_id_mes and spx.gestion = in_gestion
   LEFT JOIN salarios.detalle_situacion_personal sp ON sp.id_funcionario = f.id_funcionario and sp.id_situacion_personal = spx.id_situacion_personal
   LEFT JOIN legajos.oficinas o ON o.id_oficina = fc.id_oficina and o.gestion = in_gestion
   --LEFT JOIN salarios.detalles_multas_aplicadas dpm ON dpm.id_funcionario = f.id_funcionario
   --LEFT JOIN salarios.multas_aplicadas ma ON ma.id_multa_aplicada = dpm.id_multa_aplicada AND ma.id_mes = in_id_mes
   left JOIN salarios.multas_aplicadas ma ON ma.id_mes = in_id_mes and ma.gestion = in_gestion
   LEFT JOIN salarios.detalles_multas_aplicadas dpm ON ma.id_multa_aplicada = dpm.id_multa_aplicada and dpm.id_funcionario = f.id_funcionario
   INNER JOIN salarios.funcionarios_nombrados fn ON f.id_funcionario = fn.id_funcionario AND fn.activo and fn.id_mes = in_id_mes and fn.gestion = in_gestion
  ORDER BY fc.id_oficina;

END;
]]></definition>
</function>

<function name="funcionarios_normal"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_multa">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
  Select 
	fc.id_oficina, o.nombre, o.nivel1, o.nivel2, o.nivel3, o.nivel4, o.nivel5, f.id_funcionario, f.cedula_funcionario AS cedula, f.ape_nom_funcionario AS funcionario, cim.id_mes, c.gestion, 
        CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
        END AS aporte_porcentaje, 
        
        CASE
            WHEN sp.dias_trabajados IS NULL THEN ( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
               FROM parametros pmt
              WHERE pmt.estado = true)
            ELSE sp.dias_trabajados
        END AS dias_trabajados, 
        
        cim.importe AS monto_presupuestado, 
        
        cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado = true))::numeric * 
        CASE
            WHEN sp.dias_trabajados IS NULL THEN ( 
		SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado = true)
            ELSE sp.dias_trabajados
        END::numeric AS monto_devengado, 
        
        cim.importe_anterior / (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
          WHERE pmt.estado = true))::numeric * 
        CASE
            WHEN sp.dias_trabajados IS NULL THEN ( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
               FROM parametros pmt
              WHERE pmt.estado = true)
            ELSE sp.dias_trabajados
        END::numeric * 
        ( CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
        END) / 
        100::numeric + (CASE WHEN (fsa.estado IS TRUE OR sp.dias_trabajados = 0) THEN 0::numeric 
                       ELSE(cim.importe - cim.importe_anterior) 
                       END) AS jubilacion, 
        CASE
            WHEN dpm.monto_multa IS NULL THEN 0::numeric
            ELSE dpm.monto_multa
        END AS monto_multa
   FROM salarios.funcionarios_categorias fc
   LEFT JOIN salarios.funcionarios_sinaportes fsa ON fc.id_funcionario = fsa.id_funcionario and fsa.estado
   LEFT JOIN legajos.funcionarios f ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria = fc.id_detalle_categoria
   LEFT JOIN salarios.categorias c ON c.id_categoria = dc.id_categoria and c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim ON cim.id_categoria = c.id_categoria and cim.id_mes = in_id_mes
   --LEFT JOIN salarios.detalle_situacion_personal sp ON sp.id_funcionario = f.id_funcionario 
   --LEFT JOIN salarios.situacion_personal spx ON sp.id_situacion_personal = spx.id_situacion_personal and spx.id_mes = in_id_mes and spx.gestion = in_gestion
   LEFT JOIN salarios.situacion_personal spx ON   spx.id_mes = in_id_mes and spx.gestion = in_gestion
   LEFT JOIN salarios.detalle_situacion_personal sp ON sp.id_funcionario = f.id_funcionario and sp.id_situacion_personal = spx.id_situacion_personal
   LEFT JOIN legajos.oficinas o ON o.id_oficina = fc.id_oficina and o.gestion = in_gestion
   --LEFT JOIN salarios.detalles_multas_aplicadas dpm ON dpm.id_funcionario = f.id_funcionario
   --LEFT JOIN salarios.multas_aplicadas ma ON ma.id_multa_aplicada = dpm.id_multa_aplicada AND ma.id_mes = in_id_mes
   left JOIN salarios.multas_aplicadas ma ON ma.id_mes = in_id_mes and ma.gestion = in_gestion
   LEFT JOIN salarios.detalles_multas_aplicadas dpm ON ma.id_multa_aplicada = dpm.id_multa_aplicada and dpm.id_funcionario = f.id_funcionario   
   WHERE fc.estado and f.id_funcionario not in (select a1.id_funcionario from salarios.funcionarios_recategorizados(in_id_mes, in_gestion) a1)
   and f.id_funcionario not in (select a2.id_funcionario from salarios.funcionarios_nombrados(in_id_mes, in_gestion) a2)
   and f.id_funcionario not in (select a3.id_funcionario from salarios.funcionarios_ascensos(in_id_mes, in_gestion) a3)
   and cim.id_mes = in_id_mes and c.gestion = in_gestion
  ORDER BY fc.id_oficina;

END;
]]></definition>
</function>

<function name="funcionarios_recategorizados"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_multa">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
  Select 
	fc.id_oficina, o.nombre, o.nivel1, o.nivel2, o.nivel3, o.nivel4, o.nivel5, f.id_funcionario, f.cedula_funcionario AS cedula, f.ape_nom_funcionario AS funcionario, cim.id_mes, c.gestion, 
        CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
        END AS aporte_porcentaje, 
        CASE
            WHEN sp.dias_trabajados IS NULL THEN ( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
               FROM parametros pmt
              WHERE pmt.estado = true)
            ELSE sp.dias_trabajados
        END AS dias_trabajados, 
        cim.importe AS monto_presupuestado, 
        cim.importe / 
        (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado = true))::numeric * 
        CASE
            WHEN sp.dias_trabajados IS NULL THEN ( 
		SELECT pmt.cantidad_dias_pa_hallar_importe_diario FROM parametros pmt WHERE pmt.estado = true)
            ELSE sp.dias_trabajados
        END::numeric AS monto_devengado, 
        salarios.obtener_importe(in_id_mes,in_gestion,fn.id_funcionario_categoria_old,2) / (( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
          WHERE pmt.estado = true))::numeric * 
        CASE
            WHEN sp.dias_trabajados IS NULL THEN ( SELECT pmt.cantidad_dias_pa_hallar_importe_diario
               FROM parametros pmt
              WHERE pmt.estado = true)
            ELSE sp.dias_trabajados
        END::numeric * 
        ( CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
        END) / 
        100::numeric + (CASE WHEN (fsa.estado IS TRUE OR sp.dias_trabajados = 0 ) THEN 0::numeric ELSE(cim.importe - salarios.obtener_importe(in_id_mes,in_gestion,fn.id_funcionario_categoria_old,2)) end) AS jubilacion, 
        CASE
            WHEN dpm.monto_multa IS NULL THEN 0::numeric
            ELSE dpm.monto_multa
        END AS monto_multa
   FROM salarios.funcionarios_categorias fc
   LEFT JOIN salarios.funcionarios_sinaportes fsa ON fc.id_funcionario = fsa.id_funcionario and fsa.estado
   LEFT JOIN legajos.funcionarios f ON f.id_funcionario = fc.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria = fc.id_detalle_categoria
   LEFT JOIN salarios.categorias c ON c.id_categoria = dc.id_categoria and c.gestion = in_gestion
   LEFT JOIN salarios.categoria_importe_mensual cim ON cim.id_categoria = c.id_categoria and cim.id_mes = in_id_mes
   --LEFT JOIN salarios.detalle_situacion_personal sp ON sp.id_funcionario = f.id_funcionario 
   --LEFT JOIN salarios.situacion_personal spx ON sp.id_situacion_personal = spx.id_situacion_personal and spx.id_mes = in_id_mes and spx.gestion = in_gestion
   LEFT JOIN salarios.situacion_personal spx ON   spx.id_mes = in_id_mes and spx.gestion = in_gestion
   LEFT JOIN salarios.detalle_situacion_personal sp ON sp.id_funcionario = f.id_funcionario and sp.id_situacion_personal = spx.id_situacion_personal
   LEFT JOIN legajos.oficinas o ON o.id_oficina = fc.id_oficina and o.gestion = in_gestion
   --LEFT JOIN salarios.detalles_multas_aplicadas dpm ON dpm.id_funcionario = f.id_funcionario
   --LEFT JOIN salarios.multas_aplicadas ma ON ma.id_multa_aplicada = dpm.id_multa_aplicada AND ma.id_mes = in_id_mes
   left JOIN salarios.multas_aplicadas ma ON ma.id_mes = in_id_mes and ma.gestion = in_gestion
   LEFT JOIN salarios.detalles_multas_aplicadas dpm ON ma.id_multa_aplicada = dpm.id_multa_aplicada and dpm.id_funcionario = f.id_funcionario
   INNER JOIN salarios.funcionarios_recategorizacion fn ON f.id_funcionario = fn.id_funcionario AND fn.activo and fn.id_mes = in_id_mes and fn.gestion = in_gestion
   WHERE fc.estado 
  ORDER BY fc.id_oficina;

END;
]]></definition>
</function>

<function name="funcionarios_representacion"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_admin_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuesto">
		<type name="text"/>
	</parameter>
	<parameter name="id_funcionario_representacion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="cargo">
		<type name="character varying"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
  select * from salarios.funcionarios_representacion_normal(in_id_mes, in_gestion)
  union
  select * from salarios.funcionarios_representacion_cambio(in_id_mes, in_gestion)
  ORDER BY id_oficina, monto_presupuestado;

END;
]]></definition>
</function>

<function name="funcionarios_representacion_cambio"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_admin_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuesto">
		<type name="text"/>
	</parameter>
	<parameter name="id_funcionario_representacion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="cargo">
		<type name="character varying"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
  select f.id_administracion as id_admin_funcionario,
	 o.id_oficina,
	 o.nombre as nombre_oficina,
	 o.nivel1, 
	 o.nivel2,
	 cod_tipo||'-'||cod_programa||'-'||cod_subprograma||'-'||cod_proyecto||'-'||cod_objeto_gasto||'-'||descripcion_estructura_presupuestaria as presupuesto,
         frc.id_funcionario_representacion_entrante,
	 f.id_funcionario,
	 f.cedula_funcionario AS cedula, 
	 f.ape_nom_funcionario AS funcionario,
	 cg.nombre_cargo,
	 CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
         END AS aporte_porcentaje, 
	 frc.dias_entrante as dias_trabajados,
	 --cim.importe/30*frc.dias_entrante as presupuestado,
	 cim.importe as presupuestado,
	 cim.importe/30*frc.dias_entrante as devengado,
	 cim.importe/30*frc.dias_entrante *
	 (CASE WHEN fsa.estado IS TRUE THEN 0::numeric
	  ELSE 
	      ( SELECT pmt.aporte_jubilatorio FROM parametros pmt WHERE pmt.estado = true) 
	  END) / 
		100::numeric  AS jubilacion, 
	 cim.id_mes,
	 c.gestion

from salarios.funcionarios_representaciones_cambios frc
inner join salarios.funcionarios_representaciones fr ON frc.id_funcionario_representacion_entrante = fr.id_funcionario_representacion
left join salarios.funcionarios_sinaportes fsa ON fr.id_funcionario = fsa.id_funcionario and fsa.estado
inner join legajos.funcionarios f On fr.id_funcionario = f.id_funcionario
inner join salarios.detalles_categorias dc On fr.id_detalle_categoria = dc.id_detalle_categoria
inner join salarios.categorias c On dc.id_categoria = c.id_categoria and c.gestion = in_gestion
inner join salarios.categoria_importe_mensual cim On c.id_categoria = cim.id_categoria and cim.id_mes = in_id_mes
inner join salarios.cargos cg On c.id_cargo = cg.id_cargo
inner join legajos.oficinas o On o.id_oficina = fr.id_oficina
inner join presupuesto.estructura_presupuestaria ep on ep.id_estructura_presupuestaria=dc.id_estructura_presupuestaria

where c.gastos_de_representacion and frc.id_mes = in_id_mes and frc.gestion = in_gestion and fr.estado 

union

  select f.id_administracion as id_admin_funcionario,
	 o.id_oficina,
	 o.nombre as nombre_oficina,
	 o.nivel1, 
	 o.nivel2,
	 cod_tipo||'-'||cod_programa||'-'||cod_subprograma||'-'||cod_proyecto||'-'||cod_objeto_gasto||'-'||descripcion_estructura_presupuestaria as presupuesto,
	 id_funcionario_representacion_saliente,
	 f.id_funcionario,
	 f.cedula_funcionario AS cedula, 
	 f.ape_nom_funcionario AS funcionario,
	 cg.nombre_cargo,
	 CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
         END AS aporte_porcentaje, 
	 frc.dias_saliente as dias_trabajados,
	 --cim.importe/30*frc.dias_saliente as presupuestado,
	 cim.importe as presupuestado,
	 cim.importe/30*frc.dias_saliente as devengado,
	 cim.importe/30*frc.dias_saliente *
	 (CASE WHEN fsa.estado IS TRUE THEN 0::numeric
	  ELSE 
	      ( SELECT pmt.aporte_jubilatorio FROM parametros pmt WHERE pmt.estado = true) 
	  END) / 
		100::numeric  AS jubilacion, 
	 cim.id_mes,
	 c.gestion

from salarios.funcionarios_representaciones_cambios frc
inner join salarios.funcionarios_representaciones fr ON frc.id_funcionario_representacion_saliente = fr.id_funcionario_representacion
left join salarios.funcionarios_sinaportes fsa ON fr.id_funcionario = fsa.id_funcionario and fsa.estado
inner join legajos.funcionarios f On fr.id_funcionario = f.id_funcionario
inner join salarios.detalles_categorias dc On fr.id_detalle_categoria = dc.id_detalle_categoria
inner join salarios.categorias c On dc.id_categoria = c.id_categoria and c.gestion = in_gestion
inner join salarios.categoria_importe_mensual cim On c.id_categoria = cim.id_categoria and cim.id_mes = in_id_mes
inner join salarios.cargos cg On c.id_cargo = cg.id_cargo
inner join legajos.oficinas o On o.id_oficina = fr.id_oficina
inner join presupuesto.estructura_presupuestaria ep on ep.id_estructura_presupuestaria=dc.id_estructura_presupuestaria

where c.gastos_de_representacion and frc.id_mes = in_id_mes and frc.gestion = in_gestion and fr.estado = false 

order by id_oficina asc, presupuestado desc;

END;
]]></definition>
</function>

<function name="funcionarios_representacion_normal"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_admin_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuesto">
		<type name="text"/>
	</parameter>
	<parameter name="id_funcionario_representacion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="cargo">
		<type name="character varying"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
  select f.id_administracion as id_admin_funcionario,
	 o.id_oficina,
	 o.nombre as nombre_oficina,
	 o.nivel1, 
	 o.nivel2,
	 cod_tipo||'-'||cod_programa||'-'||cod_subprograma||'-'||cod_proyecto||'-'||cod_objeto_gasto||'-'||descripcion_estructura_presupuestaria as presupuesto,
	 fr.id_funcionario_representacion,
	 f.id_funcionario,
	 f.cedula_funcionario AS cedula, 
	 f.ape_nom_funcionario AS funcionario,
	 cg.nombre_cargo,
	 CASE
            WHEN fsa.estado IS TRUE THEN 0::numeric
            ELSE 
            ( SELECT pmt.aporte_jubilatorio
                   FROM parametros pmt
                  WHERE pmt.estado = true) 
         END AS aporte_porcentaje, 
	 30 as dias_trabajados,
	 cim.importe as monto_presupuestado,
	 cim.importe as monto_devengado,
	 cim.importe *
	 (CASE WHEN fsa.estado IS TRUE THEN 0::numeric
	  ELSE 
	      ( SELECT pmt.aporte_jubilatorio FROM parametros pmt WHERE pmt.estado = true) 
	  END) / 
		100::numeric  AS jubilacion, 
	 cim.id_mes,
	 c.gestion

from salarios.funcionarios_representaciones fr
left join salarios.funcionarios_sinaportes fsa ON fr.id_funcionario = fsa.id_funcionario and fsa.estado
inner join legajos.funcionarios f On fr.id_funcionario = f.id_funcionario
inner join salarios.detalles_categorias dc On fr.id_detalle_categoria = dc.id_detalle_categoria
inner join salarios.categorias c On dc.id_categoria = c.id_categoria and c.gestion = in_gestion
inner join salarios.categoria_importe_mensual cim On c.id_categoria = cim.id_categoria and cim.id_mes = in_id_mes
inner join salarios.cargos cg On c.id_cargo = cg.id_cargo
inner join legajos.oficinas o On o.id_oficina = fr.id_oficina
inner join presupuesto.estructura_presupuestaria ep on ep.id_estructura_presupuestaria=dc.id_estructura_presupuestaria

where c.gastos_de_representacion and cim.id_mes = in_id_mes and c.gestion = in_gestion and fr.estado 
and (f.id_funcionario not in (select m.id_funcionario from salarios.funcionarios_representaciones_cambios x inner join salarios.funcionarios_representaciones m On x.id_funcionario_representacion_entrante = m.id_funcionario_representacion Where x.gestion = in_gestion and x.id_mes =in_id_mes))
and (f.id_funcionario not in (select n.id_funcionario from salarios.funcionarios_representaciones_cambios y inner join salarios.funcionarios_representaciones n On y.id_funcionario_representacion_saliente = n.id_funcionario_representacion Where y.gestion = in_gestion and y.id_mes =in_id_mes))
     
order by id_oficina asc, importe desc;

END;
]]></definition>
</function>

<function name="funcionarios_subsidio"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario_subsidio">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="cantidad">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_subsidio">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="subsidio">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de pago de subsidio de funcionarios
  * Fecha: 2012-04-30
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el sueldo devengado a partir del aporte de jubilacion 
  * ------------  
  */
	RETURN QUERY 
	SELECT  
		o.id_oficina,
		o.nombre AS nombre_oficina,
		o.nivel1, 
		o.nivel2,
		fs.id_funcionario_subsidio,
		f.id_funcionario, 
		f.cedula_funcionario,
		f.ape_nom_funcionario,
		0.0 AS aporte_porcentaje, -- salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje, --no tiene aporte
		fs.cantidad, 
		s.importe AS monto_subsidio, 
		fs.cantidad*s.importe AS importe_total,     
		0.0 AS aporte_jubilacion, -- No hay aporte
		   fs.id_mes,
		   fs.gestion,
		   s.descripcion::text AS subsidio
	FROM salarios.funcionarios_subsidios fs
	INNER JOIN salarios.subsidios s 
		ON fs.id_subsidio = s.id_subsidio
	INNER JOIN legajos.funcionarios f 
		ON fs.id_funcionario = f.id_funcionario
	INNER JOIN legajos.oficinas o 
		ON fs.id_oficina = o.id_oficina
		AND o.gestion = in_gestion
	WHERE  fs.id_mes = in_id_mes
	   AND fs.gestion = in_gestion 
	   AND  fs.id_administracion = in_id_administracion
	order by o.id_oficina asc;

END;
]]></definition>
</function>

<function name="funcionarios_sueldo"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_multa">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
  select * from salarios.funcionarios_ascensos(in_id_mes, in_gestion)
  union
  select * from salarios.funcionarios_recategorizados(in_id_mes, in_gestion)
  union
  select * from salarios.funcionarios_normal(in_id_mes, in_gestion)
  union
  select * from salarios.funcionarios_nombrados(in_id_mes, in_gestion)
  ORDER BY id_oficina;

END;
]]></definition>
</function>

<function name="funcionarios_superiores_diferencias"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario_superior">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="importe_monto_categoria">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_monto_cargo">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_monto_diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_monto_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de pago de diferencia de funcionarios
  * Fecha: 2012-05-02
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el pago de diferencia 
  * ------------  
  */
	RETURN QUERY 
	SELECT  
		o.id_oficina,
		o.nombre AS nombre_oficina,
		o.nivel1, 
		o.nivel2,
		fs.id_funcionario_superior,
		f.id_funcionario, 
		f.cedula_funcionario,
		f.ape_nom_funcionario,
		salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje, 
		salarios.obtener_dias_trabajados_superior(f.id_funcionario, in_id_mes, in_gestion ) AS dias_trabajados,
		 
		salarios.obtener_sueldo_asignado_normal(f.id_funcionario, in_id_mes, in_gestion) AS importe_monto_categoria, 
		
		salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion) AS importe_monto_cargo,
		
		((((salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion) - 
		salarios.obtener_sueldo_asignado_normal(f.id_funcionario, in_id_mes, in_gestion))*
		salarios.obtener_dias_trabajados_superior(f.id_funcionario, in_id_mes, in_gestion)/
		(( SELECT pmt.cantidad_dias_pa_hallar_importe_diario 
		   FROM parametros pmt 
		   WHERE pmt.estado LIMIT 1
		))::double precision)::numeric)::int)::numeric AS importe_monto_diferencia,

		((((salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion) - 
		salarios.obtener_sueldo_asignado_normal(f.id_funcionario, in_id_mes, in_gestion))*
		salarios.obtener_dias_trabajados_superior(f.id_funcionario, in_id_mes, in_gestion)/
		(( SELECT pmt.cantidad_dias_pa_hallar_importe_diario 
		   FROM parametros pmt 
		   WHERE pmt.estado LIMIT 1
		))::double precision)::numeric *
		salarios.obtener_aporte_porcentaje(f.id_funcionario, false)/100.0)::int)::numeric AS importe_monto_aporte,
		in_id_mes,
		fs.gestion
	FROM salarios.funcionarios_superiores fs
	INNER JOIN legajos.funcionarios f 
		ON fs.id_funcionario = f.id_funcionario
	INNER JOIN legajos.oficinas o 
		ON fs.id_oficina = o.id_oficina
		AND o.gestion = in_gestion
	WHERE  fs.gestion = in_gestion 
	   AND fs.id_administracion = in_id_administracion
	   AND fs.hasta is NULL
	order by o.id_oficina asc;

END;
]]></definition>
</function>

<function name="funcionarios_superiores_diferencias2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario_superior">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="importe_monto_categoria">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_monto_cargo">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_monto_diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_monto_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de pago de diferencia de funcionarios
  * Fecha: 2012-05-02
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el pago de diferencia 
  * ------------  
  */
	RETURN QUERY 
	SELECT  
		o.id_oficina,
		o.nombre AS nombre_oficina,
		o.nivel1, 
		o.nivel2,
		fs.id_funcionario_superior,
		f.id_funcionario, 
		f.cedula_funcionario,
		f.ape_nom_funcionario,
		salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje, 
		salarios.obtener_dias_trabajados_superior(f.id_funcionario, in_id_mes, in_gestion ) AS dias_trabajados,
		 
		salarios.obtener_sueldo_asignado_normal(f.id_funcionario, in_id_mes, in_gestion) AS importe_monto_categoria, 
		
		salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion) AS importe_monto_cargo,
		
		((((salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion) - 
		salarios.obtener_sueldo_asignado_normal(f.id_funcionario, in_id_mes, in_gestion))*
		salarios.obtener_dias_trabajados_superior(f.id_funcionario, in_id_mes, in_gestion)/
		(( SELECT pmt.cantidad_dias_pa_hallar_importe_diario 
		   FROM parametros pmt 
		   WHERE pmt.estado LIMIT 1
		))::double precision)::numeric)::int)::numeric AS importe_monto_diferencia,

		((((salarios.obtener_sueldo_asignado(f.id_funcionario, in_id_mes, in_gestion) - 
		salarios.obtener_sueldo_asignado_normal(f.id_funcionario, in_id_mes, in_gestion))*
		salarios.obtener_dias_trabajados_superior(f.id_funcionario, in_id_mes, in_gestion)/
		(( SELECT pmt.cantidad_dias_pa_hallar_importe_diario 
		   FROM parametros pmt 
		   WHERE pmt.estado LIMIT 1
		))::double precision)::numeric *
		salarios.obtener_aporte_porcentaje(f.id_funcionario, false)/100.0)::int)::numeric AS importe_monto_aporte,
		in_id_mes,
		fs.gestion
	FROM salarios.funcionarios_superiores fs
	INNER JOIN legajos.funcionarios f 
		ON fs.id_funcionario = f.id_funcionario
	INNER JOIN legajos.oficinas o 
		ON fs.id_oficina = o.id_oficina
		AND o.gestion = in_gestion
	WHERE  fs.gestion = in_gestion 
	   AND fs.id_administracion = in_id_administracion
	   AND fs.hasta is NULL
	   AND (fs.id_funcionario_superior NOT IN (SELECT z.id_funcionario_superior
                                                   FROM salarios.planilla_diferencia_salarial_detalle z
                                                   LEFT JOIN salarios.planilla_diferencia_salarial y ON z.id_planilla_diferencia_salarial = y.id_planilla_diferencia_salarial
                                                   WHERE y.gestion = in_gestion
                                                   and y.id_mes = in_id_mes
                                                   and y.id_tipo_pagos_varios = 1
                                                   and y.estado <> 2
                                                )
                )
	order by o.id_oficina asc;

END;
]]></definition>
</function>

<function name="hoja_liquidacion_aguinaldos"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_tipo_aguinaldo">
		<type name="integer"/>
	</parameter>
	<parameter name="concepto">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="ape_nom">
		<type name="character varying"/>
	</parameter>
	<parameter name="estado_funcionario">
		<type name="boolean"/>
	</parameter>
	<parameter name="nombre_categoria">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_nivel1">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel2">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel3">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel4">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel5">
		<type name="character varying"/>
	</parameter>
	<parameter name="enero">
		<type name="numeric"/>
	</parameter>
	<parameter name="febrero">
		<type name="numeric"/>
	</parameter>
	<parameter name="marzo">
		<type name="numeric"/>
	</parameter>
	<parameter name="abril">
		<type name="numeric"/>
	</parameter>
	<parameter name="mayo">
		<type name="numeric"/>
	</parameter>
	<parameter name="junio">
		<type name="numeric"/>
	</parameter>
	<parameter name="julio">
		<type name="numeric"/>
	</parameter>
	<parameter name="agosto">
		<type name="numeric"/>
	</parameter>
	<parameter name="setiembre">
		<type name="numeric"/>
	</parameter>
	<parameter name="octubre">
		<type name="numeric"/>
	</parameter>
	<parameter name="noviembre">
		<type name="numeric"/>
	</parameter>
	<parameter name="diciembre">
		<type name="numeric"/>
	</parameter>
	<parameter name="aguinaldo">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_funcionario" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener pagos y aguinaldo en distintos concepto por funcionarios.
  * Fecha: 2013-12-09
  * Autor: Diego Alcaraz
  * Parametros:
  *            in_id_funcionario identificador de funcionario
  *            in_gestion ejercicio aplicado  
  *            in_id_administracion, identificador de la administracion 
  */
RETURN QUERY 
SELECT t.*, (COALESCE(t.ene,0)+
	   COALESCE(t.feb,0)+
	   COALESCE(t.mar,0)+
	   COALESCE(t.abr,0)+
	   COALESCE(t.may,0)+
	   COALESCE(t.jun,0)+
	   COALESCE(t.jul,0)+
	   COALESCE(t.ago,0)+
	   COALESCE(t.sep,0)+
	   COALESCE(t.oct,0)+
	   COALESCE(t.nov,0)+
	   COALESCE(t.dic,0)
	  ) as total FROM (
SELECT * FROM crosstab(
  'SELECT a.id_tipo_aguinaldo,          
          ta.descripcion,	  
          fa.id_funcionario, 
	  trim(replace(to_char(trim(f.cedula_funcionario)::integer, \'999,999,999,999,999\'),\',\',\'.\')) as cedula_funcionario,
	  f.ape_nom_funcionario,
	  f.estado_funcionario,   	  
          ca.nombre_categoria,
   	  g.nivel1,g.nivel2,g.nivel3,g.nivel4,g.nivel5,
	  g.nombre_nivel1,
   	  CASE WHEN g.nombre_nivel1=g.nombre_nivel2 THEN \'---\' ELSE g.nombre_nivel2 END,   	  
          CASE WHEN g.nombre_nivel2=g.nombre_nivel3 and g.nombre_nivel4=g.nombre_nivel3 and g.nombre_nivel5=g.nombre_nivel3 THEN \'---\' ELSE g.nombre_nivel3 END,
          CASE WHEN g.nombre_nivel4=g.nombre_nivel3 and g.nombre_nivel4=g.nombre_nivel5 THEN \'---\' ELSE g.nombre_nivel4 END,
          CASE WHEN g.nombre_nivel5=g.nombre_nivel4 THEN \'---\' ELSE g.nombre_nivel5 END,
	  da.id_mes,
	  sum(da.monto)  
   FROM salarios.planillas_detalles_aguinaldos da
   INNER JOIN salarios.planillas_aguinaldos a ON da.id_planilla_aguinaldo = a.id_planilla_aguinaldo
   INNER JOIN salarios.funcionarios_aguinaldos fa ON da.id_funcionario_aguinaldo = fa.id_funcionario_aguinaldo
   INNER JOIN legajos.funcionarios f ON fa.id_funcionario = f.id_funcionario
   INNER JOIN salarios.tipos_aguinaldos ta on ta.id_tipo_aguinaldo = a.id_tipo_aguinaldo
   LEFT JOIN salarios.funcionarios_categorias d ON (fa.id_funcionario = d.id_funcionario and d.gestion='||in_gestion||' and (d.hasta is null or d.id_funcionario_categoria = (SELECT max(xx.id_funcionario_categoria)
					           FROM salarios.funcionarios_categorias xx
					           WHERE xx.id_funcionario=fa.id_funcionario
					           AND xx.gestion='||in_gestion||')))
LEFT JOIN salarios.detalles_categorias e ON (e.id_detalle_categoria = d.id_detalle_categoria)
LEFT JOIN salarios.categorias ca ON (ca.id_categoria = e.id_categoria)
LEFT JOIN legajos.oficinas_con_descripciones g ON (g.id_oficina = d.id_oficina)
   WHERE fa.id_funcionario = '||in_id_funcionario||' AND a.gestion = '||in_gestion||' AND a.id_administracion = '||in_id_administracion||'
   GROUP BY a.id_tipo_aguinaldo,   
	    da.id_mes,
            ta.descripcion,            
	    fa.id_funcionario,
	    f.cedula_funcionario,  
	    f.ape_nom_funcionario, 
	    f.estado_funcionario,
	    ca.nombre_categoria,
   	    g.nivel1,g.nivel2,g.nivel3,g.nivel4,g.nivel5,
	    g.nombre_nivel1,
	    g.nombre_nivel2,
	    g.nombre_nivel3,
	    g.nombre_nivel4,
	    g.nombre_nivel5 ORDER BY 1,2',
  'SELECT m FROM generate_series(1,12) m'
) AS (
  id_tipo_aguinaldo int,
  descripcion varchar,
  id_funcionario int,
  cedula varchar,
  funcionario varchar,
  estado_funcionario boolean,
  nombre_categoria varchar,
  nivel1 int, nivel2 int, nivel3 int, nivel4 int, nivel5 int,
  nombre_nivel1 varchar,
  nombre_nivel2 varchar,
  nombre_nivel3 varchar,
  nombre_nivel4 varchar,
  nombre_nivel5 varchar,    
  ene numeric,
  feb numeric,
  mar numeric,
  abr numeric,
  may numeric,
  jun numeric,
  jul numeric,
  ago numeric,
  sep numeric,
  oct numeric,
  nov numeric,
  dic numeric
)) t
 ;
END;
]]></definition>
</function>

<usertype name="registro_hoja_liquidacion_aguinaldos" configuration="composite">
	<schema name="public"/>
	<role name="dalcaraz"/>
	<typeattrib name="id_tipo_aguinaldo">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="concepto">
		<type name="character varying"/>
	</typeattrib>
	<typeattrib name="id_funcionario">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="cedula">
		<type name="character varying"/>
	</typeattrib>
	<typeattrib name="ape_nom">
		<type name="character varying"/>
	</typeattrib>
	<typeattrib name="estado_funcionario">
		<type name="boolean"/>
	</typeattrib>
	<typeattrib name="nombre_categoria">
		<type name="character varying"/>
	</typeattrib>
	<typeattrib name="nivel1">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="nivel2">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="nivel3">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="nivel4">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="nivel5">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="nombre_nivel1">
		<type name="character varying"/>
	</typeattrib>
	<typeattrib name="nombre_nivel2">
		<type name="character varying"/>
	</typeattrib>
	<typeattrib name="nombre_nivel3">
		<type name="character varying"/>
	</typeattrib>
	<typeattrib name="nombre_nivel4">
		<type name="character varying"/>
	</typeattrib>
	<typeattrib name="nombre_nivel5">
		<type name="character varying"/>
	</typeattrib>
	<typeattrib name="enero">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="febrero">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="marzo">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="abril">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="mayo">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="junio">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="julio">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="agosto">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="setiembre">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="octubre">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="noviembre">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="diciembre">
		<type name="numeric"/>
	</typeattrib>
	<typeattrib name="aguinaldo">
		<type name="numeric"/>
	</typeattrib>
</usertype>

<function name="hoja_liquidacion_aguinaldos_union"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.registro_hoja_liquidacion_aguinaldos"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[

/*
--DROP TYPE registro_hoja_liquidacion_aguinaldos;
CREATE TYPE registro_hoja_liquidacion_aguinaldos AS (
id_tipo_aguinaldo integer, concepto character varying, id_funcionario integer, cedula character varying, ape_nom character varying, estado_funcionario boolean, nombre_categoria character varying, nivel1 integer, nivel2 integer, nivel3 integer, nivel4 integer, nivel5 integer, nombre_nivel1 character varying, nombre_nivel2 character varying, nombre_nivel3 character varying, nombre_nivel4 character varying, nombre_nivel5 character varying, enero numeric, febrero numeric, marzo numeric, abril numeric, mayo numeric, junio numeric, julio numeric, agosto numeric, setiembre numeric, octubre numeric, noviembre numeric, diciembre numeric, aguinaldo numeric
);*/

DECLARE   sql text := '';
	  registros registro_hoja_liquidacion_aguinaldos;
	  ids_funcionarios int[];
	  total_reg integer :=0;
	  sig_reg integer :=0;
	  i integer:=1;

BEGIN
  SELECT * INTO total_reg 
  FROM (SELECT count(f.id_funcionario) FROM legajos.funcionarios f LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario = f.id_funcionario LEFT JOIN legajos.oficinas ocd ON ocd.id_oficina = saa.id_oficina_presta WHERE f.estado_funcionario AND f.id_administracion in(0,in_id_administracion) AND 
  (
     CASE
        WHEN 
	   char_length(in_id_funcionario)>1 
        THEN 
	   f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
        ELSE
	   f.id_funcionario>0
     END  
   )

  ) hola; 
  RAISE NOTICE 'total registros: %',total_reg;

  SELECT * INTO ids_funcionarios 
  FROM (SELECT ARRAY(SELECT f.id_funcionario FROM legajos.funcionarios f LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario = f.id_funcionario LEFT JOIN legajos.oficinas ocd ON ocd.id_oficina = saa.id_oficina_presta WHERE f.estado_funcionario AND f.id_administracion in(0,in_id_administracion) AND 
    (
     CASE
        WHEN 
	   char_length(in_id_funcionario)>1 
        THEN 
	   f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
        ELSE
	   f.id_funcionario>0
     END  
   )
  )
  ) hola2; 
  RAISE NOTICE 'ids_funcionarios: %',ids_funcionarios;
  
sql = sql||' SELECT * FROM (';
FOR i IN 1 .. array_upper(ids_funcionarios, 1)
LOOP
    sig_reg:=sig_reg+1;
    sql := sql ||' (SELECT * FROM salarios.hoja_liquidacion_aguinaldos('|| ids_funcionarios[i] || ',' || in_gestion || ',' || in_id_administracion || '))';
    IF sig_reg<total_reg THEN
	sql := sql ||' UNION ';
    END IF;  	
END LOOP;
sql := sql ||') final ORDER BY 8,9,10,11,12,4,1;';
RAISE NOTICE 'sql: %',sql;
RETURN QUERY
     EXECUTE sql;
/*
  RAISE NOTICE 'sql: %',sql;
  --EXECUTE sql INTO registros;
  RETURN QUERY
     EXECUTE sql;*/
     
  /*FOR registros IN (sql) LOOP
     RETURN NEXT registros;
  END LOOP;*/
  EXCEPTION
	     WHEN OTHERS THEN
		RAISE EXCEPTION 'Falló la orden SQL: %. El error fue: %',sql,SQLERRM;
END; 
]]></definition>
</function>

<function name="hoja_liquidacion_salario_permanente"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="nombres">
		<type name="text"/>
	</parameter>
	<parameter name="apellidos">
		<type name="text"/>
	</parameter>
	<parameter name="nivel1">
		<type name="text"/>
	</parameter>
	<parameter name="nivel2">
		<type name="text"/>
	</parameter>
	<parameter name="nivel3">
		<type name="text"/>
	</parameter>
	<parameter name="nivel4">
		<type name="text"/>
	</parameter>
	<parameter name="nivel5">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="text"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="tipo">
		<type name="text"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="text"/>
	</parameter>
	<parameter name="importe">
		<type name="text"/>
	</parameter>
	<parameter name="descuento">
		<type name="text"/>
	</parameter>
	<parameter name="aporte">
		<type name="text"/>
	</parameter>
	<parameter name="liquido">
		<type name="text"/>
	</parameter>
	<parameter name="tipo_concepto">
		<type name="text"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="linea">
		<type name="bigint"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar la hoja de liquidación del funcionario permanente/comisionado
  * Creado    : 2013-10-08 13:49:00
  * Modificado: 2014-12-03 07:49:00
  * Modificado: 2015-06-11 14:46:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado
  *            in_id_funcionario    identificador del funcionario 
  * 
  * Descripcion:  Genera la hoja de liquidación de salarios individual del funcionario permanente/comisionado
  * ------------  
  */
RETURN QUERY 
SELECT
*
FROM
(
--DATOS BASICOS FUNCIONARIO PERMANENTE
SELECT
  pl.id_funcionario,--1
  trim(replace(to_char(max(pl.cedula)::integer,'999,999,999'),',','.')) as cedula,--2
  max(pl.nombres) as nombres,--3
  max(pl.apellidos) as apellidos,--4
  max(pl.nivel1) as nivel1,--5
  max(pl.nivel2) as nivel2,--6
  max(pl.nivel3) as nivel3,--7
  max(pl.nivel4) as nivel4,--8
  max(pl.nivel5) as nivel5,--9
  max(pl.categoria) as categoria,--10
  max(pl.cargo) as cargo,--11
  max(pl.presupuestado) as presupuestado,--12
  max(pl.dias_trabajados) as dias_trabajados,--13
  max(pl.tipo) as tipo,
  max(pl.concepto) as concepto,--14
  max(pl.objeto_gasto) as objeto_gasto,--15
  max(pl.importe) as importe,--16
  max(pl.descuento) as descuento,--17
  max(pl.aporte) as aporte,--18
  max(pl.liquido) as liquido,--19
  max(pl.tipo_concepto) as tipo_concepto, --20
  max(pl.orden) as orden, --21
  max(pl.linea) as linea --22
FROM
(
SELECT
  dbf.id_funcionario,--1
  dbf.cedula,--2
  dbf.nombres,--3
  dbf.apellidos,--4
  dbf.nivel1,--5
  CASE WHEN dbf.nivel1=dbf.nivel2 THEN '---' ELSE dbf.nivel2 END,--6
  CASE WHEN dbf.nivel2=dbf.nivel3 and dbf.nivel4=dbf.nivel3 and dbf.nivel5=dbf.nivel3 THEN '---' ELSE dbf.nivel3 END,--7
  CASE WHEN dbf.nivel4=dbf.nivel3 and dbf.nivel4=dbf.nivel5 THEN '---' ELSE dbf.nivel4 END,--8
  CASE WHEN dbf.nivel5=dbf.nivel4 THEN '---' ELSE dbf.nivel5 END,--9
  dbf.categoria,--10
  dbf.cargo,--11
  dbf.presupuestado,--12
  0 as dias_trabajados,--13
  dbf.tipo,
  dbf.concepto,--14
  dbf.objeto_gasto,--15
  dbf.importe,--16
  dbf.descuento,--17
  dbf.aporte,--18
  dbf.liquido,--19
  dbf.tipo_concepto, --20
  dbf.orden, --21
  dbf.linea --22
FROM
(
SELECT
  f.id_funcionario,
  f.cedula_funcionario as cedula,
  f.nombre_funcionario as nombres,
  f.apellido_funcionario as apellidos,
  ocd.nombre_nivel1 as nivel1,
  ocd.nombre_nivel2 as nivel2,
  CASE WHEN trim(ocd.nombre_nivel3) is null THEN (CASE WHEN ocd.nombre_nivel4 is null THEN ocd.nombre_nivel5 ELSE ocd.nombre_nivel4 END) ELSE ocd.nombre_nivel3 END as nivel3,
  ocd.nombre_nivel4 as nivel4,
  ocd.nombre_nivel5 as nivel5,
  cat.nombre_categoria as categoria,
  car.nombre_cargo as cargo,
  replace(to_char(cim.importe,'999,999,999'),',','.') as presupuestado,
  CASE WHEN cat.es_comisionado THEN 'COM ['||UPPER(cat.abreviatura_entidad)||']' ELSE 'PER ['||UPPER(cat.abreviatura_entidad)||']' END as tipo, 
  'SUELDO'::text as concepto,
  '111 [S]'::text as objeto_gasto,
  '0'::text as importe,
  '0'::text as descuento,
  '0'::text as aporte,
  '0'::text as liquido,
  '---'::text as tipo_concepto, --DATOS BÁSICOS
  1 as orden,
  1 as linea
FROM 
  salarios.funcionarios_categorias fc
  LEFT JOIN salarios.detalles_categorias dc             ON dc.id_detalle_categoria=fc.id_detalle_categoria
  LEFT JOIN salarios.categorias cat                     ON cat.id_categoria=dc.id_categoria
  LEFT JOIN salarios.cargos car                         ON car.id_cargo=cat.id_cargo
  LEFT JOIN salarios.categoria_importe_mensual cim      ON cim.id_categoria=cat.id_categoria and cim.id_mes = in_id_mes -- id_mes
  LEFT JOIN legajos.funcionarios f                      ON f.id_funcionario=fc.id_funcionario
  --LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f.id_funcionario
  LEFT JOIN legajos.oficinas_con_descripciones      ocd ON ocd.id_oficina=fc.id_oficina 
WHERE
  fc.gestion=in_gestion and
  fc.id_funcionario_categoria in (SELECT x.id_funcionario_categoria
				 FROM salarios.funcionarios_categorias x
				 WHERE (in_id_mes BETWEEN  extract(MONTH from x.desde) AND
					extract(MONTH from x.hasta-1) OR x.hasta is null) AND 
					x.gestion=fc.gestion AND 
					x.id_funcionario = fc.id_funcionario 
			        ORDER BY x.id_funcionario_categoria desc LIMIT 1) and
  --f.estado_funcionario and
  f.id_administracion IN (0,in_id_administracion) and
  cat.id_cargo>0 and
  f.id_funcionario=in_id_funcionario
) dbf

UNION
--SALARIO PERMANENTE [111]
(
SELECT 
  in_id_funcionario as id_funcionario,--1
  '0'::text as cedula,--2
  '---'::text as nombres,--3
  '---'::text as apellidos,--4
  '---'::text as nivel1,--5
  '---'::text as nivel2,--6
  '---'::text as nivel3,--7
  '---'::text as nivel4,--8
  '---'::text as nivel5,--9
  '---'::text as categoria,--10
  '---'::text as cargo,--11 
 --replace(to_char(sum(dps.monto_presupuestado),'999,999,999'),',','.') as presupuestado,--12 CAMBIO REALIZADO
  replace(to_char(max(dps.monto_presupuestado),'999,999,999'),',','.') as presupuestado,--12
  sum(dps.dias_trabajados)::integer as dias_trabajados,--13
  '---'::text as tipo,
  'SUELDO ('||sum(dps.dias_trabajados)||' DIAS)' as concepto,--14
  '111 [S]'::text as objeto_gasto,--15
  replace(to_char(sum(dps.monto_devengado),'999,999,999'),',','.') as importe,--16
  '0'::text as descuento,--17
  replace(to_char(case when sum(dps.monto_aporte) is null then 0 else -sum(dps.monto_aporte) end,'999,999,999'),',','.') as aporte,--18
  replace(to_char((sum(dps.monto_devengado)-sum(dps.monto_aporte)),'999,999,999'),',','.') as liquido,--19
  'I'::text as tipo_concepto, --20
  1 as orden, --21
  10 as linea --22
FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario = ps.id_planilla_salario
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=in_id_funcionario
) 
) pl
GROUP BY pl.id_funcionario

UNION
(
--DETALLES LIQUIDACIONES
SELECT
  in_id_funcionario as id_funcionario,--1
  '0'::text as cedula,--2
  '---'::text as nombres,--3
  '---'::text as apellidos,--4
  '---'::text as nivel1,--5
  '---'::text as nivel2,--6
  '---'::text as nivel3,--7
  '---'::text as nivel4,--8
  '---'::text as nivel5,--9
  '---'::text as categoria,--10
  '---'::text as cargo,--11
  '0'::text as presupuestado,--12
  0 as dias_trabajados,--13
  '---'::text as tipo,
  detalles_liquidacion.concepto,--14
  detalles_liquidacion.objeto_gasto,--15
  detalles_liquidacion.importe,--16 
  detalles_liquidacion.descuento,--17
  detalles_liquidacion.aporte,--18
  detalles_liquidacion.liquido,--19
  detalles_liquidacion.tipo_concepto, --20
  detalles_liquidacion.orden, --21
  detalles_liquidacion.linea --22
FROM 
(  
--MULTAS
(
SELECT
  'MULTAS ('||(
  SELECT max(cantidad_dias)
  FROM salarios.multas_aplicadas ma
  LEFT JOIN salarios.multas_solicitadas           ms ON  ms.id_multa_solicitada=ma.id_multa_solicitada
  LEFT JOIN salarios.detalles_multas_solicitadas dms ON dms.id_multa_solicitada=ms.id_multa_solicitada
  WHERE ma.id_planilla_salario= ps.id_planilla_salario and dms.id_funcionario=dps.id_funcionario
  )||')' as concepto,
  '000 [M]'::text as objeto_gasto,
  '0'::text as importe,
  replace(to_char((case when dps.monto_multa=0 then 0 else -dps.monto_multa end),'999,999,999'),',','.') as descuento,
  '0'::text as aporte,
  replace(to_char((case when dps.monto_multa=0 then 0 else -dps.monto_multa end),'999,999,999'),',','.') as liquido,
  'D'::text as tipo_concepto,
  2 as orden,
  20 as linea
FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario = ps.id_planilla_salario
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.monto_multa>0 AND
   dps.id_funcionario=in_id_funcionario
)
UNION
--======================================================================
--DESCUENTOS VARIOS
--======================================================================
(
SELECT
  'DESCUENTOS VARIOS' as concepto,
  '000 [DV]'::text as objeto_gasto,
  '0'::text as importe,
  '0'::text as descuento,
  '0'::text as aporte,
  '0'::text as liquido,
  'T'::text as tipo_concepto, 
  3 as orden,
  30 as linea
)
UNION
--DETALLES DESCUENTOS VARIOS
(
--ASOCIACIONES Y JUDICIALES
SELECT
dtos.concepto,
max(dtos.objeto_gasto) as objeto_gasto,
max(dtos.importe) as importe,
dtos.descuento,
max(dtos.aporte) as aporte,
max(dtos.liquido) as liquido,
max(dtos.tipo_concepto) as tipo_concepto, 
max(dtos.orden) as orden,
max(dtos.linea) as linea
FROM
(
SELECT
  case when dpd.id_descuento_judicial is null then td2.descripcion else td.descripcion||' ('|| (row_number() over())||')' end as concepto,
  case when dpd.id_descuento_judicial is null then '000 [A]'::text else '111 [J]'::text end as objeto_gasto,
  '0'::text as importe,
  replace(to_char((case when dpd.monto_descuento=0 then 0 else -dpd.monto_descuento end),'999,999,999'),',','.') as descuento,
  '0'::text as aporte,
  replace(to_char((case when dpd.monto_descuento=0 then 0 else -dpd.monto_descuento end),'999,999,999'),',','.') as liquido,
  'D'::text as tipo_concepto, 
  40 as orden,
  (row_number() over())+40 as linea
FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios   dps ON dps.id_planilla_salario=ps.id_planilla_salario 
   LEFT JOIN salarios.planillas_descuentos           pd ON pd.id_planilla_salario=ps.id_planilla_salario
   LEFT JOIN salarios.detalles_planillas_descuentos dpd ON dpd.id_planilla_descuento=pd.id_planilla_descuento and dpd.id_funcionario=in_id_funcionario
   LEFT JOIN salarios.descuentos_judiciales          dj ON dj.id_descuento_judicial=dpd.id_descuento_judicial and dpd.id_descuento_judicial is not null
   LEFT JOIN salarios.tipos_descuentos	          td ON td.id_tipo_descuento=dj.id_tipo_descuento
   LEFT JOIN salarios.descuentos_aso                 da ON da.id_descuento_aso=dpd.id_descuento_aso and dpd.id_descuento_aso is not null
   LEFT JOIN salarios.tipos_descuentos	          td2 ON td2.id_tipo_descuento=da.id_tipo_descuento
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=in_id_funcionario AND
   dpd.monto_descuento>0
ORDER BY td.orden, td2.orden asc
) dtos
GROUP BY dtos.concepto, dtos.descuento
)
UNION
(
SELECT
*
FROM
--SUELDO LIQUIDO
(
SELECT
  'SUELDO LIQUIDO'::text as concepto,--1 
  '000 [SL]'::text as objeto_gasto,
  '0'::text as importe,
  '0'::text as descuento,
  '0'::text as aporte,
  replace(to_char(sum(dps.importe_liquido_con_descuentos_varios),'999,999,999'),',','.') as liquido,
  'L'::text as tipo_concepto,--2
  5 as orden,
  50 as linea
  FROM salarios.planillas_salarios ps
LEFT JOIN salarios.detalles_planillas_salarios   dps ON dps.id_planilla_salario=ps.id_planilla_salario 
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=in_id_funcionario
) slf
WHERE replace(slf.liquido,'.','')::int>-1
)
UNION
--======================================================================
--OTROS INGRESOS
--======================================================================
(
SELECT
  'OTROS INGRESOS' as concepto,
  '000 [OI]'::text as objeto_gasto,
  '0'::text as importe,
  '0'::text as descuento,
  '0'::text as aporte,
  '0'::text as liquido,
  'T'::text as tipo_concepto,
  6 as orden,
  60 as linea
)
UNION
(
SELECT 
*
FROM
(
--GASTO REPRESENTACION [113]
SELECT
  'GASTO REPRESENTACION'::text as concepto,
  '113 [GR]'::text as objeto_gasto,
  replace(to_char(sum(pgrd.devengado_parcial),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(pgrd.aporte)=0 then 0 else -sum(pgrd.aporte) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(pgrd.devengado_parcial)-sum(pgrd.aporte),'999,999,999'),',','.') as monto_liquido,
  'I'::text as tipo_concepto,
   7 as orden,
   70 as linea
FROM salarios.planilla_gasto_representacion pgr
LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion 
LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
WHERE
   pgr.id_administracion=in_id_administracion AND 
   pgr.id_mes=in_id_mes AND
   pgr.gestion=in_gestion AND 
   pgr.estado=1 AND 
   fr.id_funcionario=in_id_funcionario
) grf
WHERE replace(grf.importe,'.','')::int>0
)
UNION
--BONIFICACIONES Y GRATIFICACIONES [133]
/*(
SELECT
  b.descripcion as concepto,
  '133 [BG]'::text as objeto_gasto,
  replace(to_char(dpb.monto_total::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dpb.aporte::integer=0 then 0 else -dpb.aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dpb.monto_total::integer-dpb.aporte::integer,'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  8 as orden,
  80 as linea
FROM salarios.planillas_bonificaciones pb
LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
WHERE
   pb.id_administracion=in_id_administracion AND 
   pb.id_mes=in_id_mes AND
   pb.gestion=in_gestion AND 
   pb.estado=1 AND 
   fb.id_funcionario=in_id_funcionario
)*/
(
SELECT
*
FROM
(
SELECT
  'BONIFICACIONES Y GRATIFICACIONES'::text as concepto,
  '133 [BG]'::text as objeto_gasto,
  replace(to_char(sum(dpb.monto_total::integer),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(dpb.aporte::integer)=0 then 0 else -sum(dpb.aporte::integer) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(dpb.monto_total::integer)-sum(dpb.aporte::integer),'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  8 as orden,
  80 as linea
FROM salarios.planillas_bonificaciones pb
LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
WHERE
   pb.id_administracion=in_id_administracion AND 
   pb.id_mes=in_id_mes AND
   pb.gestion=in_gestion AND 
   pb.estado=1 AND 
   fb.id_funcionario=in_id_funcionario
) bg_fun
WHERE bg_fun.importe is not null
)
UNION
--DIFERENCIA SALARIAL Y OTROS GASTOS [199] 
(
SELECT
  case pds.id_tipo_pagos_varios 
	when 1 then 'DIFERENCIA SALARIAL'
	when 2 then 'OTROS GASTOS'    
  end as concepto,
  case pds.id_tipo_pagos_varios 
	when 1 then '199 [DS]'::text
	when 2 then '199 [OG]'::text   
  end as objeto_gasto,
  replace(to_char(pdsd.importe_monto_diferencia::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when pdsd.importe_monto_aporte::integer=0 then 0 else -pdsd.importe_monto_aporte::integer end),'999,999,999'),',','.') as aporte, 
  replace(to_char(pdsd.importe_monto_diferencia::integer-pdsd.importe_monto_aporte::integer,'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  9 as orden, 
  90 as linea
FROM salarios.planilla_diferencia_salarial pds
LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial 
LEFT JOIN salarios.funcionarios_superiores                fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
WHERE
   pds.id_administracion=in_id_administracion AND 
   pds.id_mes=in_id_mes AND
   pds.gestion=in_gestion AND 
   pds.estado=1 AND 
   (fs.id_funcionario=in_id_funcionario or pdsd.id_funcionario=in_id_funcionario)
)
UNION
--ANTIGUEDAD [133]
(
SELECT
  'ANTIGÜEDAD'::text as concepto,
  '133 [ANT]'::text as objeto_gasto,
  replace(to_char(dpa.importe_antiguedad::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dpa.importe_aporte::integer=0 then 0 else -dpa.importe_aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dpa.importe_antiguedad::integer-dpa.importe_aporte::integer,'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  10 as orden,
  100 as linea
FROM salarios.planillas_antiguedad pa
LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad 
WHERE
   pa.id_administracion=in_id_administracion AND 
   pa.id_mes=in_id_mes AND
   pa.gestion=in_gestion AND 
   pa.estado=1 AND 
   dpa.id_funcionario=in_id_funcionario
)
UNION
--GRADO ACADEMICO [133]
(
SELECT
  'GRADO ACADEMICO'::text as concepto,
  '133 [GA]'::text as objeto_gasto,
  replace(to_char(dpp.importe_profesional::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dpp.importe_aporte::integer=0 then 0 else -dpp.importe_aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dpp.importe_profesional::integer-dpp.importe_aporte::integer,'999,999,999'),',','.') as liquido,  
  'I'::text as tipo_concepto,
  11 as orden,
  110 as linea
FROM salarios.planilla_profesionales pp
LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional 
LEFT JOIN salarios.funcionarios_profesionales       fp ON  fp.id_funcionario_profesional=dpp.id_funcionario_profesional
WHERE
   pp.id_administracion=in_id_administracion AND 
   pp.id_mes=in_id_mes AND
   pp.gestion=in_gestion AND 
   pp.estado=1 AND 
   fp.id_funcionario=in_id_funcionario
)
UNION
--GRATIFICACION ESPECIAL [137]
(
SELECT
  'GRATIFICACION ESPECIAL'::text as concepto,
  '137 [GE]'::text as objeto_gasto,
  replace(to_char(sum(ge.importe_gratificacion),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(ge.importe_aporte_gratificacion)=0 then 0 else -sum(ge.importe_aporte_gratificacion) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(ge.importe_gratificacion),'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  12 as orden,
  120 as linea
FROM
(SELECT
  12 as orden,
  dpge.importe_gratificacion::integer as monto_liquido,
  dpge.importe_gratificacion::integer as importe_gratificacion,  
  dpge.importe_aporte::integer as importe_aporte_gratificacion,
  (row_number() over())+120 as linea
FROM salarios.planilla_gratificacion_especial pge
LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge ON dpge.id_planilla_gratificacion=pge.id_planilla_gratificacion
WHERE
   pge.id_administracion=in_id_administracion AND 
   pge.id_mes=in_id_mes AND
   pge.gestion=in_gestion AND 
   pge.estado=1 AND 
   dpge.id_funcionario=in_id_funcionario
) ge
GROUP BY ge.orden
)
UNION
--GRATIFICACION OCASIONAL [133]
(
SELECT
  'GRATIFICACION OCASIONAL'::text as concepto,
  '133 [GO]'::text as objeto_gasto,
  replace(to_char(dpgo.importe_gratificacion::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dpgo.importe_aporte=0 then 0 else -dpgo.importe_aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dpgo.importe_gratificacion::integer-dpgo.importe_aporte::integer,'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  13 as orden,
  130 as linea
FROM salarios.planilla_gratificacion_ocacional pgo
LEFT JOIN salarios.detalle_planilla_gratificacion_ocacional dpgo ON dpgo.id_planilla_gratificacion_ocacional=pgo.id_planilla_gratificacion_ocacional 
WHERE
   pgo.id_administracion=in_id_administracion AND 
   pgo.id_mes=in_id_mes AND
   pgo.gestion=in_gestion AND 
   pgo.estado=1 AND 
   dpgo.id_funcionario=in_id_funcionario
)
UNION
--OTRAS TRANSFERENCIAS CORRIENTES [849]
(
SELECT
*
FROM
(
SELECT 
  'OTRAS TRANSFERENCIAS CTES.'::text as concepto,
  '849 [OTC]'::text as objeto_gasto,
  replace(to_char(sum(otc.importe_gratificacion_otra_transferencia_cte),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(otc.importe_aporte_gratificacion)=0 then 0 else -sum(otc.importe_aporte_gratificacion) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(otc.importe_gratificacion_otra_transferencia_cte),'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  14 as orden,
  140 as linea
FROM
(SELECT
  14 as orden,
  potcd.importe_otra_transferencia_cte::integer as monto_liquido,
  potcd.importe_otra_transferencia_cte::integer as importe_gratificacion_otra_transferencia_cte,  
  0 as importe_aporte_gratificacion,
  (row_number() over())+140 as linea
FROM salarios.planillas_otras_transferencias_ctes potc
LEFT JOIN salarios.planillas_otras_transferencias_ctes_detalles potcd ON potcd.id_planilla_otra_transferencia_cte=potc.id_planilla_otra_transferencia_cte
WHERE
   potc.id_administracion=in_id_administracion AND 
   potc.id_mes=in_id_mes AND
   potc.gestion=in_gestion AND 
   potc.estado=1 AND 
   potcd.id_funcionario=in_id_funcionario
) otc
) otc2
WHERE otc2.aporte is not null
)
UNION
--SUBSIDIOS [131]
(
SELECT
  sub.descripcion||case when dps.cantidad>1 then ' ('||dps.cantidad||')' else '' end as concepto,
  '131 [SUB]'::text as objeto_gasto,
  replace(to_char(dps.importe_monto::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dps.aporte::integer=0 then 0 else -dps.aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dps.importe_monto::integer-dps.aporte::integer,'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  15 as orden,
  150 as linea
FROM salarios.planillas_subsidios ps
LEFT JOIN salarios.detalles_planillas_subsidios dps ON dps.id_planilla_subsidio=ps.id_planilla_subsidio 
LEFT JOIN salarios.funcionarios_subsidios       fsu ON fsu.id_funcionario_subsidio=dps.id_funcionario_subsidio
LEFT JOIN salarios.subsidios 		        sub ON sub.id_subsidio=fsu.id_subsidio
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.estado=1 AND 
   fsu.id_funcionario=in_id_funcionario
)
UNION
--REMUNERACION EXTRAORDINARIA [123]
(
SELECT
*
FROM
(
SELECT 
  'REMUNERACIÓN EXTRAORDINARIA ('||sum(re.cantidad_horas)||' HS.)' as concepto,
  '123 [RE]'::text as objeto_gasto,
  replace(to_char(sum(re.monto),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(re.aporte)=0 then 0 else -sum(re.aporte) end),'999,999,999'),',','.') as aporte, 
  replace(to_char(sum(re.monto::integer)-sum(re.aporte::integer),'999,999,999'),',','.') as liquido, 
  'I'::text as tipo_concepto,
  16 as orden,
  160 as linea
FROM
(SELECT
  16 as orden,
  dpre.cantidad_horas,  
  dpre.monto::integer as monto,   
  dpre.aporte::integer as aporte, 
  (row_number() over())+160 as linea
FROM salarios.planillas_re pre
LEFT JOIN salarios.detalles_planillas_re dpre ON dpre.id_planilla_re=pre.id_planilla_re
WHERE
   pre.id_administracion=in_id_administracion AND 
   pre.id_mes=in_id_mes AND
   pre.gestion=in_gestion AND 
   pre.estado=1 AND 
   dpre.id_funcionario=in_id_funcionario
) re
) re2
WHERE re2.aporte is not null
)
UNION
--REMUNERACION ADICIONAL [125]
(
SELECT
*
FROM
(
SELECT 
  'REMUNERACIÓN ADICIONAL ('||sum(ra.cantidad_horas)::integer||' HS.)' as concepto,
  '125 [RA]'::text as objeto_gasto,
  replace(to_char(sum(ra.monto),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(ra.aporte)=0 then 0 else -sum(ra.aporte) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(ra.monto::integer)-sum(ra.aporte::integer),'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  17 as orden,
  170 as linea
FROM
(SELECT
  17 as orden,
  dpra.cantidad_horas,  
  dpra.monto::integer as monto,
  '0'::text as descuento,   
  dpra.aporte::integer as aporte, 
  (row_number() over())+170 as linea
FROM salarios.planillas_ra pra
LEFT JOIN salarios.detalles_planillas_ra dpra ON dpra.id_planilla_ra=pra.id_planilla_ra
WHERE
   pra.id_administracion=in_id_administracion AND 
   pra.id_mes=in_id_mes AND
   pra.gestion=in_gestion AND 
   pra.estado=1 AND 
   dpra.id_funcionario=in_id_funcionario
) ra
) ra2
WHERE ra2.aporte is not null
)
) detalles_liquidacion
)

UNION
--======================================================================
--TOTALES
--======================================================================
(
(
SELECT
  in_id_funcionario as id_funcionario,--1
  '0'::text as cedula,--2
  '---'::text as nombres,--3
  '---'::text as apellidos,--4
  '---'::text as nivel1,--5
  '---'::text as nivel2,--6
  '---'::text as nivel3,--7
  '---'::text as nivel4,--8
  '---'::text as nivel5,--9
  '---'::text as categoria,--10
  '---'::text as cargo,--11
  '0'::text as presupuestado,--12
  0 as dias_trabajados,--13
  '---'::text as tipo,
  (SELECT fu_numero_letras(sum(replace(d.liquido,'.','')::int))) as concepto,--14
  '000 [T]' as objeto_gasto,--15
  replace(to_char(sum(replace(d.importe,'.','')::int),'999,999,999'),',','.') as importe,--16
  replace(to_char(sum(replace(d.descuento,'.','')::int),'999,999,999'),',','.') as descuento,--17
  replace(to_char(sum(replace(d.aporte,'.','')::int),'999,999,999'),',','.') as aporte,--18
  replace(to_char(sum(replace(d.liquido,'.','')::int),'999,999,999'),',','.') as liquido,--19
  'F' as tipo_concepto, --20
  1000 as orden, --21
  1000 as linea --22
FROM
(
SELECT
  in_id_funcionario as id_funcionario,
  'TOTALES'::text as concepto,
  '000 [T]'::text as objeto_gasto,
  detalles_liquidacion.importe,
  detalles_liquidacion.descuento,
  detalles_liquidacion.aporte,
  detalles_liquidacion.liquido
FROM 
(
--SALARIOS PERMANENTES [111]
(
SELECT 
*
FROM
(SELECT 
  'SUELDO'::text as concepto,
  --111 as objeto_gasto,
  replace(to_char(sum(dps.monto_devengado),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char(case when sum(dps.monto_aporte) is null then 0 else -sum(dps.monto_aporte) end,'999,999,999'),',','.') as aporte,--18
  '0'::text as liquido
  --'DB'::text as tipo_concepto,
  --1 as orden,
  --10 as linea
FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario = ps.id_planilla_salario
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=in_id_funcionario
)spf
WHERE replace(spf.importe,'.','')::int>0
)
UNION ALL
--MULTAS
(
SELECT
  'MULTAS'::text as concepto,
  --'MULTAS ('||(
  --SELECT max(cantidad_dias)
  --FROM salarios.multas_aplicadas ma
  --LEFT JOIN salarios.multas_solicitadas           ms ON  ms.id_multa_solicitada=ma.id_multa_solicitada
  --LEFT JOIN salarios.detalles_multas_solicitadas dms ON dms.id_multa_solicitada=ms.id_multa_solicitada
  --WHERE ma.id_planilla_salario= ps.id_planilla_salario and dms.id_funcionario=dps.id_funcionario
  --)||')' as concepto,
  --0 as objeto_gasto,
  '0'::text as importe,
  replace(to_char((case when dps.monto_multa=0 then 0 else -dps.monto_multa end),'999,999,999'),',','.') as descuento,
  '0'::text as aporte,
  '0'::text as liquido
  --'S'::text as tipo_concepto, 
  --2 as orden,
  --20 as linea
FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario = ps.id_planilla_salario
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.monto_multa>0 AND
   dps.id_funcionario=in_id_funcionario
)
UNION ALL
--DETALLES DESCUENTOS VARIOS
(
--ASOCIACIONES Y JUDICIALES
SELECT
  'DESCUENTOS'::text as concepto,
  --case when dpd.id_descuento_judicial is null then td2.descripcion else td.descripcion end as concepto,
  --0 as objeto_gasto,
  '0'::text as importe,
  replace(to_char((case when dpd.monto_descuento=0 then 0 else -dpd.monto_descuento end),'999,999,999'),',','.') as descuento,
  '0'::text as aporte,
  '0'::text as liquido
  --'D'::text as tipo_concepto,
  --40 as orden,
  --(row_number() over())+40 as linea
FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios   dps ON dps.id_planilla_salario=ps.id_planilla_salario 
   LEFT JOIN salarios.planillas_descuentos           pd ON pd.id_planilla_salario=ps.id_planilla_salario
   LEFT JOIN salarios.detalles_planillas_descuentos dpd ON dpd.id_planilla_descuento=pd.id_planilla_descuento and dpd.id_funcionario=in_id_funcionario
   LEFT JOIN salarios.descuentos_judiciales          dj ON dj.id_descuento_judicial=dpd.id_descuento_judicial and dpd.id_descuento_judicial is not null
   LEFT JOIN salarios.tipos_descuentos	          td ON td.id_tipo_descuento=dj.id_tipo_descuento
   LEFT JOIN salarios.descuentos_aso                 da ON da.id_descuento_aso=dpd.id_descuento_aso and dpd.id_descuento_aso is not null
   LEFT JOIN salarios.tipos_descuentos	          td2 ON td2.id_tipo_descuento=da.id_tipo_descuento
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=in_id_funcionario
ORDER BY td.orden, td2.orden asc
)
UNION ALL
--SUELDO LIQUIDO
(
SELECT
  'SUELDO LIQUIDO'::text as concepto,
  --0 as objeto_gasto,
  '0'::text as importe,
  '0'::text as descuento,
  '0'::text as aporte,
  replace(to_char(dps.importe_liquido_con_descuentos_varios,'999,999,999'),',','.') as liquido
  --'L'::text as tipo_concepto,
  --5 as orden,
  --50 as linea
  FROM salarios.planillas_salarios ps
LEFT JOIN salarios.detalles_planillas_salarios   dps ON dps.id_planilla_salario=ps.id_planilla_salario 
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=in_id_funcionario
)
--DETALLES OTROS INGRESOS
UNION
(
SELECT
*
FROM
(
--GASTO REPRESENTACION [113]
SELECT
  'GASTO REPRESENTACION'::text as concepto,
  --113 as objeto_gasto,
  replace(to_char(sum(pgrd.devengado_parcial),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(pgrd.aporte)=0 then 0 else -sum(pgrd.aporte) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(pgrd.devengado_parcial)-sum(pgrd.aporte),'999,999,999'),',','.') as monto_liquido
  --'I'::text as tipo_concepto,
  -- 7 as orden,
  --70 as linea
FROM salarios.planilla_gasto_representacion pgr
LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion 
LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
WHERE
   pgr.id_administracion=in_id_administracion AND 
   pgr.id_mes=in_id_mes AND
   pgr.gestion=in_gestion AND 
   pgr.estado=1 AND 
   fr.id_funcionario=in_id_funcionario
)grf
WHERE replace(grf.importe,'.','')::int>0 
)
UNION ALL
(
SELECT
*
FROM
--BONIFICACIONES Y GRATIFICACIONES [133]
(
SELECT
  'BONIFICACIONES'::text as concepto,
  --b.descripcion as concepto,
  --133 as objeto_gasto,
  replace(to_char(sum(dpb.monto_total::integer),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(dpb.aporte::integer)=0 then 0 else -sum(dpb.aporte::integer) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(dpb.monto_total::integer)-sum(dpb.aporte::integer),'999,999,999'),',','.') as liquido
  --'I'::text as tipo_concepto,
  --8 as orden,
  --80 as linea
FROM salarios.planillas_bonificaciones pb
LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
WHERE
   pb.id_administracion=in_id_administracion AND 
   pb.id_mes=in_id_mes AND
   pb.gestion=in_gestion AND 
   pb.estado=1 AND 
   fb.id_funcionario=in_id_funcionario
)bgf
WHERE replace(bgf.importe,'.','')::int>0
)
UNION ALL
--DIFERENCIA SALARIAL Y OTROS GASTOS [199] 
(
SELECT
  'DIFERENCIAL'::text as concepto,
  --case pds.id_tipo_pagos_varios 
  --	when 1 then 'DIFERENCIA SALARIAL'
  --	when 2 then 'OTROS GASTOS'    
  --end as concepto,
  --199 as objeto_gasto,
  replace(to_char(pdsd.importe_monto_diferencia::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when pdsd.importe_monto_aporte::integer=0 then 0 else -pdsd.importe_monto_aporte::integer end),'999,999,999'),',','.') as aporte, 
  replace(to_char(pdsd.importe_monto_diferencia::integer-pdsd.importe_monto_aporte::integer,'999,999,999'),',','.') as liquido
  --'I'::text as tipo_concepto,
  --9 as orden, 
  --90 as linea
FROM salarios.planilla_diferencia_salarial pds
LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial 
LEFT JOIN salarios.funcionarios_superiores                fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
WHERE
   pds.id_administracion=in_id_administracion AND 
   pds.id_mes=in_id_mes AND
   pds.gestion=in_gestion AND 
   pds.estado=1 AND 
   (fs.id_funcionario=in_id_funcionario or pdsd.id_funcionario=in_id_funcionario)
)
UNION ALL
--ANTIGUEDAD [133]
(
SELECT
  'ANTIGÜEDAD'::text as concepto,
  --133 as objeto_gasto,
  replace(to_char(dpa.importe_antiguedad::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dpa.importe_aporte::integer=0 then 0 else -dpa.importe_aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dpa.importe_antiguedad::integer-dpa.importe_aporte::integer,'999,999,999'),',','.') as liquido
  --'I'::text as tipo_concepto,
  --10 as orden,
  --100 as linea
FROM salarios.planillas_antiguedad pa
LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad 
WHERE
   pa.id_administracion=in_id_administracion AND 
   pa.id_mes=in_id_mes AND
   pa.gestion=in_gestion AND 
   pa.estado=1 AND 
   dpa.id_funcionario=in_id_funcionario
)
UNION
--GRADO ACADEMICO [133]
(
SELECT
  'GRADO ACADEMICO'::text as concepto,
  --133 as objeto_gasto,
  replace(to_char(dpp.importe_profesional::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dpp.importe_aporte::integer=0 then 0 else -dpp.importe_aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dpp.importe_profesional::integer-dpp.importe_aporte::integer,'999,999,999'),',','.') as liquido  
  --'I'::text as tipo_concepto,
  --11 as orden,
  --110 as linea
FROM salarios.planilla_profesionales pp
LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional 
LEFT JOIN salarios.funcionarios_profesionales       fp ON  fp.id_funcionario_profesional=dpp.id_funcionario_profesional
WHERE
   pp.id_administracion=in_id_administracion AND 
   pp.id_mes=in_id_mes AND
   pp.gestion=in_gestion AND 
   pp.estado=1 AND 
   fp.id_funcionario=in_id_funcionario
)
UNION ALL
--GRATIFICACION ESPECIAL [137]
(
SELECT
  'GRATIFICACION ESPECIAL'::text as concepto,
  --137 as objeto_gasto,
  replace(to_char(sum(ge.importe_gratificacion),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(ge.importe_aporte_gratificacion)=0 then 0 else -sum(ge.importe_aporte_gratificacion) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(ge.importe_gratificacion),'999,999,999'),',','.') as liquido
  --'I'::text as tipo_concepto,
  --12 as orden,
  --120 as linea
FROM
(SELECT
  12 as orden,
  dpge.importe_gratificacion::integer as monto_liquido,
  dpge.importe_gratificacion::integer as importe_gratificacion,  
  dpge.importe_aporte::integer as importe_aporte_gratificacion,
  (row_number() over())+120 as linea
FROM salarios.planilla_gratificacion_especial pge
LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge ON dpge.id_planilla_gratificacion=pge.id_planilla_gratificacion
WHERE
   pge.id_administracion=in_id_administracion AND 
   pge.id_mes=in_id_mes AND
   pge.gestion=in_gestion AND 
   pge.estado=1 AND 
   dpge.id_funcionario=in_id_funcionario
) ge
GROUP BY ge.orden
)
UNION ALL
--GRATIFICACION OCASIONAL [133]
(
SELECT
  'GRATIFICACION OCASIONAL'::text as concepto,
  --133 as objeto_gasto,
  replace(to_char(dpgo.importe_gratificacion::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dpgo.importe_aporte=0 then 0 else -dpgo.importe_aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dpgo.importe_gratificacion::integer-dpgo.importe_aporte::integer,'999,999,999'),',','.') as liquido
  --'I'::text as tipo_concepto,
  --13 as orden,
  --130 as linea
FROM salarios.planilla_gratificacion_ocacional pgo
LEFT JOIN salarios.detalle_planilla_gratificacion_ocacional dpgo ON dpgo.id_planilla_gratificacion_ocacional=pgo.id_planilla_gratificacion_ocacional 
WHERE
   pgo.id_administracion=in_id_administracion AND 
   pgo.id_mes=in_id_mes AND
   pgo.gestion=in_gestion AND 
   pgo.estado=1 AND 
   dpgo.id_funcionario=in_id_funcionario
)
UNION ALL
--OTRAS TRANSFERENCIAS CORRIENTES [849]
(
SELECT
*
FROM
(
SELECT 
  'OTRAS TRANSFERENCIAS CTES.'::text as concepto,
  --849 as objeto_gasto,
  replace(to_char(sum(otc.importe_gratificacion_otra_transferencia_cte),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(otc.importe_aporte_gratificacion)=0 then 0 else -sum(otc.importe_aporte_gratificacion) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(otc.importe_gratificacion_otra_transferencia_cte),'999,999,999'),',','.') as liquido
  --'I'::text as tipo_concepto,
  --14 as orden,
  --140 as linea
FROM
(SELECT
  14 as orden,
  potcd.importe_otra_transferencia_cte::integer as monto_liquido,
  potcd.importe_otra_transferencia_cte::integer as importe_gratificacion_otra_transferencia_cte,  
  0 as importe_aporte_gratificacion,
  (row_number() over())+140 as linea
FROM salarios.planillas_otras_transferencias_ctes potc
LEFT JOIN salarios.planillas_otras_transferencias_ctes_detalles potcd ON potcd.id_planilla_otra_transferencia_cte=potc.id_planilla_otra_transferencia_cte
WHERE
   potc.id_administracion=in_id_administracion AND 
   potc.id_mes=in_id_mes AND
   potc.gestion=in_gestion AND 
   potc.estado=1 AND 
   potcd.id_funcionario=in_id_funcionario
) otc
) otc2
WHERE otc2.aporte is not null
)
UNION ALL
--SUBSIDIOS [131]
(
SELECT
  'SUBSIDIOS'::text as concepto,
  --sub.descripcion||case when dps.cantidad>1 then ' ('||dps.cantidad||')' else '' end as concepto,
  --131 as objeto_gasto,
  replace(to_char(dps.importe_monto::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dps.aporte::integer=0 then 0 else -dps.aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dps.importe_monto::integer-dps.aporte::integer,'999,999,999'),',','.') as liquido
  --'I'::text as tipo_concepto,
  --15 as orden,
  --150 as linea
FROM salarios.planillas_subsidios ps
LEFT JOIN salarios.detalles_planillas_subsidios dps ON dps.id_planilla_subsidio=ps.id_planilla_subsidio 
LEFT JOIN salarios.funcionarios_subsidios       fsu ON fsu.id_funcionario_subsidio=dps.id_funcionario_subsidio
LEFT JOIN salarios.subsidios 		        sub ON sub.id_subsidio=fsu.id_subsidio
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.estado=1 AND 
   fsu.id_funcionario=in_id_funcionario
)
UNION ALL
--REMUNERACION EXTRAORDINARIA [123]
(
SELECT
*
FROM
(
SELECT 
  'RE'::text as concepto,
  --'REMUNERACIÓN EXTRAORDINARIA ('||sum(re.cantidad_horas)||' HS.)' as concepto,
  --123 as objeto_gasto,
  replace(to_char(sum(re.monto),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(re.aporte)=0 then 0 else -sum(re.aporte) end),'999,999,999'),',','.') as aporte, 
  replace(to_char(sum(re.monto::integer)-sum(re.aporte::integer),'999,999,999'),',','.') as liquido 
  --'I'::text as tipo_concepto,
  --16 as orden,
  --160 as linea
FROM
(SELECT
  16 as orden,
  dpre.cantidad_horas,  
  dpre.monto::integer as monto,   
  dpre.aporte::integer as aporte, 
  (row_number() over())+160 as linea
FROM salarios.planillas_re pre
LEFT JOIN salarios.detalles_planillas_re dpre ON dpre.id_planilla_re=pre.id_planilla_re
WHERE
   pre.id_administracion=in_id_administracion AND 
   pre.id_mes=in_id_mes AND
   pre.gestion=in_gestion AND 
   pre.estado=1 AND 
   dpre.id_funcionario=in_id_funcionario
) re
) re2
WHERE re2.aporte is not null
)
UNION ALL
--REMUNERACION ADICIONAL [125]
(
SELECT
*
FROM
(
SELECT
  'RA'::text as concepto, 
  --'REMUNERACIÓN ADICIONAL ('||sum(ra.cantidad_horas)::integer||' HS.)' as concepto,
  --125 as objeto_gasto,
  replace(to_char(sum(ra.monto),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(ra.aporte)=0 then 0 else -sum(ra.aporte) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(ra.monto::integer)-sum(ra.aporte::integer),'999,999,999'),',','.') as liquido
  --'I'::text as tipo_concepto,
  --17 as orden,
  --170 as linea
FROM
(SELECT
  17 as orden,
  dpra.cantidad_horas,  
  dpra.monto::integer as monto,   
  dpra.aporte::integer as aporte, 
  (row_number() over())+170 as linea
FROM salarios.planillas_ra pra
LEFT JOIN salarios.detalles_planillas_ra dpra ON dpra.id_planilla_ra=pra.id_planilla_ra
WHERE
   pra.id_administracion=in_id_administracion AND 
   pra.id_mes=in_id_mes AND
   pra.gestion=in_gestion AND 
   pra.estado=1 AND 
   dpra.id_funcionario=in_id_funcionario
) ra
) ra2
WHERE ra2.aporte is not null
)
) detalles_liquidacion
) d
GROUP BY d.id_funcionario
)
)
--======================================================================
) hoja_liquidacion
order by 23;

END;
]]></definition>
</function>

<function name="importes_por_unidad_de_tiempo"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_importe_categoria_mensual">
		<type name="integer"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="id_categoria">
		<type name="integer"/>
	</parameter>
	<parameter name="importe_mensual">
		<type name="numeric"/>
	</parameter>
	<parameter name="observacion">
		<type name="text"/>
	</parameter>
	<parameter name="importe_diario">
		<type name="numeric"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="numeric"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 

SELECT  a.id_importe_categoria_mensual, 
	a.id_mes, 
	a.id_categoria, 
	a.importe as importe_mensual, 
        a.observacion,
        round(
        a.importe/(
			SELECT cantidad_dias_pa_hallar_importe_diario
			FROM parametros
			where estado is true limit 1
        )) as importe_diario,

--	round((1.6::numeric(12,2)*(a.importe+(0.2::numeric(12,2)*a.importe)))/176::numeric(12,2)) as importe_por_hora,
	b.gestion

  FROM salarios.categoria_importe_mensual a
	left join salarios.categorias b 
		on (a.id_categoria=b.id_categoria)
	left join salarios.detalles_categorias c
		on (b.id_categoria=c.id_categoria)
	left join salarios.funcionarios_categorias d
		on (c.id_detalle_categoria=d.id_detalle_categoria)
WHERE
	a.id_mes = in_id_mes
	and d.id_funcionario = in_id_funcionario
        and b.gestion= in_gestion
        and d.estado is true;

END;
]]></definition>
</function>

<function name="informe_liquidaciones_funcionarios_desglosado"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="tipo">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="desde">
		<type name="text"/>
	</parameter>
	<parameter name="hasta">
		<type name="text"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_nivel1">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_nivel2">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_nivel3">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_nivel4">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_nivel5">
		<type name="text"/>
	</parameter>
	<parameter name="idp_sal">
		<type name="integer"/>
	</parameter>
	<parameter name="dias">
		<type name="text"/>
	</parameter>
	<parameter name="presupuestado_sal">
		<type name="bigint"/>
	</parameter>
	<parameter name="devengado_sal">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte">
		<type name="bigint"/>
	</parameter>
	<parameter name="multa">
		<type name="bigint"/>
	</parameter>
	<parameter name="desc_solicitado">
		<type name="bigint"/>
	</parameter>
	<parameter name="desc_aplicado">
		<type name="bigint"/>
	</parameter>
	<parameter name="desc_diferencia">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_gc">
		<type name="integer"/>
	</parameter>
	<parameter name="dias_gc">
		<type name="bigint"/>
	</parameter>
	<parameter name="presupuestado_gc">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_gc">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_gc">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_re">
		<type name="integer"/>
	</parameter>
	<parameter name="horas_re">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_re">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_re">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_re">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_ra">
		<type name="integer"/>
	</parameter>
	<parameter name="horas_ra">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_ra">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_ra">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_ra">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_sub">
		<type name="integer"/>
	</parameter>
	<parameter name="cantidad_sub">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_sub">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_sub">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_sub">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_bg">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_bg">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_bg">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_bg">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_bgr">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_bgr">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_bgr">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_bgr">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_ba20">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_ba20">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_ba20">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_ba20">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_ba40">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_ba40">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_ba40">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_ba40">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_ba450">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_ba450">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_ba450">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_ba450">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_ba700">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_ba700">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_ba700">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_ba700">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_bp20">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_bp20">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_bp20">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_bp20">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_bp40">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_bp40">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_bp40">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_bp40">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_bp550">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_bp550">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_bp550">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_bp550">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_bp700">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_bp700">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_bp700">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_bp700">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_bins">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_bins">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_bins">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_bins">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_bgo">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_bgo">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_bgo">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_bgo">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_ba">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_ba">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_ba">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_ba">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_bga">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_bga">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_bga">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_bga">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_ge">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_ge">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_ge">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_ge">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_ds">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_ds">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_ds">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_ds">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_og">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_og">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_og">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_og">
		<type name="bigint"/>
	</parameter>
	<parameter name="idp_otc">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado_otc">
		<type name="bigint"/>
	</parameter>
	<parameter name="presupuestado_total">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte_total">
		<type name="bigint"/>
	</parameter>
	<parameter name="percibido_total">
		<type name="bigint"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado de las liquidaciones de los funcionarios permanentes/comisionados por mes y gestion
  * Creado    : 2014-02-28 08:51:00
  * Modificado: 2014-07-07 09:39:43
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado 
  * 
  * Descripcion:  Genera un listado de los funcionarios permanentes/comisionados referentes a las liquidaciones por mes y gestion
  * ------------  
  */
RETURN QUERY
SELECT
*
FROM
(
SELECT
   -- =======[000] DATOS FUNCIONARIOS============================  
   fc.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.'))::text as cedula,
   f.ape_nom_funcionario::text as funcionario,
   fc.tipo as tipo,
   fc.categoria::text as categoria,
   fc.cargo::text as cargo,
   fc.desde,
   fc.hasta,   
   fc.nivel1,
   fc.nivel2,
   fc.nivel3,
   fc.nivel4,
   fc.nivel5,
   fc.nombre_nivel1::text,
   fc.nombre_nivel2::text,
   fc.nombre_nivel3::text,
   fc.nombre_nivel4::text,
   fc.nombre_nivel5::text,
   -- 1=========[111] SALARIOS============================
   COALESCE(dsf.idp_sal,0) as idp_sal,   
   COALESCE(dsf.dias,'0')::text as dias,
   COALESCE(dsf.presupuestado,0) as presupuestado_sal,
   COALESCE(dsf.devengado,0) as devengado_sal,
   COALESCE(dsf.aporte,0) as aporte,
   COALESCE(dsf.multa,0) as multa,
   COALESCE(dsf.desc_solicitado,0) as desc_solicitado,
   COALESCE(dsf.desc_aplicado,0) as desc_aplicado,
   COALESCE(dsf.desc_diferencia,0) as desc_diferencia,
   COALESCE(dsf.percibido,0) as percibido,
   -- 2=========[113] GASTOS DE REPRESENTACION=============
   COALESCE(dfgr.idp_gc,0) as idp_gc, 
   COALESCE(dfgr.dias,0) as dias_gc,
   COALESCE(dfgr.presupuestado,0) as presupuestado_gc,
   COALESCE(dfgr.aporte,0) as aporte_gc,
   COALESCE(dfgr.percibido,0) as percibido_gc,
   -- 3=========[123] REMUNERACION EXTRAORDINADRIA (RE)===========
   COALESCE(dfre.idp_re,0) as idp_re,
   COALESCE(dfre.horas::int,0) as horas_re,
   COALESCE(dfre.presupuestado,0) as presupuestado_re,
   COALESCE(dfre.aporte,0) as aporte_re,
   COALESCE(dfre.percibido,0) as percibido_re,
   -- 4=========[125] REMUNERACION ADICIONAL (RA)===========
   COALESCE(dfra.idp_ra,0) as idp_ra,
   COALESCE(dfra.horas::int,0) as horas_ra,
   COALESCE(dfra.presupuestado,0) as presupuestado_ra,
   COALESCE(dfra.aporte,0) as aporte_ra,
   COALESCE(dfra.percibido,0) as percibido_ra,
   -- 5=========[131] SUBSIDIO===========
   COALESCE(dfsub.idp_sub,0) as idp_sub,
   COALESCE(dfsub.cantidad::int,0) as cantidad_sub,
   COALESCE(dfsub.presupuestado,0) as presupuestado_sub,
   COALESCE(dfsub.aporte,0) as aporte_sub,
   COALESCE(dfsub.percibido,0) as percibido_sub,
   -- 6=========[133] BONIFICACIONES Y GRATIFICACIONES GENERAL===========
   COALESCE(dfbg.idp_bgr,0) as idp_bg,
   COALESCE(dfbg.presupuestado,0) as presupuestado_bg,
   COALESCE(dfbg.aporte,0) as aporte_bg,
   COALESCE(dfbg.percibido,0) as percibido_bg,   
   -- 6=========[133] BONIFICACIONES Y GRATIFICACIONES - RESPONSABILIDAD & ABOGADO FISCAL===========
   COALESCE(dfbr.idp_bgr,0) as idp_bgr,
   COALESCE(dfbr.presupuestado,0) as presupuestado_bgr,
   COALESCE(dfbr.aporte,0) as aporte_bgr,
   COALESCE(dfbr.percibido,0) as percibido_bgr,
   -- 7=========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION ADMINISTRATIVA 20% SP===========
   COALESCE(dfa20.idp_bgg,0) as idp_dfa20,
   COALESCE(dfa20.presupuestado,0) as presupuestado_dfa20,
   COALESCE(dfa20.aporte,0) as aporte_dfa20,
   COALESCE(dfa20.percibido,0) as percibido_dfa20,
   -- 7=========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION ADMINISTRATIVA 40% (SP+GR)===========
   COALESCE(dfa40.idp_bgg,0) as idp_dfa40,
   COALESCE(dfa40.presupuestado,0) as presupuestado_dfa40,
   COALESCE(dfa40.aporte,0) as aporte_dfa40,
   COALESCE(dfa40.percibido,0) as percibido_dfa40,
   -- 7=========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION ADMINISTRATIVA - 450.000===========
   COALESCE(dfa450.idp_bgg,0) as idp_dfa450,
   COALESCE(dfa450.presupuestado,0) as presupuestado_dfa450,
   COALESCE(dfa450.aporte,0) as aporte_dfa450,
   COALESCE(dfa450.percibido,0) as percibido_dfa450,
   -- 7=========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION ADMINISTRATIVA - 700.000===========
   COALESCE(dfa700.idp_bgg,0) as idp_dfa700,
   COALESCE(dfa700.presupuestado,0) as presupuestado_dfa700,
   COALESCE(dfa700.aporte,0) as aporte_dfa700,
   COALESCE(dfa700.percibido,0) as percibido_dfa700,
   -- 7=========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION PRESUPUESTARIA 20% SP===========
   COALESCE(dfp20.idp_bgg,0) as idp_dfp20,
   COALESCE(dfp20.presupuestado,0) as presupuestado_dfp20,
   COALESCE(dfp20.aporte,0) as aporte_dfp20,
   COALESCE(dfp20.percibido,0) as percibido_dfp20,
   -- 7=========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION PRESUPUESTARIA 40% SP===========
   COALESCE(dfp40.idp_bgg,0) as idp_dfp40,
   COALESCE(dfp40.presupuestado,0) as presupuestado_dfp40,
   COALESCE(dfp40.aporte,0) as aporte_dfp40,
   COALESCE(dfp40.percibido,0) as percibido_dfp40, 
   -- 7=========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION PRESUPUESTARIA - 550.000===========
   COALESCE(dfp550.idp_bgg,0) as idp_dfp550,
   COALESCE(dfp550.presupuestado,0) as presupuestado_dfp550,
   COALESCE(dfp550.aporte,0) as aporte_dfp550,
   COALESCE(dfp550.percibido,0) as percibido_dfp550,   
   -- 7=========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION PRESUPUESTARIA - 700.000===========
   COALESCE(dfp700.idp_bgg,0) as idp_dfp700,
   COALESCE(dfp700.presupuestado,0) as presupuestado_dfp700,
   COALESCE(dfp700.aporte,0) as aporte_dfp700,
   COALESCE(dfp700.percibido,0) as percibido_dfp700,   
   -- 7=========[133] BONIFICACIONES Y GRATIFICACIONES - INSALUBRIDAD===========
   COALESCE(dfins.idp_bgg,0) as idp_dfins,
   COALESCE(dfins.presupuestado,0) as presupuestado_dfins,
   COALESCE(dfins.aporte,0) as aporte_dfins,
   COALESCE(dfins.percibido,0) as percibido_dfins,      
   -- 8=========[133] GRATIFICACION OCASIONAL===========
   COALESCE(dfgo.idp_bgo,0) as idp_bgo,
   COALESCE(dfgo.presupuestado,0) as presupuestado_bgo,
   COALESCE(dfgo.aporte,0) as aporte_bgo,
   COALESCE(dfgo.percibido,0) as percibido_bgo,
   -- 9=========[133] ANTIGUEDAD===========
   COALESCE(dfa.idp_ba,0) as idp_ba,
   COALESCE(dfa.presupuestado,0) as presupuestado_ba,
   COALESCE(dfa.aporte,0) as aporte_ba,
   COALESCE(dfa.percibido,0) as percibido_ba,
   -- 10=========[133] GRADO ACADEMICO===========
   COALESCE(dfga.idp_bga,0) as idp_bga,
   COALESCE(dfga.presupuestado,0) as presupuestado_bga,
   COALESCE(dfga.aporte,0) as aporte_bga,
   COALESCE(dfga.percibido,0) as percibido_bga,
   -- 11=========[137] GRATIFICACION ESPECIAL (COMPENSACION/SEGURIDAD/UEP)===========
   COALESCE(dfge.idp_ge,0) as idp_ge,
   COALESCE(dfge.presupuestado,0) as presupuestado_ge,
   COALESCE(dfge.aporte,0) as aporte_ge,
   COALESCE(dfge.percibido,0) as percibido_ge,
   -- 12=========[199] DIFERENCIA SALARIAL===========
   COALESCE(dfds.idp_ds,0) as idp_ds,
   COALESCE(dfds.presupuestado,0) as presupuestado_ds,
   COALESCE(dfds.aporte,0) as aporte_ds,
   COALESCE(dfds.percibido,0) as percibido_ds,
   -- 13=========[199] OTROS GASTOS===========
   COALESCE(dfog.idp_og,0) as idp_og,
   COALESCE(dfog.presupuestado,0) as presupuestado_og,
   COALESCE(dfog.aporte,0) as aporte_og,
   COALESCE(dfog.percibido,0) as percibido_og,
   -- 14=========[849] OTRAS TRANSFERENCIAS CORRIENTES===========
   COALESCE(dfotc.idp_otc,0) as idp_otc,
   COALESCE(dfotc.presupuestado,0) as presupuestado_otc,
   -- 15=========[997] TOTAL PRESUPUESTADO===========
   (COALESCE(dsf.presupuestado,0)--1
   +COALESCE(dfgr.presupuestado,0)--2
   +COALESCE(dfre.presupuestado,0)--3
   +COALESCE(dfra.presupuestado,0)--4
   +COALESCE(dfsub.presupuestado,0)--5
   +COALESCE(dfbg.presupuestado,0)--6
   +COALESCE(dfbr.presupuestado,0)--6
   +COALESCE(dfa20.presupuestado,0)--7
   +COALESCE(dfa40.presupuestado,0)--7
   +COALESCE(dfa450.presupuestado,0)--7
   +COALESCE(dfa700.presupuestado,0)--7
   +COALESCE(dfp20.presupuestado,0)--7
   +COALESCE(dfp40.presupuestado,0)--7
   +COALESCE(dfp550.presupuestado,0)--7
   +COALESCE(dfp700.presupuestado,0)--7
   +COALESCE(dfgo.presupuestado,0)--8
   +COALESCE(dfa.presupuestado,0)--9
   +COALESCE(dfga.presupuestado,0)--10
   +COALESCE(dfge.presupuestado,0)--11
   +COALESCE(dfds.presupuestado,0)--12
   +COALESCE(dfog.presupuestado,0)--13
   +COALESCE(dfotc.presupuestado,0)--14
   ) as presupuestado_total,
   -- =========[998] TOTAL APORTE===========
   (COALESCE(dsf.aporte,0)  -- 1
   +COALESCE(dfgr.aporte,0) -- 2
   +COALESCE(dfre.aporte,0) -- 3
   +COALESCE(dfra.aporte,0) -- 4
   +COALESCE(dfsub.aporte,0)-- 5
   +COALESCE(dfbg.aporte,0) -- 6
   +COALESCE(dfbr.aporte,0) -- 6
   +COALESCE(dfa20.aporte,0) -- 7
   +COALESCE(dfa40.aporte,0) -- 7
   +COALESCE(dfa450.aporte,0) -- 7
   +COALESCE(dfa700.aporte,0) -- 7
   +COALESCE(dfp20.aporte,0) -- 7
   +COALESCE(dfp40.aporte,0) -- 7
   +COALESCE(dfp550.aporte,0) -- 7
   +COALESCE(dfp700.aporte,0) -- 7
   +COALESCE(dfins.aporte,0) -- 7
   +COALESCE(dfgo.aporte,0) -- 8
   +COALESCE(dfa.aporte,0)  -- 9
   +COALESCE(dfga.aporte,0) -- 10
   +COALESCE(dfge.aporte,0) -- 11
   +COALESCE(dfds.aporte,0) -- 12
   +COALESCE(dfog.aporte,0) -- 14
   ) as aporte_total,
   -- =========[999] TOTAL PERCIBIDO===========
   (COALESCE(dsf.percibido,0)   -- 1
   +COALESCE(dfgr.percibido,0)  -- 2
   +COALESCE(dfre.percibido,0)  -- 3
   +COALESCE(dfra.percibido,0)  -- 4
   +COALESCE(dfsub.percibido,0) -- 5
   +COALESCE(dfbg.percibido,0)  -- 6
   +COALESCE(dfbr.percibido,0)  -- 6
   +COALESCE(dfa20.percibido,0)  -- 7
   +COALESCE(dfa40.percibido,0)  -- 7
   +COALESCE(dfa450.percibido,0)  -- 7
   +COALESCE(dfa700.percibido,0)  -- 7
   +COALESCE(dfp20.percibido,0)  -- 7
   +COALESCE(dfp40.percibido,0)  -- 7
   +COALESCE(dfp550.percibido,0)  -- 7
   +COALESCE(dfp700.percibido,0)  -- 7
   +COALESCE(dfins.percibido,0)  -- 7
   +COALESCE(dfgo.percibido,0)  -- 8
   +COALESCE(dfa.percibido,0)   -- 9
   +COALESCE(dfga.percibido,0)  -- 10
   +COALESCE(dfge.percibido,0)  -- 11
   +COALESCE(dfds.percibido,0)  -- 12
   +COALESCE(dfog.percibido,0)  -- 13
   +COALESCE(dfotc.presupuestado,0) -- 14
   ) as percibido_total
FROM
   legajos.funcionarios f
   -- =======[111] SALARIOS=============  
   LEFT JOIN (
	SELECT
	  max(ps.id_planilla_salario) as idp_sal,
	  count(*) as cantidad, 
	  dps.id_funcionario,
	  array_to_string(array_agg(dps.dias_trabajados),chr(10)) as dias,
	  sum(dps.monto_presupuestado::int) as presupuestado,
	  sum(dps.monto_devengado::int) as devengado,
	  sum(dps.monto_aporte::int) as aporte,
	  sum(dps.monto_multa::int) as multa,
	  sum(dps.importe_descuentos_varios_solicitado::int) as desc_solicitado,
	  sum(dps.importe_descuentos_varios_aplicado::int) as desc_aplicado,
	  sum(dps.importe_descuentos_varios_diferencia::int) as desc_diferencia,
	  sum(dps.importe_liquido_con_descuentos_varios::int) as percibido
	FROM 
	  salarios.planillas_salarios ps
	  LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario=ps.id_planilla_salario
	  --LEFT JOIN salarios.detalles_categorias          dc ON dc.id_detalle_categoria=dps.id_detalle_categoria
	  --LEFT JOIN salarios.categorias                    c ON c.id_categoria=dc.id_categoria
	  --LEFT JOIN salarios.funcionarios_categorias      fc ON fc.id_detalle_categoria=dps.id_detalle_categoria AND fc.id_funcionario=dps.id_funcionario
	  --LEFT JOIN salarios.cargos			 car ON car.id_cargo=c.id_cargo
	WHERE
	  ps.id_administracion = in_id_administracion AND
	  ps.gestion= in_gestion AND
	  ps.id_mes= in_id_mes AND
	  ps.id_estado= 1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   dps.id_funcionario>0
		ELSE
		   dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	   /*AND fc.id_funcionario_categoria in (SELECT x.id_funcionario_categoria
						 FROM salarios.funcionarios_categorias x
						 WHERE (in_id_mes BETWEEN  extract(MONTH from x.desde) AND
							extract(MONTH from x.hasta-1) OR x.hasta is null) AND 
							x.gestion=fc.gestion AND 
							x.id_funcionario = fc.id_funcionario 
							AND
							(
							     CASE
								WHEN 
								   in_id_funcionario='0'
								THEN
								   fc.id_funcionario>0
								ELSE
								   fc.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
							     END  
							)*/
					        --ORDER BY x.id_funcionario_categoria DESC LIMIT 1
					        --)
	GROUP BY
	  dps.id_funcionario
   ) dsf ON dsf.id_funcionario=f.id_funcionario
   -- =========[113] GASTOS DE REPRESENTACION===========
   LEFT JOIN (
	SELECT
	   max(pgr.id_planilla_gasto_representacion) as idp_gc,
	   fr.id_funcionario,
	   sum(pgrd.dias) as dias,
	   sum(pgrd.presupuestado_parcial::int) as presupuestado,
	   sum(pgrd.aporte::int) as aporte,
	   sum(pgrd.presupuestado_parcial::int-pgrd.aporte::int) as percibido
	FROM
	   salarios.planilla_gasto_representacion pgr
	   LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion
	   LEFT JOIN salarios.funcionarios_representaciones           fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
	WHERE
	   pgr.id_administracion=in_id_administracion AND
	   pgr.gestion=in_gestion AND
	   pgr.id_mes=in_id_mes AND
	   pgr.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fr.id_funcionario>0
		ELSE
		   fr.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fr.id_funcionario
   ) dfgr ON dfgr.id_funcionario=f.id_funcionario 
   -- =========[123] REMUNERACION EXTRAORDINADRIA (RE)===========                                             
   LEFT JOIN (
	SELECT
	   max(pre.id_planilla_re) as idp_re,
	   pred.id_funcionario,
	   sum(pred.cantidad_horas) as horas,
	   sum(pred.monto::int) as presupuestado,
	   sum(pred.aporte::int) as aporte,
	   sum(pred.monto::int-pred.aporte::int) as percibido
	FROM
	   salarios.planillas_re pre
	   LEFT JOIN salarios.detalles_planillas_re pred ON pred.id_planilla_re=pre.id_planilla_re
	WHERE
	   pre.id_administracion=in_id_administracion AND
	   pre.gestion=in_gestion AND
	   pre.id_mes=in_id_mes AND
	   pre.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   pred.id_funcionario>0
		ELSE
		   pred.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   pred.id_funcionario
   ) dfre ON dfre.id_funcionario=f.id_funcionario
   -- =========[125] REMUNERACION ADICIONAL (RA)===========
   LEFT JOIN (
	SELECT
	   max(pra.id_planilla_ra) as idp_ra,
	   prad.id_funcionario,
	   sum(prad.cantidad_horas) as horas,
	   sum(prad.monto::int) as presupuestado,
	   sum(prad.aporte::int) as aporte,
	   sum(prad.monto::int-prad.aporte::int) as percibido
	FROM
	   salarios.planillas_ra pra
	   LEFT JOIN salarios.detalles_planillas_ra prad ON prad.id_planilla_ra=pra.id_planilla_ra
	WHERE
	   pra.id_administracion=in_id_administracion AND
	   pra.gestion=in_gestion AND
	   pra.id_mes=in_id_mes AND
	   pra.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   prad.id_funcionario>0
		ELSE
		   prad.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   prad.id_funcionario
   ) dfra ON dfra.id_funcionario=f.id_funcionario
   -- =========[131] SUBSIDIO===========
   LEFT JOIN (
	SELECT
	   max(ps.id_planilla_subsidio) as idp_sub,
	   fs.id_funcionario,
	   sum(dps.cantidad) as cantidad,
	   sum(dps.importe_monto::int) as presupuestado,
	   sum(dps.aporte::int) as aporte,
	   sum(dps.importe_monto::int-dps.aporte::int) as percibido
	FROM
	   salarios.planillas_subsidios ps
	   LEFT JOIN salarios.detalles_planillas_subsidios dps ON dps.id_planilla_subsidio=ps.id_planilla_subsidio
	   LEFT JOIN salarios.funcionarios_subsidios        fs ON fs.id_funcionario_subsidio=dps.id_funcionario_subsidio
	   LEFT JOIN salarios.subsidios                      s ON s.id_subsidio=fs.id_subsidio
	WHERE
	   ps.id_administracion=in_id_administracion AND
	   ps.gestion=in_gestion AND
	   ps.id_mes=in_id_mes AND
	   ps.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fs.id_funcionario>0
		ELSE
		   fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fs.id_funcionario
   ) dfsub ON dfsub.id_funcionario=f.id_funcionario
   -- =========[133] BONIFICACIONES Y GRATIFICACIONES GENERAL===========
   LEFT JOIN (
	SELECT
	   max(pb.id_planilla_bonificacion) as idp_bgr,
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfbg ON dfbg.id_funcionario=f.id_funcionario
   -- =========[133] BONIFICACIONES Y GRATIFICACIONES (RESPONSABILIDAD & ABOGADO FISCAL)===========
   LEFT JOIN (
	SELECT
	   max(pb.id_planilla_bonificacion) as idp_bgr,
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   (
		b.descripcion ilike '%RESPONSABILIDAD%' OR
		b.descripcion ilike '%ABOGADO FISCAL%'
	   ) AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfbr ON dfbr.id_funcionario=f.id_funcionario
   -- =========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION ADMINISTRATIVA 20% SP===========
   LEFT JOIN (
	SELECT
	   max(pb.id_planilla_bonificacion) as idp_bgg,
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   b.descripcion ilike '%ADMINISTRATIVA 20%' AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfa20 ON dfa20.id_funcionario=f.id_funcionario
   -- =========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION ADMINISTRATIVA 40% (SP+GR)===========
   LEFT JOIN (
	SELECT
	   max(pb.id_planilla_bonificacion) as idp_bgg,
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   b.descripcion ilike '%ADMINISTRATIVA 40%' AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfa40 ON dfa40.id_funcionario=f.id_funcionario
   -- =========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION ADMINISTRATIVA - 450.000===========
   LEFT JOIN (
	SELECT
	   max(pb.id_planilla_bonificacion) as idp_bgg,
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   b.descripcion ilike '%ADMINISTRATIVA - 450%' AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfa450 ON dfa450.id_funcionario=f.id_funcionario
-- =========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION ADMINISTRATIVA - 700.000===========
   LEFT JOIN (
	SELECT
	   max(pb.id_planilla_bonificacion) as idp_bgg,
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   b.descripcion ilike '%ADMINISTRATIVA - 700%' AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfa700 ON dfa700.id_funcionario=f.id_funcionario   	
-- =========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION ADMINISTRATIVA 20% SP===========
   LEFT JOIN (
	SELECT
	   max(pb.id_planilla_bonificacion) as idp_bgg,
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   b.descripcion ilike '%PRESUPUESTARIA 20%' AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfp20 ON dfp20.id_funcionario=f.id_funcionario
-- =========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION ADMINISTRATIVA 40% (SP+GR)===========
   LEFT JOIN (
	SELECT
	   max(pb.id_planilla_bonificacion) as idp_bgg,
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   b.descripcion ilike '%PRESUPUESTARIA 40%' AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfp40 ON dfp40.id_funcionario=f.id_funcionario
   -- =========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION PRESUPUESTARIA - 550.000===========
   LEFT JOIN (
	SELECT
	   max(pb.id_planilla_bonificacion) as idp_bgg,
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   b.descripcion ilike '%PRESUPUESTARIA - 550%' AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfp550 ON dfp550.id_funcionario=f.id_funcionario 
   -- =========[133] BONIFICACIONES Y GRATIFICACIONES - GESTION PRESUPUESTARIA - 700.000===========
   LEFT JOIN (
	SELECT
	   max(pb.id_planilla_bonificacion) as idp_bgg,
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   b.descripcion ilike '%PRESUPUESTARIA - 700%' AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfp700 ON dfp700.id_funcionario=f.id_funcionario
-- =========[133] BONIFICACIONES Y GRATIFICACIONES - INSALUBRIDAD===========
   LEFT JOIN (
	SELECT
	   max(pb.id_planilla_bonificacion) as idp_bgg,
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   b.descripcion ilike '%INSALUBRIDAD' AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfins ON dfins.id_funcionario=f.id_funcionario   
   -- =========[133] ANTIGUEDAD===========
   LEFT JOIN (
	SELECT
	   max(pa.id_planilla_antiguedad) as idp_ba,
	   dpa.id_funcionario,
	   sum(dpa.importe_antiguedad::int) as presupuestado,
	   sum(dpa.importe_aporte::int) as aporte,
	   sum(dpa.importe_antiguedad::int-dpa.importe_aporte::int) as percibido
	FROM
	   salarios.planillas_antiguedad pa
	   LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad
	WHERE
	   pa.id_administracion=in_id_administracion AND
	   pa.gestion=in_gestion AND
	   pa.id_mes=in_id_mes AND
	   pa.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   dpa.id_funcionario>0
		ELSE
		   dpa.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   dpa.id_funcionario
   ) dfa ON dfa.id_funcionario=f.id_funcionario
   -- =========[133] GRADO ACADEMICO===========
   LEFT JOIN (
	SELECT
	   max(pp.id_planilla_profesional) as idp_bga,
	   fp.id_funcionario,
	   sum(dpp.importe_profesional::int) as presupuestado,
	   sum(dpp.importe_aporte::int) as aporte,
	   sum(dpp.importe_profesional::int-dpp.importe_aporte::int) as percibido
	FROM
	   salarios.planilla_profesionales pp
	   LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional
	   LEFT JOIN salarios.funcionarios_profesionales       fp ON fp.id_funcionario_profesional=dpp.id_funcionario_profesional
	WHERE
	   pp.id_administracion=in_id_administracion AND
	   pp.gestion=in_gestion AND
	   pp.id_mes=in_id_mes AND
	   pp.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fp.id_funcionario>0
		ELSE
		   fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fp.id_funcionario
   ) dfga ON dfga.id_funcionario=f.id_funcionario
   -- =========[133] GRATIFICACION OCASIONAL===========
   LEFT JOIN (
	SELECT
	   max(pgo.id_planilla_gratificacion_ocacional) as idp_bgo,
	   dpgo.id_funcionario,
	   sum(dpgo.importe_gratificacion::int) as presupuestado,
	   sum(dpgo.importe_aporte::int) as aporte,
	   sum(dpgo.importe_gratificacion::int-dpgo.importe_aporte::int) as percibido
	FROM
	   salarios.planilla_gratificacion_ocacional pgo
	   LEFT JOIN salarios.detalle_planilla_gratificacion_ocacional dpgo ON dpgo.id_planilla_gratificacion_ocacional=pgo.id_planilla_gratificacion_ocacional
	WHERE
	   pgo.id_administracion=in_id_administracion AND
	   pgo.gestion=in_gestion AND
	   pgo.id_mes=in_id_mes AND
	   pgo.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   dpgo.id_funcionario>0
		ELSE
		   dpgo.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   dpgo.id_funcionario 
   ) dfgo ON dfgo.id_funcionario=f.id_funcionario
   -- =========[137] GRATIFICACION ESPECIAL (COMPENSACION/SEGURIDAD/UEP)=========== 
   LEFT JOIN (
	SELECT
	   max(pge.id_planilla_gratificacion) as idp_ge,
	   dpge.id_funcionario,
	   sum(dpge.importe_gratificacion::int) as presupuestado,
	   sum(dpge.importe_aporte::int) as aporte,
	   sum(dpge.importe_gratificacion::int-dpge.importe_aporte::int) as percibido
	FROM
	   salarios.planilla_gratificacion_especial pge
	   LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge ON dpge.id_planilla_gratificacion=pge.id_planilla_gratificacion
	WHERE
	   pge.id_administracion=in_id_administracion AND
	   pge.gestion=in_gestion AND
	   pge.id_mes=in_id_mes AND
	   pge.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   dpge.id_funcionario>0
		ELSE
		   dpge.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   dpge.id_funcionario
   ) dfge ON dfge.id_funcionario=f.id_funcionario
   -- =========[199] DIFERENCIA SALARIAL===========
   LEFT JOIN (
	SELECT
	   max(pds.id_planilla_diferencia_salarial) as idp_ds,
	   fs.id_funcionario,
	   sum(pdsd.importe_monto_diferencia::int) as presupuestado,
	   sum(pdsd.importe_monto_aporte::int) as aporte,
	   sum(pdsd.importe_monto_diferencia::int-pdsd.importe_monto_aporte::int) as percibido
	FROM
	   salarios.planilla_diferencia_salarial pds
	   LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial
	   LEFT JOIN salarios.funcionarios_superiores fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
	WHERE
	   pds.id_administracion=in_id_administracion AND
	   pds.gestion=in_gestion AND
	   pds.id_mes=in_id_mes AND
	   pds.estado=1 AND
	   pds.id_tipo_pagos_varios=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fs.id_funcionario>0
		ELSE
		   fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fs.id_funcionario
   ) dfds ON dfds.id_funcionario=f.id_funcionario
   -- =========[199] OTROS GASTOS===========
   LEFT JOIN (
	SELECT
	   max(pds.id_planilla_diferencia_salarial) as idp_og,
	   f.id_funcionario,
	   sum(pdsd.importe_monto_diferencia::int) as presupuestado,
	   sum(pdsd.importe_monto_aporte::int) as aporte,
	   sum(pdsd.importe_monto_diferencia::int-pdsd.importe_monto_aporte::int) as percibido
	FROM
	   salarios.planilla_diferencia_salarial pds
	   LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial
	   LEFT JOIN legajos.funcionarios f ON f.id_funcionario=pdsd.id_funcionario
	WHERE
	   pds.id_administracion=in_id_administracion AND
	   pds.gestion=in_gestion AND
	   pds.id_mes=in_id_mes AND
	   pds.estado=1 AND
	   pds.id_tipo_pagos_varios=2 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   f.id_funcionario>0
		ELSE
		   f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   f.id_funcionario  
   ) dfog ON dfog.id_funcionario=f.id_funcionario
   -- =========[849] OTRAS TRANSFERENCIAS CORRIENTES===========
   LEFT JOIN (
	SELECT
	   max(potc.id_planilla_otra_transferencia_cte) as idp_otc,
	   potcd.id_funcionario,
	   sum(potcd.importe_otra_transferencia_cte::int) as presupuestado
	FROM
	   salarios.planillas_otras_transferencias_ctes potc
	   LEFT JOIN salarios.planillas_otras_transferencias_ctes_detalles potcd ON potcd.id_planilla_otra_transferencia_cte=potc.id_planilla_otra_transferencia_cte
	WHERE
	   potc.id_administracion=in_id_administracion AND
	   potc.gestion=in_gestion AND
	   potc.id_mes=in_id_mes AND
	   potc.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   potcd.id_funcionario>0
		ELSE
		   potcd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   potcd.id_funcionario   
   ) dfotc ON dfotc.id_funcionario=f.id_funcionario
   --LEFT JOIN salarios.detalles_categorias        dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
   --LEFT JOIN salarios.categorias                cat ON cat.id_categoria=dc.id_categoria
   --LEFT JOIN salarios.cargos                    car ON car.id_cargo=cat.id_cargo
   --LEFT JOIN salarios.categoria_importe_mensual cim ON cim.id_categoria=cat.id_categoria and cim.id_mes = in_id_mes -- id_mes
   -- =========[***] DATOS FUNCIONARIO===========
   LEFT JOIN (
	SELECT 
	fc.id_funcionario, 
	fc.id_funcionario_categoria, 
	fc.id_administracion, 
	fc.id_detalle_categoria, 
	fc.id_oficina, 
	fc.id_oficina_presta,
	CASE WHEN c.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo,
	c.nombre_categoria::text as categoria,
	car.nombre_cargo::text as cargo,
	to_char(fc.desde,'dd/mm/YYYY')::text as desde,
	cim.importe::bigint,
	COALESCE(to_char(fc.hasta,'dd/mm/YYYY'),'LA FECHA')::text as hasta,   
	ocd.nivel1,
	ocd.nivel2,
	ocd.nivel3,
	ocd.nivel4,
	ocd.nivel5,
	ocd.nombre_nivel1::text,
	ocd.nombre_nivel2::text,
	ocd.nombre_nivel3::text,
	ocd.nombre_nivel4::text,
	ocd.nombre_nivel5::text
	FROM salarios.funcionarios_categorias fc
	LEFT JOIN salarios.detalles_categorias dc ON (dc.id_detalle_categoria = fc.id_detalle_categoria)
	LEFT JOIN salarios.categorias c ON (c.id_categoria = dc.id_categoria) AND c.gastos_de_representacion is false
	LEFT JOIN salarios.cargos car ON (car.id_cargo = c.id_cargo)
	LEFT JOIN salarios.categoria_importe_mensual cim ON (cim.id_categoria =  c.id_categoria) AND cim.id_mes=in_id_mes
	LEFT JOIN legajos.oficinas_con_descripciones ocd ON (ocd.id_oficina=fc.id_oficina)
	WHERE 
	fc.gestion = in_gestion 
	AND fc.id_administracion IN(0,1,2)
	AND fc.id_funcionario_categoria in (SELECT x.id_funcionario_categoria
						 FROM salarios.funcionarios_categorias x
						 WHERE (in_id_mes BETWEEN  extract(MONTH from x.desde) AND
							extract(MONTH from x.hasta-1) OR x.hasta is null) AND 
							x.gestion=fc.gestion AND 
							x.id_funcionario = fc.id_funcionario 
							/*AND
							(
							     CASE
								WHEN 
								   in_id_funcionario='0'
								THEN
								   fc.id_funcionario>0
								ELSE
								   fc.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
							     END  
							)*/
					        ORDER BY x.id_funcionario_categoria LIMIT 1
					        )
   ) fc ON fc.id_funcionario=f.id_funcionario
   LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=fc.id_funcionario
   LEFT JOIN legajos.oficinas_con_descripciones   ocd    ON ocd.id_oficina=fc.id_oficina
WHERE
   f.id_administracion IN (0,1,2) AND
   (
     CASE
        WHEN 
	   in_id_funcionario='0'
        THEN
	   f.id_funcionario>0
        ELSE
	   f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
ORDER BY 
   ocd.nivel1,
   ocd.nivel2,
   ocd.nivel3,
   ocd.nivel4,
   ocd.nivel5,
   dsf.presupuestado DESC
 ) inf
 WHERE
   inf.presupuestado_total>=0;

END;
]]></definition>
</function>

<function name="informe_liquidaciones_funcionarios_desglosado_agrupado"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="mes">
		<type name="text"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="permanente">
		<type name="integer"/>
	</parameter>
	<parameter name="comisionado">
		<type name="integer"/>
	</parameter>
	<parameter name="sal">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_gre">
		<type name="integer"/>
	</parameter>
	<parameter name="gre">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_rex">
		<type name="integer"/>
	</parameter>
	<parameter name="rex">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_rad">
		<type name="integer"/>
	</parameter>
	<parameter name="rad">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_sub">
		<type name="integer"/>
	</parameter>
	<parameter name="sub">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_bg">
		<type name="integer"/>
	</parameter>
	<parameter name="bg">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_bgr">
		<type name="integer"/>
	</parameter>
	<parameter name="bgr">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_ba20">
		<type name="integer"/>
	</parameter>
	<parameter name="ba20">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_ba40">
		<type name="integer"/>
	</parameter>
	<parameter name="ba40">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_ba450">
		<type name="integer"/>
	</parameter>
	<parameter name="ba450">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_ba700">
		<type name="integer"/>
	</parameter>
	<parameter name="ba700">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_bp20">
		<type name="integer"/>
	</parameter>
	<parameter name="bp20">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_bp40">
		<type name="integer"/>
	</parameter>
	<parameter name="bp40">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_bp550">
		<type name="integer"/>
	</parameter>
	<parameter name="bp550">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_bp700">
		<type name="integer"/>
	</parameter>
	<parameter name="bp700">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_bins">
		<type name="integer"/>
	</parameter>
	<parameter name="bins">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_ba">
		<type name="integer"/>
	</parameter>
	<parameter name="ban">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_bga">
		<type name="integer"/>
	</parameter>
	<parameter name="bga">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_bgo">
		<type name="integer"/>
	</parameter>
	<parameter name="bgo">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_ges">
		<type name="integer"/>
	</parameter>
	<parameter name="ges">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_dsa">
		<type name="integer"/>
	</parameter>
	<parameter name="dsa">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_oga">
		<type name="integer"/>
	</parameter>
	<parameter name="oga">
		<type name="bigint"/>
	</parameter>
	<parameter name="ben_otc">
		<type name="integer"/>
	</parameter>
	<parameter name="otc">
		<type name="bigint"/>
	</parameter>
	<parameter name="tot">
		<type name="bigint"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado agrupado de las liquidaciones de los funcionarios permanentes/comisionados por mes y gestion
  * Creado    : 2014-02-28 08:51:00
  * Modificado: 2014-07-07 10:17:50
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado 
  * 	       in_id_funcionario    '0':todos '466,481,...':ids_funcionarios específicos
  * Descripcion:  Genera un listado de los funcionarios permanentes/comisionados referentes a las liquidaciones por mes y gestion
  * ------------  
  */
RETURN QUERY
SELECT

   max(m.mes_descripcion)::text as mes,
   c.id_mes::integer,
   sum(case when c.idp_sal>0 then 1 else 0 end)::integer as permanente,
   
   sum(case when c.tipo='COM' then 1 else 0 end)::integer as comisionado,
   
   sum(case when c.idp_sal>0 then presupuestado_sal else 0 end)::bigint as sal,
   -- GASTO REPRESENTACION
   sum(case when c.idp_gc>0 then 1 else 0 end)::integer as ben_gre,
   sum(c.presupuestado_gc)::bigint    as gre,
   -- RE
   sum(case when c.idp_re>0 then 1 else 0 end)::integer as ben_rex,
   sum(c.presupuestado_re)::bigint    as rex,
   -- RA
   sum(case when c.idp_ra>0 then 1 else 0 end)::integer as ben_rad,
   sum(c.presupuestado_ra)::bigint    as rad,
   -- SUBSIDIO
   sum(case when c.idp_sub>0 then 1 else 0 end)::integer as ben_sub,
   sum(c.presupuestado_sub)::bigint   as sub,
   -- BONIF. Y GRATIF. GENERAL 
   sum(case when c.idp_bg>0 then 1 else 0 end)::integer as ben_bg,
   sum(c.presupuestado_bg)::bigint   as bg,
   -- BONIF. Y GRATIF. - RESPONSABILIDAD EN EL CARGO 80% & ABOGADO FISCAL 
   sum(case when c.idp_bgr>0 then 1 else 0 end)::integer as ben_bgr,
   sum(c.presupuestado_bgr)::bigint   as bgr,
   -- BONIF. Y GRATIF. - GESTION ADMINISTRATIVA 20% SP
   sum(case when c.idp_ba20>0 then 1 else 0 end)::integer as ben_ba20,
   sum(c.presupuestado_ba20)::bigint   as ba20,
   -- BONIF. Y GRATIF. - GESTION ADMINISTRATIVA 40% SP
   sum(case when c.idp_ba40>0 then 1 else 0 end)::integer as ben_ba40,
   sum(c.presupuestado_ba40)::bigint   as ba40,
   -- BONIF. Y GRATIF. - GESTION ADMINISTRATIVA - 450.000
   sum(case when c.idp_ba450>0 then 1 else 0 end)::integer as ben_ba450,
   sum(c.presupuestado_ba450)::bigint   as ba450,
   -- BONIF. Y GRATIF. - GESTION ADMINISTRATIVA - 700.000
   sum(case when c.idp_ba700>0 then 1 else 0 end)::integer as ben_ba700,
   sum(c.presupuestado_ba700)::bigint   as ba700,
   -- BONIF. Y GRATIF. - GESTION PRESUPUESTARIA 20% SP
   sum(case when c.idp_bp20>0 then 1 else 0 end)::integer as ben_bp20,
   sum(c.presupuestado_bp20)::bigint   as bp20,
   -- BONIF. Y GRATIF. - GESTION PRESUPUESTARIA 40% (SP+GR)
   sum(case when c.idp_bp40>0 then 1 else 0 end)::integer as ben_bp40,
   sum(c.presupuestado_bp40)::bigint   as bp40,
   -- BONIF. Y GRATIF. - GESTION PRESUPUESTARIA - 550.000
   sum(case when c.idp_bp550>0 then 1 else 0 end)::integer as ben_bp550,
   sum(c.presupuestado_bp550)::bigint   as bp550,
   -- BONIF. Y GRATIF. - GESTION PRESUPUESTARIA - 700.000
   sum(case when c.idp_bp700>0 then 1 else 0 end)::integer as ben_bp700,
   sum(c.presupuestado_bp700)::bigint   as bp700,
   -- BONIF. Y GRATIF. - INSALUBRIDAD
   sum(case when c.idp_bins>0 then 1 else 0 end)::integer as ben_bins,
   sum(c.presupuestado_bins)::bigint   as bins,            
   -- BONIF. Y GRATIF. - ANTIGUEDAD
   sum(case when c.idp_ba>0 then 1 else 0 end)::integer as ben_ba,
   sum(c.presupuestado_ba)::bigint    as ban,
   -- BONIF. Y GRATIF. - GRADO ACADEMICO
   sum(case when c.idp_bga>0 then 1 else 0 end)::integer as ben_bga,
   sum(c.presupuestado_bga)::bigint   as bga,
   -- GRATIFICACION OCASIONAL
   sum(case when c.idp_bgo>0 then 1 else 0 end)::integer as ben_bgo,
   sum(c.presupuestado_bgo)::bigint   as bgo,
   -- GRATIFICACION ESPECIAL
   sum(case when c.idp_ge>0 then 1 else 0 end)::integer as ben_ges,
   sum(c.presupuestado_ge)::bigint    as ges,
   -- DIFERENCIA SALARIAL
   sum(case when c.idp_ds>0 then 1 else 0 end)::integer as ben_dsa,
   sum(c.presupuestado_ds)::bigint    as dsa,
   -- OTROS GASTOS
   sum(case when c.idp_og>0 then 1 else 0 end)::integer as ben_oga,
   sum(c.presupuestado_og)::bigint    as oga,
   -- OTRAS TRANSFERENCIAS CORRIENTES
   sum(case when c.idp_otc>0 then 1 else 0 end)::integer as ben_otc,
   sum(c.presupuestado_otc)::bigint   as otc,
   -- TOTAL
   sum(c.presupuestado_total)::bigint as tot
FROM
(
   --ENERO	
   SELECT 
      1 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,1,in_gestion,in_id_funcionario)
   UNION
   --FEBRERO
   SELECT 
      2 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,2,in_gestion,in_id_funcionario)
   UNION
   --MARZO
   SELECT 
      3 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,3,in_gestion,in_id_funcionario)
   UNION
   --ABRIL
   SELECT 
      4 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,4,in_gestion,in_id_funcionario)
   UNION
   --MAYO
   SELECT 
      5 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,5,in_gestion,in_id_funcionario)
   UNION
   --JUNIO
   SELECT 
      6 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,6,in_gestion,in_id_funcionario)
   UNION
   --JULIO
   SELECT 
      7 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,7,in_gestion,in_id_funcionario)
   UNION
   --AGOSTO
   SELECT 
      8 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,8,in_gestion,in_id_funcionario)
   UNION
   --SETIEMBRE
   SELECT 
      9 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,9,in_gestion,in_id_funcionario)
   UNION
   --OCTUBRE
   SELECT 
      10 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,10,in_gestion,in_id_funcionario)
   UNION
   --NOVIEMBRE
   SELECT 
      11 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,11,in_gestion,in_id_funcionario)
   UNION
   --DICIEMBRE
   SELECT 
      12 as id_mes,
      *
   FROM
      salarios.informe_liquidaciones_funcionarios_desglosado(in_id_administracion,12,in_gestion,in_id_funcionario)
) c
LEFT JOIN meses m ON m.id_mes=c.id_mes
GROUP BY 
   c.id_mes
ORDER BY id_mes;

END;
]]></definition>
</function>

<function name="liquidacion_ingresos_permanente_anual_irp"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="tipo">
		<type name="text"/>
	</parameter>
	<parameter name="id_nivel">
		<type name="text"/>
	</parameter>
	<parameter name="nivel1">
		<type name="text"/>
	</parameter>
	<parameter name="nivel2">
		<type name="text"/>
	</parameter>
	<parameter name="nivel3">
		<type name="text"/>
	</parameter>
	<parameter name="nivel4">
		<type name="text"/>
	</parameter>
	<parameter name="nivel5">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="bigint"/>
	</parameter>
	<parameter name="enero">
		<type name="bigint"/>
	</parameter>
	<parameter name="febrero">
		<type name="bigint"/>
	</parameter>
	<parameter name="marzo">
		<type name="bigint"/>
	</parameter>
	<parameter name="abril">
		<type name="bigint"/>
	</parameter>
	<parameter name="mayo">
		<type name="bigint"/>
	</parameter>
	<parameter name="junio">
		<type name="bigint"/>
	</parameter>
	<parameter name="julio">
		<type name="bigint"/>
	</parameter>
	<parameter name="agosto">
		<type name="bigint"/>
	</parameter>
	<parameter name="setiembre">
		<type name="bigint"/>
	</parameter>
	<parameter name="octubre">
		<type name="bigint"/>
	</parameter>
	<parameter name="noviembre">
		<type name="bigint"/>
	</parameter>
	<parameter name="diciembre">
		<type name="bigint"/>
	</parameter>
	<parameter name="total">
		<type name="bigint"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes_actual" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<parameter name="in_monto_irp" in="true">
		<type name="bigint"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar la hoja de liquidación de ingresos del funcionario permanente/comisionado mensual para IRP
  * Creado    : 2013-10-31 10:25:00
  * Modificado: 2013-10-31 14:26:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso actual
  *            in_gestion           ejercicio aplicado (año)
  *            in_id_funcionario    identificador del funcionario (por Ids o total Ej: '466,218' o '218' o 'T' trae todos los funcionarios)
  * 	       in_monto_irp 	    monto del IRP mayor o igual a filtrar (0 trae todos los montos totales)
  * Descripcion:  muestra el monto total de ingresos de liquidación de salarios individual del funcionario permanente/comisionado
  * ------------  
  */
RETURN QUERY 
SELECT
*
FROM
(
SELECT
  irp.id_funcionario::int,--1
  irp.cedula::text,--2
  irp.funcionario::text,--3
  irp.tipo::text,--4
  irp.id_nivel::text,--5
  irp.nivel1::text,--6
  irp.nivel2::text,--7
  irp.nivel3::text,--8
  irp.nivel4::text,--9
  irp.nivel5::text,--10
  irp.categoria::text,--11
  irp.cargo::text,--12
  irp.presupuestado::bigint,--13
  irp.enero,--14
  irp.febrero,--15
  irp.marzo,--16
  irp.abril,--17
  irp.mayo,--18
  irp.junio,--19
  irp.julio,--20
  irp.agosto,--21
  irp.setiembre,--22
  irp.octubre,--23
  irp.noviembre,--24
  irp.diciembre,--25
  (irp.enero+irp.febrero+irp.marzo+irp.abril+irp.mayo+irp.junio+irp.julio+irp.agosto+irp.setiembre+irp.octubre+irp.noviembre+irp.diciembre) as total --26
FROM
(
SELECT
  f.id_funcionario,
  f.cedula_funcionario as cedula,
  f.apellido_funcionario||', '||f.nombre_funcionario as funcionario,
  ocd.nombre_nivel1 as nivel1,
  ocd.nombre_nivel2 as nivel2,
  CASE WHEN trim(ocd.nombre_nivel3) is null THEN (CASE WHEN ocd.nombre_nivel4 is null THEN ocd.nombre_nivel5 ELSE ocd.nombre_nivel4 END) ELSE ocd.nombre_nivel3 END as nivel3,
  ocd.nombre_nivel4 as nivel4,
  ocd.nombre_nivel5 as nivel5,
  cat.nombre_categoria as categoria,
  car.nombre_cargo as cargo,
  (ocd.nivel1||'-'||ocd.nivel2||'-'||ocd.nivel3||'-'||ocd.nivel4||'-'||ocd.nivel5) as id_nivel,
  cim.importe::int as presupuestado,
  CASE WHEN cat.es_comisionado THEN 'COM ['||UPPER(cat.abreviatura_entidad)||']' ELSE 'PER ['||UPPER(cat.abreviatura_entidad)||']' END as tipo,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,1,in_gestion,f.id_funcionario)) publico)  as enero,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,2,in_gestion,f.id_funcionario)) publico)  as febrero,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,3,in_gestion,f.id_funcionario)) publico)  as marzo,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,4,in_gestion,f.id_funcionario)) publico)  as abril,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,5,in_gestion,f.id_funcionario)) publico)  as mayo,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,6,in_gestion,f.id_funcionario)) publico)  as junio,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,7,in_gestion,f.id_funcionario)) publico)  as julio,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,8,in_gestion,f.id_funcionario)) publico)  as agosto,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,9,in_gestion,f.id_funcionario)) publico)  as setiembre,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,10,in_gestion,f.id_funcionario)) publico) as octubre,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,11,in_gestion,f.id_funcionario)) publico) as noviembre,
  (SELECT sum(replace(publico.importe,'.','')::int) as importe FROM (SELECT importe FROM salarios.liquidacion_ingresos_permanente_mensual_irp(in_id_administracion,12,in_gestion,f.id_funcionario)) publico) as diciembre
FROM 
  salarios.funcionarios_categorias fc
  LEFT JOIN salarios.detalles_categorias dc             ON dc.id_detalle_categoria=fc.id_detalle_categoria
  LEFT JOIN salarios.categorias cat                     ON cat.id_categoria=dc.id_categoria
  LEFT JOIN salarios.cargos car                         ON car.id_cargo=cat.id_cargo
  LEFT JOIN salarios.categoria_importe_mensual cim      ON cim.id_categoria=cat.id_categoria and cim.id_mes = in_id_mes_actual -- id_mes
  LEFT JOIN legajos.funcionarios f                      ON f.id_funcionario=fc.id_funcionario
  LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f.id_funcionario
  LEFT JOIN legajos.oficinas_con_descripciones      ocd ON ocd.id_oficina=saa.id_oficina_presta 
WHERE
  fc.gestion=in_gestion and
  fc.hasta is null and
  f.estado_funcionario and
  f.id_administracion IN (0,in_id_administracion) and
  cat.id_cargo>0 and
  (
     CASE
        WHEN 
	   char_length(in_id_funcionario)>1 
        THEN 
	   f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
        ELSE
	   f.id_funcionario>0
     END  
   )
) irp
) irp_anual
WHERE
   (
     CASE
        WHEN 
	   in_monto_irp>0 
        THEN 
	   irp_anual.total>=in_monto_irp
        ELSE
	   irp_anual.total>0
     END  
   )
ORDER BY 4, 11 DESC,3 ;

END;
]]></definition>
</function>

<function name="liquidacion_ingresos_permanente_mensual_irp"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="nombres">
		<type name="text"/>
	</parameter>
	<parameter name="apellidos">
		<type name="text"/>
	</parameter>
	<parameter name="nivel1">
		<type name="text"/>
	</parameter>
	<parameter name="nivel2">
		<type name="text"/>
	</parameter>
	<parameter name="nivel3">
		<type name="text"/>
	</parameter>
	<parameter name="nivel4">
		<type name="text"/>
	</parameter>
	<parameter name="nivel5">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="text"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="tipo">
		<type name="text"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="text"/>
	</parameter>
	<parameter name="importe">
		<type name="text"/>
	</parameter>
	<parameter name="descuento">
		<type name="text"/>
	</parameter>
	<parameter name="aporte">
		<type name="text"/>
	</parameter>
	<parameter name="liquido">
		<type name="text"/>
	</parameter>
	<parameter name="tipo_concepto">
		<type name="text"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="linea">
		<type name="bigint"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar la hoja de liquidación de ingresos del funcionario permanente/comisionado mensual para IRP
  * Creado    : 2013-10-30 10:25:00
  * Modificado: 2013-10-30 12:30:00
  * Modificado: 2015-12-18 11:09:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado
  *            in_id_funcionario    identificador del funcionario 
  * 
  * Descripcion:  muestra el monto total de ingresos de liquidación de salarios individual del funcionario permanente/comisionado
  * ------------  
  */
RETURN QUERY 
SELECT
*
FROM
(
--DATOS BASICOS FUNCIONARIO PERMANENTE
SELECT
  pl.id_funcionario,--1
  trim(replace(to_char(max(pl.cedula)::integer,'999,999,999'),',','.')) as cedula,--2
  max(pl.nombres) as nombres,--3
  max(pl.apellidos) as apellidos,--4
  max(pl.nivel1) as nivel1,--5
  max(pl.nivel2) as nivel2,--6
  max(pl.nivel3) as nivel3,--7
  max(pl.nivel4) as nivel4,--8
  max(pl.nivel5) as nivel5,--9
  max(pl.categoria) as categoria,--10
  max(pl.cargo) as cargo,--11
  max(pl.presupuestado) as presupuestado,--12
  max(pl.dias_trabajados) as dias_trabajados,--13
  max(pl.tipo) as tipo,
  max(pl.concepto) as concepto,--14
  max(pl.objeto_gasto) as objeto_gasto,--15
  max(pl.importe) as importe,--16
  max(pl.descuento) as descuento,--17
  max(pl.aporte) as aporte,--18
  max(pl.liquido) as liquido,--19
  max(pl.tipo_concepto) as tipo_concepto, --20
  max(pl.orden) as orden, --21
  max(pl.linea) as linea --22
FROM
(
SELECT
  dbf.id_funcionario,--1
  dbf.cedula,--2
  dbf.nombres,--3
  dbf.apellidos,--4
  dbf.nivel1,--5
  CASE WHEN dbf.nivel3=dbf.nivel2 THEN '---' ELSE dbf.nivel2 END,--6
  CASE WHEN dbf.nivel2=dbf.nivel3 and dbf.nivel4=dbf.nivel3 and dbf.nivel5=dbf.nivel3 THEN '---' ELSE dbf.nivel3 END,--7
  CASE WHEN dbf.nivel3=dbf.nivel4 and dbf.nivel5=dbf.nivel4 THEN '---' ELSE dbf.nivel4 END,--8
  CASE WHEN dbf.nivel4=dbf.nivel5 THEN '---' ELSE dbf.nivel5 END,--9
  dbf.categoria,--10
  dbf.cargo,--11
  dbf.presupuestado,--12
  0 as dias_trabajados,--13
  dbf.tipo,
  dbf.concepto,--14
  dbf.objeto_gasto,--15
  dbf.importe,--16
  dbf.descuento,--17
  dbf.aporte,--18
  dbf.liquido,--19
  dbf.tipo_concepto, --20
  dbf.orden, --21
  dbf.linea --22
FROM
(
SELECT
  f.id_funcionario,
  f.cedula_funcionario as cedula,
  f.nombre_funcionario as nombres,
  f.apellido_funcionario as apellidos,
  ocd.nombre_nivel1 as nivel1,
  ocd.nombre_nivel2 as nivel2,
  CASE WHEN trim(ocd.nombre_nivel3) is null THEN (CASE WHEN ocd.nombre_nivel4 is null THEN ocd.nombre_nivel5 ELSE ocd.nombre_nivel4 END) ELSE ocd.nombre_nivel3 END as nivel3,
  ocd.nombre_nivel4 as nivel4,
  ocd.nombre_nivel5 as nivel5,
  cat.nombre_categoria as categoria,
  car.nombre_cargo as cargo,
  replace(to_char(cim.importe,'999,999,999'),',','.') as presupuestado,
  CASE WHEN cat.es_comisionado THEN 'COM ['||UPPER(cat.abreviatura_entidad)||']' ELSE 'PER ['||UPPER(cat.abreviatura_entidad)||']' END as tipo, 
  'SUELDO'::text as concepto,
  '111 [S]'::text as objeto_gasto,
  '0'::text as importe,
  '0'::text as descuento,
  '0'::text as aporte,
  '0'::text as liquido,
  '---'::text as tipo_concepto, --DATOS BÁSICOS
  1 as orden,
  1 as linea
FROM 
  salarios.funcionarios_categorias fc
  LEFT JOIN salarios.detalles_categorias dc             ON dc.id_detalle_categoria=fc.id_detalle_categoria
  LEFT JOIN salarios.categorias cat                     ON cat.id_categoria=dc.id_categoria
  LEFT JOIN salarios.cargos car                         ON car.id_cargo=cat.id_cargo
  LEFT JOIN salarios.categoria_importe_mensual cim      ON cim.id_categoria=cat.id_categoria and cim.id_mes = in_id_mes -- id_mes
  LEFT JOIN legajos.funcionarios f                      ON f.id_funcionario=fc.id_funcionario
  LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f.id_funcionario
  LEFT JOIN legajos.oficinas_con_descripciones      ocd ON ocd.id_oficina=saa.id_oficina_presta 
WHERE
  fc.gestion=in_gestion and
  fc.hasta is null and
  f.estado_funcionario and
  f.id_administracion IN (0,in_id_administracion) and
  cat.id_cargo>0 and
  f.id_funcionario=in_id_funcionario
) dbf

UNION
--SALARIO PERMANENTE [111]
(
SELECT 
  in_id_funcionario as id_funcionario,--1
  '0'::text as cedula,--2
  '---'::text as nombres,--3
  '---'::text as apellidos,--4
  '---'::text as nivel1,--5
  '---'::text as nivel2,--6
  '---'::text as nivel3,--7
  '---'::text as nivel4,--8
  '---'::text as nivel5,--9
  '---'::text as categoria,--10
  '---'::text as cargo,--11 
  replace(to_char(sum(dps.monto_presupuestado),'999,999,999'),',','.') as presupuestado,--12
  sum(dps.dias_trabajados)::integer as dias_trabajados,--13
  '---'::text as tipo,
  'SUELDO ('||sum(dps.dias_trabajados)||' DIAS)' as concepto,--14
  '111 [S]'::text as objeto_gasto,--15
  replace(to_char(sum(dps.monto_devengado),'999,999,999'),',','.') as importe,--16
  '0'::text as descuento,--17
  replace(to_char(case when sum(dps.monto_aporte) is null then 0 else -sum(dps.monto_aporte) end,'999,999,999'),',','.') as aporte,--18
  replace(to_char((sum(dps.monto_devengado)-sum(dps.monto_aporte)),'999,999,999'),',','.') as liquido,--19
  'I'::text as tipo_concepto, --20
  1 as orden, --21
  10 as linea --22
FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario = ps.id_planilla_salario
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=in_id_funcionario
) 
) pl
GROUP BY pl.id_funcionario

UNION
(
--DETALLES LIQUIDACIONES
SELECT
  in_id_funcionario as id_funcionario,--1
  '0'::text as cedula,--2
  '---'::text as nombres,--3
  '---'::text as apellidos,--4
  '---'::text as nivel1,--5
  '---'::text as nivel2,--6
  '---'::text as nivel3,--7
  '---'::text as nivel4,--8
  '---'::text as nivel5,--9
  '---'::text as categoria,--10
  '---'::text as cargo,--11
  '0'::text as presupuestado,--12
  0 as dias_trabajados,--13
  '---'::text as tipo,
  detalles_liquidacion.concepto,--14
  detalles_liquidacion.objeto_gasto,--15
  detalles_liquidacion.importe,--16 
  detalles_liquidacion.descuento,--17
  detalles_liquidacion.aporte,--18
  '0'::text as liquido,--19
  detalles_liquidacion.tipo_concepto, --20
  detalles_liquidacion.orden, --21
  detalles_liquidacion.linea::bigint --22
FROM 
(
--======================================================================
--OTROS INGRESOS
--======================================================================
(
SELECT 
*
FROM
(
--GASTO REPRESENTACION [113]
SELECT
  'GASTO REPRESENTACION'::text as concepto,
  '113 [GR]'::text as objeto_gasto,
  replace(to_char(sum(pgrd.devengado_parcial),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(pgrd.aporte)=0 then 0 else -sum(pgrd.aporte) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(pgrd.devengado_parcial)-sum(pgrd.aporte),'999,999,999'),',','.') as monto_liquido,
  'I'::text as tipo_concepto,
   7 as orden,
   70 as linea
FROM salarios.planilla_gasto_representacion pgr
LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion 
LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
WHERE
   pgr.id_administracion=in_id_administracion AND 
   pgr.id_mes=in_id_mes AND
   pgr.gestion=in_gestion AND 
   pgr.estado=1 AND 
   fr.id_funcionario=in_id_funcionario
) grf
WHERE replace(grf.importe,'.','')::int>0
)
UNION
--BONIFICACIONES Y GRATIFICACIONES [133]
(
SELECT
  b.descripcion as concepto,
  '133 [BG]'::text as objeto_gasto,
  replace(to_char(dpb.monto_total::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dpb.aporte::integer=0 then 0 else -dpb.aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dpb.monto_total::integer-dpb.aporte::integer,'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  8 as orden,
  80 as linea
FROM salarios.planillas_bonificaciones pb
LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
WHERE
   pb.id_administracion=in_id_administracion AND 
   pb.id_mes=in_id_mes AND
   pb.gestion=in_gestion AND 
   pb.estado=1 AND 
   fb.id_funcionario=in_id_funcionario
)
UNION
--DIFERENCIA SALARIAL Y OTROS GASTOS [199] 
(
SELECT
  case pds.id_tipo_pagos_varios 
	when 1 then 'DIFERENCIA SALARIAL'
	when 2 then 'OTROS GASTOS'    
  end as concepto,
  case pds.id_tipo_pagos_varios 
	when 1 then '199 [DS]'::text
	when 2 then '199 [OG]'::text   
  end as objeto_gasto,
  replace(to_char(pdsd.importe_monto_diferencia::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when pdsd.importe_monto_aporte::integer=0 then 0 else -pdsd.importe_monto_aporte::integer end),'999,999,999'),',','.') as aporte, 
  replace(to_char(pdsd.importe_monto_diferencia::integer-pdsd.importe_monto_aporte::integer,'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  9 as orden, 
  90 as linea
FROM salarios.planilla_diferencia_salarial pds
LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial 
LEFT JOIN salarios.funcionarios_superiores                fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
WHERE
   pds.id_administracion=in_id_administracion AND 
   pds.id_mes=in_id_mes AND
   pds.gestion=in_gestion AND 
   pds.estado=1 AND
   -- Modificacion 2015/12/18 11:08 am
   CASE WHEN fs.id_funcionario IS NOT NULL THEN fs.id_funcionario=in_id_funcionario ELSE pdsd.id_funcionario=in_id_funcionario END
)
UNION
--ANTIGUEDAD [133]
(
SELECT
  'ANTIGÜEDAD'::text as concepto,
  '133 [ANT]'::text as objeto_gasto,
  replace(to_char(dpa.importe_antiguedad::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dpa.importe_aporte::integer=0 then 0 else -dpa.importe_aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dpa.importe_antiguedad::integer-dpa.importe_aporte::integer,'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  10 as orden,
  100 as linea
FROM salarios.planillas_antiguedad pa
LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad 
WHERE
   pa.id_administracion=in_id_administracion AND 
   pa.id_mes=in_id_mes AND
   pa.gestion=in_gestion AND 
   pa.estado=1 AND 
   dpa.id_funcionario=in_id_funcionario
)
UNION
--GRADO ACADEMICO [133]
(
SELECT
  'GRADO ACADEMICO'::text as concepto,
  '133 [GA]'::text as objeto_gasto,
  replace(to_char(dpp.importe_profesional::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dpp.importe_aporte::integer=0 then 0 else -dpp.importe_aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dpp.importe_profesional::integer-dpp.importe_aporte::integer,'999,999,999'),',','.') as liquido,  
  'I'::text as tipo_concepto,
  11 as orden,
  110 as linea
FROM salarios.planilla_profesionales pp
LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional 
LEFT JOIN salarios.funcionarios_profesionales       fp ON  fp.id_funcionario_profesional=dpp.id_funcionario_profesional
WHERE
   pp.id_administracion=in_id_administracion AND 
   pp.id_mes=in_id_mes AND
   pp.gestion=in_gestion AND 
   pp.estado=1 AND 
   fp.id_funcionario=in_id_funcionario
)
UNION
--GRATIFICACION ESPECIAL [137]
(
SELECT
  'GRATIFICACION ESPECIAL'::text as concepto,
  '137 [GE]'::text as objeto_gasto,
  replace(to_char(sum(ge.importe_gratificacion),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(ge.importe_aporte_gratificacion)=0 then 0 else -sum(ge.importe_aporte_gratificacion) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(ge.importe_gratificacion),'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  12 as orden,
  120 as linea
FROM
(SELECT
  12 as orden,
  dpge.importe_gratificacion::integer as monto_liquido,
  dpge.importe_gratificacion::integer as importe_gratificacion,  
  dpge.importe_aporte::integer as importe_aporte_gratificacion,
  (row_number() over())+120 as linea
FROM salarios.planilla_gratificacion_especial pge
LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge ON dpge.id_planilla_gratificacion=pge.id_planilla_gratificacion
WHERE
   pge.id_administracion=in_id_administracion AND 
   pge.id_mes=in_id_mes AND
   pge.gestion=in_gestion AND 
   pge.estado=1 AND 
   dpge.id_funcionario=in_id_funcionario
) ge
GROUP BY ge.orden
)
UNION
--GRATIFICACION OCASIONAL [133]
(
SELECT
  'GRATIFICACION OCASIONAL'::text as concepto,
  '133 [GO]'::text as objeto_gasto,
  replace(to_char(dpgo.importe_gratificacion::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dpgo.importe_aporte=0 then 0 else -dpgo.importe_aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dpgo.importe_gratificacion::integer-dpgo.importe_aporte::integer,'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  13 as orden,
  130 as linea
FROM salarios.planilla_gratificacion_ocacional pgo
LEFT JOIN salarios.detalle_planilla_gratificacion_ocacional dpgo ON dpgo.id_planilla_gratificacion_ocacional=pgo.id_planilla_gratificacion_ocacional 
WHERE
   pgo.id_administracion=in_id_administracion AND 
   pgo.id_mes=in_id_mes AND
   pgo.gestion=in_gestion AND 
   pgo.estado=1 AND 
   dpgo.id_funcionario=in_id_funcionario
)
UNION
--OTRAS TRANSFERENCIAS CORRIENTES [849]
(
SELECT
*
FROM
(
SELECT 
  'OTRAS TRANSFERENCIAS CTES.'::text as concepto,
  '849 [OTC]'::text as objeto_gasto,
  replace(to_char(sum(otc.importe_gratificacion_otra_transferencia_cte),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(otc.importe_aporte_gratificacion)=0 then 0 else -sum(otc.importe_aporte_gratificacion) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(otc.importe_gratificacion_otra_transferencia_cte),'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  14 as orden,
  140 as linea
FROM
(SELECT
  14 as orden,
  potcd.importe_otra_transferencia_cte::integer as monto_liquido,
  potcd.importe_otra_transferencia_cte::integer as importe_gratificacion_otra_transferencia_cte,  
  0 as importe_aporte_gratificacion,
  (row_number() over())+140 as linea
FROM salarios.planillas_otras_transferencias_ctes potc
LEFT JOIN salarios.planillas_otras_transferencias_ctes_detalles potcd ON potcd.id_planilla_otra_transferencia_cte=potc.id_planilla_otra_transferencia_cte
WHERE
   potc.id_administracion=in_id_administracion AND 
   potc.id_mes=in_id_mes AND
   potc.gestion=in_gestion AND 
   potc.estado=1 AND 
   potcd.id_funcionario=in_id_funcionario
) otc
) otc2
WHERE otc2.aporte is not null
)
UNION
--SUBSIDIOS [131]
(
SELECT
  sub.descripcion||case when dps.cantidad>1 then ' ('||dps.cantidad||')' else '' end as concepto,
  '131 [SUB]'::text as objeto_gasto,
  replace(to_char(dps.importe_monto::integer,'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when dps.aporte::integer=0 then 0 else -dps.aporte::integer end),'999,999,999'),',','.') as aporte,
  replace(to_char(dps.importe_monto::integer-dps.aporte::integer,'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  15 as orden,
  150 as linea
FROM salarios.planillas_subsidios ps
LEFT JOIN salarios.detalles_planillas_subsidios dps ON dps.id_planilla_subsidio=ps.id_planilla_subsidio 
LEFT JOIN salarios.funcionarios_subsidios       fsu ON fsu.id_funcionario_subsidio=dps.id_funcionario_subsidio
LEFT JOIN salarios.subsidios 		        sub ON sub.id_subsidio=fsu.id_subsidio
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.estado=1 AND 
   fsu.id_funcionario=in_id_funcionario
)
UNION
--REMUNERACION EXTRAORDINARIA [123]
(
SELECT
*
FROM
(
SELECT 
  'REMUNERACIÓN EXTRAORDINARIA ('||sum(re.cantidad_horas)||' HS.)' as concepto,
  '123 [RE]'::text as objeto_gasto,
  replace(to_char(sum(re.monto),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(re.aporte)=0 then 0 else -sum(re.aporte) end),'999,999,999'),',','.') as aporte, 
  replace(to_char(sum(re.monto::integer)-sum(re.aporte::integer),'999,999,999'),',','.') as liquido, 
  'I'::text as tipo_concepto,
  16 as orden,
  160 as linea
FROM
(SELECT
  16 as orden,
  dpre.cantidad_horas,  
  dpre.monto::integer as monto,   
  dpre.aporte::integer as aporte, 
  (row_number() over())+160 as linea
FROM salarios.planillas_re pre
LEFT JOIN salarios.detalles_planillas_re dpre ON dpre.id_planilla_re=pre.id_planilla_re
WHERE
   pre.id_administracion=in_id_administracion AND 
   pre.id_mes=in_id_mes AND
   pre.gestion=in_gestion AND 
   pre.estado=1 AND 
   dpre.id_funcionario=in_id_funcionario
) re
) re2
WHERE re2.aporte is not null
)
UNION
--REMUNERACION ADICIONAL [125]
(
SELECT
*
FROM
(
SELECT 
  'REMUNERACIÓN ADICIONAL ('||sum(ra.cantidad_horas)::integer||' HS.)' as concepto,
  '125 [RA]'::text as objeto_gasto,
  replace(to_char(sum(ra.monto),'999,999,999'),',','.') as importe,
  '0'::text as descuento,
  replace(to_char((case when sum(ra.aporte)=0 then 0 else -sum(ra.aporte) end),'999,999,999'),',','.') as aporte,
  replace(to_char(sum(ra.monto::integer)-sum(ra.aporte::integer),'999,999,999'),',','.') as liquido,
  'I'::text as tipo_concepto,
  17 as orden,
  170 as linea
FROM
(SELECT
  17 as orden,
  dpra.cantidad_horas,  
  dpra.monto::integer as monto,
  '0'::text as descuento,   
  dpra.aporte::integer as aporte, 
  (row_number() over())+170 as linea
FROM salarios.planillas_ra pra
LEFT JOIN salarios.detalles_planillas_ra dpra ON dpra.id_planilla_ra=pra.id_planilla_ra
WHERE
   pra.id_administracion=in_id_administracion AND 
   pra.id_mes=in_id_mes AND
   pra.gestion=in_gestion AND 
   pra.estado=1 AND 
   dpra.id_funcionario=in_id_funcionario
) ra
) ra2
WHERE ra2.aporte is not null
)
) detalles_liquidacion
)
) hoja_liquidacion
order by 23;

END;
]]></definition>
</function>

<function name="obtener_aporte_porcentaje"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_es_nombramiento">
		<type name="boolean"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vporcentaje numeric(12,2);
    vexiste boolean;
BEGIN
  /*
  * Funcion para calcular el porcentaje de aporte del funcionario
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario el identificador del funcionario
  *            in_es_nombramiento bandera (true|false) para indicar si es nombramiento o no
  */
  
  IF (SELECT  count(*)  
      FROM salarios.funcionarios_sinaportes fsa 
      WHERE fsa.id_funcionario = in_id_funcionario and fsa.estado
      )	> 0 THEN         -- Verifica si el funcionario no aporta 
      vporcentaje := 0;  -- Si no aporta porcentaje cero
  ELSE                   -- De lo contrario obtiene de la tabla parametros.
    IF (in_es_nombramiento) THEN
	  SELECT INTO vporcentaje  pmt.aporte_jubilatorio_nombramiento
			   FROM parametros pmt
			  WHERE pmt.estado = true;
    ELSE
	  SELECT INTO vporcentaje  pmt.aporte_jubilatorio
			   FROM parametros pmt
			  WHERE pmt.estado = true;
    END IF;
  END IF;
  return vporcentaje;
END;
]]></definition>
</function>

<function name="obtener_cedula_nombre_para_pedidofondo"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<comment><![CDATA[Retorna cedula y nombre para mostrar en pedido fondo]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="text"/>
	</return-type>
	<parameter name="in_tabla_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="in_id_detalle_planilla">
		<type name="text"/>
	</parameter>
	<parameter name="in_id_detalle_planilla_valor">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vconsulta text;
    vretorna text;
    vtablaref text;
    vcamporef text;
BEGIN
/*
  * Funcion para obtener cedula y nombre de funcionario a partir del id de detalle de las tablas asociadas a un pedido fondo
  * Fecha: 2012-09-03
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_tabla_detalle corresponde al nombre de tabla detalle en cuestion 
  *            in_id_detalle_planilla corresponde al nombre del campo del id del detalle
  *            in_id_detalle_planilla_valor corresponde al valor del id del detalle 
  * 
  * Descripcion:  Dependiendo de la tabla detalle obtiene el id_funcionario con ese valor asocia para  
  * ------------  concatenar la cedula y nombre del funcionario
  * Modificado : by jocka (2013-11-22 18:01) para el caso de planillas de detalles aguinaldos
  */
	vconsulta := '';
	vtablaref := '';
	vcamporef := '';
	-- Si la tabla no tiene id_funcionario directamente debe obtener de la tabla asociada a la tabla en cuestion
	-- Las siguientes tablas no contienen id_funcionario:
	-- ....PLANILLA_GASTO_REPRESENTACION_DETALLE, 
	-- ....DETALLES_PLANILLAS_BONIFICACIONES, 
	-- ....DETALLE_PLANILLAS_PROFESIONALES,
	-- ....DETALLE_PLANILLAS_SUBSIDIOS
	IF (upper(in_tabla_detalle) in ('PLANILLA_GASTO_REPRESENTACION_DETALLE', 'DETALLES_PLANILLAS_BONIFICACIONES', 'DETALLE_PLANILLAS_PROFESIONALES', 'DETALLES_PLANILLAS_SUBSIDIOS', 'PLANILLAS_DETALLES_AGUINALDOS')  ) THEN
		IF (upper(in_tabla_detalle) in ('DETALLES_PLANILLAS_BONIFICACIONES')) THEN
		   vtablaref := 'salarios.funcionarios_bonificaciones';
		   vcamporef := 'id_funcionario_bonificacion';
		ELSIF (upper(in_tabla_detalle) in ('PLANILLA_GASTO_REPRESENTACION_DETALLE')) THEN
		   vtablaref := 'salarios.funcionarios_representaciones';
		   vcamporef := 'id_funcionario_representacion';
		ELSIF (upper(in_tabla_detalle) in ('DETALLE_PLANILLAS_PROFESIONALES')) THEN
		   vtablaref := 'salarios.funcionarios_profesionales';
		   vcamporef := 'id_funcionario_profesional';
		ELSIF (upper(in_tabla_detalle) in ('DETALLES_PLANILLAS_SUBSIDIOS')) THEN
		   vtablaref := 'salarios.funcionarios_subsidios';
		   vcamporef := 'id_funcionario_subsidio';
		ELSIF (upper(in_tabla_detalle) in ('PLANILLAS_DETALLES_AGUINALDOS')) THEN
		   vtablaref := 'salarios.funcionarios_aguinaldos';
		   vcamporef := 'id_funcionario_aguinaldo';
		END IF;
		vconsulta = 'SELECT trim(f.cedula_funcionario)|| '||E'\''||' - '||E'\'' ||'||'||  
		'trim(ape_nom_funcionario)'||
		' FROM salarios.'||$1||' t '||
		' INNER JOIN '||vtablaref||' w ON w.'||vcamporef||'=t.'||vcamporef||
		' INNER JOIN legajos.funcionarios f ON w.id_funcionario = f.id_funcionario WHERE  t.'||$2||'='||$3; 
	ELSE 
	-- Las siguientes tablas si contienen id_funcionario:
	-- ....detalle_planilla_antiguedad, 
	-- ....detalle_planilla_gratificacion_especial, 
	-- ....detalle_planilla_gratificacion_ocacional,
	-- ....detalles_planillas_ra,
	-- ....detalles_planillas_re,
	-- ....detalles_planillas_salarios,
	    vconsulta = 'SELECT trim(f.cedula_funcionario)|| '||E'\''||' - '||E'\'' ||'||'||  
	    'trim(ape_nom_funcionario)'||
	    ' FROM salarios.'||$1||' t '||
	    ' INNER JOIN legajos.funcionarios f ON t.id_funcionario = f.id_funcionario WHERE  '||$2||'='||$3; 
	END IF;
	-- Con la consulta concatenada se aplica un execute para ejecutar el select y el resultado tirar en la
	-- variable vretorna que retorna como resultado
	execute vconsulta INTO vretorna;

	return vretorna;
END;
]]></definition>
</function>

<function name="obtener_datos_hoja_liquidacion_salarios_para_funcionarios"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido">
		<type name="numeric"/>
	</parameter>
	<parameter name="total_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="total_descuentos">
		<type name="numeric"/>
	</parameter>
	<parameter name="total_liquido">
		<type name="numeric"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="vid_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="ape_nom_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="cedula_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="cedula_numeric">
		<type name="numeric"/>
	</parameter>
	<parameter name="nombre_cargo">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_categoria">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="estado">
		<type name="boolean"/>
	</parameter>
	<parameter name="nombre_nivel1">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel2">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel3">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel4">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel5">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_estructura_presupuestaria">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_tipo">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_programa">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_subprograma">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_objeto_gasto">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_fuente_financiamiento">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_departamento">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_proyecto">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_organismo_financiador">
		<type name="numeric"/>
	</parameter>
	<parameter name="descripcion_estructura_presupuestaria">
		<type name="text"/>
	</parameter>
	<parameter name="descripcion_tipo">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_programa">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_subprograma">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_objeto_gasto">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_fuente_financiamiento">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_alcance">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_proyecto">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_organismo_financiador">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_programa_abreviatura">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_programa_estado">
		<type name="boolean"/>
	</parameter>
	<parameter name="descripcion_estructura">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_funcionario" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="numeric"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
	-- Para emitir notificaciones de depuracion:
	bDebug boolean :=false;
	tNombre_funcion text := '[salarios.obtener_datos_hoja_liquidacion_salarios_para_funcionarios(IN IN_ID_FUNCIONARIO INTEGER, IN IN_GESTION NUMERIC, IN IN_ID_MES INTEGER)]';

	bComisionado boolean :=false;

	rDetalle_Plla_salarios RECORD;
	rDesc_de_un_funcionario RECORD;

-- Gasto de representacion
	rGr RECORD;

-- Bonificaciones y gratificaciones
	rBG RECORD;

-- Diferencia Salarial
	rDS RECORD;

-- Otros Gastos
	rOG RECORD;

-- Grado Academico
	rGA RECORD;

-- Antiguedad:
	rANTIGUEDAD RECORD;

-- Gratificacion Especial
	rGE RECORD;

-- Gratificacion Ocasional
	rGO RECORD;

-- Remuneracion Extraordinaria
	rRE RECORD;

-- Remuneracion Adicional
	rRA RECORD;

--	nGestion numeric :=0;
	iId_planilla_salario integer := 0;

-- acumuladores de importes:
	nTotalDevengado numeric :=0;
	nTotalLiquido numeric :=0;
	nTotalDescuentos numeric :=0;

BEGIN
-- Obtener datos para reporte de liquidación de salarios:
-- Fecha: 2012-08-14
-- Autor: Lic. Guillermo Galeano Fernández


-- Datos que debe poseer el listado:
-- dias trabajados
-- reparticion / nivel 1 / nivel 2 / nivel 3
-- nombre funcionario / c.i.
-- importe presupuestado / devengado 
-- / descuentos institucionales / liquido 
-- / descuentos varios en orden de prioridad
-- remuneracion extraordinaria / descuento institucional
-- remuneración adicional
-- gratificación
-- responsabilidad en el cargo
-- 


-- concepto -- importe | jubilacion | liquido:

-- corte por concepto:
/*
IF (bDebug IS TRUE) THEN
	RAISE NOTICE '% - % - 
nGestion=%, iId_mes=%.-',tNombre_funcion, now(),nGestion, iId_mes;
END IF;
*/

total_devengado := 0;
total_descuentos := 0;
total_liquido := 0;

-- Datos basicos del funcionario:
--
Select
--	'SUELDO - '||d.nombre_categoria as "concepto",
--	a.monto_devengado, 
--	(a.monto_aporte*-1) as "monto_aporte", 
--	(a.monto_devengado-a.monto_aporte) as "liquido_sin_multa", 
	a.monto_presupuestado, 

	a.id_oficina,
	a.dias_trabajados, 

--	a.id_funcionario,
	a.id_planilla_salario,
--	a.monto_multa, 
--	a.monto_total_aporte, 
--	a.importe_descuentos_varios_solicitado, 
--	a.importe_descuentos_varios_aplicado, 
--	a.importe_descuentos_varios_diferencia, 
--	a.importe_liquido_con_descuentos_varios, 
--	a.id_detalle_categoria,
	b.ape_nom_funcionario,
	b.cedula_funcionario,
	trim(b.cedula_funcionario::text)::numeric as "cedula_numeric",
--	c.id_categoria,
--	c.id_estructura_presupuestaria,
	e.nombre_cargo,
	d.nombre_categoria
--	d.id_cargo

INTO
--	concepto,
--	devengado,
--	jubilacion,
--	liquido,
	presupuestado,
	vid_oficina,
	dias_trabajados, 

--	a.id_funcionario,
	iId_planilla_salario, 
--	a.monto_multa, 
--	a.monto_total_aporte, 
--	a.importe_descuentos_varios_solicitado, 
--	a.importe_descuentos_varios_aplicado, 
--	a.importe_descuentos_varios_diferencia, 
--	a.importe_liquido_con_descuentos_varios, 
--	a.id_detalle_categoria,
	ape_nom_funcionario,
	cedula_funcionario,
	cedula_numeric,

--	c.id_categoria,
--	c.id_estructura_presupuestaria,
	nombre_cargo,
	nombre_categoria
--	d.id_cargo

FROM salarios.detalles_planillas_salarios a
	LEFT JOIN legajos.funcionarios b 
		ON (a.id_funcionario=b.id_funcionario)
	LEFT JOIN salarios.detalles_categorias c 
		ON (a.id_detalle_categoria=c.id_detalle_categoria)
	LEFT JOIN salarios.categorias d
		ON (c.id_categoria=d.id_categoria)
	LEFT JOIN salarios.cargos e
		ON (d.id_cargo=e.id_cargo)
/*
	LEFT JOIN legajos.oficinas_con_descripciones f
		ON (a.id_oficina=f.id_oficina)
*/
WHERE a.id_funcionario=IN_ID_FUNCIONARIO
and a.id_planilla_salario in (

Select 
	za.id_planilla_salario
from salarios.planillas_salarios za
where 	za.gestion = IN_GESTION 
	AND za.id_mes = IN_ID_MES
	AND za.id_estado = 1 -- 1 = finiquitado
) order by a.monto_presupuestado desc limit 1;

-- verificamos si es comisionado:
IF presupuestado is null THEN
	bComisionado := true;
	Select 
		e.importe, -- presupuestado,
		a.id_oficina,
		0 as "dias_trabajados", 

		0 as "iId_planilla_salario", 
		f.ape_nom_funcionario,
		f.cedula_funcionario,
		trim(f.cedula_funcionario::text)::numeric as "cedula_numeric", -- f.cedula_numeric,

		d.nombre_cargo,
		c.nombre_categoria
	INTO
		presupuestado,
		vid_oficina,
		dias_trabajados, 

		iId_planilla_salario, 
		ape_nom_funcionario,
		cedula_funcionario,
		cedula_numeric,

		nombre_cargo,
		nombre_categoria

	From salarios.funcionarios_categorias a
		LEFT JOIN salarios.detalles_categorias b
			ON (a.id_detalle_categoria=b.id_detalle_categoria)
		LEFT JOIN salarios.categorias c
			ON (c.id_categoria=b.id_categoria)
		LEFT JOIN salarios.cargos d
			ON (c.id_cargo=d.id_cargo)
		LEFT JOIN salarios.categoria_importe_mensual e
			ON (e.id_categoria=c.id_categoria and e.id_mes = IN_ID_MES) -- id_mes
		LEFT JOIN legajos.funcionarios f
			ON (a.id_funcionario=f.id_funcionario)

	where a.id_funcionario= IN_ID_FUNCIONARIO
	AND a.gestion = IN_GESTION
	and a.estado is true;

END IF;


-- datos de la oficina:

	Select 
--		g.id_oficina,
		g.nombre,
		g.nivel1, 
		g.nivel2, 
		g.nivel3, 
		g.nivel4, 
		g.nivel5, 
		g.estado, 
		CASE WHEN g.nombre_nivel1 IS NULL THEN ' ' ELSE g.nombre_nivel1 END, 
		CASE WHEN g.nombre_nivel2 = g.nombre_nivel1 THEN ' ' ELSE g.nombre_nivel2 END, 
		CASE WHEN g.nombre_nivel3 = g.nombre_nivel2 THEN ' ' ELSE g.nombre_nivel3 END,
		CASE WHEN g.nombre_nivel4 = g.nombre_nivel3 THEN ' ' ELSE g.nombre_nivel4 END, 
		CASE WHEN g.nombre_nivel5 = g.nombre_nivel4 THEN ' ' ELSE g.nombre_nivel5 END, 
		g.id_estructura_presupuestaria, 
		g.gestion, 
		g.cod_tipo, 
		g.cod_programa, 
		g.cod_subprograma, 
		g.cod_objeto_gasto, 
		g.cod_fuente_financiamiento, 
		g.cod_departamento, 
		g.cod_proyecto, 
		g.cod_organismo_financiador, 
		g.descripcion_estructura_presupuestaria, 
		g.descripcion_tipo, 
		g.descripcion_programa, 
		g.descripcion_subprograma, 
		g.descripcion_objeto_gasto, 
		g.descripcion_fuente_financiamiento, 
		g.descripcion_alcance, 
		g.descripcion_proyecto, 
		g.descripcion_organismo_financiador, 
		g.descripcion_programa_abreviatura, 
		g.descripcion_programa_estado, 
		g.descripcion_estructura 
INTO
--		id_oficina1,
		nombre,
		nivel1, 
		nivel2, 
		nivel3, 
		nivel4, 
		nivel5, 
		estado, 
		nombre_nivel1, 
		nombre_nivel2, 
		nombre_nivel3, 
		nombre_nivel4, 
		nombre_nivel5, 
		id_estructura_presupuestaria, 
		gestion, 
		cod_tipo, 
		cod_programa, 
		cod_subprograma, 
		cod_objeto_gasto, 
		cod_fuente_financiamiento, 
		cod_departamento, 
		cod_proyecto, 
		cod_organismo_financiador, 
		descripcion_estructura_presupuestaria, 
		descripcion_tipo, 
		descripcion_programa, 
		descripcion_subprograma, 
		descripcion_objeto_gasto, 
		descripcion_fuente_financiamiento, 
		descripcion_alcance, 
		descripcion_proyecto, 
		descripcion_organismo_financiador, 
		descripcion_programa_abreviatura, 
		descripcion_programa_estado, 
		descripcion_estructura

	from legajos.oficinas_con_descripciones g
	WHERE g.id_oficina = vid_oficina; -- id_oficina;

-- importe devengado y liquido:

-- Si es comisionado 
-- (sueldo + aporte jubilatorio sueldo + sueldo liquido)
-- poner a 0 (cero)

IF bComisionado is true THEN
	concepto := 'SUELDO';
	devengado := 0;
	liquido := 0;

ELSE
	-- importe devengado y liquido:
	Select
		'SUELDO' as "concepto",

		sum(a.monto_devengado) as devengado, 
	--	((sum(a.monto_aporte))*-1) as "monto_aporte", 
	--	((sum(a.monto_devengado))-(sum(a.monto_aporte))) as "liquido_sin_multa"
		0::numeric as "liquido_sin_multa"
	INTO
		concepto,
		devengado,
	--	jubilacion,
		liquido

	FROM salarios.detalles_planillas_salarios a
	WHERE 
	-- 	a.id_detalle_planilla_salario=rDetalle_Plla_salarios.id_detalle_planilla_salario;
		a.id_planilla_salario = iId_planilla_salario 
		AND 
		a.id_funcionario = IN_ID_FUNCIONARIO;

	-- cargamos los acumuladores:
	nTotalDevengado := nTotalDevengado + devengado;
	-- nTotalDescuentos := nTotalDescuentos + devengado;
	-- nTotalLiquido := nTotalLiquido + liquido;

END IF;

-- Retornamos el contenido de las variables:
RETURN NEXT;

-- importe de jubilacion para este concepto (SUELDO):

IF bComisionado is true THEN
	concepto := 'APORTE JUBILATORIO SUELDO';
	devengado := 0;
	liquido := 0;
ELSE
	-- traemos la fila con el importe de jubilacion para este concepto:
	Select
		'APORTE JUBILATORIO '||'SUELDO' as "concepto",

	--	sum(a.monto_devengado) as devengado, 
		((sum(a.monto_aporte))*-1) as "monto_aporte", 
	--	((sum(a.monto_devengado))-(sum(a.monto_aporte))) as "liquido_sin_multa"
		0::numeric as "liquido_sin_multa"
	INTO
		concepto,
		devengado,
	--	jubilacion,
		liquido

	FROM salarios.detalles_planillas_salarios a
	WHERE 
	-- 	a.id_detalle_planilla_salario=rDetalle_Plla_salarios.id_detalle_planilla_salario;
		a.id_planilla_salario = iId_planilla_salario 
		AND 
		a.id_funcionario = IN_ID_FUNCIONARIO;

	-- cargamos los acumuladores:
	-- nTotalDevengado := nTotalDevengado + devengado;
	 nTotalDescuentos := nTotalDescuentos + devengado;
	 nTotalLiquido := nTotalDevengado + devengado; -- devengado - (jubilacion)

END IF;

-- Retornamos el contenido de las variables:
RETURN NEXT;

-- ---------------------------------------------------------------------------

-- IF (iId_planilla_salario <> rDetalle_Plla_salarios.id_planilla_salario) THEN
--	iId_planilla_salario := rDetalle_Plla_salarios.id_planilla_salario;

-- traemos la multa de esta planilla de salario:
	-- DESCUENTOS INSTITUCIONALES
	-- multas:
	SELECT 
		'MULTAS APLICADAS'::text as "CONCEPTO",
--		0.00::NUMERIC AS "IMPORTE1",
		CASE WHEN (sum(h.importe_aplicado)*-1) IS NULL THEN 0.00 ELSE (sum(h.importe_aplicado)*-1) END AS "IMPORTE2",
		0.00::NUMERIC as "IMPORTE3_multas_aplicadas"
	INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM salarios.detalles_multas_aplicadas h
	WHERE h.id_funcionario=IN_ID_FUNCIONARIO
		AND h.id_multas_aplicadas=(Select i.id_multas_aplicadas 
					   from salarios.multas_aplicadas i 
					WHERE i.id_planilla_salario=iId_planilla_salario)
	;

-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + devengado; -- Entonces: devengado -(aporte jubilatorio + multas)

	-- Retornamos el contenido de las variables:
	-- en este caso con los importes de multas cargadas.
	-- solamente si tiene multas aplicadas!
	IF (devengado < 0) THEN
		RETURN NEXT;
	END IF;
-- END IF;

-- END LOOP;




-- DESCUENTOS VARIOS
-- (POR ORDEN DE PRIORIDAD)
FOR rDesc_de_un_funcionario IN
	SELECT j.id_detalles_planilla_descuento
	FROM salarios.detalles_planillas_descuentos j
	WHERE j.id_funcionario=IN_ID_FUNCIONARIO
	AND j.id_planilla_descuento=(   Select k.id_planilla_descuento 
					from salarios.planillas_descuentos k 
					where k.id_planilla_salario=iId_planilla_salario
					)
	ORDER BY j.id_detalles_planilla_descuento asc
LOOP

SELECT 
(
CASE
WHEN j.id_descuento_judicial is null then
	(Select l.descripcion FROM salarios.tipos_descuentos l where l.id_tipo_descuento = (Select m.id_tipo_descuento FROM salarios.descuentos_aso m where m.id_descuento_aso=j.id_descuento_aso))
ELSE
	(Select o.descripcion FROM salarios.tipos_descuentos o where o.id_tipo_descuento = (Select n.id_tipo_descuento FROM salarios.descuentos_judiciales n where n.id_descuento_judicial=j.id_descuento_judicial))

END
) AS "CONCEPTO",
--	0.00::numeric AS "IMPORTE1",
	(j.monto_descuento * -1) AS "IMPORTE2",
	0.00::numeric AS "IMPORTE3_DESC_VARIOS"
--	(j.monto_descuento * -1) AS "IMPORTE3_DESC_VARIOS"
/*
(
CASE
WHEN j.id_descuento_judicial is null then
	(Select l.orden FROM salarios.tipos_descuentos l where l.id_tipo_descuento = (Select m.id_tipo_descuento FROM salarios.descuentos_aso m where m.id_descuento_aso=j.id_descuento_aso))
ELSE
	(Select o.orden FROM salarios.tipos_descuentos o where o.id_tipo_descuento = (Select n.id_tipo_descuento FROM salarios.descuentos_judiciales n where n.id_descuento_judicial=j.id_descuento_judicial))

END
) AS "ORDEN_APLICACION",
	j.id_descuento_judicial, 
	j.id_descuento_aso
*/
INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

FROM salarios.detalles_planillas_descuentos j
WHERE j.id_detalles_planilla_descuento=rDesc_de_un_funcionario.id_detalles_planilla_descuento
/*
WHERE j.id_funcionario=IN_ID_FUNCIONARIO
AND j.id_planilla_descuento=(   Select k.id_planilla_descuento 
				from salarios.planillas_descuentos k 
				where k.id_planilla_salario=IN_ID_PLANILLA_SALARIO
				)
ORDER BY j.id_detalles_planilla_descuento asc
*/
;

-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + devengado; -- devengado - (jubilacion + multas + descuentos varios1 + descuentos varios N)

-- Retornamos el contenido de las variables:
-- en este caso con los descuentos cargados.
	IF (devengado < 0) THEN
		RETURN NEXT;
	END IF;


END LOOP;
-- AQUI RETORNAMOS EL LIQUIDO FINAL (COMO UNA FILA)
concepto := 'SUELDO LIQUIDO';
devengado := 0;
liquido := nTotalLiquido;
RETURN NEXT;


-- INGRESOS - VARIOS

-- gastos de representacion
-- (sera en base al mes de la planilla de gastos
-- con el id_mes de la planilla de salario)
FOR rGr IN

SELECT 
	a.id_planilla_gasto_representacion_detalle
FROM  salarios.planilla_gasto_representacion_detalle a
WHERE a.id_planilla_gasto_representacion IN (
	Select p.id_planilla_gasto_representacion
	FROM salarios.planilla_gasto_representacion p
	where p.id_mes= IN_ID_MES 
	and p.gestion= IN_GESTION
	and p.estado=1 -- 1 = procesado!
)  
AND a.id_funcionario_representacion = (
	Select q.id_funcionario_representacion 
	from salarios.funcionarios_representaciones q
		LEFT JOIN salarios.detalles_categorias s
			on (q.id_detalle_categoria=s.id_detalle_categoria)
		LEFT JOIN salarios.categorias t
			on (s.id_categoria=t.id_categoria)
	where q.id_funcionario = IN_ID_FUNCIONARIO and t.gestion = IN_GESTION  and q.hasta isnull -- and q.estado is true
)
LOOP

	SELECT 
		'GASTO DE REPRESENTACION'::TEXT as "CONCEPTO1",
		a.devengado_parcial,
--		(a.aporte*-1) as "aporte",
--		(a.devengado_parcial - a.aporte) as "LIQUIDO"
		0::numeric as "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.planilla_gasto_representacion_detalle a
	WHERE a.id_planilla_gasto_representacion_detalle=rGr.id_planilla_gasto_representacion_detalle;

-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

RETURN NEXT;

	SELECT 
		'APORTE JUBILATORIO '||'GASTO DE REPRESENTACION'::TEXT as "CONCEPTO1",
--		a.devengado_parcial,
		(a.aporte*-1) as "aporte",
		(a.devengado_parcial - a.aporte) as "LIQUIDO"
--		0::numeric as "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.planilla_gasto_representacion_detalle a
	WHERE a.id_planilla_gasto_representacion_detalle=rGr.id_planilla_gasto_representacion_detalle;

-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;

RETURN NEXT;

END LOOP;

-- bonificaciones y gratificaciones

FOR rBG IN
SELECT 
	b.id_detalle_planilla_bonificacion 
FROM salarios.detalles_planillas_bonificaciones b 
WHERE
	b.id_planilla_bonificacion in (
		Select c.id_planilla_bonificacion 
		from salarios.planillas_bonificaciones c
		WHERE c.gestion = IN_GESTION
			and c.id_mes = IN_ID_MES
			and c.estado=1 -- ESTADO 1 = PROCESADO!
	)
AND b.id_funcionario_bonificacion in (
	SELECT d.id_funcionario_bonificacion
	FROM salarios.funcionarios_bonificaciones d
	WHERE d.id_funcionario = IN_ID_FUNCIONARIO
		AND d.id_mes = IN_ID_MES
		AND d.gestion = IN_GESTION
	)
LOOP
	SELECT 
		'BONIFICACIONES'::TEXT as "CONCEPTO",
	--	b.importe_monto, 
	--	b.importe_porcentaje, 
	--	b.importe_gasto_representacion, 
		b.monto_total AS "PRESUPUESTADO",
--		(b.aporte*-1) as "JUBILACION", 
--		(b.monto_total - b.aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM salarios.detalles_planillas_bonificaciones b 
	WHERE b.id_detalle_planilla_bonificacion = rBG.id_detalle_planilla_bonificacion;

-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;

	SELECT 
		'APORTE JUBILITARIO '||'BONIFICACIONES'::TEXT as "CONCEPTO",
	--	b.importe_monto, 
	--	b.importe_porcentaje, 
	--	b.importe_gasto_representacion, 
--		b.monto_total AS "PRESUPUESTADO",
		(b.aporte*-1) as "JUBILACION", 
		(b.monto_total - b.aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM salarios.detalles_planillas_bonificaciones b 
	WHERE b.id_detalle_planilla_bonificacion = rBG.id_detalle_planilla_bonificacion;

-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;

END LOOP;

-- 199 - otros gastos del personal 
-- (diferencia salarial y salarios caidos, etc)
-- salarios.planilla_diferencia_salarial

-- DIFERENCIA SALARIAL:
FOR rDS IN
	SELECT 
		b.id_planilla_diferencia_salarial_detalle
	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial in (
		Select c.id_planilla_diferencia_salarial
		FROM salarios.planilla_diferencia_salarial c
		WHERE c.gestion = IN_GESTION
			AND c.id_mes= IN_ID_MES
			AND c.estado= 1 -- estado 1 = procesado!!
			AND c.id_tipo_pagos_varios = 1 -- 1 = diferencia salarial
		)
	AND b.id_funcionario = IN_ID_FUNCIONARIO
LOOP
	SELECT 
		'DIFERENCIA SALARIAL'::TEXT as "CONCEPTO",
			b.importe_monto_diferencia AS "PRESUPUESTADO",
--			(b.importe_monto_aporte*-1) as "JUBILACION", 
--			(b.importe_monto_diferencia - b.importe_monto_aporte) AS "LIQUIDO"
			0::NUMERIC AS "LIQUIDO"
		INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial_detalle = rDS.id_planilla_diferencia_salarial_detalle;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;
	SELECT 
		'APORTE JUBILATORIO '||'DIFERENCIA SALARIAL'::TEXT as "CONCEPTO",
--			b.importe_monto_diferencia AS "PRESUPUESTADO",
			(b.importe_monto_aporte*-1) as "JUBILACION", 
			(b.importe_monto_diferencia - b.importe_monto_aporte) AS "LIQUIDO"
--			0::NUMERIC AS "LIQUIDO"
		INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial_detalle = rDS.id_planilla_diferencia_salarial_detalle;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;

END LOOP;

-- OTROS GASTOS:
FOR rOG IN
	SELECT 
		b.id_planilla_diferencia_salarial_detalle
	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial in (
		Select c.id_planilla_diferencia_salarial
		FROM salarios.planilla_diferencia_salarial c
		WHERE c.gestion = IN_GESTION
			AND c.id_mes= IN_ID_MES
			AND c.estado= 1 -- estado 1 = procesado!!
			AND c.id_tipo_pagos_varios = 2 -- 2 = OTROS GASTOS
		)
	AND b.id_funcionario = IN_ID_FUNCIONARIO
LOOP
	SELECT 
		'OTROS GASTOS'::TEXT as "CONCEPTO",
			b.importe_monto_diferencia AS "PRESUPUESTADO",
--			(b.importe_monto_aporte*-1) as "JUBILACION", 
--			(b.importe_monto_diferencia - b.importe_monto_aporte) AS "LIQUIDO"
			0::NUMERIC AS "LIQUIDO"
		INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial_detalle = rOG.id_planilla_diferencia_salarial_detalle;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;
	SELECT 
		'APORTE JUBILATORIO '||'OTROS GASTOS'::TEXT as "CONCEPTO",
--			b.importe_monto_diferencia AS "PRESUPUESTADO",
			(b.importe_monto_aporte*-1) as "JUBILACION", 
			(b.importe_monto_diferencia - b.importe_monto_aporte) AS "LIQUIDO"
--			0::NUMERIC AS "LIQUIDO"
		INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial_detalle = rOG.id_planilla_diferencia_salarial_detalle;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;

END LOOP;


-- grado academico
FOR rGA IN
	SELECT  
		dpp.id_detalle_planilla_profesional
	FROM  salarios.detalle_planillas_profesionales dpp  
		INNER JOIN salarios.funcionarios_profesionales fp 
			ON fp.id_funcionario_profesional = dpp.id_funcionario_profesional  
		INNER JOIN legajos.funcionarios f 
			ON f.id_funcionario = fp.id_funcionario  
	WHERE fp.id_funcionario  = IN_ID_FUNCIONARIO
		AND id_planilla_profesional in (
				SELECT pp.id_planilla_profesional
				  FROM salarios.planilla_profesionales pp
				WHERE pp.gestion = IN_GESTION
				AND pp.id_mes= IN_ID_MES
				-- AND pp.id_administracion=1
				AND pp.estado=1 -- 1 = procesado!!!
			)  
LOOP
	SELECT  
		'GRADO ACADEMICO'::TEXT as "CONCEPTO",
		dpp.importe_profesional AS "PRESUPUESTADO",
--		(dpp.importe_aporte*-1) as "JUBILACION", 
--		(dpp.importe_profesional - dpp.importe_aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.detalle_planillas_profesionales dpp  
	WHERE dpp.id_detalle_planilla_profesional = rGA.id_detalle_planilla_profesional
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;
	SELECT  
		'APORTE JUBILATORIO '||'GRADO ACADEMICO'::TEXT as "CONCEPTO",
--		dpp.importe_profesional AS "PRESUPUESTADO",
		(dpp.importe_aporte*-1) as "JUBILACION", 
		(dpp.importe_profesional - dpp.importe_aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.detalle_planillas_profesionales dpp  
	WHERE dpp.id_detalle_planilla_profesional = rGA.id_detalle_planilla_profesional
	;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;

END LOOP;


-- antiguedad
FOR rANTIGUEDAD IN
	SELECT  
		dpa.id_detalle_planilla_antiguedad
	FROM  salarios.detalle_planilla_antiguedad dpa 
	WHERE dpa.id_funcionario = IN_ID_FUNCIONARIO 
	AND dpa.id_planilla_antiguedad IN 
	(
	SELECT pa.id_planilla_antiguedad
	FROM salarios.planillas_antiguedad pa
	WHERE pa.gestion = IN_GESTION
		AND pa.id_mes = IN_ID_MES
		AND pa.estado = 1 -- 1 = procesado!
		-- AND pa.id_administracion
	)
LOOP
	SELECT  
		'ANTIGÜEDAD'::TEXT as "CONCEPTO",
		dpa.importe_antiguedad AS "PRESUPUESTADO",
--		(dpa.importe_aporte*-1) as "JUBILACION", 
--		(dpa.importe_antiguedad - dpa.importe_aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.detalle_planilla_antiguedad dpa 
	WHERE dpa.id_detalle_planilla_antiguedad = rANTIGUEDAD.id_detalle_planilla_antiguedad
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;
	SELECT  
		'APORTE JUBILATORIO '||'ANTIGÜEDAD'::TEXT as "CONCEPTO",
--		dpa.importe_antiguedad AS "PRESUPUESTADO",
		(dpa.importe_aporte*-1) as "JUBILACION", 
		(dpa.importe_antiguedad - dpa.importe_aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.detalle_planilla_antiguedad dpa 
	WHERE dpa.id_detalle_planilla_antiguedad = rANTIGUEDAD.id_detalle_planilla_antiguedad
	;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;

END LOOP;


-- 137 -- (15% -- planilla gratificacion especial)
FOR rGE IN
	SELECT  
		dge.id_detalle_planilla_gratificacion

	FROM  salarios.detalle_planilla_gratificacion_especial dge 
	WHERE  dge.id_funcionario = IN_ID_FUNCIONARIO
		AND dge.id_planilla_gratificacion in (
			SELECT pge.id_planilla_gratificacion
			FROM salarios.planilla_gratificacion_especial pge
			WHERE pge.gestion = IN_GESTION
			AND pge.id_mes = IN_ID_MES
			AND pge.estado = 1 -- 1 = PROCESADO
			-- AND id_administracion = 1
)  
LOOP
	SELECT  
		'GRATIFICACION ESPECIAL'::TEXT as "CONCEPTO",
		dge.importe_gratificacion AS "PRESUPUESTADO",
--		0::NUMERIC as "JUBILACION", 
		dge.importe_gratificacion AS "LIQUIDO"

		INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM  salarios.detalle_planilla_gratificacion_especial dge 
	WHERE dge.id_detalle_planilla_gratificacion = rGE.id_detalle_planilla_gratificacion
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;
END LOOP;


-- remuneracion extraordinaria 
FOR rRE IN
	SELECT  
		dre.id_detalle_planilla_re
	FROM  salarios.detalles_planillas_re dre
	WHERE  dre.id_funcionario = IN_ID_FUNCIONARIO
		AND dre.id_planilla_re in (
		SELECT pre.id_planilla_re
		  FROM salarios.planillas_re pre
		WHERE pre.gestion = IN_GESTION
		AND pre.id_mes = IN_ID_MES
		AND pre.estado = 1 -- 1 = PROCESADO
		-- AND pre.id_administracion =?
	)  
LOOP
	SELECT  
		'REMUNERACION EXTRAORDINARIA'::TEXT as "CONCEPTO",
		dre.monto AS "PRESUPUESTADO",
--		(dre.aporte * -1) as "JUBILACION", 
--		(dre.monto - dre.aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalles_planillas_re dre
	WHERE dre.id_detalle_planilla_re = rRE.id_detalle_planilla_re
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;
	SELECT  
		'APORTE JUBILATORIO '||'REMUNERACION EXTRAORDINARIA'::TEXT as "CONCEPTO",
--		dre.monto AS "PRESUPUESTADO",
		(dre.aporte * -1) as "JUBILACION", 
		(dre.monto - dre.aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalles_planillas_re dre
	WHERE dre.id_detalle_planilla_re = rRE.id_detalle_planilla_re
	;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;

END LOOP;

-- remuneración adicional
FOR rRA IN
	SELECT  
		dra.id_detalle_planilla_ra
	FROM  salarios.detalles_planillas_ra dra
	WHERE  dra.id_funcionario = IN_ID_FUNCIONARIO
		AND dra.id_planilla_ra in (
		SELECT pra.id_planilla_ra
		  FROM salarios.planillas_ra pra
		WHERE pra.gestion = IN_GESTION
		AND pra.id_mes = IN_ID_MES
		AND pra.estado = 1 -- 1 = PROCESADO
		-- AND pra.id_administracion =?
	)  
LOOP
	SELECT  
		'REMUNERACION ADICIONAL'::TEXT as "CONCEPTO",
		dra.monto AS "PRESUPUESTADO",
--		(dra.aporte * -1) as "JUBILACION", 
--		(dra.monto - dra.aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalles_planillas_ra dra
	WHERE dra.id_detalle_planilla_ra = rRA.id_detalle_planilla_ra
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;
	SELECT  
		'APORTE JUBILATORIO '||'REMUNERACION ADICIONAL'::TEXT as "CONCEPTO",
--		dra.monto AS "PRESUPUESTADO",
		(dra.aporte * -1) as "JUBILACION", 
		(dra.monto - dra.aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalles_planillas_ra dra
	WHERE dra.id_detalle_planilla_ra = rRA.id_detalle_planilla_ra
	;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;

END LOOP;

-- gratificación ocasional -- premio
FOR rGO IN
	SELECT  
		dgo.id_detalle_planilla_gratificacion_ocacional
	FROM  salarios.detalle_planilla_gratificacion_ocacional dgo
	WHERE  dgo.id_funcionario = IN_ID_FUNCIONARIO
		AND dgo.id_planilla_gratificacion_ocacional in (
		SELECT pgo.id_planilla_gratificacion_ocacional
		  FROM salarios.planilla_gratificacion_ocacional pgo
		WHERE pgo.gestion = IN_GESTION
		AND pgo.id_mes = IN_ID_MES
		AND pgo.estado = 1 -- 1 = PROCESADO
		-- AND pgo.id_administracion =?
	)  
LOOP
	SELECT  
		'GRATIFICACIÓN OCASIONAL'::TEXT as "CONCEPTO",
		dgo.importe_gratificacion AS "PRESUPUESTADO",
--		(dgo.importe_aporte*-1) as "JUBILACION", 
--		(dgo.importe_gratificacion - dgo.importe_aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalle_planilla_gratificacion_ocacional dgo
	WHERE dgo.id_detalle_planilla_gratificacion_ocacional = rGO.id_detalle_planilla_gratificacion_ocacional
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;
	SELECT  
		'APORTE JUBILATORIO '||'GRATIFICACIÓN OCASIONAL'::TEXT as "CONCEPTO",
-- 		dgo.importe_gratificacion AS "PRESUPUESTADO",
		(dgo.importe_aporte*-1) as "JUBILACION", 
		(dgo.importe_gratificacion - dgo.importe_aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalle_planilla_gratificacion_ocacional dgo
	WHERE dgo.id_detalle_planilla_gratificacion_ocacional = rGO.id_detalle_planilla_gratificacion_ocacional
	;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;
	
END LOOP;

-- Totales
concepto := 'TOTALES';
total_devengado := nTotalDevengado;
total_descuentos := nTotalDescuentos;
total_liquido := nTotalLiquido;
	devengado := 0;
	liquido := 0;

RETURN NEXT;

-- =======================================================================

-- ------------------------------------------------------------------------


END;

]]></definition>
</function>

<function name="obtener_datos_hoja_liquidacion_salarios_para_funcionarios_2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="liquido">
		<type name="numeric"/>
	</parameter>
	<parameter name="total_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="total_descuentos">
		<type name="numeric"/>
	</parameter>
	<parameter name="total_liquido">
		<type name="numeric"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="vid_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="ape_nom_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="cedula_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="cedula_numeric">
		<type name="numeric"/>
	</parameter>
	<parameter name="nombre_cargo">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_categoria">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="estado">
		<type name="boolean"/>
	</parameter>
	<parameter name="nombre_nivel1">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel2">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel3">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel4">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel5">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_estructura_presupuestaria">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_tipo">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_programa">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_subprograma">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_objeto_gasto">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_fuente_financiamiento">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_departamento">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_proyecto">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_organismo_financiador">
		<type name="numeric"/>
	</parameter>
	<parameter name="descripcion_estructura_presupuestaria">
		<type name="text"/>
	</parameter>
	<parameter name="descripcion_tipo">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_programa">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_subprograma">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_objeto_gasto">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_fuente_financiamiento">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_alcance">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_proyecto">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_organismo_financiador">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_programa_abreviatura">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_programa_estado">
		<type name="boolean"/>
	</parameter>
	<parameter name="descripcion_estructura">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_funcionario" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="numeric"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
	-- Para emitir notificaciones de depuracion:
	bDebug boolean :=true;
	tNombre_funcion text := '[salarios.obtener_datos_hoja_liquidacion_salarios_para_funcionarios_2(IN IN_ID_FUNCIONARIO INTEGER, IN IN_GESTION NUMERIC, IN IN_ID_MES INTEGER)]';

	bComisionado boolean :=false;

	rDetalle_Plla_salarios RECORD;
	rDesc_de_un_funcionario RECORD;

-- Gasto de representacion
	rGr RECORD;

-- Bonificaciones y gratificaciones
	rBG RECORD;

-- Diferencia Salarial
	rDS RECORD;

-- Otros Gastos
	rOG RECORD;

-- Grado Academico
	rGA RECORD;

-- Antiguedad:
	rANTIGUEDAD RECORD;

-- Gratificacion Especial
	rGE RECORD;

-- Gratificacion Ocasional
	rGO RECORD;

-- Remuneracion Extraordinaria
	rRE RECORD;

-- Remuneracion Adicional
	rRA RECORD;

--	nGestion numeric :=0;
	iId_planilla_salario integer := 0;

-- acumuladores de importes:
	nTotalDevengado numeric :=0;
	nTotalLiquido numeric :=0;
	nTotalDescuentos numeric :=0;

BEGIN
-- Obtener datos para reporte de liquidación de salarios:
-- Fecha: 2012-08-14
-- Autor: Lic. Guillermo Galeano Fernández


-- Datos que debe poseer el listado:
-- dias trabajados
-- reparticion / nivel 1 / nivel 2 / nivel 3
-- nombre funcionario / c.i.
-- importe presupuestado / devengado 
-- / descuentos institucionales / liquido 
-- / descuentos varios en orden de prioridad
-- remuneracion extraordinaria / descuento institucional
-- remuneración adicional
-- gratificación
-- responsabilidad en el cargo
-- 


-- concepto -- importe | jubilacion | liquido:

-- corte por concepto:

/*IF (bDebug IS TRUE) THEN
	RAISE NOTICE '% - % - 
nGestion=%, iId_mes=%.-',tNombre_funcion, now(),nGestion, iId_mes;
END IF;
*/

RAISE NOTICE 'INICIO';

total_devengado := 0;
total_descuentos := 0;
total_liquido := 0;

-- Datos basicos del funcionario:
--
Select
--	'SUELDO - '||d.nombre_categoria as "concepto",
--	a.monto_devengado, 
--	(a.monto_aporte*-1) as "monto_aporte", 
--	(a.monto_devengado-a.monto_aporte) as "liquido_sin_multa", 
	a.monto_presupuestado, 

	a.id_oficina,
	a.dias_trabajados, 

--	a.id_funcionario,
	a.id_planilla_salario,
--	a.monto_multa, 
--	a.monto_total_aporte, 
--	a.importe_descuentos_varios_solicitado, 
--	a.importe_descuentos_varios_aplicado, 
--	a.importe_descuentos_varios_diferencia, 
--	a.importe_liquido_con_descuentos_varios, 
--	a.id_detalle_categoria,
	b.ape_nom_funcionario,
	b.cedula_funcionario,
	trim(b.cedula_funcionario::text)::numeric as "cedula_numeric",
--	c.id_categoria,
--	c.id_estructura_presupuestaria,
	e.nombre_cargo,
	d.nombre_categoria
--	d.id_cargo

INTO
--	concepto,
--	devengado,
--	jubilacion,
--	liquido,
	presupuestado,
	vid_oficina,
	dias_trabajados, 

--	a.id_funcionario,
	iId_planilla_salario, 
--	a.monto_multa, 
--	a.monto_total_aporte, 
--	a.importe_descuentos_varios_solicitado, 
--	a.importe_descuentos_varios_aplicado, 
--	a.importe_descuentos_varios_diferencia, 
--	a.importe_liquido_con_descuentos_varios, 
--	a.id_detalle_categoria,
	ape_nom_funcionario,
	cedula_funcionario,
	cedula_numeric,

--	c.id_categoria,
--	c.id_estructura_presupuestaria,
	nombre_cargo,
	nombre_categoria
--	d.id_cargo

FROM salarios.detalles_planillas_salarios a
	LEFT JOIN legajos.funcionarios b 
		ON (a.id_funcionario=b.id_funcionario)
	LEFT JOIN salarios.detalles_categorias c 
		ON (a.id_detalle_categoria=c.id_detalle_categoria)
	LEFT JOIN salarios.categorias d
		ON (c.id_categoria=d.id_categoria)
	LEFT JOIN salarios.cargos e
		ON (d.id_cargo=e.id_cargo)
/*
	LEFT JOIN legajos.oficinas_con_descripciones f
		ON (a.id_oficina=f.id_oficina)
*/
WHERE a.id_funcionario=IN_ID_FUNCIONARIO
and a.id_planilla_salario in (

Select 
	za.id_planilla_salario
from salarios.planillas_salarios za
where 	za.gestion = IN_GESTION 
	AND za.id_mes = IN_ID_MES
	AND za.id_estado = 1 -- 1 = finiquitado
) order by a.monto_presupuestado desc limit 1;
RAISE NOTICE 'Datos basicos del funcionario';
-- verificamos si es comisionado:
IF presupuestado is null THEN
	bComisionado := true;
	Select 
		e.importe, -- presupuestado,
		a.id_oficina,
		0 as "dias_trabajados", 

		0 as "iId_planilla_salario", 
		f.ape_nom_funcionario,
		f.cedula_funcionario,
		trim(f.cedula_funcionario::text)::numeric as "cedula_numeric", -- f.cedula_numeric,

		d.nombre_cargo,
		c.nombre_categoria
	INTO
		presupuestado,
		vid_oficina,
		dias_trabajados, 

		iId_planilla_salario, 
		ape_nom_funcionario,
		cedula_funcionario,
		cedula_numeric,

		nombre_cargo,
		nombre_categoria

	From salarios.funcionarios_categorias a
		LEFT JOIN salarios.detalles_categorias b
			ON (a.id_detalle_categoria=b.id_detalle_categoria)
		LEFT JOIN salarios.categorias c
			ON (c.id_categoria=b.id_categoria)
		LEFT JOIN salarios.cargos d
			ON (c.id_cargo=d.id_cargo)
		LEFT JOIN salarios.categoria_importe_mensual e
			ON (e.id_categoria=c.id_categoria and e.id_mes = IN_ID_MES) -- id_mes
		LEFT JOIN legajos.funcionarios f
			ON (a.id_funcionario=f.id_funcionario)

	where a.id_funcionario= IN_ID_FUNCIONARIO
	AND a.gestion = IN_GESTION
	and a.estado is true;

END IF;
RAISE NOTICE 'VERIFICA SI ES COMISIONADO';


-- datos de la oficina:

	Select 
--		g.id_oficina,
		g.nombre,
		g.nivel1, 
		g.nivel2, 
		g.nivel3, 
		g.nivel4, 
		g.nivel5, 
		g.estado, 
		CASE WHEN g.nombre_nivel1 IS NULL THEN ' ' ELSE g.nombre_nivel1 END, 
		CASE WHEN g.nombre_nivel2 = g.nombre_nivel1 THEN ' ' ELSE g.nombre_nivel2 END, 
		CASE WHEN g.nombre_nivel3 = g.nombre_nivel2 THEN ' ' ELSE g.nombre_nivel3 END,
		CASE WHEN g.nombre_nivel4 = g.nombre_nivel3 THEN ' ' ELSE g.nombre_nivel4 END, 
		CASE WHEN g.nombre_nivel5 = g.nombre_nivel4 THEN ' ' ELSE g.nombre_nivel5 END, 
		g.id_estructura_presupuestaria, 
		g.gestion, 
		g.cod_tipo, 
		g.cod_programa, 
		g.cod_subprograma, 
		g.cod_objeto_gasto, 
		g.cod_fuente_financiamiento, 
		g.cod_departamento, 
		g.cod_proyecto, 
		g.cod_organismo_financiador, 
		g.descripcion_estructura_presupuestaria, 
		g.descripcion_tipo, 
		g.descripcion_programa, 
		g.descripcion_subprograma, 
		g.descripcion_objeto_gasto, 
		g.descripcion_fuente_financiamiento, 
		g.descripcion_alcance, 
		g.descripcion_proyecto, 
		g.descripcion_organismo_financiador, 
		g.descripcion_programa_abreviatura, 
		g.descripcion_programa_estado, 
		g.descripcion_estructura 
INTO
--		id_oficina1,
		nombre,
		nivel1, 
		nivel2, 
		nivel3, 
		nivel4, 
		nivel5, 
		estado, 
		nombre_nivel1, 
		nombre_nivel2, 
		nombre_nivel3, 
		nombre_nivel4, 
		nombre_nivel5, 
		id_estructura_presupuestaria, 
		gestion, 
		cod_tipo, 
		cod_programa, 
		cod_subprograma, 
		cod_objeto_gasto, 
		cod_fuente_financiamiento, 
		cod_departamento, 
		cod_proyecto, 
		cod_organismo_financiador, 
		descripcion_estructura_presupuestaria, 
		descripcion_tipo, 
		descripcion_programa, 
		descripcion_subprograma, 
		descripcion_objeto_gasto, 
		descripcion_fuente_financiamiento, 
		descripcion_alcance, 
		descripcion_proyecto, 
		descripcion_organismo_financiador, 
		descripcion_programa_abreviatura, 
		descripcion_programa_estado, 
		descripcion_estructura

	from legajos.oficinas_con_descripciones g
	WHERE g.id_oficina = vid_oficina; -- id_oficina;
RAISE NOTICE 'DATOS DE LA OFICINA';
-- importe devengado y liquido:

-- Si es comisionado 
-- (sueldo + aporte jubilatorio sueldo + sueldo liquido)
-- poner a 0 (cero)

IF bComisionado is true THEN
	concepto := 'SUELDO';
	devengado := 0;
	liquido := 0;

ELSE
	-- importe devengado y liquido:
	Select
		'SUELDO' as "concepto",

		sum(a.monto_devengado) as devengado, 
	--	((sum(a.monto_aporte))*-1) as "monto_aporte", 
	--	((sum(a.monto_devengado))-(sum(a.monto_aporte))) as "liquido_sin_multa"
		0::numeric as "liquido_sin_multa"
	INTO
		concepto,
		devengado,
	--	jubilacion,
		liquido

	FROM salarios.detalles_planillas_salarios a
	WHERE 
	-- 	a.id_detalle_planilla_salario=rDetalle_Plla_salarios.id_detalle_planilla_salario;
		a.id_planilla_salario = iId_planilla_salario 
		AND 
		a.id_funcionario = IN_ID_FUNCIONARIO;

	-- cargamos los acumuladores:
	nTotalDevengado := nTotalDevengado + devengado;
	-- nTotalDescuentos := nTotalDescuentos + devengado;
	-- nTotalLiquido := nTotalLiquido + liquido;

END IF;
RAISE NOTICE 'IMPORTE DEVENGADO Y LIQUIDO';
-- Retornamos el contenido de las variables:
RETURN NEXT;

-- importe de jubilacion para este concepto (SUELDO):

IF bComisionado is true THEN
	concepto := 'APORTE JUBILATORIO SUELDO';
	devengado := 0;
	liquido := 0;
ELSE
	-- traemos la fila con el importe de jubilacion para este concepto:
	Select
		'APORTE JUBILATORIO '||'SUELDO' as "concepto",

	--	sum(a.monto_devengado) as devengado, 
		((sum(a.monto_aporte))*-1) as "monto_aporte", 
	--	((sum(a.monto_devengado))-(sum(a.monto_aporte))) as "liquido_sin_multa"
		0::numeric as "liquido_sin_multa"
	INTO
		concepto,
		devengado,
	--	jubilacion,
		liquido

	FROM salarios.detalles_planillas_salarios a
	WHERE 
	-- 	a.id_detalle_planilla_salario=rDetalle_Plla_salarios.id_detalle_planilla_salario;
		a.id_planilla_salario = iId_planilla_salario 
		AND 
		a.id_funcionario = IN_ID_FUNCIONARIO;

	-- cargamos los acumuladores:
	-- nTotalDevengado := nTotalDevengado + devengado;
	 nTotalDescuentos := nTotalDescuentos + devengado;
	 nTotalLiquido := nTotalDevengado + devengado; -- devengado - (jubilacion)

END IF;
RAISE NOTICE 'importe de jubilacion para este concepto (SUELDO)';
-- Retornamos el contenido de las variables:
RETURN NEXT;

-- ---------------------------------------------------------------------------

-- IF (iId_planilla_salario <> rDetalle_Plla_salarios.id_planilla_salario) THEN
--	iId_planilla_salario := rDetalle_Plla_salarios.id_planilla_salario;

-- traemos la multa de esta planilla de salario:

	-- DESCUENTOS INSTITUCIONALES
	-- multas:
	SELECT 
		'MULTAS APLICADAS'::text as "CONCEPTO",
--		0.00::NUMERIC AS "IMPORTE1",
		CASE WHEN (sum(h.importe_aplicado)*-1) IS NULL THEN 0.00 ELSE (sum(h.importe_aplicado)*-1) END AS "IMPORTE2",
		0.00::NUMERIC as "IMPORTE3_multas_aplicadas"
	INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM salarios.detalles_multas_aplicadas h
	WHERE h.id_funcionario=IN_ID_FUNCIONARIO
		AND h.id_multas_aplicadas=(Select i.id_multas_aplicadas 
					   from salarios.multas_aplicadas i 
					WHERE i.id_planilla_salario=iId_planilla_salario)
	;
RAISE NOTICE 'traemos la multa de esta planilla de salario';
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + devengado; -- Entonces: devengado -(aporte jubilatorio + multas)

	-- Retornamos el contenido de las variables:
	-- en este caso con los importes de multas cargadas.
	-- solamente si tiene multas aplicadas!
	IF (devengado < 0) THEN
		RETURN NEXT;
	END IF;
-- END IF;

-- END LOOP;
RAISE NOTICE 'cargamos los acumuladores';



-- DESCUENTOS VARIOS
-- (POR ORDEN DE PRIORIDAD)
FOR rDesc_de_un_funcionario IN
	SELECT j.id_detalles_planilla_descuento
	FROM salarios.detalles_planillas_descuentos j
	WHERE j.id_funcionario=IN_ID_FUNCIONARIO
	AND j.id_planilla_descuento=(   Select k.id_planilla_descuento 
					from salarios.planillas_descuentos k 
					where k.id_planilla_salario=iId_planilla_salario
					)
	ORDER BY j.id_detalles_planilla_descuento asc
LOOP

SELECT 
(
CASE
WHEN j.id_descuento_judicial is null then
	(Select l.descripcion FROM salarios.tipos_descuentos l where l.id_tipo_descuento = (Select m.id_tipo_descuento FROM salarios.descuentos_aso m where m.id_descuento_aso=j.id_descuento_aso))
ELSE
	(Select o.descripcion FROM salarios.tipos_descuentos o where o.id_tipo_descuento = (Select n.id_tipo_descuento FROM salarios.descuentos_judiciales n where n.id_descuento_judicial=j.id_descuento_judicial))

END
) AS "CONCEPTO",
--	0.00::numeric AS "IMPORTE1",
	(j.monto_descuento * -1) AS "IMPORTE2",
	0.00::numeric AS "IMPORTE3_DESC_VARIOS"
--	(j.monto_descuento * -1) AS "IMPORTE3_DESC_VARIOS"
/*
(
CASE
WHEN j.id_descuento_judicial is null then
	(Select l.orden FROM salarios.tipos_descuentos l where l.id_tipo_descuento = (Select m.id_tipo_descuento FROM salarios.descuentos_aso m where m.id_descuento_aso=j.id_descuento_aso))
ELSE
	(Select o.orden FROM salarios.tipos_descuentos o where o.id_tipo_descuento = (Select n.id_tipo_descuento FROM salarios.descuentos_judiciales n where n.id_descuento_judicial=j.id_descuento_judicial))

END
) AS "ORDEN_APLICACION",obtener_datos_hoja_liquidacion_salarios_para_funcionarios_2
	j.id_descuento_judicial, 
	j.id_descuento_aso
*/
INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

FROM salarios.detalles_planillas_descuentos j
WHERE j.id_detalles_planilla_descuento=rDesc_de_un_funcionario.id_detalles_planilla_descuento
/*
WHERE j.id_funcionario=IN_ID_FUNCIONARIO
AND j.id_planilla_descuento=(   Select k.id_planilla_descuento 
				from salarios.planillas_descuentos k 
				where k.id_planilla_salario=IN_ID_PLANILLA_SALARIO
				)
ORDER BY j.id_detalles_planilla_descuento asc
*/
;

-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + devengado; -- devengado - (jubilacion + multas + descuentos varios1 + descuentos varios N)

-- Retornamos el contenido de las variables:
-- en este caso con los descuentos cargados.
	IF (devengado < 0) THEN
		RETURN NEXT;
	END IF;


END LOOP;
RAISE NOTICE 'DESCUENTOS VARIOS';
-- AQUI RETORNAMOS EL LIQUIDO FINAL (COMO UNA FILA)
concepto := 'SUELDO LIQUIDO';
devengado := 0;
liquido := nTotalLiquido;
RETURN NEXT;

RAISE NOTICE 'LIQUIDO FINAL';
-- INGRESOS - VARIOS

-- gastos de representacion
-- (sera en base al mes de la planilla de gastos
-- con el id_mes de la planilla de salario)
RAISE NOTICE 'ACA EMPIEZA GASTOS REPRESENTACION';
FOR rGr IN
SELECT 
	a.id_planilla_gasto_representacion_detalle
FROM  salarios.planilla_gasto_representacion_detalle a
WHERE a.id_planilla_gasto_representacion IN (
	Select p.id_planilla_gasto_representacion
	FROM salarios.planilla_gasto_representacion p
	where p.id_mes= IN_ID_MES 
	and p.gestion= IN_GESTION
	and p.estado=1 -- 1 = procesado!
)  
AND a.id_funcionario_representacion = (
	Select q.id_funcionario_representacion 
	from salarios.funcionarios_representaciones q
		LEFT JOIN salarios.detalles_categorias s
			on (q.id_detalle_categoria=s.id_detalle_categoria)
		LEFT JOIN salarios.categorias t
			on (s.id_categoria=t.id_categoria)
	where q.id_funcionario = IN_ID_FUNCIONARIO and t.gestion = IN_GESTION  and q.hasta isnull -- and q.estado is true
)

LOOP
RAISE NOTICE 'XXX(%)',concepto;
	SELECT 
		'GASTO DE REPRESENTACION'::TEXT as "CONCEPTO1",
		a.devengado_parcial,
--		(a.aporte*-1) as "aporte",
--		(a.devengado_parcial - a.aporte) as "LIQUIDO"
		0::numeric as "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.planilla_gasto_representacion_detalle a
	WHERE a.id_planilla_gasto_representacion_detalle=rGr.id_planilla_gasto_representacion_detalle;

-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

RETURN NEXT;

	SELECT 
		'APORTE JUBILATORIO '||'GASTO DE REPRESENTACION'::TEXT as "CONCEPTO1",
--		a.devengado_parcial,
		(a.aporte*-1) as "aporte",
		(a.devengado_parcial - a.aporte) as "LIQUIDO"
--		0::numeric as "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.planilla_gasto_representacion_detalle a
	WHERE a.id_planilla_gasto_representacion_detalle=rGr.id_planilla_gasto_representacion_detalle;

-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;

RETURN NEXT;

END LOOP;
RAISE NOTICE 'GASTOS REPRESENTACION';
-- bonificaciones y gratificaciones

FOR rBG IN
SELECT 
	b.id_detalle_planilla_bonificacion 
FROM salarios.detalles_planillas_bonificaciones b 
WHERE
	b.id_planilla_bonificacion in (
		Select c.id_planilla_bonificacion 
		from salarios.planillas_bonificaciones c
		WHERE c.gestion = IN_GESTION
			and c.id_mes = IN_ID_MES
			and c.estado=1 -- ESTADO 1 = PROCESADO!
	)
AND b.id_funcionario_bonificacion in (
	SELECT d.id_funcionario_bonificacion
	FROM salarios.funcionarios_bonificaciones d
	WHERE d.id_funcionario = IN_ID_FUNCIONARIO
		AND d.id_mes = IN_ID_MES
		AND d.gestion = IN_GESTION
	)
LOOP
	SELECT 
		'BONIFICACIONES'::TEXT as "CONCEPTO",
	--	b.importe_monto, 
	--	b.importe_porcentaje, 
	--	b.importe_gasto_representacion, 
		b.monto_total AS "PRESUPUESTADO",
--		(b.aporte*-1) as "JUBILACION", 
--		(b.monto_total - b.aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM salarios.detalles_planillas_bonificaciones b 
	WHERE b.id_detalle_planilla_bonificacion = rBG.id_detalle_planilla_bonificacion;

-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;

	SELECT 
		'APORTE JUBILITARIO '||'BONIFICACIONES'::TEXT as "CONCEPTO",
	--	b.importe_monto, 
	--	b.importe_porcentaje, 
	--	b.importe_gasto_representacion, 
--		b.monto_total AS "PRESUPUESTADO",
		(b.aporte*-1) as "JUBILACION", 
		(b.monto_total - b.aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM salarios.detalles_planillas_bonificaciones b 
	WHERE b.id_detalle_planilla_bonificacion = rBG.id_detalle_planilla_bonificacion;

-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;

END LOOP;
RAISE NOTICE 'BONIF. Y GRATIF.';
-- 199 - otros gastos del personal 
-- (diferencia salarial y salarios caidos, etc)
-- salarios.planilla_diferencia_salarial

-- DIFERENCIA SALARIAL:
FOR rDS IN
	SELECT 
		b.id_planilla_diferencia_salarial_detalle
	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial in (
		Select c.id_planilla_diferencia_salarial
		FROM salarios.planilla_diferencia_salarial c
		WHERE c.gestion = IN_GESTION
			AND c.id_mes= IN_ID_MES
			AND c.estado= 1 -- estado 1 = procesado!!
			AND c.id_tipo_pagos_varios = 1 -- 1 = diferencia salarial
		)
	AND b.id_funcionario = IN_ID_FUNCIONARIO
LOOP
	SELECT 
		'DIFERENCIA SALARIAL'::TEXT as "CONCEPTO",
			b.importe_monto_diferencia AS "PRESUPUESTADO",
--			(b.importe_monto_aporte*-1) as "JUBILACION", 
--			(b.importe_monto_diferencia - b.importe_monto_aporte) AS "LIQUIDO"
			0::NUMERIC AS "LIQUIDO"
		INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial_detalle = rDS.id_planilla_diferencia_salarial_detalle;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;
	SELECT 
		'APORTE JUBILATORIO '||'DIFERENCIA SALARIAL'::TEXT as "CONCEPTO",
--			b.importe_monto_diferencia AS "PRESUPUESTADO",
			(b.importe_monto_aporte*-1) as "JUBILACION", 
			(b.importe_monto_diferencia - b.importe_monto_aporte) AS "LIQUIDO"
--			0::NUMERIC AS "LIQUIDO"
		INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial_detalle = rDS.id_planilla_diferencia_salarial_detalle;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;

END LOOP;
RAISE NOTICE 'DIFERENCIA SALARIAL';
-- OTROS GASTOS:
FOR rOG IN
	SELECT 
		b.id_planilla_diferencia_salarial_detalle
	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial in (
		Select c.id_planilla_diferencia_salarial
		FROM salarios.planilla_diferencia_salarial c
		WHERE c.gestion = IN_GESTION
			AND c.id_mes= IN_ID_MES
			AND c.estado= 1 -- estado 1 = procesado!!
			AND c.id_tipo_pagos_varios = 2 -- 2 = OTROS GASTOS
		)
	AND b.id_funcionario = IN_ID_FUNCIONARIO
LOOP
	SELECT 
		'OTROS GASTOS'::TEXT as "CONCEPTO",
			b.importe_monto_diferencia AS "PRESUPUESTADO",
--			(b.importe_monto_aporte*-1) as "JUBILACION", 
--			(b.importe_monto_diferencia - b.importe_monto_aporte) AS "LIQUIDO"
			0::NUMERIC AS "LIQUIDO"
		INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial_detalle = rOG.id_planilla_diferencia_salarial_detalle;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;
	SELECT 
		'APORTE JUBILATORIO '||'OTROS GASTOS'::TEXT as "CONCEPTO",
--			b.importe_monto_diferencia AS "PRESUPUESTADO",
			(b.importe_monto_aporte*-1) as "JUBILACION", 
			(b.importe_monto_diferencia - b.importe_monto_aporte) AS "LIQUIDO"
--			0::NUMERIC AS "LIQUIDO"
		INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM salarios.planilla_diferencia_salarial_detalle b
	WHERE b.id_planilla_diferencia_salarial_detalle = rOG.id_planilla_diferencia_salarial_detalle;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;

END LOOP;
RAISE NOTICE 'OTROS GASTOS';

-- grado academico
FOR rGA IN
	SELECT  
		dpp.id_detalle_planilla_profesional
	FROM  salarios.detalle_planillas_profesionales dpp  
		INNER JOIN salarios.funcionarios_profesionales fp 
			ON fp.id_funcionario_profesional = dpp.id_funcionario_profesional  
		INNER JOIN legajos.funcionarios f 
			ON f.id_funcionario = fp.id_funcionario  
	WHERE fp.id_funcionario  = IN_ID_FUNCIONARIO
		AND id_planilla_profesional in (
				SELECT pp.id_planilla_profesional
				  FROM salarios.planilla_profesionales pp
				WHERE pp.gestion = IN_GESTION
				AND pp.id_mes= IN_ID_MES
				-- AND pp.id_administracion=1
				AND pp.estado=1 -- 1 = procesado!!!
			)  
LOOP
	SELECT  
		'GRADO ACADEMICO'::TEXT as "CONCEPTO",
		dpp.importe_profesional AS "PRESUPUESTADO",
--		(dpp.importe_aporte*-1) as "JUBILACION", 
--		(dpp.importe_profesional - dpp.importe_aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.detalle_planillas_profesionales dpp  
	WHERE dpp.id_detalle_planilla_profesional = rGA.id_detalle_planilla_profesional
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;
	SELECT  
		'APORTE JUBILATORIO '||'GRADO ACADEMICO'::TEXT as "CONCEPTO",
--		dpp.importe_profesional AS "PRESUPUESTADO",
		(dpp.importe_aporte*-1) as "JUBILACION", 
		(dpp.importe_profesional - dpp.importe_aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.detalle_planillas_profesionales dpp  
	WHERE dpp.id_detalle_planilla_profesional = rGA.id_detalle_planilla_profesional
	;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;

END LOOP;
RAISE NOTICE 'GRADO ACADEMICO';

-- antiguedad
FOR rANTIGUEDAD IN
	SELECT  
		dpa.id_detalle_planilla_antiguedad
	FROM  salarios.detalle_planilla_antiguedad dpa 
	WHERE dpa.id_funcionario = IN_ID_FUNCIONARIO 
	AND dpa.id_planilla_antiguedad IN 
	(
	SELECT pa.id_planilla_antiguedad
	FROM salarios.planillas_antiguedad pa
	WHERE pa.gestion = IN_GESTION
		AND pa.id_mes = IN_ID_MES
		AND pa.estado = 1 -- 1 = procesado!
		-- AND pa.id_administracion
	)
LOOP
	SELECT  
		'ANTIGÜEDAD'::TEXT as "CONCEPTO",
		dpa.importe_antiguedad AS "PRESUPUESTADO",
--		(dpa.importe_aporte*-1) as "JUBILACION", 
--		(dpa.importe_antiguedad - dpa.importe_aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.detalle_planilla_antiguedad dpa 
	WHERE dpa.id_detalle_planilla_antiguedad = rANTIGUEDAD.id_detalle_planilla_antiguedad
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;
	SELECT  
		'APORTE JUBILATORIO '||'ANTIGÜEDAD'::TEXT as "CONCEPTO",
--		dpa.importe_antiguedad AS "PRESUPUESTADO",
		(dpa.importe_aporte*-1) as "JUBILACION", 
		(dpa.importe_antiguedad - dpa.importe_aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"
	INTO
	concepto,
	devengado,
--	jubilacion,
	liquido

	FROM  salarios.detalle_planilla_antiguedad dpa 
	WHERE dpa.id_detalle_planilla_antiguedad = rANTIGUEDAD.id_detalle_planilla_antiguedad
	;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;

END LOOP;
RAISE NOTICE 'ANTIGUEDAD';

-- 137 -- (15% -- planilla gratificacion especial)
FOR rGE IN
	SELECT  
		dge.id_detalle_planilla_gratificacion

	FROM  salarios.detalle_planilla_gratificacion_especial dge 
	WHERE  dge.id_funcionario = IN_ID_FUNCIONARIO
		AND dge.id_planilla_gratificacion in (
			SELECT pge.id_planilla_gratificacion
			FROM salarios.planilla_gratificacion_especial pge
			WHERE pge.gestion = IN_GESTION
			AND pge.id_mes = IN_ID_MES
			AND pge.estado = 1 -- 1 = PROCESADO
			-- AND id_administracion = 1
)  
LOOP
	SELECT  
		'GRATIFICACION ESPECIAL'::TEXT as "CONCEPTO",
		dge.importe_gratificacion AS "PRESUPUESTADO",
--		0::NUMERIC as "JUBILACION", 
		dge.importe_gratificacion AS "LIQUIDO"

		INTO
		concepto,
		devengado,
--		jubilacion,
		liquido

	FROM  salarios.detalle_planilla_gratificacion_especial dge 
	WHERE dge.id_detalle_planilla_gratificacion = rGE.id_detalle_planilla_gratificacion
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;
END LOOP;
RAISE NOTICE 'GRATIF. ESP';

-- remuneracion extraordinaria 
FOR rRE IN
	SELECT  
		dre.id_detalle_planilla_re
	FROM  salarios.detalles_planillas_re dre
	WHERE  dre.id_funcionario = IN_ID_FUNCIONARIO
		AND dre.id_planilla_re in (
		SELECT pre.id_planilla_re
		  FROM salarios.planillas_re pre
		WHERE pre.gestion = IN_GESTION
		AND pre.id_mes = IN_ID_MES
		AND pre.estado = 1 -- 1 = PROCESADO
		-- AND pre.id_administracion =?
	)  
LOOP
	SELECT  
		'REMUNERACION EXTRAORDINARIA'::TEXT as "CONCEPTO",
		dre.monto AS "PRESUPUESTADO",
--		(dre.aporte * -1) as "JUBILACION", 
--		(dre.monto - dre.aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalles_planillas_re dre
	WHERE dre.id_detalle_planilla_re = rRE.id_detalle_planilla_re
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;

	RETURN NEXT;
	SELECT  
		'APORTE JUBILATORIO '||'REMUNERACION EXTRAORDINARIA'::TEXT as "CONCEPTO",
--		dre.monto AS "PRESUPUESTADO",
		(dre.aporte * -1) as "JUBILACION", 
		(dre.monto - dre.aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalles_planillas_re dre
	WHERE dre.id_detalle_planilla_re = rRE.id_detalle_planilla_re
	;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;

END LOOP;
RAISE NOTICE 'R.E.';
-- remuneración adicional
FOR rRA IN
	SELECT  
		dra.id_detalle_planilla_ra
	FROM  salarios.detalles_planillas_ra dra
	WHERE  dra.id_funcionario = IN_ID_FUNCIONARIO
		AND dra.id_planilla_ra in (
		SELECT pra.id_planilla_ra
		  FROM salarios.planillas_ra pra
		WHERE pra.gestion = IN_GESTION
		AND pra.id_mes = IN_ID_MES
		AND pra.estado = 1 -- 1 = PROCESADO
		-- AND pra.id_administracion =?
	)  
LOOP
	SELECT  
		'REMUNERACION ADICIONAL'::TEXT as "CONCEPTO",
		dra.monto AS "PRESUPUESTADO",
--		(dra.aporte * -1) as "JUBILACION", 
--		(dra.monto - dra.aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalles_planillas_ra dra
	WHERE dra.id_detalle_planilla_ra = rRA.id_detalle_planilla_ra
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;
	SELECT  
		'APORTE JUBILATORIO '||'REMUNERACION ADICIONAL'::TEXT as "CONCEPTO",
--		dra.monto AS "PRESUPUESTADO",
		(dra.aporte * -1) as "JUBILACION", 
		(dra.monto - dra.aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalles_planillas_ra dra
	WHERE dra.id_detalle_planilla_ra = rRA.id_detalle_planilla_ra
	;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;

END LOOP;
RAISE NOTICE 'R.A.';
-- gratificación ocasional -- premio
FOR rGO IN
	SELECT  
		dgo.id_detalle_planilla_gratificacion_ocacional
	FROM  salarios.detalle_planilla_gratificacion_ocacional dgo
	WHERE  dgo.id_funcionario = IN_ID_FUNCIONARIO
		AND dgo.id_planilla_gratificacion_ocacional in (
		SELECT pgo.id_planilla_gratificacion_ocacional
		  FROM salarios.planilla_gratificacion_ocacional pgo
		WHERE pgo.gestion = IN_GESTION
		AND pgo.id_mes = IN_ID_MES
		AND pgo.estado = 1 -- 1 = PROCESADO
		-- AND pgo.id_administracion =?
	)  
LOOP
	SELECT  
		'GRATIFICACIÓN OCASIONAL'::TEXT as "CONCEPTO",
		dgo.importe_gratificacion AS "PRESUPUESTADO",
--		(dgo.importe_aporte*-1) as "JUBILACION", 
--		(dgo.importe_gratificacion - dgo.importe_aporte) AS "LIQUIDO"
		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalle_planilla_gratificacion_ocacional dgo
	WHERE dgo.id_detalle_planilla_gratificacion_ocacional = rGO.id_detalle_planilla_gratificacion_ocacional
	;
-- cargamos los acumuladores:
nTotalDevengado := nTotalDevengado + devengado;
-- nTotalDescuentos := nTotalDescuentos + devengado;
-- nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;
	SELECT  
		'APORTE JUBILATORIO '||'GRATIFICACIÓN OCASIONAL'::TEXT as "CONCEPTO",
-- 		dgo.importe_gratificacion AS "PRESUPUESTADO",
		(dgo.importe_aporte*-1) as "JUBILACION", 
		(dgo.importe_gratificacion - dgo.importe_aporte) AS "LIQUIDO"
--		0::NUMERIC AS "LIQUIDO"

			INTO
			concepto,
			devengado,
--			jubilacion,
			liquido

	FROM  salarios.detalle_planilla_gratificacion_ocacional dgo
	WHERE dgo.id_detalle_planilla_gratificacion_ocacional = rGO.id_detalle_planilla_gratificacion_ocacional
	;
-- cargamos los acumuladores:
-- nTotalDevengado := nTotalDevengado + devengado;
nTotalDescuentos := nTotalDescuentos + devengado;
nTotalLiquido := nTotalLiquido + liquido;
	RETURN NEXT;
	
END LOOP;
RAISE NOTICE 'GRATIF. OCASIONAL';
-- Totales
concepto := 'TOTALES';
total_devengado := nTotalDevengado;
total_descuentos := nTotalDescuentos;
total_liquido := nTotalLiquido;
	devengado := 0;
	liquido := 0;

RETURN NEXT;

-- =======================================================================

-- ------------------------------------------------------------------------


END;

]]></definition>
</function>

<function name="obtener_descuentos_judiciales_disponibles"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_judicial">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="ape_nom_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="nro_cuenta">
		<type name="text"/>
	</parameter>
	<parameter name="monto_saldo">
		<type name="numeric"/>
	</parameter>
	<parameter name="descuento">
		<type name="numeric"/>
	</parameter>
	<parameter name="saldo_con_descuento">
		<type name="numeric"/>
	</parameter>
	<parameter name="dem_documento">
		<type name="text"/>
	</parameter>
	<parameter name="dem_descripcion">
		<type name="text"/>
	</parameter>
	<parameter name="fecha">
		<type name="date"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="numeric"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_tipo_descuento" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
	rSALIDA RECORD;
	tAbreviatura text;

BEGIN
-- 'DJCG'
	Select tz.abreviatura
		into tAbreviatura
	from salarios.tipos_descuentos tz
	where tz.id_tipo_descuento = IN_ID_TIPO_DESCUENTO;


-- Fecha: 2012-09-08
-- Autor: Lic. Guillermo Galeano Fernandez
-- Motivo: Obtener los descuentos judiciales a ser aplicados.

-- en cobro de guaraníes: Cuando el saldo es menor al importe del descuento de este mes utilizar el importe del saldo
-- en asistencia alimenticia: el saldo siempre es cero
FOR rSALIDA IN 
	SELECT 
		j.id_judicial
	FROM  salarios.judiciales j  
	WHERE j.id_tipo_descuento = IN_ID_TIPO_DESCUENTO
		AND j.id_administracion IN (IN_ID_ADMINISTRACION)
		AND j.id_judicial NOT IN (
			SELECT k.id_judicial 
			FROM salarios.descuentos_judiciales k
			WHERE k.id_mes = IN_ID_MES  
				-- AND ESTADO????
				AND k.gestion = IN_GESTION
				AND k.id_administracion IN (IN_ID_ADMINISTRACION)  
		)  
	ORDER BY j.id_judicial ASC
LOOP

	IF (tAbreviatura = 'DJCG') THEN
		SELECT 
			j.id_judicial,
			f.id_funcionario,
			f.cedula_funcionario, 
			f.ape_nom_funcionario, 
			j.nro_cuenta, 
			j.monto_saldo,
			(
			CASE 
				WHEN (j.monto_descuento_mensual > j.monto_saldo AND t.abreviatura='DJCG') then j.monto_saldo 
				ELSE j.monto_descuento_mensual 
			END
			) AS "DESCUENTO", 

			(
			CASE 
				WHEN (j.monto_descuento_mensual > j.monto_saldo) then 0 
				ELSE (j.monto_saldo - j.monto_descuento_mensual) 
			END
			) AS "saldo_con_descuento" ,

			d.dem_documento, 
			d.dem_descripcion, 
			j.fecha

			INTO

			id_judicial,
			id_funcionario,
			cedula_funcionario, 
			ape_nom_funcionario, 
			nro_cuenta, 
			monto_saldo,
			descuento, 
			saldo_con_descuento,
			dem_documento, 
			dem_descripcion, 
			fecha

		FROM  salarios.judiciales j  
			LEFT JOIN  legajos.funcionarios f 
				ON j.id_funcionario = f.id_funcionario  
			LEFT JOIN salarios.demandante d 
				ON d.id_demandante = j.id_demandante  
			LEFT JOIN salarios.tipos_descuentos t 
				ON j.id_tipo_descuento = t.id_tipo_descuento  
		WHERE j.id_judicial = rSALIDA.id_judicial 
			AND j.monto_saldo > 0
		ORDER BY j.id_judicial ASC;

	ELSE
	-- por aqui cuando es asistencia alimenticia:
		SELECT 
			j.id_judicial,
			f.id_funcionario,
			f.cedula_funcionario, 
			f.ape_nom_funcionario, 
			j.nro_cuenta, 
			j.monto_saldo,
			(
			CASE 
				WHEN (j.monto_descuento_mensual > j.monto_saldo AND t.abreviatura='DJCG') then j.monto_saldo 
				ELSE j.monto_descuento_mensual 
			END
			) AS "DESCUENTO", 

			(
			CASE 
				WHEN (j.monto_descuento_mensual > j.monto_saldo) then 0 
				ELSE (j.monto_saldo - j.monto_descuento_mensual) 
			END
			) AS "saldo_con_descuento" ,

			d.dem_documento, 
			d.dem_descripcion, 
			j.fecha

			INTO

			id_judicial,
			id_funcionario,
			cedula_funcionario, 
			ape_nom_funcionario, 
			nro_cuenta, 
			monto_saldo,
			descuento, 
			saldo_con_descuento,
			dem_documento, 
			dem_descripcion, 
			fecha

		FROM  salarios.judiciales j  
			LEFT JOIN  legajos.funcionarios f 
				ON j.id_funcionario = f.id_funcionario  
			LEFT JOIN salarios.demandante d 
				ON d.id_demandante = j.id_demandante  
			LEFT JOIN salarios.tipos_descuentos t 
				ON j.id_tipo_descuento = t.id_tipo_descuento  
		WHERE j.id_judicial = rSALIDA.id_judicial 
		ORDER BY j.id_judicial ASC;
	END IF;

	IF (id_judicial is not null) THEN
		RETURN NEXT;
	END IF;

END LOOP;


END;
]]></definition>
</function>

<function name="obtener_descuentos_varios"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="monto">
		<type name="numeric"/>
	</parameter>
	<parameter name="ejecutado">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_tipo_descuento">
		<type name="integer"/>
	</parameter>
	<parameter name="id_descuento_aso">
		<type name="integer"/>
	</parameter>
	<parameter name="id_descuento_judicial">
		<type name="integer"/>
	</parameter>
	<parameter name="id_judicial">
		<type name="integer"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="aso">
		<type name="boolean"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
RETURN QUERY 

/*
Fecha: 2012-01-19
Autor: Lic. Guillermo Galeano Fernández

-- resultado de select con union entre descuentos varios y desc judiciales
id_administracion,
gestion,
id_mes,

id_funcionario,
monto,
ejecutado,
id_tipo_descuento, 

id_descuento_aso,
id_descuento_judicial,
id_judicial
*/

Select 
        e.id_funcionario, 
	e.monto, 
	e.ejecutado,
	e.id_tipo_descuento,

	e.id_descuento_aso, 
        e.id_descuento_judicial,
        e.id_judicial,

        f.orden,
        f.aso
from
(

-- Descuentos varios (asociaciones)
SELECT 
--	c.id_administracion, 
--	c.gestion, 
--	c.id_mes, 

        c.id_funcionario, 
	c.monto, 
	c.ejecutado,
	c.id_tipo_descuento,

	c.id_descuento_aso, 
        0 as id_descuento_judicial,
        0 as id_judicial

FROM salarios.descuentos_aso c
WHERE c.id_administracion= in_id_administracion -- 0 
	and c.gestion=in_id_gestion -- 2011      
	and c.id_mes= in_id_mes -- 1
	and c.id_descuento_aso not in (
-- este select es para obtener los id de descuentos utilizados
SELECT 
       z.id_descuento_aso
  FROM salarios.detalles_planillas_descuentos z
	left join salarios.planillas_descuentos y on (z.id_planilla_descuento=y.id_planilla_descuento)
where y.estado <> 2 -- estado = 2 significa anulado en la planilla de descuentos!
and z.id_descuento_aso is not null
and y.id_administracion =in_id_administracion
and y.gestion = in_id_gestion
and y.id_mes =in_id_mes
)




union

-- Descuentos Judiciales:
SELECT 
--	d.id_administracion, 
--	d.gestion, 
--	d.id_mes, 

	d.id_funcionario, 
	d.monto, 
	d.ejecutado,
        d.id_tipo_descuento, 

	0 as id_descuento_aso,
	d.id_descuento_judicial, 
	d.id_judicial

  FROM salarios.descuentos_judiciales d
WHERE 
      d.id_administracion= in_id_administracion -- 0
      and d.gestion= in_id_gestion -- 2011
      and d.id_mes= in_id_mes -- 1
      and d.id_descuento_judicial not in (
-- este select es para obtener los id de descuentos utilizados
SELECT 
       z.id_descuento_judicial
  FROM salarios.detalles_planillas_descuentos z
	left join salarios.planillas_descuentos y on (z.id_planilla_descuento=y.id_planilla_descuento)
where y.estado <> 2  -- estado = 2 significa anulado en la planilla de descuentos!
and z.id_descuento_judicial is not null
and y.id_administracion =in_id_administracion
and y.gestion = in_id_gestion
and y.id_mes =in_id_mes

)

) as e 
       left join salarios.tipos_descuentos f
		on (e.id_tipo_descuento=f.id_tipo_descuento 
			and f.id_administracion = 0
		    ) -- esto es 0 debido a que el orden es el mismo para ambos, 
		      -- si se requiere completamente separados debe ir: in_id_administracion

-- OJO: el orden de aplicacion de descuento esta dato por la columna f.orden
order by e.id_funcionario asc, f.orden asc, f.aso desc
;


END;
]]></definition>
</function>

<function name="obtener_detalles_planillas_descuentos_con_id_tipo_descuento"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<comment><![CDATA[Devuele los mismos datos de la tabla 
          salarios.detalles_planillas_descuentos mas el id_tipo_descuento
          de una planilla de descuentos especifica. GGF.]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_detalles_planilla_descuento">
		<type name="integer"/>
	</parameter>
	<parameter name="id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_planilla_descuento">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_solicitado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_descuento">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_tipo_descuento">
		<type name="integer"/>
	</parameter>
	<parameter name="id_descuento_judicial">
		<type name="integer"/>
	</parameter>
	<parameter name="id_descuento_aso">
		<type name="integer"/>
	</parameter>
	<parameter name="usu_alta">
		<type name="character varying"/>
	</parameter>
	<parameter name="fec_alta">
		<type name="timestamp"/>
	</parameter>
	<parameter name="ip_alta">
		<type name="character varying"/>
	</parameter>
	<parameter name="usu_modi">
		<type name="character varying"/>
	</parameter>
	<parameter name="fec_modi">
		<type name="timestamp"/>
	</parameter>
	<parameter name="ip_modi">
		<type name="character varying"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_descuento" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
Fecha: 2012-08-11
Autor: Lic. Guillermo Galeano Fernández
Objetivo: Devuele los mismos datos de la tabla 
          salarios.detalles_planillas_descuentos mas el id_tipo_descuento
          de una planilla de descuentos especifica.-
Parametro de entrada: IN_ID_PLANILLA_DESCUENTO integer
*/

RETURN QUERY 
SELECT 
	b.id_detalles_planilla_descuento, 
	b.id_administracion, 
	b.id_planilla_descuento, 
	b.id_funcionario, 
	b.monto_solicitado, 
	b.monto_descuento, 
	(b.monto_solicitado-b.monto_descuento) as "monto_diferencia",
(CASE 
	WHEN (b.id_descuento_aso is not null) THEN 
		(Select z.id_tipo_descuento from salarios.descuentos_aso z WHERE z.id_descuento_aso = b.id_descuento_aso)
	ELSE
		(Select y.id_tipo_descuento from salarios.descuentos_judiciales y WHERE y.id_descuento_judicial=b.id_descuento_judicial)
END) as "id_tipo_descuento",
	b.id_descuento_judicial, 
	b.id_descuento_aso,
	b.usu_alta, 
	b.fec_alta, 
	b.ip_alta, 
	b.usu_modi, 
	b.fec_modi, 
	b.ip_modi
FROM salarios.detalles_planillas_descuentos b
WHERE b.id_planilla_descuento=IN_ID_PLANILLA_DESCUENTO;
-- AND id_tipo_descuento=9;

END;
]]></definition>
</function>

<function name="obtener_dias_trabajados"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vdias integer;
BEGIN
  /*
  * Funcion para obtener dias trabajados en un mes en una gestion de un funcionario
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario, el identificador del funcionario
  *            in_id_mes, mes de aplicacion de la multa
  *            in_gestion, año de aplicacion de la multa
  */
  
	SELECT INTO vdias dias_trabajados 
	FROM salarios.situacion_personal sp 
	INNER JOIN salarios.detalle_situacion_personal dsp ON sp.id_situacion_personal = dsp.id_situacion_personal
	--WHERE sp.id_mes = in_id_mes AND sp.gestion = in_gestion  AND dsp.id_funcionario = in_id_funcionario;
	WHERE sp.id_mes = in_id_mes AND sp.gestion = in_gestion  AND dsp.id_funcionario = in_id_funcionario AND sp.id_administracion = in_id_administracion;

	IF vdias isnull THEN
	   SELECT INTO vdias pmt.cantidad_dias_pa_hallar_importe_diario
               FROM parametros pmt
              WHERE pmt.estado;
	END IF; 
  
  return vdias;
END;
]]></definition>
</function>

<function name="obtener_dias_trabajados_superior"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vdias integer;
BEGIN
  /*
  * Funcion para obtener dias trabajados de un funcionario superior en un mes en una gestion 
  * Fecha: 2012-05-02
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario, el identificador del funcionario
  *            in_id_mes, mes de aplicacion de la multa
  *            in_gestion, año de aplicacion de la multa
  */
  
	SELECT INTO vdias dias_trabajados
	FROM salarios.funcionarios_superiores_dias_trabajados fsdt
	INNER JOIN salarios.funcionarios_superiores fs 
		ON fsdt.id_funcionario_superior = fs.id_funcionario_superior
	WHERE fsdt.id_mes = in_id_mes 
	  AND fsdt.gestion = in_gestion 
	  AND fs.hasta isnull
	  AND fs.id_funcionario = in_id_funcionario;

	IF vdias isnull THEN
		SELECT INTO vdias dias_trabajados 
		FROM salarios.situacion_personal sp 
		INNER JOIN salarios.detalle_situacion_personal dsp 
			ON sp.id_situacion_personal = dsp.id_situacion_personal
		WHERE sp.id_mes = in_id_mes 
		  AND sp.gestion = in_gestion  
		  AND dsp.id_funcionario = in_id_funcionario;
	END IF;
	
	IF vdias isnull THEN
	   SELECT INTO vdias pmt.cantidad_dias_pa_hallar_importe_diario
           FROM parametros pmt
           WHERE pmt.estado;
	END IF; 
  
  return vdias;
END;
]]></definition>
</function>

<function name="obtener_ids_funcionarios_mes_gestion"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario2">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_tipo_funcionario" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener los identificadores de funcionarios permanenetes/comisionados/contratados
  * Creado     : 2015-01-16 15:00:00
  * Modificado : 2015-01-27 17:42:00
  * Autor      : Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros :
  *              in_id_administracion administración del proceso (1:DA, 2:SET, 3: AMBAS)
  *              in_tipo_funcionario  tipo funcionario           (0: TODOS, 1:PERMANENTE, 2:CONTRATADO)
  *              in_id_mes            mes necesario              (0: TODOS)		
  *              in_gestion           ejercicio aplicado         Ej.: 2014
  * Descripcion:  
  *              su utilidad radica en la necesidad de tener todos los ids de funcionarios involucrados
  *              en algún pago durante un mes y gestión específica o durante la toda gestion ingresa.
  * ------------  
  */
RETURN QUERY 
SELECT
   fun.id_funcionario,
   fun.id_funcionario
FROM
   (
      -- PERMANENTES Y COMISIONADOS
      -- SALARIOS [111]
      SELECT
         dps.id_funcionario
      FROM
         salarios.detalles_planillas_salarios dps
         LEFT JOIN salarios.planillas_salarios ps ON ps.id_planilla_salario=dps.id_planilla_salario
      WHERE
         ps.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND
         CASE
            WHEN 0<in_id_mes THEN ps.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN ps.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN dps.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN dps.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN dps.id_administracion IN (0,1,2)
	 END AND
         ps.id_estado=1
      GROUP BY 
         dps.id_funcionario
      UNION
      -- GASTOS DE REPRESENTACION [113]
      SELECT
         fr.id_funcionario   
      FROM
         salarios.planilla_gasto_representacion_detalle pgrd
         LEFT JOIN salarios.planilla_gasto_representacion pgr ON pgr.id_planilla_gasto_representacion=pgrd.id_planilla_gasto_representacion
         LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
      WHERE
         pgr.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND
         CASE
            WHEN 0<in_id_mes THEN pgr.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pgr.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN pgrd.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN pgrd.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN pgrd.id_administracion IN (0,1,2)
	 END AND
         pgr.estado=1
      GROUP BY 
         fr.id_funcionario
      UNION
      -- REMUNERACION EXTRAORDINARIA [123]
      SELECT
         dpre.id_funcionario   
      FROM
         salarios.detalles_planillas_re dpre
         LEFT JOIN salarios.planillas_re pre ON pre.id_planilla_re=dpre.id_planilla_re
         --LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
      WHERE
         pre.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND         
         CASE
            WHEN 0<in_id_mes THEN pre.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pre.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN dpre.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN dpre.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN dpre.id_administracion IN (0,1,2)
	 END AND
         pre.estado=1
      GROUP BY
          dpre.id_funcionario 
      UNION
      -- REMUNERACION ADICIONAL [125]
      SELECT
         dpra.id_funcionario   
      FROM
         salarios.detalles_planillas_ra dpra
         LEFT JOIN salarios.planillas_ra pra ON pra.id_planilla_ra=dpra.id_planilla_ra
      WHERE
         pra.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND   
         CASE
            WHEN 0<in_id_mes THEN pra.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pra.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN dpra.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN dpra.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN dpra.id_administracion IN (0,1,2)
	 END AND
         pra.estado=1
      GROUP BY
         dpra.id_funcionario
      UNION   
      -- SUBSIDIO FAMILIAR [131]
      SELECT
         fs.id_funcionario   
      FROM
         salarios.detalles_planillas_subsidios dps
         LEFT JOIN salarios.planillas_subsidios ps ON ps.id_planilla_subsidio=dps.id_planilla_subsidio
         LEFT JOIN salarios.funcionarios_subsidios fs ON fs.id_funcionario_subsidio=dps.id_funcionario_subsidio
      WHERE
         ps.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND          
         CASE
            WHEN 0<in_id_mes THEN ps.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN ps.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN dps.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN dps.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN dps.id_administracion IN (0,1,2)
	 END AND
         ps.estado=1
      GROUP BY
         fs.id_funcionario
      UNION
      -- BONIFICACIONES Y GRATIFICACIONES [133]
      SELECT
         fb.id_funcionario   
      FROM
         salarios.detalles_planillas_bonificaciones dpb
         LEFT JOIN salarios.planillas_bonificaciones pb ON pb.id_planilla_bonificacion=dpb.id_planilla_bonificacion
         LEFT JOIN salarios.funcionarios_bonificaciones fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
      WHERE
         pb.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND   
         CASE
            WHEN 0<in_id_mes THEN pb.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pb.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN dpb.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN dpb.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN dpb.id_administracion IN (0,1,2)
	 END AND
         pb.estado=1
      GROUP BY
         fb.id_funcionario
      UNION
      -- GRATIFICACION GRADO ACADEMICO [133] salarios.planilla_profesionales
      SELECT
         fp.id_funcionario   
      FROM
         salarios.detalle_planillas_profesionales dpp
         LEFT JOIN salarios.planilla_profesionales pp ON pp.id_planilla_profesional=dpp.id_planilla_profesional
         LEFT JOIN salarios.funcionarios_profesionales fp ON fp.id_funcionario_profesional=dpp.id_funcionario_profesional
      WHERE
         pp.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND   
         CASE
            WHEN 0<in_id_mes THEN pp.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pp.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN dpp.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN dpp.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN dpp.id_administracion IN (0,1,2)
	 END AND
         pp.estado=1
      GROUP BY
         fp.id_funcionario
      UNION
      -- GRATIFICACION ANTIGUEDAD [133]
      SELECT
         dpa.id_funcionario   
      FROM
         salarios.detalle_planilla_antiguedad dpa
         LEFT JOIN salarios.planillas_antiguedad pa ON pa.id_planilla_antiguedad=dpa.id_planilla_antiguedad
      WHERE
         pa.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND
         CASE
            WHEN 0<in_id_mes THEN pa.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pa.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN dpa.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN dpa.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN dpa.id_administracion IN (0,1,2)
	 END AND
         pa.estado=1
      GROUP BY
         dpa.id_funcionario
      UNION
      -- GRATIFICACION OCASIONAL [133]
      SELECT
         dpgo.id_funcionario   
      FROM
         salarios.detalle_planilla_gratificacion_ocacional dpgo
         LEFT JOIN salarios.planilla_gratificacion_ocacional pgo ON pgo.id_planilla_gratificacion_ocacional=dpgo.id_planilla_gratificacion_ocacional
      WHERE
         pgo.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND
         CASE
            WHEN 0<in_id_mes THEN pgo.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pgo.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN dpgo.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN dpgo.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN dpgo.id_administracion IN (0,1,2)
	 END AND
         pgo.estado=1
      GROUP BY
         dpgo.id_funcionario   
      UNION
      -- GRATIFICACION POR SERVICIOS DEL PERSONAL [137]
      SELECT
         dpge.id_funcionario   
      FROM
         salarios.detalle_planilla_gratificacion_especial dpge
         LEFT JOIN salarios.planilla_gratificacion_especial pge ON pge.id_planilla_gratificacion=dpge.id_planilla_gratificacion
      WHERE
         pge.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND   
         CASE
            WHEN 0<in_id_mes THEN pge.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pge.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN dpge.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN dpge.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN dpge.id_administracion IN (0,1,2)
	 END AND
         pge.estado=1
      GROUP BY
         dpge.id_funcionario   
      UNION
      -- OTROS PAGOS DEL PERSONAL [199]
      SELECT
         pdsd.id_funcionario   
      FROM
         salarios.planilla_diferencia_salarial_detalle pdsd
         LEFT JOIN salarios.planilla_diferencia_salarial pds ON pds.id_planilla_diferencia_salarial=pdsd.id_planilla_diferencia_salarial
      WHERE
         pds.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND   
         CASE
            WHEN 0<in_id_mes THEN pds.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pds.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN pdsd.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN pdsd.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN pdsd.id_administracion IN (0,1,2)
	 END AND
         pds.estado=1
      GROUP BY
         pdsd.id_funcionario   
      UNION
      -- OTRAS TRANSFERENCIAS CORRIENTES [849] 
      SELECT
         potcd.id_funcionario   
      FROM
         salarios.planillas_otras_transferencias_ctes_detalles potcd
         LEFT JOIN salarios.planillas_otras_transferencias_ctes potc ON potc.id_planilla_otra_transferencia_cte=potcd.id_planilla_otra_transferencia_cte
      WHERE
         potc.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 1=in_tipo_funcionario THEN TRUE
         END AND
         CASE
            WHEN 0<in_id_mes THEN potc.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN potc.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN potcd.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN potcd.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN potcd.id_administracion IN (0,1,2)
	 END AND
         potc.estado=1
      GROUP BY
         potcd.id_funcionario
      UNION
      -- CONTRATADOS
      -- SALARIOS [141-144-145]
      SELECT
         psd.id_funcionario
      FROM
         salarios_contratados.planillas_salarios_detalles psd
         LEFT JOIN salarios_contratados.planillas_salarios ps ON ps.id_planilla_salario=psd.id_planilla_salario
      WHERE
         ps.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 2=in_tipo_funcionario THEN TRUE
         END AND
         CASE
            WHEN 0<in_id_mes THEN ps.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN ps.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN ps.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN ps.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN ps.id_administracion IN (0,1,2)
	 END AND
         ps.id_estado=1
      GROUP BY
         psd.id_funcionario
      UNION
      -- REMUNERACION EXTRAORDINARIA [141-144-145]
      SELECT
         pred.id_funcionario
      FROM
         salarios_contratados.planillas_re_detalles pred
         LEFT JOIN salarios_contratados.planillas_re pre ON pre.id_planilla_re=pred.id_planilla_re
      WHERE
         pre.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 2=in_tipo_funcionario THEN TRUE
         END AND         
         CASE
            WHEN 0<in_id_mes THEN pre.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pre.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN pre.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN pre.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN pre.id_administracion IN (0,1,2)
	 END AND
         pre.estado=1
      GROUP BY
         pred.id_funcionario
      UNION
      -- REMUNERACION ADICIONAL [141-144-145]
      SELECT
         prad.id_funcionario
      FROM
         salarios_contratados.planillas_ra_detalles prad
         LEFT JOIN salarios_contratados.planillas_ra pra ON pra.id_planilla_ra=prad.id_planilla_ra
      WHERE
         pra.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 2=in_tipo_funcionario THEN TRUE
         END AND
         CASE
            WHEN 0<in_id_mes THEN pra.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pra.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN pra.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN pra.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN pra.id_administracion IN (0,1,2)
	 END AND
         pra.estado=1
      GROUP BY
         prad.id_funcionario
      UNION   
      -- SUBSIDIO FAMILIAR [141-144-145]
      SELECT
         fs.id_funcionario   
      FROM
         salarios_contratados.planillas_subsidios_detalles psd
         LEFT JOIN salarios_contratados.planillas_subsidios ps ON ps.id_planilla_subsidio=psd.id_planilla_subsidio
         LEFT JOIN salarios_contratados.funcionarios_subsidios fs ON fs.id_funcionario_subsidio=psd.id_funcionario_subsidio
      WHERE
         ps.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 2=in_tipo_funcionario THEN TRUE
         END AND
         CASE
            WHEN 0<in_id_mes THEN ps.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN ps.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN ps.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN ps.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN ps.id_administracion IN (0,1,2)
	 END AND
         ps.estado=1
      GROUP BY
         fs.id_funcionario   
      UNION
      -- GRATIFICACION OCASIONAL
      SELECT
         pgod.id_funcionario   
      FROM
         salarios_contratados.planillas_gratificaciones_ocasionales_detalles pgod
         LEFT JOIN salarios_contratados.planillas_gratificaciones_ocasionales pgo ON pgo.id_planilla_gratificacion_ocasional=pgod.id_planilla_gratificacion_ocasional
         --LEFT JOIN salarios_contratados.funcionarios_subsidios fs ON fs.id_funcionario_subsidio=psd.id_funcionario_subsidio
      WHERE
         pgo.gestion=in_gestion AND
         CASE 
            WHEN 0=in_tipo_funcionario OR 2=in_tipo_funcionario THEN TRUE
         END AND
         CASE
            WHEN 0<in_id_mes THEN pgo.id_mes=in_id_mes
            WHEN 0=in_id_mes THEN pgo.id_mes>0
         END AND
         CASE 
	    WHEN 1=in_id_administracion THEN pgo.id_administracion IN (0,1) --in_id_administracion
            WHEN 2=in_id_administracion THEN pgo.id_administracion IN (0,2)
            WHEN 3=in_id_administracion THEN pgo.id_administracion IN (0,1,2)
	 END AND
         pgo.estado=1
      GROUP BY
         pgod.id_funcionario
   ) fun;
   END;
]]></definition>
</function>

<function name="obtener_importe"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric"/>
	</return-type>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario_categoria">
		<type name="integer"/>
	</parameter>
	<parameter name="in_tipo">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vimporte numeric(12,2);
BEGIN
/*
  * Funcion para obtener importe que percibe un funcionario en concepto de sueldo asignado en un mes y gestion dado
  * Fecha: 2012-05-02
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_funcionario_categoria, identificador de categoria asignada al funcionario
  *	       in_tipo,  1=importe actual; 2=importe anterior 
  * 
  * Descripcion:  Obtener el importe asignado al funcionario 
  * ------------  
  */
  IF (in_tipo = 1) THEN
     SELECT INTO vimporte importe FROM salarios.funcionarios_categorias fc
     INNER JOIN salarios.detalles_categorias dc ON fc.id_detalle_categoria = dc.id_detalle_categoria
     INNER JOIN salarios.categorias c ON dc.id_categoria = c.id_categoria AND c.gestion = in_gestion
     INNER JOIN salarios.categoria_importe_mensual im ON c.id_categoria = im.id_categoria AND im.id_mes = in_id_mes
     WHERE id_funcionario_categoria = in_id_funcionario_categoria
     LIMIT 1;
  ELSE
     IF in_id_mes = 1 THEN
	     SELECT INTO vimporte importe_anterior FROM salarios.funcionarios_categorias fc
	     INNER JOIN salarios.detalles_categorias dc ON fc.id_detalle_categoria = dc.id_detalle_categoria
	     INNER JOIN salarios.categorias c ON dc.id_categoria = c.id_categoria AND c.gestion = in_gestion-1
	     INNER JOIN salarios.categoria_importe_mensual im ON c.id_categoria = im.id_categoria AND im.id_mes = 12
	     WHERE id_funcionario_categoria = in_id_funcionario_categoria
	     LIMIT 1;
     ELSE
	     SELECT INTO vimporte importe_anterior FROM salarios.funcionarios_categorias fc
	     INNER JOIN salarios.detalles_categorias dc ON fc.id_detalle_categoria = dc.id_detalle_categoria
	     INNER JOIN salarios.categorias c ON dc.id_categoria = c.id_categoria AND c.gestion = in_gestion
	     INNER JOIN salarios.categoria_importe_mensual im ON c.id_categoria = im.id_categoria AND im.id_mes = in_id_mes-1
	     WHERE id_funcionario_categoria = in_id_funcionario_categoria
	     LIMIT 1;
     END IF;
  END IF;
  return vimporte;
END;
]]></definition>
</function>

<function name="obtener_importe_gasto_representacion"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    aux_importe numeric(12,2);

BEGIN
  /*
  * Funcion para calcular el importe por gasto de represenacion del funcionario 
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario el identificador del funcionario
  *            in_id_mes
  *            in_gestion
  */

  SELECT INTO aux_importe cimgr.importe 
  FROM salarios.funcionarios_representaciones fgr 
  INNER JOIN salarios.detalles_categorias dcgr 
	ON fgr.id_detalle_categoria = dcgr.id_detalle_categoria 
  INNER JOIN salarios.categorias cgr 
	ON cgr.id_categoria = dcgr.id_categoria 
	AND cgr.gestion = in_gestion
  INNER JOIN salarios.categoria_importe_mensual cimgr 
	ON cimgr.id_categoria = cgr.id_categoria 
	AND cimgr.id_mes = in_id_mes
  WHERE fgr.estado AND fgr.hasta is null AND fgr.id_funcionario = in_id_funcionario LIMIT 1;

  IF aux_importe IS NULL THEN
	aux_importe := 0;
  END IF;

  return aux_importe;
END;
]]></definition>
</function>

<function name="obtener_monto_antiguedad"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vmonto numeric(12,2);
    aantig_10_15 numeric;
    aantig_16_20 numeric;
    aantig_21_25 numeric;
    aantig_26_30 numeric;
    aantig_31 numeric;
    aux_antiguedad numeric;
BEGIN
  /*
  * Funcion para calcular el monto de antiguedad del funcionario
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario el identificador del funcionario
  *            in_id_mes
  *            in_gestion
  */
  --Se obtiene las constantes para aplicar la formula
  SELECT INTO aantig_10_15, aantig_16_20, aantig_21_25, aantig_26_30, aantig_31 antig_10_15, antig_16_20, antig_21_25, antig_26_30, antig_31
  FROM parametros WHERE estado LIMIT 1;  

  aux_antiguedad := funcion_calcular_antiguedad(in_id_funcionario, control.funcion_ultimo_dia_mes(in_id_mes, in_gestion));

  vmonto = CASE
            WHEN aux_antiguedad >= 10.0 AND aux_antiguedad < 16.0 THEN aantig_10_15
            WHEN aux_antiguedad >= 16.0 AND aux_antiguedad < 21.0 THEN aantig_16_20
            WHEN aux_antiguedad >= 21.0 AND aux_antiguedad < 26.0 THEN aantig_21_25
            WHEN aux_antiguedad >= 26.0 AND aux_antiguedad < 31.0 THEN aantig_26_30
            WHEN aux_antiguedad >= 31.0 THEN aantig_31
            ELSE 0::numeric
          END;
  return vmonto;
END;
]]></definition>
</function>

<function name="obtener_monto_antiguedad_2"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric"/>
	</return-type>
	<parameter name="in_antiguedad">
		<type name="double precision"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vmonto numeric(12,2);
    aantig_10_15 numeric;
    aantig_16_20 numeric;
    aantig_21_25 numeric;
    aantig_26_30 numeric;
    aantig_31 numeric;
    aux_antiguedad numeric;
BEGIN
  /*
  * Funcion para calcular el monto de antiguedad a partir de su antiguedad en año
  * Fecha: 2012-07-05
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_antiguedad  antiguedad expresada en año
  */
  --Se obtiene las constantes para aplicar la formula
  SELECT INTO aantig_10_15, aantig_16_20, aantig_21_25, aantig_26_30, aantig_31 antig_10_15, antig_16_20, antig_21_25, antig_26_30, antig_31
  FROM parametros WHERE estado LIMIT 1;  

  aux_antiguedad := in_antiguedad;

  vmonto = CASE
            WHEN aux_antiguedad >= 10.0 AND aux_antiguedad < 16.0 THEN aantig_10_15
            WHEN aux_antiguedad >= 16.0 AND aux_antiguedad < 21.0 THEN aantig_16_20
            WHEN aux_antiguedad >= 21.0 AND aux_antiguedad < 26.0 THEN aantig_21_25
            WHEN aux_antiguedad >= 26.0 AND aux_antiguedad < 31.0 THEN aantig_26_30
            WHEN aux_antiguedad >= 31.0 THEN aantig_31
            ELSE 0::numeric
          END;
  return vmonto;
END;
]]></definition>
</function>

<function name="obtener_monto_gratificacion_especial"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vmonto numeric(12,2);
    aux_sueldo_presupuestado numeric;
    porcentaje numeric;
BEGIN
  /*
  * Funcion para calcular el monto de gratificacion especial del funcionario 
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario el identificador del funcionario
  *            in_id_mes
  *            in_gestion
  */
  --Se obtiene el porcentaje de pago de la tabla de parametros
  SELECT INTO porcentaje pago_especial
  FROM parametros WHERE estado LIMIT 1;  

  aux_sueldo_presupuestado := 0;
  --Verificar si es funcionario superior
  IF (salarios.es_funcionario_superior_activo(in_id_funcionario, in_id_mes, in_gestion)) THEN
      --Es funcionario superior entonces obtengo el importe de la categoria asignada
	SELECT INTO aux_sueldo_presupuestado  importe FROM salarios.funcionarios_superiores fs
	INNER JOIN salarios.categoria_importe_mensual c  ON fs.id_categoria = c.id_categoria
	WHERE gestion = in_gestion AND id_mes = in_id_mes AND id_funcionario = in_id_funcionario 
	-- SE AGREGO 19-09-2013
	AND (hasta is null OR (hasta>=('01-'||in_id_mes::text||'-'||in_gestion::text)::date AND hasta<=((date_trunc('month', ('01-'||in_id_mes::text||'-'||in_gestion::text)::date) + interval '1 month') - interval '1 day')::date)) 
	LIMIT 1;
  ELSE
      --No es funcionario superior entonces utilizo el importe de su categoria
	SELECT INTO aux_sueldo_presupuestado  importe  FROM salarios.funcionarios_categorias f
	INNER JOIN salarios.detalles_categorias dc ON f.id_detalle_categoria = dc.id_detalle_categoria
	INNER JOIN salarios.categoria_importe_mensual ci ON dc.id_categoria = ci.id_categoria
	INNER JOIN salarios.categorias c ON ci.id_categoria = c.id_categoria
	WHERE ci.id_mes = in_id_mes AND c.gestion = in_gestion AND f.id_funcionario = in_id_funcionario AND f.hasta isnull LIMIT 1;
  END IF;

  vmonto:=aux_sueldo_presupuestado*porcentaje/100;

  return vmonto;
END;
]]></definition>
</function>

<function name="obtener_monto_ra"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_planilla_ra">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vmonto numeric(12,2);
    vexiste boolean;
    aux_constante1 numeric;
    aux_constante2 numeric;
    aux_constante3 numeric;
    aux_sueldo_presupuestado numeric;
BEGIN
  /*
  * Funcion para calcular el monto_ra del funcionario que sera multiplicado por su horas
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario el identificador del funcionario
  *            in_id_mes
  *            in_gestion
  *            in_id_planilla_ra identificador de la planilla para saber el identificador del parametro de calculo
  *
  * Fecha ultima modificación: 2015-02-05
  * Motivo: Ajuste de acuerdo al Decreto Reglamentario 2015 Nº 2929/2015 de fecha 08/01/2015
  * Modificado por: Lic. José Cabrera
  *                 Lic. Gustavo Alcaraz
  */
  --Se obtiene las constantes para aplicar la formula
  SELECT INTO aux_constante1, aux_constante2, aux_constante3 constante_1, constante_2, constante_3
  FROM salarios.parametros_calculo_re_ra A
  INNER JOIN salarios.planillas_ra B ON A.id_parametro_calculo_re_ra = B.id_parametro_calculo_re_ra 
  WHERE id_planilla_ra = in_id_planilla_ra;  

  aux_sueldo_presupuestado := 0;
  --  Comentado en fecha 2015-02-05
  --Verificar si es funcionario superior
  IF (salarios.es_funcionario_superior_activo(in_id_funcionario, in_id_mes, in_gestion)) THEN
      --Es funcionario superior entonces obtengo el importe de la categoria asignada
	SELECT INTO aux_sueldo_presupuestado  importe FROM salarios.funcionarios_superiores fs
	INNER JOIN salarios.categoria_importe_mensual c  ON fs.id_categoria = c.id_categoria
	WHERE gestion = in_gestion AND id_mes = in_id_mes AND id_funcionario = in_id_funcionario 
	-- SE AGREGO 19-09-2013
	AND (hasta is null OR (hasta>=('01-'||in_id_mes::text||'-'||in_gestion::text)::date AND hasta<=((date_trunc('month', ('01-'||in_id_mes::text||'-'||in_gestion::text)::date) + interval '1 month') - interval '1 day')::date)) 
	LIMIT 1;
  ELSE
      --No es funcionario superior entonces utilizo el importe de su categoria
	SELECT INTO aux_sueldo_presupuestado  importe  FROM salarios.funcionarios_categorias f
	INNER JOIN salarios.detalles_categorias dc ON f.id_detalle_categoria = dc.id_detalle_categoria
	INNER JOIN salarios.categoria_importe_mensual ci ON dc.id_categoria = ci.id_categoria
	INNER JOIN salarios.categorias c ON ci.id_categoria = c.id_categoria
	WHERE ci.id_mes = in_id_mes AND c.gestion = in_gestion AND f.id_funcionario = in_id_funcionario 
	-- AND (in_id_mes BETWEEN  extract(MONTH from f.desde) and extract(MONTH from f.hasta-1) OR f.hasta is null) LIMIT 1;	
	AND (f.hasta is null OR in_id_mes BETWEEN  extract(MONTH from f.desde) and extract(MONTH from f.hasta-1)) 
	-- SE AGREGO EL ORDER BY PARA QUE OBTENGA LA ULTIMA CATEGORIA
	ORDER BY id_funcionario_categoria DESC
	LIMIT 1;
  END IF;
  /*
  --Agregado --->  
    SELECT INTO aux_sueldo_presupuestado  importe  FROM salarios.funcionarios_importes
	WHERE id_funcionario = in_id_funcionario LIMIT 1;
  -- <---*/
  vmonto:=(aux_sueldo_presupuestado+aux_constante1*aux_sueldo_presupuestado)*aux_constante2/aux_constante3;

  return COALESCE(vmonto,0);
END;
]]></definition>
</function>

<function name="obtener_monto_re"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_planilla_re">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vmonto numeric(12,2);
    vexiste boolean;
    aux_constante1 numeric;
    aux_constante2 numeric;
    aux_constante3 numeric;
    aux_sueldo_presupuestado numeric;
BEGIN
  /*
  * Funcion para calcular el monto_re del funcionario que sera multiplicado por su horas
  * Fecha de creación: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario el identificador del funcionario
  *            in_id_mes
  *            in_gestion
  *            in_id_planilla_re identificador de la planilla para saber el identificador del parametro de calculo
  *
  * Fecha ultima modificación: 2015-02-05
  * Motivo: Ajuste de acuerdo al Decreto Reglamentario 2015 Nº 2929/2015 de fecha 08/01/2015
  * Modificado por: Lic. José Cabrera
  *                 Lic. Gustavo Alcaraz
  */
  --Se obtiene las constantes para aplicar la formula
  SELECT INTO aux_constante1, aux_constante2, aux_constante3 constante_1, constante_2, constante_3
  FROM salarios.parametros_calculo_re_ra A
  INNER JOIN salarios.planillas_re B ON A.id_parametro_calculo_re_ra = B.id_parametro_calculo_re_ra 
  WHERE id_planilla_re = in_id_planilla_re;  
  
  aux_sueldo_presupuestado := 0;
  -- Comentado en fecha 2015-02-05
  --Verificar si es funcionario superior
  IF (salarios.es_funcionario_superior_activo(in_id_funcionario, in_id_mes, in_gestion)) THEN
      --Es funcionario superior entonces obtengo el importe de la cateConstanciasgoria asignada
	SELECT INTO aux_sueldo_presupuestado  importe FROM salarios.funcionarios_superiores fs
	INNER JOIN salarios.categoria_importe_mensual c  ON fs.id_categoria = c.id_categoria
	WHERE gestion = in_gestion AND id_mes = in_id_mes AND id_funcionario = in_id_funcionario 
	-- SE AGREGO 19-09-2013
	AND (hasta is null OR (hasta>=('01-'||in_id_mes::text||'-'||in_gestion::text)::date AND hasta<=((date_trunc('month', ('01-'||in_id_mes::text||'-'||in_gestion::text)::date) + interval '1 month') - interval '1 day')::date)) 
	LIMIT 1;
  ELSE
      --No es funcionario superior entonces utilizo el importe de su categoria
	SELECT INTO aux_sueldo_presupuestado  importe  FROM salarios.funcionarios_categorias f
	INNER JOIN salarios.detalles_categorias dc ON f.id_detalle_categoria = dc.id_detalle_categoria
	INNER JOIN salarios.categoria_importe_mensual ci ON dc.id_categoria = ci.id_categoria
	INNER JOIN salarios.categorias c ON ci.id_categoria = c.id_categoria
	WHERE ci.id_mes = in_id_mes AND c.gestion = in_gestion AND f.id_funcionario = in_id_funcionario 
	-- AND (in_id_mes BETWEEN  extract(MONTH from f.desde) and extract(MONTH from f.hasta-1) OR f.hasta is null) LIMIT 1;
	AND (f.hasta is null OR in_id_mes BETWEEN  extract(MONTH from f.desde) and extract(MONTH from f.hasta-1)) 
	-- SE AGREGO EL ORDER BY PARA QUE OBTENGA LA ULTIMA CATEGORIA
	ORDER BY id_funcionario_categoria DESC
	LIMIT 1;
  END IF;
  /*
  --Agregado --->  
    SELECT INTO aux_sueldo_presupuestado  importe  FROM salarios.funcionarios_importes
	WHERE id_funcionario = in_id_funcionario LIMIT 1;
  -- <---*/	
  vmonto:=(aux_sueldo_presupuestado+aux_constante1*aux_sueldo_presupuestado)*aux_constante2/aux_constante3;

  return COALESCE(vmonto,0);
END;
]]></definition>
</function>

<function name="obtener_multa"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vmulta numeric(12,2);
BEGIN
  /*
  * Funcion para obtener el monto de multa de un funcionario en un mes en una gestion
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario, el identificador del funcionario
  *            in_id_mes, mes de aplicacion de la multa
  *            in_gestion, año de aplicacion de la multa
  */
  
	SELECT INTO vmulta monto_multa 
	FROM salarios.multas_aplicadas ma 
	INNER JOIN salarios.detalles_multas_aplicadas dpm ON ma.id_multa_aplicada = dpm.id_multa_aplicada
	WHERE ma.id_mes = in_id_mes AND ma.gestion = in_gestion  AND dpm.id_funcionario = in_id_funcionario;

	IF vmulta isnull THEN
	   vmulta := 0;
	END IF; 
  
  return vmulta;
END;
]]></definition>
</function>

<function name="obtener_oficina"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="integer"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    vid_oficina integer;
BEGIN
  /*
  * Funcion para obtener el id de oficina donde esta presupuestariamente un funcionario en un mes en una gestion
  * Fecha: 2012-05-04
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario, el identificador del funcionario
  *            in_id_mes, mes de aplicacion de la multa
  *            in_gestion, año de aplicacion de la multa
  */
  
	SELECT INTO vid_oficina o.id_oficina 
	FROM salarios.funcionarios_categorias fc 
	INNER JOIN legajos.oficinas o 
	        ON o.id_oficina = fc.id_oficina 
	        AND o.gestion = in_gestion
	WHERE o.gestion = in_gestion  
	  AND fc.id_funcionario = in_id_funcionario 
	  AND fc.estado 
	LIMIT 1;

	IF vid_oficina isnull THEN
	   vid_oficina := 0;
	END IF; 
  
  return vid_oficina;
END;
]]></definition>
</function>

<function name="obtener_sueldo_asignado"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    aux_sueldo_presupuestado numeric(12,2);

BEGIN
  /*
  * Funcion para calcular el monto del sueldo presupuestado del funcionario 
  * Fecha: 2012-04-14
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario el identificador del funcionario
  *            in_id_mes
  *            in_gestion
  */



  aux_sueldo_presupuestado := 0;
  --Verificar si es funcionario superior
  IF (salarios.es_funcionario_superior_activo(in_id_funcionario, in_id_mes, in_gestion)) THEN
      --Es funcionario superior entonces obtengo el importe de la categoria asignada
	SELECT INTO aux_sueldo_presupuestado  importe FROM salarios.funcionarios_superiores fs
	INNER JOIN salarios.categoria_importe_mensual c  ON fs.id_categoria = c.id_categoria
	WHERE gestion = in_gestion AND id_mes = in_id_mes AND id_funcionario = in_id_funcionario 
	AND (hasta is null OR (hasta>=('01-'||in_id_mes::text||'-'||in_gestion::text)::date AND hasta<=((date_trunc('month', ('01-'||in_id_mes::text||'-'||in_gestion::text)::date) + interval '1 month') - interval '1 day')::date)) 
	LIMIT 1;
  ELSE
      --No es funcionario superior entonces utilizo el importe de su categoria
	SELECT INTO aux_sueldo_presupuestado  importe  FROM salarios.funcionarios_categorias f
	INNER JOIN salarios.detalles_categorias dc ON f.id_detalle_categoria = dc.id_detalle_categoria
	INNER JOIN salarios.categoria_importe_mensual ci ON dc.id_categoria = ci.id_categoria
	INNER JOIN salarios.categorias c ON ci.id_categoria = c.id_categoria
	WHERE ci.id_mes = in_id_mes AND c.gestion = in_gestion AND f.id_funcionario = in_id_funcionario 
	AND (f.hasta is null)-- OR (f.hasta>=('01-'||in_id_mes::text||'-'||in_gestion::text)::date AND f.hasta<=((date_trunc('month', ('01-'||in_id_mes::text||'-'||in_gestion::text)::date) + interval '1 month') - interval '1 day')::date))  
	LIMIT 1;
  END IF;

  return aux_sueldo_presupuestado;
END;
]]></definition>
</function>

<function name="obtener_sueldo_asignado_normal"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="numeric"/>
	</return-type>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
    aux_sueldo_presupuestado numeric(12,2);

BEGIN
  /*
  * Funcion para calcular el monto del sueldo presupuestado del funcionario 
  * Fecha: 2012-05-02
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_funcionario el identificador del funcionario
  *            in_id_mes
  *            in_gestion
  */

	SELECT INTO aux_sueldo_presupuestado  importe  FROM salarios.funcionarios_categorias f
	INNER JOIN salarios.detalles_categorias dc ON f.id_detalle_categoria = dc.id_detalle_categoria
	INNER JOIN salarios.categoria_importe_mensual ci ON dc.id_categoria = ci.id_categoria
	INNER JOIN salarios.categorias c ON ci.id_categoria = c.id_categoria
	WHERE ci.id_mes = in_id_mes 
	  AND c.gestion = in_gestion 
	  AND f.id_funcionario = in_id_funcionario 
	  AND f.hasta isnull LIMIT 1;
	  
	IF aux_sueldo_presupuestado isnull THEN
		aux_sueldo_presupuestado := 0;
	END IF;

	return aux_sueldo_presupuestado;
END;
]]></definition>
</function>

<function name="pagos_realizados_gestion_x_meses_permanente"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="bigint"/>
	</parameter>
	<parameter name="id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="text"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="ene_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="ene_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="ene_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="feb_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="feb_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="feb_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="mar_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="mar_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="mar_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="abr_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="abr_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="abr_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="may_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="may_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="may_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="jun_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="jun_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="jun_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="jul_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="jul_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="jul_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="ago_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="ago_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="ago_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="set_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="set_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="set_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="oct_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="oct_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="oct_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="nov_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="nov_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="nov_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="dic_beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="dic_importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="dic_ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="beneficiario_total">
		<type name="bigint"/>
	</parameter>
	<parameter name="importe_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="ids_detalle_total">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="text"/>
	</parameter>
	<parameter name="in_mes" in="true">
		<type name="text"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener los pagos realizados a los funcionarios permanentes/comisionados agrupados por meses  
  * por administracion, gestion, id_oficina, concepto, objeto_gasto, orden e id_funcionario
  * Creado    : 2016-10-04 08:16:25
  * Modificado: 2016-10-04 12:00:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administracion del proceso		
  *            in_gestion           gestiones (Ej.: '2014,2015,2016,...') [uno o más gestiones]
  *            in_mes               meses (Ej.: '1,2,3,...,12') [Los meses pueden ser aleatorios, es decir, no correlativos] 
  * 	       in_id_funcionario    identifiacador de funcionarios separados por coma o ingresar '0' para todos los funcionarios	 
  * ----------------------------------------------------------------------  
  */
RETURN QUERY 
SELECT
   row_number() over() as id, 
   *,
   a.ene_beneficiario+a.feb_beneficiario+a.mar_beneficiario+a.abr_beneficiario+a.may_beneficiario+a.jun_beneficiario+
   a.jul_beneficiario+a.ago_beneficiario+a.set_beneficiario+a.oct_beneficiario+a.nov_beneficiario+a.dic_beneficiario as beneficiario_total,
   a.ene_importe+a.feb_importe+a.mar_importe+a.abr_importe+a.may_importe+a.jun_importe+
   a.jul_importe+a.ago_importe+a.set_importe+a.oct_importe+a.nov_importe+a.dic_importe as importe_total,
   a.ene_ids_detalle||','||a.feb_ids_detalle||','||a.mar_ids_detalle||','||a.abr_ids_detalle||','||a.may_ids_detalle||','||a.jun_ids_detalle||','||
   a.jul_ids_detalle||','||a.ago_ids_detalle||','||a.set_ids_detalle||','||a.oct_ids_detalle||','||a.nov_ids_detalle||','||a.dic_ids_detalle as ids_detalle_total 
FROM
   (
   SELECT 
      -- CATEGORIA
      (('{'||categoria||'}')::text[])[1]::int             as id_administracion,
      (('{'||categoria||'}')::text[])[2]::numeric         as gestion,
      (('{'||categoria||'}')::text[])[3]::int             as id_oficina,
      (('{'||categoria||'}')::text[])[4]::text            as objeto_gasto,
      (('{'||categoria||'}')::text[])[5]::text            as concepto,
      (('{'||categoria||'}')::text[])[6]::int             as orden,
      -- VALORES
      COALESCE((('{'||ENE||'}')::text[])[1]::bigint,0)                  as ene_beneficiario,
      COALESCE((('{'||ENE||'}')::text[])[2]::numeric(15,0),0)           as ene_importe,
      COALESCE(replace((('{'||ENE||'}')::text[])[3]::text,'|',','),'0') as ene_ids_detalle,
      COALESCE((('{'||FEB||'}')::text[])[1]::bigint,0)                  as feb_beneficiario,
      COALESCE((('{'||FEB||'}')::text[])[2]::numeric(15,0),0)           as feb_importe,
      COALESCE(replace((('{'||FEB||'}')::text[])[3]::text,'|',','),'0') as feb_ids_detalle,
      COALESCE((('{'||MAR||'}')::text[])[1]::bigint,0)                  as mar_beneficiario,
      COALESCE((('{'||MAR||'}')::text[])[2]::numeric(15,0),0)           as mar_importe,
      COALESCE(replace((('{'||MAR||'}')::text[])[3]::text,'|',','),'0') as mar_ids_detalle,
      COALESCE((('{'||ABR||'}')::text[])[1]::bigint,0)                  as abr_beneficiario,
      COALESCE((('{'||ABR||'}')::text[])[2]::numeric(15,0),0)           as abr_importe,
      COALESCE(replace((('{'||ABR||'}')::text[])[3]::text,'|',','),'0') as abr_ids_detalle,
      COALESCE((('{'||MAY||'}')::text[])[1]::bigint,0)                  as may_beneficiario,
      COALESCE((('{'||MAY||'}')::text[])[2]::numeric(15,0),0)           as may_importe,
      COALESCE(replace((('{'||MAY||'}')::text[])[3]::text,'|',','),'0') as may_ids_detalle,
      COALESCE((('{'||JUN||'}')::text[])[1]::bigint,0)                  as jun_beneficiario,
      COALESCE((('{'||JUN||'}')::text[])[2]::numeric(15,0),0)           as jun_importe,
      COALESCE(replace((('{'||JUN||'}')::text[])[3]::text,'|',','),'0') as jun_ids_detalle,
      COALESCE((('{'||JUL||'}')::text[])[1]::bigint,0)                  as jul_beneficiario,
      COALESCE((('{'||JUL||'}')::text[])[2]::numeric(15,0),0)           as jul_importe,
      COALESCE(replace((('{'||JUL||'}')::text[])[3]::text,'|',','),'0') as jul_ids_detalle,
      COALESCE((('{'||AGO||'}')::text[])[1]::bigint,0)                  as ago_beneficiario,
      COALESCE((('{'||AGO||'}')::text[])[2]::numeric(15,0),0)           as ago_importe,
      COALESCE(replace((('{'||AGO||'}')::text[])[3]::text,'|',','),'0') as ago_ids_detalle,
      COALESCE((('{'||SET||'}')::text[])[1]::bigint,0)                  as set_beneficiario,
      COALESCE((('{'||SET||'}')::text[])[2]::numeric(15,0),0)           as set_importe,
      COALESCE(replace((('{'||SET||'}')::text[])[3]::text,'|',','),'0') as set_ids_detalle,
      COALESCE((('{'||OCT||'}')::text[])[1]::bigint,0)                  as oct_beneficiario,
      COALESCE((('{'||OCT||'}')::text[])[2]::numeric(15,0),0)           as oct_importe,
      COALESCE(replace((('{'||OCT||'}')::text[])[3]::text,'|',','),'0') as oct_ids_detalle,
      COALESCE((('{'||NOV||'}')::text[])[1]::bigint,0)                  as nov_beneficiario,
      COALESCE((('{'||NOV||'}')::text[])[2]::numeric(15,0),0)           as nov_importe,
      COALESCE(replace((('{'||NOV||'}')::text[])[3]::text,'|',','),'0') as nov_ids_detalle,
      COALESCE((('{'||DIC||'}')::text[])[1]::bigint,0)                  as dic_beneficiario,
      COALESCE((('{'||DIC||'}')::text[])[2]::numeric(15,0),0)           as dic_importe,
      COALESCE(replace((('{'||DIC||'}')::text[])[3]::text,'|',','),'0') as dic_ids_detalle
   FROM 
      CROSSTAB( 
         replace(replace(replace(replace(
         $$ 
         SELECT 
            id_administracion||','||gestion||','||id_oficina||','||objeto_gasto||','||concepto||','||orden as categoria,
            id_mes,
            beneficiario||','||importe||','||replace(ids_detalle,',','|') as valor 
         FROM
            salarios.pagos_realizados_permanente(in_id_administracion, 'in_gestion', 'in_mes', 'in_id_funcionario')
         ORDER BY
            id_administracion||','||gestion||','||to_char(id_oficina,'000000009')||','||objeto_gasto||','||concepto||','||to_char(orden,'0009'),
            id_mes
         $$,'in_id_administracion',in_id_administracion::text),'in_gestion',in_gestion),'in_mes',in_mes),'in_id_funcionario',in_id_funcionario),
         $$ 
         SELECT 
            m 
         FROM 
            generate_series(1,12) m 
         $$
      ) AS (
        categoria text, 
        ENE text, 
        FEB text, 
        MAR text, 
        ABR text, 
        MAY text, 
        JUN text, 
        JUL text, 
        AGO text, 
        SET text,
        OCT text,
        NOV text,
        DIC text
   )
   ) a;
END;
]]></definition>
</function>

<function name="pagos_realizados_permanente"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="ids_detalle">
		<type name="text"/>
	</parameter>
	<parameter name="beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="importe">
		<type name="numeric"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="text"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="text"/>
	</parameter>
	<parameter name="in_mes" in="true">
		<type name="text"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener los pagos realizados a los funcionarios permanentes/comisionados por administracion, gestion, mes e id_funcionario
  * Creado    : 2016-09-26 07:59:25
  * Modificado: 2016-09-26 12:00:00
  * Modificado: 2016-09-30 08:57:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administracion del proceso		
  *            in_gestion           gestiones (Ej.: '2014,2015,2016,...') [uno o más gestiones]
  *            in_mes               meses (Ej.: '1,2,3,...,12') [Los meses pueden ser aleatorios, es decir, no correlativos] 
  * 	       in_id_funcionario    identifiacador de funcionarios separados por coma o ingresar '0' para todos los funcionarios	 
  * ------------  
  */
RETURN QUERY 
-- =======================================================================
-- SALARIOS
-- =======================================================================
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '111'::text as objeto_gasto,
   'SALARIOS'::text as concepto,
    1 as orden 
FROM
   (
      SELECT 
         ps.id_mes,
         ps.gestion,
         dps.id_administracion,
         dps.id_oficina,
         ARRAY_AGG(MONTO_PRESUPUESTADO),
         array_to_string(array_agg(dps.id_detalle_planilla_salario),',') as ids_detalle,
         (CASE WHEN COUNT(*)>1 THEN MAX(dps.monto_presupuestado) ELSE sum(dps.monto_presupuestado) END)::numeric(12,0) as monto
      FROM 
         salarios.detalles_planillas_salarios dps 
         LEFT JOIN salarios.planillas_salarios ps ON ps.id_planilla_salario=dps.id_planilla_salario
      WHERE
         ps.id_estado=1 AND
         ps.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         ps.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         ps.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         ps.id_mes,
         ps.gestion,
         dps.id_funcionario,
         dps.id_administracion,
         dps.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina
)
UNION ALL
-- =======================================================================
-- GASTO REPRESENTACION
-- =======================================================================
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '113'::text as objeto_gasto,
   'GASTO REPRESENTACION'::text as concepto,
    2 as orden 
FROM
   (
      SELECT 
         pgr.id_mes,
         pgr.gestion,
         pgrd.id_administracion,
         pgrd.id_oficina,
         array_agg(fr.id_funcionario),
         array_to_string(array_agg(pgrd.id_planilla_gasto_representacion_detalle),',') as ids_detalle,
         (CASE WHEN COUNT(*)>1 THEN MAX(pgrd.presupuestado_parcial) ELSE sum(pgrd.presupuestado_parcial) END)::numeric(12,0) as monto
      FROM 
         salarios.planilla_gasto_representacion_detalle pgrd 
         LEFT JOIN salarios.planilla_gasto_representacion pgr ON pgr.id_planilla_gasto_representacion=pgrd.id_planilla_gasto_representacion
         LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
      WHERE
         pgr.estado=1 AND
         pgr.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pgr.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pgr.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN fr.id_funcionario>0 ELSE fr.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pgr.id_mes,
         pgr.gestion,
         fr.id_funcionario,
         pgrd.id_administracion,
         pgrd.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- RE
-- =======================================================================
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '123'::text as objeto_gasto,
   'REMUNERACION EXTRAORDINARIA (RE)'::text as concepto,
    3 as orden 
FROM
   (
      SELECT 
         pre.id_mes,
         pre.gestion,
         dpre.id_administracion,
         dpre.id_oficina,
         array_agg(dpre.id_funcionario),
         array_to_string(array_agg(dpre.id_detalle_planilla_re),',') as ids_detalle,
         (SUM(dpre.monto)::numeric(12,0)) as monto
      FROM 
         salarios.detalles_planillas_re dpre 
         LEFT JOIN salarios.planillas_re pre ON pre.id_planilla_re=dpre.id_planilla_re
      WHERE
         pre.estado=1 AND
         pre.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pre.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pre.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dpre.id_funcionario>0 ELSE dpre.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pre.id_mes,
         pre.gestion,
         dpre.id_funcionario,
         dpre.id_administracion,
         dpre.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- RA
-- =======================================================================
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '125'::text as objeto_gasto,
   'REMUNERACION ADICIONAL (RA)'::text as concepto,
    4 as orden 
FROM
   (
      SELECT 
         pra.id_mes,
         pra.gestion,
         dpra.id_administracion,
         dpra.id_oficina,
         array_agg(dpra.id_funcionario),
         array_to_string(array_agg(dpra.id_detalle_planilla_ra),',') as ids_detalle,
         (SUM(dpra.monto)::numeric(12,0)) as monto
      FROM 
         salarios.detalles_planillas_ra dpra 
         LEFT JOIN salarios.planillas_ra pra ON pra.id_planilla_ra=dpra.id_planilla_ra
      WHERE
         pra.estado=1 AND
         pra.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pra.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pra.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dpra.id_funcionario>0 ELSE dpra.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pra.id_mes,
         pra.gestion,
         dpra.id_funcionario,
         dpra.id_administracion,
         dpra.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- SUBSIDIOS
-- =======================================================================
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '131'::text as objeto_gasto,
   a.concepto,
    5 as orden 
FROM
   (
      SELECT 
         ps.id_mes,
         ps.gestion,
         dps.id_administracion,
         dps.id_oficina,
         s.descripcion as concepto,
         array_agg(fs.id_funcionario),
         array_to_string(array_agg(dps.id_detalle_planilla_subsidio),',') as ids_detalle,
         (SUM(dps.importe_monto)::numeric(12,0)) as monto
      FROM 
         salarios.detalles_planillas_subsidios dps 
         LEFT JOIN salarios.planillas_subsidios ps ON ps.id_planilla_subsidio=dps.id_planilla_subsidio
         LEFT JOIN salarios.funcionarios_subsidios fs ON fs.id_funcionario_subsidio=dps.id_funcionario_subsidio
         LEFT JOIN salarios.subsidios s ON s.id_subsidio=fs.id_subsidio 
      WHERE
         ps.estado=1 AND
         ps.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         ps.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         ps.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         ps.id_mes,
         ps.gestion,
         fs.id_funcionario,
         dps.id_administracion,
         dps.id_oficina,
         s.descripcion
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   a.concepto)
UNION ALL
-- =======================================================================
-- GRADO ACADEMICO
-- ======================================================================= 
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '133'::text as objeto_gasto,
   'GRADO ACADEMICO'::text as concepto,
    6 as orden 
FROM
   (
      SELECT 
         pp.id_mes,
         pp.gestion,
         dpp.id_administracion,
         dpp.id_oficina,
         array_agg(fp.id_funcionario),
         array_to_string(array_agg(dpp.id_detalle_planilla_profesional),',') as ids_detalle,
         (SUM(dpp.importe_profesional)::numeric(12,0)) as monto
      FROM 
         salarios.detalle_planillas_profesionales dpp 
         LEFT JOIN salarios.planilla_profesionales pp ON pp.id_planilla_profesional=dpp.id_planilla_profesional
         LEFT JOIN salarios.funcionarios_profesionales fp ON fp.id_funcionario_profesional=dpp.id_funcionario_profesional
      WHERE
         pp.estado=1 AND
         pp.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pp.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pp.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pp.id_mes,
         pp.gestion,
         fp.id_funcionario,
         dpp.id_administracion,
         dpp.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina)
-- =======================================================================
-- ANTIGUEDAD
-- ======================================================================= 
UNION ALL
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '133'::text as objeto_gasto,
   'ANTIGUEDAD'::text as concepto,
    7 as orden 
FROM
   (
      SELECT 
         pa.id_mes,
         pa.gestion,
         dpa.id_administracion,
         dpa.id_oficina,
         array_agg(dpa.id_funcionario),
         array_to_string(array_agg(dpa.id_detalle_planilla_antiguedad),',') as ids_detalle,
         (SUM(dpa.importe_antiguedad)::numeric(12,0)) as monto
      FROM 
         salarios.detalle_planilla_antiguedad dpa 
         LEFT JOIN salarios.planillas_antiguedad pa ON pa.id_planilla_antiguedad=dpa.id_planilla_antiguedad
      WHERE
         pa.estado=1 AND
         pa.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pa.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pa.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dpa.id_funcionario>0 ELSE dpa.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pa.id_mes,
         pa.gestion,
         dpa.id_funcionario,
         dpa.id_administracion,
         dpa.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina)
 UNION ALL
-- =======================================================================
-- GRATIFICACION OCASIONAL
-- ======================================================================= 
 (SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '133'::text as objeto_gasto,
   'GRATIFICACION OCASIONAL'::text as concepto,
   8 as orden 
FROM
   (
      SELECT 
         pgo.id_mes,
         pgo.gestion,
         dpgo.id_administracion,
         dpgo.id_oficina,
         array_agg(dpgo.id_funcionario),
         array_to_string(array_agg(dpgo.id_detalle_planilla_gratificacion_ocacional),',') as ids_detalle,
         (SUM(dpgo.importe_gratificacion)::numeric(12,0)) as monto
      FROM 
         salarios.detalle_planilla_gratificacion_ocacional dpgo 
         LEFT JOIN salarios.planilla_gratificacion_ocacional pgo ON pgo.id_planilla_gratificacion_ocacional=dpgo.id_planilla_gratificacion_ocacional
      WHERE
         pgo.estado=1 AND
         pgo.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pgo.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pgo.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dpgo.id_funcionario>0 ELSE dpgo.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pgo.id_mes,
         pgo.gestion,
         dpgo.id_funcionario,
         dpgo.id_administracion,
         dpgo.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- BONIFICACIONES Y GRATIFICACIONES VARIAS 
-- ======================================================================= 
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '133'::text as objeto_gasto,
   trim(a.concepto) as concepto,
   9 as orden 
FROM
   (
      SELECT 
         pb.id_mes,
         pb.gestion,
         dpb.id_administracion,
         dpb.id_oficina,
         trim(b.descripcion) as concepto,
         array_agg(fb.id_funcionario),
         array_to_string(array_agg(dpb.id_detalle_planilla_bonificacion),',') as ids_detalle,
         (SUM(dpb.monto_total)::numeric(12,0)) as monto
      FROM 
         salarios.detalles_planillas_bonificaciones dpb 
         LEFT JOIN salarios.planillas_bonificaciones pb ON pb.id_planilla_bonificacion=dpb.id_planilla_bonificacion
         LEFT JOIN salarios.funcionarios_bonificaciones fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
         LEFT JOIN salarios.bonificaciones b ON b.id_bonificacion=fb.id_bonificacion
      WHERE
         pb.estado=1 AND
         pb.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pb.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pb.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pb.id_mes,
         pb.gestion,
         fb.id_funcionario,
         dpb.id_administracion,
         dpb.id_oficina,
         trim(b.descripcion)
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   trim(a.concepto))
UNION ALL
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '137'::text as objeto_gasto,
   'GRATIFICACION SERVICIOS ESPECIALES'::text as concepto,
   10 as orden 
FROM
   (
      SELECT 
         pge.id_mes,
         pge.gestion,
         dpge.id_administracion,
         dpge.id_oficina,
         array_agg(dpge.id_funcionario),
         array_to_string(array_agg(dpge.id_detalle_planilla_gratificacion),',') as ids_detalle,
         (SUM(dpge.importe_gratificacion)::numeric(12,0)) as monto
      FROM 
         salarios.detalle_planilla_gratificacion_especial dpge 
         LEFT JOIN salarios.planilla_gratificacion_especial pge ON pge.id_planilla_gratificacion=dpge.id_planilla_gratificacion
      WHERE
         pge.estado=1 AND
         pge.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pge.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pge.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dpge.id_funcionario>0 ELSE dpge.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END 
      GROUP BY
         pge.id_mes,
         pge.gestion,
         dpge.id_funcionario,
         dpge.id_administracion,
         dpge.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- DIFERENCIA SALARIAL
-- ======================================================================= 
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '199'::text as objeto_gasto,
   'DIFERENCIA SALARIAL'::text as concepto,
   11 as orden 
FROM
   (
      SELECT 
         pds1.id_mes,
         pds1.gestion,
         pdsd1.id_administracion,
         pdsd1.id_oficina,
         array_agg(fs.id_funcionario),
         array_to_string(array_agg(pdsd1.id_planilla_diferencia_salarial_detalle),',') as ids_detalle,
         (SUM(pdsd1.importe_monto_diferencia)::numeric(12,0)) as monto
      FROM 
         salarios.planilla_diferencia_salarial_detalle pdsd1 
         LEFT JOIN salarios.planilla_diferencia_salarial pds1 ON pds1.id_planilla_diferencia_salarial=pdsd1.id_planilla_diferencia_salarial
         INNER JOIN salarios.funcionarios_superiores fs ON fs.id_funcionario_superior=pdsd1.id_funcionario_superior
      WHERE
         pds1.estado=1 AND
         pds1.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pds1.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pds1.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END 
      GROUP BY
         pds1.id_mes,
         pds1.gestion,
         fs.id_funcionario,
         pdsd1.id_administracion,
         pdsd1.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- OTROS GASTOS DEL PERSONAL
-- ======================================================================= 
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '199'::text as objeto_gasto,
   'OTROS GASTOS DEL PERSONAL'::text as concepto,
   12 as orden 
FROM
   (
      SELECT 
         pds2.id_mes,
         pds2.gestion,
         pdsd2.id_administracion,
         pdsd2.id_oficina,
         array_agg(pdsd2.id_funcionario),
         array_to_string(array_agg(pdsd2.id_planilla_diferencia_salarial_detalle),',') as ids_detalle,
         (SUM(pdsd2.importe_monto_diferencia)::numeric(12,0)) as monto
      FROM 
         salarios.planilla_diferencia_salarial_detalle pdsd2 
         LEFT JOIN salarios.planilla_diferencia_salarial pds2 ON pds2.id_planilla_diferencia_salarial=pdsd2.id_planilla_diferencia_salarial
      WHERE
         pds2.estado=1 AND pdsd2.id_funcionario_superior IS NULL AND
         pds2.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pds2.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pds2.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN pdsd2.id_funcionario>0 ELSE pdsd2.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END  
      GROUP BY
         pds2.id_mes,
         pds2.gestion,
         pdsd2.id_funcionario,
         pdsd2.id_administracion,
         pdsd2.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- PROGRAMA RETIRO VOLUNTARIO
-- ======================================================================= 
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '845'::text as objeto_gasto,
   'PROGRAMA RETIRO VOLUNTARIO'::text as concepto,
   13 as orden 
FROM
   (
      SELECT 
         rvp.id_mes_retiro as id_mes,
         rvp.gestion_retiro as gestion,
         rvp.id_administracion,
         dps.id_oficina,
         array_agg(rvpd.id_funcionario),
         array_to_string(array_agg(rvpd.id_retiro_voluntario_planilla_detalle),',') as ids_detalle,
         (SUM(rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo)::numeric(12,0)) as monto
      FROM 
         salarios.retiros_voluntarios_planillas_detalles rvpd 
         LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
         LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_detalle_planilla_salario=rvpd.id_detalle_planilla_salario
      WHERE
         rvp.id_estado=1 AND
         rvp.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         rvp.gestion_retiro::text=ANY(('{'||in_gestion||'}')::text[]) AND
         rvp.id_mes_retiro::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN rvpd.id_funcionario>0 ELSE rvpd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END  
      GROUP BY
         rvp.id_mes_retiro,
         rvp.gestion_retiro,
         rvpd.id_funcionario,
         rvp.id_administracion,
         dps.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina)  
UNION ALL
-- =======================================================================
-- OTRAS TRANSFERENCIAS CTES.
-- ======================================================================= 
(SELECT
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   array_to_string(array_agg(a.ids_detalle),',') as ids_detalle,
   count(*) as beneficiario,
   sum(a.monto) as importe,
   '849'::text as objeto_gasto,
   'OTRAS TRANSFERENCIAS CTES.'::text as concepto,
   14 as orden 
FROM
   (
      SELECT 
         potc.id_mes,
         potc.gestion,
         potcd.id_administracion,
         potcd.id_oficina,
         array_agg(potcd.id_funcionario),
         array_to_string(array_agg(potcd.id_planilla_otra_transferencia_cte_detalle),',') as ids_detalle,
         (SUM(potcd.importe_otra_transferencia_cte)::numeric(12,0)) as monto
      FROM 
         salarios.planillas_otras_transferencias_ctes_detalles potcd 
         LEFT JOIN salarios.planillas_otras_transferencias_ctes potc ON potc.id_planilla_otra_transferencia_cte=potcd.id_planilla_otra_transferencia_cte
      WHERE
         potc.estado=1 AND
         potc.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         potc.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         potc.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN potcd.id_funcionario>0 ELSE potcd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END  
      GROUP BY
         potc.id_mes,
         potc.gestion,
         potcd.id_funcionario,
         potcd.id_administracion,
         potcd.id_oficina
   ) a
GROUP BY
   a.id_mes,
   a.gestion,
   a.id_administracion,
   a.id_oficina)   ;
END;
]]></definition>
</function>

<function name="pagos_realizados_permanente_beneficiario"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="beneficiario">
		<type name="bigint"/>
	</parameter>
	<parameter name="ids_beneficiario">
		<type name="text"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="text"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="text"/>
	</parameter>
	<parameter name="in_mes" in="true">
		<type name="text"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener los beneficiarios de los pagos realizados permanentes/comisionados por administracion, gestion, dependencia y objeto de gasto
  * Creado    : 2016-10-18 09:24:25
  * Modificado: 2016-10-18 15:00:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administracion del proceso		
  *            in_gestion           gestiones (Ej.: '2014,2015,2016,...') [uno o más gestiones]
  *            in_mes               meses (Ej.: '1,2,3,...,12') [Los meses pueden ser aleatorios, es decir, no correlativos] 
  * 	       in_id_funcionario    identifiacador de funcionarios separados por coma o ingresar '0' para todos los funcionarios	 
  * ------------  
  */
RETURN QUERY 
-- =======================================================================
-- SALARIOS
-- =======================================================================
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,
   '111'::text as objeto_gasto,
   'SALARIOS'::text as concepto,
    1 as orden 
FROM
   (
      SELECT 
         ps.gestion,
         dps.id_administracion,
         dps.id_oficina,
         array_to_string(array_agg(dps.id_funcionario),',') as ids_funcionario
      FROM 
         salarios.detalles_planillas_salarios dps 
         LEFT JOIN salarios.planillas_salarios ps ON ps.id_planilla_salario=dps.id_planilla_salario
      WHERE
         ps.id_estado=1 AND
         ps.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         ps.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         ps.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         ps.gestion,
         dps.id_funcionario,
         dps.id_administracion,
         dps.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina
)
UNION ALL
-- =======================================================================
-- GASTO REPRESENTACION
-- =======================================================================
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,   
   '113'::text as objeto_gasto,
   'GASTO REPRESENTACION'::text as concepto,
    2 as orden 
FROM
   (
      SELECT 
         pgr.gestion,
         pgrd.id_administracion,
         pgrd.id_oficina,
         array_to_string(array_agg(fr.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.planilla_gasto_representacion_detalle pgrd 
         LEFT JOIN salarios.planilla_gasto_representacion pgr ON pgr.id_planilla_gasto_representacion=pgrd.id_planilla_gasto_representacion
         LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
      WHERE
         pgr.estado=1 AND
         pgr.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pgr.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pgr.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN fr.id_funcionario>0 ELSE fr.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pgr.gestion,
         fr.id_funcionario,
         pgrd.id_administracion,
         pgrd.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- RE
-- =======================================================================
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,      
   '123'::text as objeto_gasto,
   'REMUNERACION EXTRAORDINARIA (RE)'::text as concepto,
    3 as orden 
FROM
   (
      SELECT 
         pre.gestion,
         dpre.id_administracion,
         dpre.id_oficina,
         array_to_string(array_agg(dpre.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.detalles_planillas_re dpre 
         LEFT JOIN salarios.planillas_re pre ON pre.id_planilla_re=dpre.id_planilla_re
      WHERE
         pre.estado=1 AND
         pre.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pre.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pre.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dpre.id_funcionario>0 ELSE dpre.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pre.gestion,
         dpre.id_funcionario,
         dpre.id_administracion,
         dpre.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- RA
-- =======================================================================
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,      
   '125'::text as objeto_gasto,
   'REMUNERACION ADICIONAL (RA)'::text as concepto,
    4 as orden 
FROM
   (
      SELECT 
         pra.gestion,
         dpra.id_administracion,
         dpra.id_oficina,
         array_to_string(array_agg(dpra.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.detalles_planillas_ra dpra 
         LEFT JOIN salarios.planillas_ra pra ON pra.id_planilla_ra=dpra.id_planilla_ra
      WHERE
         pra.estado=1 AND
         pra.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pra.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pra.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dpra.id_funcionario>0 ELSE dpra.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pra.gestion,
         dpra.id_funcionario,
         dpra.id_administracion,
         dpra.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- SUBSIDIOS
-- =======================================================================
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,      
   '131'::text as objeto_gasto,
   a.concepto,
    5 as orden 
FROM
   (
      SELECT 
         ps.gestion,
         dps.id_administracion,
         dps.id_oficina,
         s.descripcion as concepto,
         array_to_string(array_agg(fs.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.detalles_planillas_subsidios dps 
         LEFT JOIN salarios.planillas_subsidios ps ON ps.id_planilla_subsidio=dps.id_planilla_subsidio
         LEFT JOIN salarios.funcionarios_subsidios fs ON fs.id_funcionario_subsidio=dps.id_funcionario_subsidio
         LEFT JOIN salarios.subsidios s ON s.id_subsidio=fs.id_subsidio 
      WHERE
         ps.estado=1 AND
         ps.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         ps.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         ps.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         ps.gestion,
         fs.id_funcionario,
         dps.id_administracion,
         dps.id_oficina,
         s.descripcion
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   a.concepto)
UNION ALL
-- =======================================================================
-- GRADO ACADEMICO
-- ======================================================================= 
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,  
   '133'::text as objeto_gasto,
   'GRADO ACADEMICO'::text as concepto,
    6 as orden 
FROM
   (
      SELECT 
         pp.gestion,
         dpp.id_administracion,
         dpp.id_oficina,
         array_to_string(array_agg(fp.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.detalle_planillas_profesionales dpp 
         LEFT JOIN salarios.planilla_profesionales pp ON pp.id_planilla_profesional=dpp.id_planilla_profesional
         LEFT JOIN salarios.funcionarios_profesionales fp ON fp.id_funcionario_profesional=dpp.id_funcionario_profesional
      WHERE
         pp.estado=1 AND
         pp.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pp.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pp.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pp.gestion,
         fp.id_funcionario,
         dpp.id_administracion,
         dpp.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina)
-- =======================================================================
-- ANTIGUEDAD
-- ======================================================================= 
UNION ALL
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,  
   '133'::text as objeto_gasto,
   'ANTIGUEDAD'::text as concepto,
    7 as orden 
FROM
   (
      SELECT 
         pa.gestion,
         dpa.id_administracion,
         dpa.id_oficina,
         array_to_string(array_agg(dpa.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.detalle_planilla_antiguedad dpa 
         LEFT JOIN salarios.planillas_antiguedad pa ON pa.id_planilla_antiguedad=dpa.id_planilla_antiguedad
      WHERE
         pa.estado=1 AND
         pa.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pa.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pa.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dpa.id_funcionario>0 ELSE dpa.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pa.gestion,
         dpa.id_funcionario,
         dpa.id_administracion,
         dpa.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina)
 UNION ALL
-- =======================================================================
-- GRATIFICACION OCASIONAL
-- ======================================================================= 
 (SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,  
   '133'::text as objeto_gasto,
   'GRATIFICACION OCASIONAL'::text as concepto,
   8 as orden 
FROM
   (
      SELECT 
         pgo.gestion,
         dpgo.id_administracion,
         dpgo.id_oficina,
         array_to_string(array_agg(dpgo.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.detalle_planilla_gratificacion_ocacional dpgo 
         LEFT JOIN salarios.planilla_gratificacion_ocacional pgo ON pgo.id_planilla_gratificacion_ocacional=dpgo.id_planilla_gratificacion_ocacional
      WHERE
         pgo.estado=1 AND
         pgo.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pgo.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pgo.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dpgo.id_funcionario>0 ELSE dpgo.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pgo.gestion,
         dpgo.id_funcionario,
         dpgo.id_administracion,
         dpgo.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- BONIFICACIONES Y GRATIFICACIONES VARIAS 
-- ======================================================================= 
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,  
   '133'::text as objeto_gasto,
   trim(a.concepto) as concepto,
   9 as orden 
FROM
   (
      SELECT 
         pb.gestion,
         dpb.id_administracion,
         dpb.id_oficina,
         trim(b.descripcion) as concepto,
         array_to_string(array_agg(fb.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.detalles_planillas_bonificaciones dpb 
         LEFT JOIN salarios.planillas_bonificaciones pb ON pb.id_planilla_bonificacion=dpb.id_planilla_bonificacion
         LEFT JOIN salarios.funcionarios_bonificaciones fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
         LEFT JOIN salarios.bonificaciones b ON b.id_bonificacion=fb.id_bonificacion
      WHERE
         pb.estado=1 AND
         pb.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pb.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pb.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
      GROUP BY
         pb.gestion,
         fb.id_funcionario,
         dpb.id_administracion,
         dpb.id_oficina,
         trim(b.descripcion)
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   trim(a.concepto))
UNION ALL
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,  
   '137'::text as objeto_gasto,
   'GRATIFICACION SERVICIOS ESPECIALES'::text as concepto,
   10 as orden 
FROM
   (
      SELECT 
         pge.gestion,
         dpge.id_administracion,
         dpge.id_oficina,
         array_to_string(array_agg(dpge.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.detalle_planilla_gratificacion_especial dpge 
         LEFT JOIN salarios.planilla_gratificacion_especial pge ON pge.id_planilla_gratificacion=dpge.id_planilla_gratificacion
      WHERE
         pge.estado=1 AND
         pge.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pge.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pge.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN dpge.id_funcionario>0 ELSE dpge.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END 
      GROUP BY
         pge.gestion,
         dpge.id_funcionario,
         dpge.id_administracion,
         dpge.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- DIFERENCIA SALARIAL
-- ======================================================================= 
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,  
   '199'::text as objeto_gasto,
   'DIFERENCIA SALARIAL'::text as concepto,
   11 as orden 
FROM
   (
      SELECT 
         pds1.gestion,
         pdsd1.id_administracion,
         pdsd1.id_oficina,
         array_to_string(array_agg(fs.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.planilla_diferencia_salarial_detalle pdsd1 
         LEFT JOIN salarios.planilla_diferencia_salarial pds1 ON pds1.id_planilla_diferencia_salarial=pdsd1.id_planilla_diferencia_salarial
         INNER JOIN salarios.funcionarios_superiores fs ON fs.id_funcionario_superior=pdsd1.id_funcionario_superior
      WHERE
         pds1.estado=1 AND
         pds1.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pds1.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pds1.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END 
      GROUP BY
         pds1.gestion,
         fs.id_funcionario,
         pdsd1.id_administracion,
         pdsd1.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- OTROS GASTOS DEL PERSONAL
-- ======================================================================= 
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,  
   '199'::text as objeto_gasto,
   'OTROS GASTOS DEL PERSONAL'::text as concepto,
   12 as orden 
FROM
   (
      SELECT 
         pds2.gestion,
         pdsd2.id_administracion,
         pdsd2.id_oficina,
         array_to_string(array_agg(pdsd2.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.planilla_diferencia_salarial_detalle pdsd2 
         LEFT JOIN salarios.planilla_diferencia_salarial pds2 ON pds2.id_planilla_diferencia_salarial=pdsd2.id_planilla_diferencia_salarial
      WHERE
         pds2.estado=1 AND pdsd2.id_funcionario_superior IS NULL AND
         pds2.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         pds2.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         pds2.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN pdsd2.id_funcionario>0 ELSE pdsd2.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END  
      GROUP BY
         pds2.gestion,
         pdsd2.id_funcionario,
         pdsd2.id_administracion,
         pdsd2.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina)
UNION ALL
-- =======================================================================
-- PROGRAMA RETIRO VOLUNTARIO
-- ======================================================================= 
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,  
   '845'::text as objeto_gasto,
   'PROGRAMA RETIRO VOLUNTARIO'::text as concepto,
   13 as orden 
FROM
   (
      SELECT 
         rvp.gestion_retiro as gestion,
         rvp.id_administracion,
         dps.id_oficina,
         array_to_string(array_agg(rvpd.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.retiros_voluntarios_planillas_detalles rvpd 
         LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
         LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_detalle_planilla_salario=rvpd.id_detalle_planilla_salario
      WHERE
         rvp.id_estado=1 AND
         rvp.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         rvp.gestion_retiro::text=ANY(('{'||in_gestion||'}')::text[]) AND
         rvp.id_mes_retiro::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN rvpd.id_funcionario>0 ELSE rvpd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END  
      GROUP BY
         rvp.gestion_retiro,
         rvpd.id_funcionario,
         rvp.id_administracion,
         dps.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina)  
UNION ALL
-- =======================================================================
-- OTRAS TRANSFERENCIAS CTES.
-- ======================================================================= 
(SELECT
   a.gestion,
   a.id_administracion,
   a.id_oficina,
   count(*) as beneficiario,
   array_to_string(ARRAY(SELECT DISTINCT UNNEST(('{'||array_to_string(array_agg(a.ids_funcionario),',')||'}')::text[]) ORDER BY 1),',') as ids_beneficiario,  
   '849'::text as objeto_gasto,
   'OTRAS TRANSFERENCIAS CTES.'::text as concepto,
   14 as orden 
FROM
   (
      SELECT 
         potc.gestion,
         potcd.id_administracion,
         potcd.id_oficina,
         array_to_string(array_agg(potcd.id_funcionario),',') as ids_funcionario      
      FROM 
         salarios.planillas_otras_transferencias_ctes_detalles potcd 
         LEFT JOIN salarios.planillas_otras_transferencias_ctes potc ON potc.id_planilla_otra_transferencia_cte=potcd.id_planilla_otra_transferencia_cte
      WHERE
         potc.estado=1 AND
         potc.id_administracion::text=ANY(('{'||in_id_administracion||'}')::text[]) AND
         potc.gestion::text=ANY(('{'||in_gestion||'}')::text[]) AND
         potc.id_mes::text=ANY(('{'||in_mes||'}')::text[]) AND
         CASE WHEN in_id_funcionario='0' THEN potcd.id_funcionario>0 ELSE potcd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END  
      GROUP BY
         potc.gestion,
         potcd.id_funcionario,
         potcd.id_administracion,
         potcd.id_oficina
   ) a
GROUP BY
   a.gestion,
   a.id_administracion,
   a.id_oficina)   
   ;
END;
]]></definition>
</function>

<function name="pedido_fondo_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
	importe_monto_total_solicitado numeric(12,2) := 0;
	importe_monto_total_aporte_solicitado numeric(12,2) := 0;
	importe_monto_total_aplicado numeric(12,2) := 0;
	importe_monto_total_aporte_aplicado numeric(12,2) := 0;
	v_cantidad_solicitado integer := 0;
	v_cantidad_aplicado integer := 0;
	nombre_usuario text := user::text;
BEGIN
	IF (TG_OP = 'DELETE') THEN
		SELECT INTO 	--en estas variables
				importe_monto_total_solicitado,
				importe_monto_total_aporte_solicitado, 
				importe_monto_total_aplicado, 
				importe_monto_total_aporte_aplicado,
				v_cantidad_solicitado,
				v_cantidad_aplicado  
				--cargar los siguientes resultado
				sum(importe_solicitado_devengado),
				sum(importe_solicitado_aporte),
				sum(importe_aplicado_devengado),
				sum(importe_aplicado_aporte),
				sum(cantidad_solicitado),
				sum(cantidad_aplicado) 
		FROM salarios.pedidos_fondos_detalles 
		WHERE id_pedido_fondo = OLD.id_pedido_fondo;
		
		IF importe_monto_total_solicitado IS NULL THEN 
			importe_monto_total_solicitado :=0;
			importe_monto_total_aporte_solicitado := 0;
			importe_monto_total_aplicado := 0;
			importe_monto_total_aporte_aplicado := 0;
			v_cantidad_solicitado := 0;
			v_cantidad_aplicado := 0;
		END IF;

		UPDATE salarios.pedidos_fondos 
		SET 	importe_total_solicitado=importe_monto_total_solicitado,
			importe_total_aplicado=importe_monto_total_aplicado, 
			importe_total_aporte_solicitado=importe_monto_total_aporte_solicitado,
			importe_total_aporte_aplicado=importe_monto_total_aporte_aplicado,
			cantidad_total_solicitado=v_cantidad_solicitado,
			cantidad_total_aplicado=v_cantidad_aplicado,
			usu_modi=nombre_usuario, fec_modi=now() 
		WHERE id_pedido_fondo = OLD.id_pedido_fondo;
		
		RETURN OLD;
		
	ELSIF (TG_OP = 'UPDATE') THEN
		SELECT INTO 	--en estas variables
				importe_monto_total_solicitado,
				importe_monto_total_aporte_solicitado, 
				importe_monto_total_aplicado, 
				importe_monto_total_aporte_aplicado,
				v_cantidad_solicitado,
				v_cantidad_aplicado  
				--cargar los siguientes resultado
				sum(importe_solicitado_devengado),
				sum(importe_solicitado_aporte),
				sum(importe_aplicado_devengado),
				sum(importe_aplicado_aporte),
				sum(cantidad_solicitado),
				sum(cantidad_aplicado)  
		FROM salarios.pedidos_fondos_detalles 
		WHERE id_pedido_fondo = NEW.id_pedido_fondo;
		
		IF importe_monto_total_solicitado IS NULL THEN 
			importe_monto_total_solicitado :=0;
			importe_monto_total_aporte_solicitado := 0;
			importe_monto_total_aplicado := 0;
			importe_monto_total_aporte_aplicado := 0;
			v_cantidad_solicitado := 0;
			v_cantidad_aplicado := 0;
		END IF;

		UPDATE salarios.pedidos_fondos 
		SET 	importe_total_solicitado=importe_monto_total_solicitado,
			importe_total_aplicado=importe_monto_total_aplicado, 
			importe_total_aporte_solicitado=importe_monto_total_aporte_solicitado,
			importe_total_aporte_aplicado=importe_monto_total_aporte_aplicado,
			cantidad_total_solicitado=v_cantidad_solicitado,
			cantidad_total_aplicado=v_cantidad_aplicado,
			usu_modi=nombre_usuario, fec_modi=now()  
		WHERE id_pedido_fondo = NEW.id_pedido_fondo;
		
		RETURN NEW;
		
	ELSIF (TG_OP = 'INSERT') THEN
		SELECT INTO 	--en estas variables
				importe_monto_total_solicitado,
				importe_monto_total_aporte_solicitado, 
				importe_monto_total_aplicado, 
				importe_monto_total_aporte_aplicado,
				v_cantidad_solicitado,
				v_cantidad_aplicado  
				--cargar los siguientes resultado
				sum(importe_solicitado_devengado),
				sum(importe_solicitado_aporte),
				sum(importe_aplicado_devengado),
				sum(importe_aplicado_aporte),
				sum(cantidad_solicitado),
				sum(cantidad_aplicado) 
		FROM salarios.pedidos_fondos_detalles 
		WHERE id_pedido_fondo = NEW.id_pedido_fondo;
		
		IF importe_monto_total_solicitado IS NULL THEN 
			importe_monto_total_solicitado :=0;
			importe_monto_total_aporte_solicitado := 0;
			importe_monto_total_aplicado := 0;
			importe_monto_total_aporte_aplicado := 0;
			v_cantidad_solicitado := 0;
			v_cantidad_aplicado := 0;
		END IF;

		UPDATE salarios.pedidos_fondos 
		SET 	importe_total_solicitado=importe_monto_total_solicitado,
			importe_total_aplicado=importe_monto_total_aplicado, 
			importe_total_aporte_solicitado=importe_monto_total_aporte_solicitado,
			importe_total_aporte_aplicado=importe_monto_total_aporte_aplicado,
			cantidad_total_solicitado=v_cantidad_solicitado,
			cantidad_total_aplicado=v_cantidad_aplicado,
			usu_modi=nombre_usuario, fec_modi=now()  
		WHERE id_pedido_fondo = NEW.id_pedido_fondo;
		
		RETURN NEW;
		
	END IF;
END;]]></definition>
</function>

<function name="pedido_fondo_aguinaldo_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
	importe_monto_total_solicitado numeric(15,2) := 0;
	importe_monto_total_aplicado numeric(15,2) := 0;
	v_cantidad_solicitado integer := 0;
	v_cantidad_aplicado integer := 0;
	nombre_usuario text := user::text;
BEGIN
	IF (TG_OP = 'DELETE') THEN
		SELECT INTO 	--en estas variables
				importe_monto_total_solicitado,
				importe_monto_total_aplicado, 
				v_cantidad_solicitado,
				v_cantidad_aplicado  
				--cargar los siguientes resultado
				sum(importe_solicitado),
				sum(importe_aplicado),
				sum(cantidad_solicitado),
				sum(cantidad_aplicado) 
		FROM salarios.pedido_fondo_aguinaldo_detalle
		WHERE id_pedido_fondo_aguinaldo = OLD.id_pedido_fondo_aguinaldo;
		
		IF importe_monto_total_solicitado IS NULL THEN 
			importe_monto_total_solicitado :=0;
			importe_monto_total_aplicado := 0;
			v_cantidad_solicitado := 0;
			v_cantidad_aplicado := 0;
		END IF;

		UPDATE salarios.pedido_fondo_aguinaldo 
		SET 	importe_total_solicitado=importe_monto_total_solicitado,
			importe_total_aplicado=importe_monto_total_aplicado, 
			cantidad_total_solicitado=v_cantidad_solicitado,
			cantidad_total_aplicado=v_cantidad_aplicado,
			usu_modi=nombre_usuario, fec_modi=now() 
		WHERE id_pedido_fondo_aguinaldo = OLD.id_pedido_fondo_aguinaldo;
		
		RETURN OLD;
		
	ELSIF (TG_OP = 'UPDATE') THEN
		SELECT INTO 	--en estas variables
				importe_monto_total_solicitado,
				importe_monto_total_aplicado, 
				v_cantidad_solicitado,
				v_cantidad_aplicado  
				--cargar los siguientes resultado
				sum(importe_solicitado),
				sum(importe_aplicado),
				sum(cantidad_solicitado),
				sum(cantidad_aplicado) 
		FROM salarios.pedido_fondo_aguinaldo_detalle
		WHERE id_pedido_fondo_aguinaldo = NEW.id_pedido_fondo_aguinaldo;
		
		IF importe_monto_total_solicitado IS NULL THEN 
			importe_monto_total_solicitado :=0;
			importe_monto_total_aplicado := 0;
			v_cantidad_solicitado := 0;
			v_cantidad_aplicado := 0;
		END IF;

		UPDATE salarios.pedido_fondo_aguinaldo 
		SET 	importe_total_solicitado=importe_monto_total_solicitado,
			importe_total_aplicado=importe_monto_total_aplicado, 
			cantidad_total_solicitado=v_cantidad_solicitado,
			cantidad_total_aplicado=v_cantidad_aplicado,
			usu_modi=nombre_usuario, fec_modi=now()  
		WHERE id_pedido_fondo_aguinaldo = NEW.id_pedido_fondo_aguinaldo;
		
		RETURN NEW;
		
	ELSIF (TG_OP = 'INSERT') THEN
		SELECT INTO 	--en estas variables
				importe_monto_total_solicitado,				
				importe_monto_total_aplicado, 				
				v_cantidad_solicitado,
				v_cantidad_aplicado  
				--cargar los siguientes resultado
				sum(importe_solicitado),
				sum(importe_aplicado),
				sum(cantidad_solicitado),
				sum(cantidad_aplicado)  
		FROM salarios.pedido_fondo_aguinaldo_detalle 
		WHERE id_pedido_fondo_aguinaldo = NEW.id_pedido_fondo_aguinaldo;
		
		IF importe_monto_total_solicitado IS NULL THEN 
			importe_monto_total_solicitado :=0;
			importe_monto_total_aplicado := 0;
			v_cantidad_solicitado := 0;
			v_cantidad_aplicado := 0;
		END IF;

		UPDATE salarios.pedido_fondo_aguinaldo 
		SET 	importe_total_solicitado=importe_monto_total_solicitado,
			importe_total_aplicado=importe_monto_total_aplicado, 
			cantidad_total_solicitado=v_cantidad_solicitado,
			cantidad_total_aplicado=v_cantidad_aplicado,
			usu_modi=nombre_usuario, fec_modi=now()  
		WHERE id_pedido_fondo_aguinaldo = NEW.id_pedido_fondo_aguinaldo;
		
		RETURN NEW;
		
	END IF;
END;]]></definition>
</function>

<function name="planilla_aguinaldo"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="estado_funcionario">
		<type name="boolean"/>
	</parameter>
	<parameter name="descripcion">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_nivel1">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel2">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel4">
		<type name="character varying"/>
	</parameter>
	<parameter name="ene">
		<type name="numeric"/>
	</parameter>
	<parameter name="feb">
		<type name="numeric"/>
	</parameter>
	<parameter name="mar">
		<type name="numeric"/>
	</parameter>
	<parameter name="abr">
		<type name="numeric"/>
	</parameter>
	<parameter name="may">
		<type name="numeric"/>
	</parameter>
	<parameter name="jun">
		<type name="numeric"/>
	</parameter>
	<parameter name="jul">
		<type name="numeric"/>
	</parameter>
	<parameter name="ago">
		<type name="numeric"/>
	</parameter>
	<parameter name="sep">
		<type name="numeric"/>
	</parameter>
	<parameter name="oct">
		<type name="numeric"/>
	</parameter>
	<parameter name="nov">
		<type name="numeric"/>
	</parameter>
	<parameter name="dic">
		<type name="numeric"/>
	</parameter>
	<parameter name="total">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_aguinaldo" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_tipo_aguinaldo" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
SELECT t.*, (COALESCE(t.ene,0)+
	   COALESCE(t.feb,0)+
	   COALESCE(t.mar,0)+
	   COALESCE(t.abr,0)+
	   COALESCE(t.may,0)+
	   COALESCE(t.jun,0)+
	   COALESCE(t.jul,0)+
	   COALESCE(t.ago,0)+
	   COALESCE(t.sep,0)+
	   COALESCE(t.oct,0)+
	   COALESCE(t.nov,0)+
	   COALESCE(t.dic,0)
	  ) as total FROM (
SELECT * FROM crosstab(
  'SELECT fa.id_funcionario, 
	  f.cedula_funcionario, 
	  f.ape_nom_funcionario,
	  f.estado_funcionario, 
	  ta.descripcion,
	  da.id_oficina, 
	  o.nivel1, 
	  o.nivel2, 
	  o.nivel3, 
	  o.nivel4, 
	  o.nivel5, 
	  o.nombre_nivel1,
	  o.nombre_nivel2,
	  o.nombre_nivel4,
	  da.id_mes, 
	  sum(da.monto)  
   FROM salarios.planillas_detalles_aguinaldos da
   INNER JOIN salarios.planillas_aguinaldos a ON da.id_planilla_aguinaldo = a.id_planilla_aguinaldo
   INNER JOIN salarios.funcionarios_aguinaldos fa ON da.id_funcionario_aguinaldo = fa.id_funcionario_aguinaldo
   INNER JOIN legajos.funcionarios f ON fa.id_funcionario = f.id_funcionario
   INNER JOIN legajos.oficinas_con_descripciones o ON o.id_oficina = da.id_oficina
   INNER JOIN salarios.tipos_aguinaldos ta on ta.id_tipo_aguinaldo = '||in_id_tipo_aguinaldo||'
   WHERE a.id_tipo_aguinaldo = '||in_id_tipo_aguinaldo||' AND a.gestion = '||in_gestion||' AND a.id_planilla_aguinaldo = '|| in_id_planilla_aguinaldo ||'
   GROUP BY da.id_oficina,
	    o.nivel1, 
	    o.nivel2, 
	    o.nivel3, 
	    o.nivel4, 
	    o.nivel5, 
	    o.nombre_nivel1,
	    o.nombre_nivel2,
	    o.nombre_nivel4,
	    fa.id_funcionario,
	    f.cedula_funcionario,  
	    f.ape_nom_funcionario, 
	    f.estado_funcionario,
	    ta.descripcion,	     	    
	    da.id_mes ORDER BY 7,8,9,10,11',
  'SELECT m FROM generate_series(1,12) m'
) AS (
  id_funcionario int,
  cedula varchar,
  funcionario varchar,
  estado_funcionario boolean,
  descripcion varchar,
  id_oficina int,
  nivel1 int, nivel2 int, nivel3 int, nivel4 int, nivel5 int, 
  nombre_nivel1 varchar,
  nombre_nivel2 varchar,
  nombre_nivel4 varchar,
  ene numeric,
  feb numeric,
  mar numeric,
  abr numeric,
  may numeric,
  jun numeric,
  jul numeric,
  ago numeric,
  sep numeric,
  oct numeric,
  nov numeric,
  dic numeric
)) t;

END;
]]></definition>
</function>

<function name="planilla_antiguedad_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
importe_monto_total numeric(12,2) := 0;
total_aporte numeric(12,2) := 0;
nombre_usuario text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	importe_monto_total := sum(importe_antiguedad) from salarios.detalle_planilla_antiguedad where id_planilla_antiguedad = OLD.id_planilla_antiguedad;
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;
	
	total_aporte := sum(importe_aporte) from salarios.detalle_planilla_antiguedad where id_planilla_antiguedad = OLD.id_planilla_antiguedad;
	IF total_aporte IS NULL THEN 
		total_aporte :=0;
	END IF;
	UPDATE salarios.planillas_antiguedad SET antiguedad_monto_total=importe_monto_total, monto_total_aporte=total_aporte,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_antiguedad = OLD.id_planilla_antiguedad;
	RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
        importe_monto_total := sum(importe_antiguedad) from salarios.detalle_planilla_antiguedad where id_planilla_antiguedad = NEW.id_planilla_antiguedad;
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;

	total_aporte := sum(importe_aporte) from salarios.detalle_planilla_antiguedad where id_planilla_antiguedad = NEW.id_planilla_antiguedad;
	IF total_aporte IS NULL THEN 
		total_aporte :=0;
	END IF;
	
	UPDATE salarios.planillas_antiguedad SET antiguedad_monto_total=importe_monto_total, monto_total_aporte=total_aporte, 
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_antiguedad = NEW.id_planilla_antiguedad;
	RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN
	importe_monto_total := sum(importe_antiguedad) from salarios.detalle_planilla_antiguedad where id_planilla_antiguedad = NEW.id_planilla_antiguedad;
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;

	total_aporte := sum(importe_aporte) from salarios.detalle_planilla_antiguedad where id_planilla_antiguedad = NEW.id_planilla_antiguedad;
	IF total_aporte IS NULL THEN 
		total_aporte :=0;
	END IF;
	
	UPDATE salarios.planillas_antiguedad SET antiguedad_monto_total=importe_monto_total, monto_total_aporte=total_aporte,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_antiguedad = NEW.id_planilla_antiguedad;
	RETURN NEW;
END IF;
END;]]></definition>
</function>

<function name="planilla_bonificaciones_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
importe_monto_total numeric(12,2) := 0;
monto_aporte numeric(12,2) := 0;
nombre_usuario text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	SELECT INTO importe_monto_total, monto_aporte sum(monto_total), sum(aporte) 
	FROM salarios.detalles_planillas_bonificaciones 
	WHERE id_planilla_bonificacion = OLD.id_planilla_bonificacion;
	
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;
	
	IF monto_aporte IS NULL THEN 
		monto_aporte :=0;
	END IF;
	
	UPDATE salarios.planillas_bonificaciones 
	SET total_bonificaciones=importe_monto_total, total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
	WHERE id_planilla_bonificacion = OLD.id_planilla_bonificacion;
	
	RETURN OLD;
	
ELSIF (TG_OP = 'UPDATE') THEN
        SELECT INTO importe_monto_total, monto_aporte sum(monto_total), sum(aporte) 
	FROM salarios.detalles_planillas_bonificaciones 
	WHERE id_planilla_bonificacion = NEW.id_planilla_bonificacion;
	
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;
	
	IF monto_aporte IS NULL THEN 
		monto_aporte :=0;
	END IF;
	
	UPDATE salarios.planillas_bonificaciones 
	SET total_bonificaciones=importe_monto_total, total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
	WHERE id_planilla_bonificacion = NEW.id_planilla_bonificacion;
	
	RETURN NEW;
	
ELSIF (TG_OP = 'INSERT') THEN
        SELECT INTO importe_monto_total, monto_aporte sum(monto_total), sum(aporte) 
	FROM salarios.detalles_planillas_bonificaciones 
	WHERE id_planilla_bonificacion = NEW.id_planilla_bonificacion;
	
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;
	
	IF monto_aporte IS NULL THEN 
		monto_aporte :=0;
	END IF;
	
	UPDATE salarios.planillas_bonificaciones 
	SET total_bonificaciones=importe_monto_total, total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
	WHERE id_planilla_bonificacion = NEW.id_planilla_bonificacion;
	
	RETURN NEW;
	
END IF;
END;]]></definition>
</function>

<function name="planilla_descuentos_actualizar_estado"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
      vid_planilla_descuento integer := 0;
      vCantidad_registros integer := 0;
BEGIN

IF (TG_OP = 'DELETE') THEN
    vid_planilla_descuento=OLD.id_planilla_descuento;
ELSIF (TG_OP = 'INSERT') THEN
    vid_planilla_descuento=NEW.id_planilla_descuento;
END IF;

Select case when (count(*) is null) then 0 else count(*) end as cantidad into vCantidad_registros
from salarios.detalles_planillas_descuentos 
where id_planilla_descuento=vid_planilla_descuento;

IF (vCantidad_registros > 0) THEN
	UPDATE salarios.planillas_descuentos 
        SET estado = 3, -- Estado 3 significa que posee por lo menos un detalle!
            usu_modi=current_user, 
	    fec_modi=now()
        where id_planilla_descuento=vid_planilla_descuento;
ELSIF (vCantidad_registros = 0) THEN
	UPDATE salarios.planillas_descuentos 
        SET estado = 0, -- Estado 0 significa CREADO!
            usu_modi=current_user, 
	    fec_modi=now()
        where id_planilla_descuento=vid_planilla_descuento;
END IF;

IF (TG_OP = 'DELETE') THEN
    RETURN OLD;
ELSIF (TG_OP = 'INSERT') THEN
    RETURN NEW;
END IF;


END;]]></definition>
</function>

<function name="planilla_descuentos_actualizar_total_descuento"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
      vid_planilla_descuento integer := 0;
BEGIN
/*
Autor: Lic. Guillermo Galeano Fernández
Fecha: 2011-09-20
Trigger para la tabla: salarios.detalles_planillas_descuentos
*/

IF (TG_OP = 'DELETE') THEN
	UPDATE salarios.planillas_descuentos
	   SET total_descuento=(
				Select case when (sum(monto_descuento) is null) then 0 else sum(monto_descuento) end  
				from salarios.detalles_planillas_descuentos 
				where id_planilla_descuento=OLD.id_planilla_descuento
				),
                total_importe_solicitado=(
				Select case when (sum(monto_solicitado) is null) then 0 else sum(monto_solicitado) end  
				from salarios.detalles_planillas_descuentos 
				where id_planilla_descuento=OLD.id_planilla_descuento
				),
		usu_modi=current_user, 
		fec_modi=now()
	 where id_planilla_descuento=OLD.id_planilla_descuento;
	RETURN OLD;

ELSIF (TG_OP = 'UPDATE' OR TG_OP = 'INSERT') THEN
	UPDATE salarios.planillas_descuentos
	   SET total_descuento=(
				Select case when (sum(monto_descuento) is null) then 0 else sum(monto_descuento) end  
				from salarios.detalles_planillas_descuentos 
				where id_planilla_descuento=NEW.id_planilla_descuento
				),
                total_importe_solicitado=(
				Select case when (sum(monto_solicitado) is null) then 0 else sum(monto_solicitado) end  
				from salarios.detalles_planillas_descuentos 
				where id_planilla_descuento=NEW.id_planilla_descuento
				),
		usu_modi=current_user, 
		fec_modi=now()
	 where id_planilla_descuento=NEW.id_planilla_descuento;
	RETURN NEW;
END IF;

END;]]></definition>
</function>

<function name="planilla_descuentos_cargar_detalle"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE

      registros record;
      sqlRegistros text;
      sqlInsertar text;
      vid_planilla_descuento text;
      vId_judicial text; 
      vAso boolean := true;

BEGIN
/*
Autor: Lic. Guillermo Galeano Fernández
Fecha: 2011-12-12
Objetivo: Cargar en forma automática el detalle de una planilla de descuento.
Es un trigger after insert para la tabla: salarios.planillas_descuentos
*/


IF (TG_OP = 'INSERT') THEN
/*
1) obtener los registros a partir del detalle de descuentos varios o judiciales
2) insertar los registros en la tabla salarios.detalles_planillas_descuentos
3) actualizar el importe SOLICITADO
*/

SELECT aso into vAso 
FROM salarios.tipos_descuentos 
WHERE id_tipo_descuento = NEW.id_tipo_descuento 
      AND id_administracion = NEW.id_administracion;

IF (vAso) THEN
-- Este caso es para los descuentos varios:
    sqlRegistros='Select a.id_funcionario, a.monto from salarios.descuentos_aso a
                        where a.id_administracion = '||NEW.id_administracion||'
                              AND a.gestion = '||NEW.gestion||
                              'AND a.id_mes = '||NEW.id_mes||
                              'AND a.id_tipo_descuento = '||NEW.id_tipo_descuento
    ;

ELSE
    sqlRegistros='Select a.id_funcionario, a.monto, a.id_judicial from salarios.descuentos_judiciales a
                        where a.id_administracion = '||NEW.id_administracion||'
                              AND a.gestion = '||NEW.gestion||
                              'AND a.id_mes = '||NEW.id_mes||
                              'AND a.id_tipo_descuento = '||NEW.id_tipo_descuento
    ;
 
END IF;

    FOR registros IN execute sqlRegistros LOOP
        BEGIN
                IF (vAso) THEN 
                   vId_judicial :='0'; 
                ELSE 
                   vId_judicial := registros.id_judicial::text; 
                END IF;
		sqlInsertar = 'INSERT INTO salarios.detalles_planillas_descuentos
                           (id_administracion, 
			    id_funcionario, 
			    id_planilla_descuento, 
			    monto_solicitado, 
			    id_judicial, 
			    usu_alta, 
			    fec_alta, 
			    ip_alta)
		    VALUES
                           ('||NEW.id_administracion||', 
			    '||registros.id_funcionario||', 
			    '||NEW.id_planilla_descuento||', 
			    '||registros.monto||', 
			    '||vId_judicial||', 
			    '||quote_literal(NEW.usu_alta)||', 
			    now(), 
			    '||quote_literal(NEW.ip_alta)||');';
                execute sqlInsertar;
        END;
    END LOOP;
    RETURN NEW;
END IF;

END;]]></definition>
</function>

<function name="planilla_diferencia_salarial_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
v_monto_diferencia numeric(12,2) := 0;
v_monto_aporte     numeric(12,2) := 0;
v_monto_categoria  numeric(12,2) := 0;
v_monto_cargo      numeric(12,2) := 0;
nombre_usuario     text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	v_monto_diferencia := sum(importe_monto_diferencia) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = OLD.id_planilla_diferencia_salarial;
	IF v_monto_diferencia IS NULL THEN 
		v_monto_diferencia :=0;
	END IF;

	v_monto_aporte := sum(importe_monto_aporte) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = OLD.id_planilla_diferencia_salarial;
	IF v_monto_aporte IS NULL THEN 
		v_monto_aporte :=0;
	END IF;

	v_monto_categoria := sum(importe_monto_categoria) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = OLD.id_planilla_diferencia_salarial;
	IF v_monto_categoria IS NULL THEN 
		v_monto_categoria :=0;
	END IF;

	v_monto_cargo := sum(importe_monto_cargo) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = OLD.id_planilla_diferencia_salarial;
	IF v_monto_cargo IS NULL THEN 
		v_monto_cargo :=0;
	END IF;
	
	UPDATE salarios.planilla_diferencia_salarial SET monto_aporte=v_monto_aporte, monto_categoria=v_monto_categoria, monto_cargo = v_monto_cargo, monto_diferencia = v_monto_diferencia,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_diferencia_salarial = OLD.id_planilla_diferencia_salarial;
	RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
        v_monto_diferencia := sum(importe_monto_diferencia) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = NEW.id_planilla_diferencia_salarial;
	IF v_monto_diferencia IS NULL THEN 
		v_monto_diferencia :=0;
	END IF;

	v_monto_aporte := sum(importe_monto_aporte) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = NEW.id_planilla_diferencia_salarial;
	IF v_monto_aporte IS NULL THEN 
		v_monto_aporte :=0;
	END IF;

	v_monto_categoria := sum(importe_monto_categoria) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = NEW.id_planilla_diferencia_salarial;
	IF v_monto_categoria IS NULL THEN 
		v_monto_categoria :=0;
	END IF;

	v_monto_cargo := sum(importe_monto_cargo) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = NEW.id_planilla_diferencia_salarial;
	IF v_monto_cargo IS NULL THEN 
		v_monto_cargo :=0;
	END IF;
	
	UPDATE salarios.planilla_diferencia_salarial SET monto_aporte=v_monto_aporte, monto_categoria=v_monto_categoria, monto_cargo = v_monto_cargo, monto_diferencia = v_monto_diferencia,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_diferencia_salarial = NEW.id_planilla_diferencia_salarial;
	RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN
	v_monto_diferencia := sum(importe_monto_diferencia) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = NEW.id_planilla_diferencia_salarial;
	IF v_monto_diferencia IS NULL THEN 
		v_monto_diferencia :=0;
	END IF;

	v_monto_aporte := sum(importe_monto_aporte) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = NEW.id_planilla_diferencia_salarial;
	IF v_monto_aporte IS NULL THEN 
		v_monto_aporte :=0;
	END IF;

	v_monto_categoria := sum(importe_monto_categoria) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = NEW.id_planilla_diferencia_salarial;
	IF v_monto_categoria IS NULL THEN 
		v_monto_categoria :=0;
	END IF;

	v_monto_cargo := sum(importe_monto_cargo) from salarios.planilla_diferencia_salarial_detalle where id_planilla_diferencia_salarial = NEW.id_planilla_diferencia_salarial;
	IF v_monto_cargo IS NULL THEN 
		v_monto_cargo :=0;
	END IF;
	
	UPDATE salarios.planilla_diferencia_salarial SET monto_aporte=v_monto_aporte, monto_categoria=v_monto_categoria, monto_cargo = v_monto_cargo, monto_diferencia = v_monto_diferencia,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_diferencia_salarial = NEW.id_planilla_diferencia_salarial;
	RETURN NEW;
END IF;
END;]]></definition>
</function>

<function name="planilla_funcionario_antiguedad"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="ape_nom_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="antiguedad_anho">
		<type name="double precision"/>
	</parameter>
	<parameter name="antiguedad">
		<type name="text"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="importe_bruto">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_aporte">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de antiguedad de funcionarios.
  * Fecha: 2012-04-18
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *	       in_id_planilla_re
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el monto de re por cada funcionario teniendo 
  * ------------  en cuenta el aporte y la cantidad de horas trabajadas
  */
RETURN QUERY 

select  t.id_funcionario,
	t.cedula_funcionario,
	t.ape_nom_funcionario, 
	t.id_oficina, 
	t.nivel1, 
	t.nombre_oficina, 
	t.antiguedad_anho,
	t.antiguedad,
	t.dias_trabajados,
	(((t.monto_antiguedad / 30::double precision * t.dias_trabajados)::numeric)::int)::numeric as importe_bruto,
	(((t.monto_antiguedad / 30::double precision * t.dias_trabajados * t.aporte_porcentaje / 100::double precision)::numeric)::int)::numeric as monto_aporte
FROM	
	(SELECT DISTINCT 
	f.id_funcionario, 
	f.cedula_funcionario, 
	f.ape_nom_funcionario, 
	fa.id_oficina, 
	op.nivel1, 
	o1.nombre AS nombre_oficina, 
	fa.antiguedad AS antiguedad_anho,
	funcion_antiguedad_en_texto(fa.antiguedad) as antiguedad,
        fa.dias_trabajados,
        salarios.obtener_monto_antiguedad_2(fa.antiguedad) AS monto_antiguedad,
	salarios.obtener_aporte_porcentaje(f.id_funcionario, false) as aporte_porcentaje
   FROM salarios.funcionarios_antiguedades fa
   JOIN legajos.funcionarios f ON fa.id_funcionario = f.id_funcionario
   JOIN legajos.oficinas op ON op.id_oficina = fa.id_oficina and op.gestion = in_gestion
   JOIN legajos.oficinas o1 ON op.nivel1 = o1.nivel1 AND op.nivel2 = o1.nivel2 AND o1.nivel3 = 0 AND o1.nivel4 = 0 AND o1.nivel5 = 0 and o1.gestion = in_gestion
  WHERE fa.activo is TRUE and fa.id_funcionario_antiguedad > 0 AND fa.id_administracion = in_id_administracion AND fa.antiguedad >=10 AND fa.ultimo_mes = in_id_mes
  ORDER BY f.id_funcionario) t ;
END;
]]></definition>
</function>

<function name="planilla_gasto_representacion_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
importe_monto_total_devengado numeric(12,2) := 0;
importe_monto_total_presupuestado numeric(12,2) := 0;
monto_aporte numeric(12,2) := 0;
nombre_usuario text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	SELECT INTO importe_monto_total_devengado, importe_monto_total_presupuestado, monto_aporte  sum(devengado_parcial), sum(presupuestado_parcial), sum(aporte) 
	FROM salarios.planilla_gasto_representacion_detalle 
	WHERE id_planilla_gasto_representacion = OLD.id_planilla_gasto_representacion;
	
	IF importe_monto_total_devengado IS NULL THEN 
		importe_monto_total_devengado :=0;
	END IF;

	IF importe_monto_total_presupuestado IS NULL THEN 
		importe_monto_total_presupuestado :=0;
	END IF;
	
	IF monto_aporte IS NULL THEN 
		monto_aporte :=0;
	END IF;
	
	UPDATE salarios.planilla_gasto_representacion 
	SET total_presupuestado=importe_monto_total_presupuestado, total_devengado=importe_monto_total_devengado ,total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
	WHERE id_planilla_gasto_representacion = OLD.id_planilla_gasto_representacion;
	
	RETURN OLD;
	
ELSIF (TG_OP = 'UPDATE') THEN
        SELECT INTO importe_monto_total_devengado, importe_monto_total_presupuestado, monto_aporte  sum(devengado_parcial), sum(presupuestado_parcial), sum(aporte) 
	FROM salarios.planilla_gasto_representacion_detalle 
	WHERE id_planilla_gasto_representacion = NEW.id_planilla_gasto_representacion;
	
	IF importe_monto_total_devengado IS NULL THEN 
		importe_monto_total_devengado :=0;
	END IF;

	IF importe_monto_total_presupuestado IS NULL THEN 
		importe_monto_total_presupuestado :=0;
	END IF;
	
	IF monto_aporte IS NULL THEN 
		monto_aporte :=0;
	END IF;
	
	UPDATE salarios.planilla_gasto_representacion 
	SET total_presupuestado=importe_monto_total_presupuestado, total_devengado=importe_monto_total_devengado ,total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
	WHERE id_planilla_gasto_representacion = NEW.id_planilla_gasto_representacion;
	
	RETURN NEW;
	
ELSIF (TG_OP = 'INSERT') THEN
        SELECT INTO importe_monto_total_devengado, importe_monto_total_presupuestado, monto_aporte  sum(devengado_parcial), sum(presupuestado_parcial), sum(aporte) 
	FROM salarios.planilla_gasto_representacion_detalle 
	WHERE id_planilla_gasto_representacion = NEW.id_planilla_gasto_representacion;
	
	IF importe_monto_total_devengado IS NULL THEN 
		importe_monto_total_devengado :=0;
	END IF;

	IF importe_monto_total_presupuestado IS NULL THEN 
		importe_monto_total_presupuestado :=0;
	END IF;
	
	IF monto_aporte IS NULL THEN 
		monto_aporte :=0;
	END IF;
	
	UPDATE salarios.planilla_gasto_representacion 
	SET total_presupuestado=importe_monto_total_presupuestado, total_devengado=importe_monto_total_devengado ,total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
	WHERE id_planilla_gasto_representacion = NEW.id_planilla_gasto_representacion;
	
	RETURN NEW;
	
END IF;
END;]]></definition>
</function>

<function name="planilla_gratificacion_especial_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
importe numeric(12,2) := 0;
nombre_usuario text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	importe := sum(importe_gratificacion) from salarios.detalle_planilla_gratificacion_especial where id_planilla_gratificacion = OLD.id_planilla_gratificacion;
	IF importe IS NULL THEN 
		importe :=0;
	END IF;

	UPDATE salarios.planilla_gratificacion_especial SET gratificacion_monto_total=importe,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_gratificacion = OLD.id_planilla_gratificacion;
	RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
        importe := sum(importe_gratificacion) from salarios.detalle_planilla_gratificacion_especial where id_planilla_gratificacion = NEW.id_planilla_gratificacion;
	IF importe IS NULL THEN 
		importe :=0;
	END IF;

	UPDATE salarios.planilla_gratificacion_especial SET gratificacion_monto_total=importe,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_gratificacion = NEW.id_planilla_gratificacion;
	RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN
	importe := sum(importe_gratificacion) from salarios.detalle_planilla_gratificacion_especial where id_planilla_gratificacion = NEW.id_planilla_gratificacion;
	IF importe IS NULL THEN 
		importe :=0;
	END IF;

	UPDATE salarios.planilla_gratificacion_especial SET gratificacion_monto_total=importe,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_gratificacion = NEW.id_planilla_gratificacion;
	RETURN NEW;
END IF;
END;]]></definition>
</function>

<function name="planilla_gratificacion_ocasional_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
importe_monto_total numeric(12,2) := 0;
importe_monto_aporte numeric(12,2) := 0;
nombre_usuario text := user::text;

BEGIN
	IF (TG_OP = 'DELETE') THEN
		SELECT INTO importe_monto_total, importe_monto_aporte sum(importe_gratificacion), sum(importe_aporte) 
		FROM salarios.detalle_planilla_gratificacion_ocacional 
		WHERE id_planilla_gratificacion_ocacional = OLD.id_planilla_gratificacion_ocacional;

		IF importe_monto_total IS NULL THEN 
			importe_monto_total :=0;
		END IF;

		IF importe_monto_aporte IS NULL THEN 
			importe_monto_aporte :=0;
		END IF;
		UPDATE salarios.planilla_gratificacion_ocacional 
		SET monto_total=importe_monto_total, monto_aporte=importe_monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
		WHERE id_planilla_gratificacion_ocacional = OLD.id_planilla_gratificacion_ocacional;
		RETURN OLD;
		
	ELSIF (TG_OP = 'UPDATE') THEN
		SELECT INTO importe_monto_total, importe_monto_aporte sum(importe_gratificacion), sum(importe_aporte) 
		FROM salarios.detalle_planilla_gratificacion_ocacional 
		WHERE id_planilla_gratificacion_ocacional = NEW.id_planilla_gratificacion_ocacional;

		IF importe_monto_total IS NULL THEN 
			importe_monto_total :=0;
		END IF;

		IF importe_monto_aporte IS NULL THEN 
			importe_monto_aporte :=0;
		END IF;
		UPDATE salarios.planilla_gratificacion_ocacional 
		SET monto_total=importe_monto_total, monto_aporte=importe_monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
		WHERE id_planilla_gratificacion_ocacional = NEW.id_planilla_gratificacion_ocacional;
		RETURN NEW;
		
	ELSIF (TG_OP = 'INSERT') THEN
		SELECT INTO importe_monto_total, importe_monto_aporte sum(importe_gratificacion), sum(importe_aporte) 
		FROM salarios.detalle_planilla_gratificacion_ocacional 
		WHERE id_planilla_gratificacion_ocacional = NEW.id_planilla_gratificacion_ocacional;

		IF importe_monto_total IS NULL THEN 
			importe_monto_total :=0;
		END IF;

		IF importe_monto_aporte IS NULL THEN 
			importe_monto_aporte :=0;
		END IF;
		UPDATE salarios.planilla_gratificacion_ocacional 
		SET monto_total=importe_monto_total, monto_aporte=importe_monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
		WHERE id_planilla_gratificacion_ocacional = NEW.id_planilla_gratificacion_ocacional;
		RETURN NEW;
	END IF;
END;]]></definition>
</function>

<function name="planilla_nombrados_web_publicar"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="tipo_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="sueldo_presupuestado">
		<type name="bigint"/>
	</parameter>
	<parameter name="devengado">
		<type name="bigint"/>
	</parameter>
	<parameter name="gasto_representacion">
		<type name="bigint"/>
	</parameter>
	<parameter name="bonificacion">
		<type name="bigint"/>
	</parameter>
	<parameter name="aporte">
		<type name="bigint"/>
	</parameter>
	<parameter name="total">
		<type name="bigint"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar una planilla con detalles de salarios mes-gestion para publicar en la web
  * Creado    : 2014-03-05 06:35:00
  * Modificado: 2014-03-07 11:24:48
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado
  *            in_id_funcionario    TODOS:'0' IDS Funcionario:'481,278'   
  * Descripcion:  Genera la hoja de liquidación de salarios individual del funcionario permanente/comisionado
  * ------------  
  */
RETURN QUERY 

SELECT
  web.id_funcionario,
  web.cedula, 
  web.funcionario,
  web.tipo,
  web.categoria, 
  web.cargo,  
  web.presupuestado_sal, 
  web.devengado_sal, 
  web.presupuestado_gc, 
  web.bonificacion_total, 
  web.aporte_total,
  (web.presupuestado_total-web.aporte_total) as total
FROM
(
SELECT
   -- =======[000] DATOS FUNCIONARIOS============================  
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.'))::text as cedula,
   f.ape_nom_funcionario::text as funcionario,
   fc.tipo as tipo,
   fc.categoria::text as categoria,
   fc.cargo::text as cargo,
   fc.desde,
   fc.hasta,   
   fc.nivel1,
   fc.nivel2,
   fc.nivel3,
   fc.nivel4,
   fc.nivel5,
   fc.nombre_nivel1::text,
   fc.nombre_nivel2::text,
   fc.nombre_nivel3::text,
   fc.nombre_nivel4::text,
   fc.nombre_nivel5::text,
   -- 1=========[111] SALARIOS============================   
   COALESCE(dsf.dias,'0')::text as dias,
   COALESCE(dsf.presupuestado,0) as presupuestado_sal,
   COALESCE(dsf.devengado,0) as devengado_sal,
   COALESCE(dsf.aporte,0) as aporte,
   --COALESCE(dsf.multa,0) as multa,
   --COALESCE(dsf.desc_solicitado,0) as desc_solicitado,
   --COALESCE(dsf.desc_aplicado,0) as desc_aplicado,
   --COALESCE(dsf.desc_diferencia,0) as desc_diferencia,
   --COALESCE(dsf.percibido,0) as percibido
   -- 3=========[113] GASTOS DE REPRESENTACION============= 
   COALESCE(dfgr.dias,0) as dias_gc,
   COALESCE(dfgr.presupuestado,0) as presupuestado_gc,
   COALESCE(dfgr.aporte,0) as aporte_gc,
   --COALESCE(dfgr.percibido,0) as percibido_gc,   
   -- 4=========[131] SUBSIDIO===========
   --COALESCE(dfsub.cantidad::int,0) as cantidad_sub,
   --COALESCE(dfsub.presupuestado,0) as presupuestado_sub,
   --COALESCE(dfsub.aporte,0) as aporte_sub,
   --COALESCE(dfsub.percibido,0) as percibido_sub,
   -- 5=========[133] BONIFICACIONES Y GRATIFICACIONES===========
   COALESCE(dfb.presupuestado,0) as presupuestado_bg,
   COALESCE(dfb.aporte,0) as aporte_bg,
   --COALESCE(dfb.percibido,0) as percibido_bgr,
   -- 6=========[133] ANTIGUEDAD===========
   COALESCE(dfa.presupuestado,0) as presupuestado_ba,
   COALESCE(dfa.aporte,0) as aporte_ba,
   --COALESCE(dfa.percibido,0) as percibido_ba,
   -- 7=========[133] GRADO ACADEMICO===========
   COALESCE(dfga.presupuestado,0) as presupuestado_bga,
   COALESCE(dfga.aporte,0) as aporte_bga,
   --COALESCE(dfga.percibido,0) as percibido_bga,  
   -- 8=========[137] GRATIFICACION ESPECIAL (COMPENSACION/SEGURIDAD/UEP)===========
   COALESCE(dfge.presupuestado,0) as presupuestado_ge,
   COALESCE(dfge.aporte,0) as aporte_ge,
   --COALESCE(dfge.percibido,0) as percibido_ge,
   -- 9=========[199] DIFERENCIA SALARIAL===========
   COALESCE(dfds.presupuestado,0) as presupuestado_ds,
   COALESCE(dfds.aporte,0) as aporte_ds,
   --COALESCE(dfds.percibido,0) as percibido_ds,
   -- 10=========[199] OTROS GASTOS===========
   COALESCE(dfog.presupuestado,0) as presupuestado_og,
   COALESCE(dfog.aporte,0) as aporte_og,
   --COALESCE(dfog.percibido,0) as percibido_og,  
   -- 11=========[997] TOTAL BONIFICACIONES===========
   (--COALESCE(dfsub.presupuestado,0)
   COALESCE(dfb.presupuestado,0)
   +COALESCE(dfa.presupuestado,0)
   +COALESCE(dfga.presupuestado,0)
   +COALESCE(dfge.presupuestado,0)
   +COALESCE(dfds.presupuestado,0)
   +COALESCE(dfog.presupuestado,0)
   ) as bonificacion_total,--13
   -- 12=========[997] TOTAL PRESUPUESTADO===========
   (COALESCE(dsf.presupuestado,0)
   +COALESCE(dfgr.presupuestado,0)
   --+COALESCE(dfsub.presupuestado,0)
   +COALESCE(dfb.presupuestado,0)
   +COALESCE(dfa.presupuestado,0)
   +COALESCE(dfga.presupuestado,0)
   +COALESCE(dfge.presupuestado,0)
   +COALESCE(dfds.presupuestado,0)
   +COALESCE(dfog.presupuestado,0)
   ) as presupuestado_total,
   -- 13=========[998] TOTAL APORTE===========
   (COALESCE(dsf.aporte,0) 
   +COALESCE(dfgr.aporte,0)
   --+COALESCE(dfsub.aporte,0)
   +COALESCE(dfb.aporte,0)
   +COALESCE(dfa.aporte,0)
   +COALESCE(dfga.aporte,0)
   +COALESCE(dfge.aporte,0)
   +COALESCE(dfds.aporte,0)
   +COALESCE(dfog.aporte,0)
   ) as aporte_total
FROM
   legajos.funcionarios f
   INNER JOIN (
	SELECT 
	fc.id_funcionario, 
	fc.id_funcionario_categoria, 
	fc.id_administracion, 
	fc.id_detalle_categoria, 
	fc.id_oficina, 
	fc.id_oficina_presta,
	CASE WHEN c.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo,
	c.nombre_categoria::text as categoria,
	car.nombre_cargo::text as cargo,
	to_char(fc.desde,'dd/mm/YYYY')::text as desde,
	COALESCE(to_char(fc.hasta,'dd/mm/YYYY'),'LA FECHA')::text as hasta,   
	ocd.nivel1,
	ocd.nivel2,
	ocd.nivel3,
	ocd.nivel4,
	ocd.nivel5,
	ocd.nombre_nivel1::text,
	ocd.nombre_nivel2::text,
	ocd.nombre_nivel3::text,
	ocd.nombre_nivel4::text,
	ocd.nombre_nivel5::text
	FROM salarios.funcionarios_categorias fc
	INNER JOIN salarios.detalles_categorias dc ON (dc.id_detalle_categoria = fc.id_detalle_categoria)
	INNER JOIN salarios.categorias c ON (c.id_categoria = dc.id_categoria) AND c.gastos_de_representacion is false
	INNER JOIN salarios.cargos car ON (car.id_cargo = c.id_cargo)
	INNER JOIN legajos.oficinas_con_descripciones ocd ON (ocd.id_oficina=fc.id_oficina)
	WHERE 
	fc.gestion = in_gestion 
	AND fc.id_administracion = in_id_administracion
	AND fc.id_funcionario_categoria IN (SELECT 
						x.id_funcionario_categoria
				            FROM salarios.funcionarios_categorias x
					    WHERE 
						(in_id_mes BETWEEN  extract(MONTH from x.desde) AND extract(MONTH from x.hasta-1) OR x.hasta is null) AND 
						x.gestion=fc.gestion AND 
						x.id_funcionario = fc.id_funcionario AND
						(
						    CASE
							WHEN 
							   in_id_funcionario='0'
							THEN
							   fc.id_funcionario>0
							ELSE
							   fc.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
						     END  
						 )
					    ORDER BY 
						 x.id_funcionario_categoria LIMIT 1
					   )
   ) fc ON fc.id_funcionario=f.id_funcionario
   -- =======[111] SALARIOS=============  
   LEFT JOIN (
	SELECT
	  count(*) as cantidad, 
	  dps.id_funcionario,
	  array_to_string(array_agg(dps.dias_trabajados),chr(10)) as dias,
	  CASE WHEN max(dps.monto_presupuestado::int)<sum(dps.monto_devengado::int) THEN sum(dps.monto_presupuestado::int) ELSE max(dps.monto_presupuestado::int) END as presupuestado,
	  sum(dps.monto_devengado::int) as devengado,
	  sum(dps.monto_aporte::int) as aporte,
	  sum(dps.monto_multa::int) as multa,
	  sum(dps.importe_descuentos_varios_solicitado::int) as desc_solicitado,
	  sum(dps.importe_descuentos_varios_aplicado::int) as desc_aplicado,
	  sum(dps.importe_descuentos_varios_diferencia::int) as desc_diferencia,
	  sum(dps.importe_liquido_con_descuentos_varios::int) as percibido
	FROM 
	  salarios.planillas_salarios ps
	  LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario=ps.id_planilla_salario	  
	WHERE
	  ps.id_administracion = in_id_administracion AND
	  ps.gestion= in_gestion AND
	  ps.id_mes= in_id_mes AND
	  ps.id_estado= 1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   dps.id_funcionario>0
		ELSE
		   dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	  dps.id_funcionario
   ) dsf ON dsf.id_funcionario=f.id_funcionario
   -- =========[113] GASTOS DE REPRESENTACION===========
   LEFT JOIN (
	SELECT
	   fr.id_funcionario,
	   sum(pgrd.dias) as dias,
	   sum(pgrd.presupuestado_parcial::int) as presupuestado,
	   sum(pgrd.aporte::int) as aporte,
	   sum(pgrd.presupuestado_parcial::int-pgrd.aporte::int) as percibido
	FROM
	   salarios.planilla_gasto_representacion pgr
	   LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion
	   LEFT JOIN salarios.funcionarios_representaciones           fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
	WHERE
	   pgr.id_administracion=in_id_administracion AND
	   pgr.gestion=in_gestion AND
	   pgr.id_mes=in_id_mes AND
	   pgr.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fr.id_funcionario>0
		ELSE
		   fr.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fr.id_funcionario
   ) dfgr ON dfgr.id_funcionario=f.id_funcionario 
   /*-- =========[131] SUBSIDIO===========
   LEFT JOIN (
	SELECT
	   fs.id_funcionario,
	   sum(dps.cantidad) as cantidad,
	   sum(dps.importe_monto::int) as presupuestado,
	   sum(dps.aporte::int) as aporte,
	   sum(dps.importe_monto::int-dps.aporte::int) as percibido
	FROM
	   salarios.planillas_subsidios ps
	   LEFT JOIN salarios.detalles_planillas_subsidios dps ON dps.id_planilla_subsidio=ps.id_planilla_subsidio
	   LEFT JOIN salarios.funcionarios_subsidios        fs ON fs.id_funcionario_subsidio=dps.id_funcionario_subsidio
	   LEFT JOIN salarios.subsidios                      s ON s.id_subsidio=fs.id_subsidio
	WHERE
	   ps.id_administracion=in_id_administracion AND
	   ps.gestion=in_gestion AND
	   ps.id_mes=in_id_mes AND
	   ps.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fs.id_funcionario>0
		ELSE
		   fs.id_funcionario::text=ANY(('{'||'0'||'}')::text[])
	     END  
	   )
	GROUP BY
	   fs.id_funcionario
   ) dfsub ON dfsub.id_funcionario=f.id_funcionario*/
   -- =========[133] BONIFICACIONES Y GRATIFICACIONES (RESPONSABILIDAD)===========
   LEFT JOIN (
	SELECT
	   fb.id_funcionario,
	   sum(dpb.monto_total::int) as presupuestado,
	   sum(dpb.aporte::int) as aporte,
	   (sum(dpb.monto_total::int)-sum(dpb.aporte::int)) as percibido
	FROM
	   salarios.planillas_bonificaciones pb
	   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
	   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
	WHERE
	   pb.id_administracion=in_id_administracion AND
	   pb.gestion=in_gestion AND
	   pb.id_mes=in_id_mes AND
	   pb.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fb.id_funcionario>0
		ELSE
		   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fb.id_funcionario
   ) dfb ON dfb.id_funcionario=f.id_funcionario
   -- =========[133] ANTIGUEDAD===========
   LEFT JOIN (
	SELECT
	   dpa.id_funcionario,
	   sum(dpa.importe_antiguedad::int) as presupuestado,
	   sum(dpa.importe_aporte::int) as aporte,
	   sum(dpa.importe_antiguedad::int-dpa.importe_aporte::int) as percibido
	FROM
	   salarios.planillas_antiguedad pa
	   LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad
	WHERE
	   pa.id_administracion=in_id_administracion AND
	   pa.gestion=in_gestion AND
	   pa.id_mes=in_id_mes AND
	   pa.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   dpa.id_funcionario>0
		ELSE
		   dpa.id_funcionario::text=ANY(('{'||'0'||'}')::text[])
	     END  
	   )
	GROUP BY
	   dpa.id_funcionario
   ) dfa ON dfa.id_funcionario=f.id_funcionario
   -- =========[133] GRADO ACADEMICO===========
   LEFT JOIN (
	SELECT
	   fp.id_funcionario,
	   sum(dpp.importe_profesional::int) as presupuestado,
	   sum(dpp.importe_aporte::int) as aporte,
	   sum(dpp.importe_profesional::int-dpp.importe_aporte::int) as percibido
	FROM
	   salarios.planilla_profesionales pp
	   LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional
	   LEFT JOIN salarios.funcionarios_profesionales       fp ON fp.id_funcionario_profesional=dpp.id_funcionario_profesional
	WHERE
	   pp.id_administracion=in_id_administracion AND
	   pp.gestion=in_gestion AND
	   pp.id_mes=in_id_mes AND
	   pp.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fp.id_funcionario>0
		ELSE
		   fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
	     END  
	   )
	GROUP BY
	   fp.id_funcionario
   ) dfga ON dfga.id_funcionario=f.id_funcionario
   -- =========[137] GRATIFICACION ESPECIAL (COMPENSACION/SEGURIDAD/UEP)=========== 
   LEFT JOIN (
	SELECT
	   dpge.id_funcionario,
	   sum(dpge.importe_gratificacion::int) as presupuestado,
	   sum(dpge.importe_aporte::int) as aporte,
	   sum(dpge.importe_gratificacion::int-dpge.importe_aporte::int) as percibido
	FROM
	   salarios.planilla_gratificacion_especial pge
	   LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge ON dpge.id_planilla_gratificacion=pge.id_planilla_gratificacion
	WHERE
	   pge.id_administracion=in_id_administracion AND
	   pge.gestion=in_gestion AND
	   pge.id_mes=in_id_mes AND
	   pge.estado=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   dpge.id_funcionario>0
		ELSE
		   dpge.id_funcionario::text=ANY(('{'||'0'||'}')::text[])
	     END  
	   )
	GROUP BY
	   dpge.id_funcionario
   ) dfge ON dfge.id_funcionario=f.id_funcionario
   -- =========[199] DIFERENCIA SALARIAL===========
   LEFT JOIN (
	SELECT
	   fs.id_funcionario,
	   sum(pdsd.importe_monto_diferencia::int) as presupuestado,
	   sum(pdsd.importe_monto_aporte::int) as aporte,
	   sum(pdsd.importe_monto_diferencia::int-pdsd.importe_monto_aporte::int) as percibido
	FROM
	   salarios.planilla_diferencia_salarial pds
	   LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial
	   LEFT JOIN salarios.funcionarios_superiores fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
	WHERE
	   pds.id_administracion=in_id_administracion AND
	   pds.gestion=in_gestion AND
	   pds.id_mes=in_id_mes AND
	   pds.estado=1 AND
	   pds.id_tipo_pagos_varios=1 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fs.id_funcionario>0
		ELSE
		   fs.id_funcionario::text=ANY(('{'||'0'||'}')::text[])
	     END  
	   )
	GROUP BY
	   fs.id_funcionario
   ) dfds ON dfds.id_funcionario=f.id_funcionario
   -- =========[199] OTROS GASTOS===========
   LEFT JOIN (
	SELECT
	   fs.id_funcionario,
	   sum(pdsd.importe_monto_diferencia::int) as presupuestado,
	   sum(pdsd.importe_monto_aporte::int) as aporte,
	   sum(pdsd.importe_monto_diferencia::int-pdsd.importe_monto_aporte::int) as percibido
	FROM
	   salarios.planilla_diferencia_salarial pds
	   LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial
	   LEFT JOIN salarios.funcionarios_superiores fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
	WHERE
	   pds.id_administracion=in_id_administracion AND
	   pds.gestion=in_gestion AND
	   pds.id_mes=in_id_mes AND
	   pds.estado=1 AND
	   pds.id_tipo_pagos_varios=2 AND
	   (
	     CASE
		WHEN 
		   in_id_funcionario='0'
		THEN
		   fs.id_funcionario>0
		ELSE
		   fs.id_funcionario::text=ANY(('{'||'0'||'}')::text[])
	     END  
	   )
	GROUP BY
	   fs.id_funcionario  
   ) dfog ON dfog.id_funcionario=f.id_funcionario   
WHERE
   f.id_administracion IN (0,in_id_administracion) AND
   (
     CASE
        WHEN 
	   in_id_funcionario='0'
        THEN
	   f.id_funcionario>0
        ELSE
	   f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
 ) web
 WHERE web.presupuestado_total>0
 ORDER BY web.presupuestado_gc DESC, web.presupuestado_sal DESC, web.categoria DESC
;

END;
]]></definition>
</function>

<function name="planilla_permanentes_comisionados_web_publicar"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="tipo_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="devengado">
		<type name="text"/>
	</parameter>
	<parameter name="sueldo_presupuestado">
		<type name="text"/>
	</parameter>
	<parameter name="gasto_representacion">
		<type name="text"/>
	</parameter>
	<parameter name="bonificacion">
		<type name="text"/>
	</parameter>
	<parameter name="total">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar una planilla con detalles de salarios mes-gestion para publicar en la web
  * Creado    : 2013-10-16 08:49:00
  * Modificado: 2013-10-16 13:45:00
  * Modificado: 2014-03-04 10:24:41
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado
  * 
  * Descripcion:  Genera la hoja de liquidación de salarios individual del funcionario permanente/comisionado
  * ------------  
  */
RETURN QUERY 

SELECT
replace(to_char(publico.cedula::int,'999,999,999'),',','.') AS cedula,
publico.funcionario::text,--1
publico.categoria::text,--2
publico.cargo::text,--3
publico.tipo_funcionario::text,--4
coalesce(publico.devengado,'0')::text,--5
replace(to_char(publico.sueldo_presupuestado,'999,999,999'),',','.')::text AS sueldo_presupuestado,--6
replace(to_char(case when publico.gasto_representacion is null then 0 else publico.gasto_representacion end,'999,999,999'),',','.')::text AS gasto_representacion,--7
replace(to_char(case when publico.bonificacion is null then 0 else publico.bonificacion end,'999,999,999'),',','.')::text AS bonificacion, --8
replace(to_char(
(
publico.sueldo_presupuestado+
(case when publico.gasto_representacion is null then 0 else publico.gasto_representacion end)+
(case when publico.bonificacion is null then 0 else publico.bonificacion end)
)
,'999,999,999'),',','.')::text AS total --9
FROM
(
SELECT 
f.cedula_funcionario as cedula,
f.ape_nom_funcionario as funcionario,
(
SELECT
  cat.nombre_categoria as categoria
FROM 
  salarios.funcionarios_categorias fc
  LEFT JOIN salarios.detalles_categorias dc             ON dc.id_detalle_categoria=fc.id_detalle_categoria
  LEFT JOIN salarios.categorias cat                     ON cat.id_categoria=dc.id_categoria
WHERE
  fc.gestion=in_gestion and
  fc.hasta is null and
  cat.id_cargo>0 and
  fc.id_funcionario=f.id_funcionario
) as categoria,
(
SELECT
  car.nombre_cargo as cargo
FROM 
  salarios.funcionarios_categorias fc
  LEFT JOIN salarios.detalles_categorias dc             ON dc.id_detalle_categoria=fc.id_detalle_categoria
  LEFT JOIN salarios.categorias cat                     ON cat.id_categoria=dc.id_categoria
  LEFT JOIN salarios.cargos car                         ON car.id_cargo=cat.id_cargo
WHERE
  fc.gestion=in_gestion and
  fc.hasta is null and
  cat.id_cargo>0 and
  fc.id_funcionario=f.id_funcionario
) as cargo,
(
SELECT
  (case when cat.es_comisionado then 'COMISONADO' else 'PERMANENTE' end)::text as tipo_funcionario
FROM 
  salarios.funcionarios_categorias fc
  LEFT JOIN salarios.detalles_categorias dc             ON dc.id_detalle_categoria=fc.id_detalle_categoria
  LEFT JOIN salarios.categorias cat                     ON cat.id_categoria=dc.id_categoria
  LEFT JOIN salarios.cargos car                         ON car.id_cargo=cat.id_cargo
WHERE
  fc.gestion=in_gestion and
  fc.hasta is null and
  cat.id_cargo>0 and
  fc.id_funcionario=f.id_funcionario

) as tipo_funcionario,
(
--SALARIO PERMANENTE X ADMINISTRACION
SELECT 
  sum(coalesce (dps1.monto_devengado::int,0))::text as devengado
FROM 
   salarios.planillas_salarios ps1
   LEFT JOIN salarios.detalles_planillas_salarios dps1 ON dps1.id_planilla_salario = ps1.id_planilla_salario
WHERE
   ps1.id_administracion=in_id_administracion AND 
   ps1.id_mes=in_id_mes AND
   ps1.gestion=in_gestion AND 
   ps1.id_estado=1 AND 
   dps1.id_funcionario=f.id_funcionario
) as devengado,
(
SELECT
max(coalesce (pre.presupuestado,0)) as presupuestado
FROM
(
(
--SALARIO PERMANENTE [111]
SELECT 
  max(coalesce (dps.monto_presupuestado,0))::int as presupuestado
FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario = ps.id_planilla_salario
WHERE
   ps.id_administracion IN (0,in_id_administracion) AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=f.id_funcionario
)
UNION
(
SELECT
  cim.importe::int as presupuestado
FROM 
  salarios.funcionarios_categorias fc
  LEFT JOIN salarios.detalles_categorias dc             ON dc.id_detalle_categoria=fc.id_detalle_categoria
  LEFT JOIN salarios.categorias cat                     ON cat.id_categoria=dc.id_categoria
  LEFT JOIN salarios.categoria_importe_mensual cim      ON cim.id_categoria=cat.id_categoria and cim.id_mes = in_id_mes
WHERE
  fc.gestion=in_gestion and
  fc.hasta is null and
  cat.id_cargo>0 and
  fc.id_funcionario=f.id_funcionario
) 
) pre
) as sueldo_presupuestado,


(
--GASTO REPRESENTACION [113]
SELECT
  sum(pgrd.devengado_parcial::int) as importe
FROM salarios.planilla_gasto_representacion pgr
LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion 
LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
WHERE
   pgr.id_administracion=in_id_administracion AND 
   pgr.id_mes=in_id_mes AND
   pgr.gestion=in_gestion AND 
   pgr.estado=1 AND 
   fr.id_funcionario=f.id_funcionario
) AS gasto_representacion,

(
--UNIONES DE BONIFICACIONES VARIAS
(
--BONIFICACIONES Y GRATIFICACIONES [133]
SELECT 
SUM(importe) as importe
FROM
(
(SELECT
sum(dpb.monto_total)::integer as importe
FROM salarios.planillas_bonificaciones pb
LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
WHERE
   pb.id_administracion=in_id_administracion AND 
   pb.id_mes=in_id_mes AND
   pb.gestion=in_gestion AND 
   pb.estado=1 AND 
   fb.id_funcionario=f.id_funcionario
)
UNION
(
--DIFERENCIA SALARIAL Y OTROS GASTOS [199] 
(
SELECT
  sum(pdsd.importe_monto_diferencia)::integer as importe
FROM salarios.planilla_diferencia_salarial pds
LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial 
LEFT JOIN salarios.funcionarios_superiores                fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
WHERE
   pds.id_administracion=in_id_administracion AND 
   pds.id_mes=in_id_mes AND
   pds.gestion=in_gestion AND 
   pds.estado=1 AND 
   fs.id_funcionario=f.id_funcionario
)
)
UNION
(
--ANTIGUEDAD [133]
SELECT
  dpa.importe_antiguedad::integer as importe
FROM salarios.planillas_antiguedad pa
LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad 
WHERE
   pa.id_administracion=in_id_administracion AND 
   pa.id_mes=in_id_mes AND
   pa.gestion=in_gestion AND 
   pa.estado=1 AND 
   dpa.id_funcionario=f.id_funcionario
)
UNION
(
--GRADO ACADEMICO [133]
SELECT
  dpp.importe_profesional::integer as importe
FROM salarios.planilla_profesionales pp
LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional 
LEFT JOIN salarios.funcionarios_profesionales       fp ON  fp.id_funcionario_profesional=dpp.id_funcionario_profesional
WHERE
   pp.id_administracion=in_id_administracion AND 
   pp.id_mes=in_id_mes AND
   pp.gestion=in_gestion AND 
   pp.estado=1 AND 
   fp.id_funcionario=f.id_funcionario
)
UNION
(
--GRATIFICACION ESPECIAL [137]
SELECT
  sum(dpge.importe_gratificacion)::integer as importe
FROM salarios.planilla_gratificacion_especial pge
LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge ON dpge.id_planilla_gratificacion=pge.id_planilla_gratificacion
WHERE
   pge.id_administracion=in_id_administracion AND 
   pge.id_mes=in_id_mes AND
   pge.gestion=in_gestion AND 
   pge.estado=1 AND 
   dpge.id_funcionario=f.id_funcionario
)
) boni
)
) AS bonificacion

FROM legajos.funcionarios f
LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f.id_funcionario
WHERE 
f.id_administracion in(0,in_id_administracion) AND
--f.estado_funcionario AND
saa.id_tipo_funcionario!~~'CON'
--AND f.id_funcionario IN (481,278,218,466,223,1615,1225,2891,2987)
) publico
WHERE
publico.categoria is not null 
and publico.sueldo_presupuestado>0;
--and publico.devengado is not null;
END;
]]></definition>
</function>

<function name="planilla_profesional_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
importe_monto_total numeric(12,2) := 0;
total_aporte numeric(12,2) := 0;
nombre_usuario text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	importe_monto_total := sum(importe_profesional) from salarios.detalle_planillas_profesionales where id_planilla_profesional = OLD.id_planilla_profesional;
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;
	
	total_aporte := sum(importe_aporte) from salarios.detalle_planillas_profesionales where id_planilla_profesional = OLD.id_planilla_profesional;
	IF total_aporte IS NULL THEN 
		total_aporte :=0;
	END IF;
	UPDATE salarios.planilla_profesionales SET profesional_monto_total=importe_monto_total, monto_total_aporte=total_aporte,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_profesional = OLD.id_planilla_profesional;
	RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
        importe_monto_total := sum(importe_profesional) from salarios.detalle_planillas_profesionales where id_planilla_profesional = NEW.id_planilla_profesional;
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;

	total_aporte := sum(importe_aporte) from salarios.detalle_planillas_profesionales where id_planilla_profesional = NEW.id_planilla_profesional;
	IF total_aporte IS NULL THEN 
		total_aporte :=0;
	END IF;
	
	UPDATE salarios.planilla_profesionales SET profesional_monto_total=importe_monto_total, monto_total_aporte=total_aporte, 
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_profesional = NEW.id_planilla_profesional;
	RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN
	importe_monto_total := sum(importe_profesional) from salarios.detalle_planillas_profesionales where id_planilla_profesional = NEW.id_planilla_profesional;
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;

	total_aporte := sum(importe_aporte) from salarios.detalle_planillas_profesionales where id_planilla_profesional = NEW.id_planilla_profesional;
	IF total_aporte IS NULL THEN 
		total_aporte :=0;
	END IF;
	
	UPDATE salarios.planilla_profesionales SET profesional_monto_total=importe_monto_total, monto_total_aporte=total_aporte,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_profesional = NEW.id_planilla_profesional;
	RETURN NEW;
END IF;
END;]]></definition>
</function>

<function name="planilla_ra_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
importe_monto_total numeric(12,2) := 0;
monto_aporte numeric(12,2) := 0;
nombre_usuario text := user::text;

BEGIN
	IF (TG_OP = 'DELETE') THEN
		SELECT INTO importe_monto_total, monto_aporte sum(monto), sum(aporte) 
		FROM salarios.detalles_planillas_ra 
		WHERE id_planilla_ra = OLD.id_planilla_ra;

		IF importe_monto_total IS NULL THEN 
			importe_monto_total :=0;
		END IF;

		IF monto_aporte IS NULL THEN 
			monto_aporte :=0;
		END IF;
		UPDATE salarios.planillas_ra 
		SET total_ra=importe_monto_total, total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
		WHERE id_planilla_ra = OLD.id_planilla_ra;
		RETURN OLD;
		
	ELSIF (TG_OP = 'UPDATE') THEN
		SELECT INTO importe_monto_total, monto_aporte sum(monto), sum(aporte) 
		FROM salarios.detalles_planillas_ra 
		WHERE id_planilla_ra = NEW.id_planilla_ra;

		IF importe_monto_total IS NULL THEN 
			importe_monto_total :=0;
		END IF;

		IF monto_aporte IS NULL THEN 
			monto_aporte :=0;
		END IF;
		UPDATE salarios.planillas_ra 
		SET total_ra=importe_monto_total, total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
		WHERE id_planilla_ra = NEW.id_planilla_ra;
		RETURN NEW;
		
	ELSIF (TG_OP = 'INSERT') THEN
		SELECT INTO importe_monto_total, monto_aporte sum(monto), sum(aporte) 
		FROM salarios.detalles_planillas_ra 
		WHERE id_planilla_ra = NEW.id_planilla_ra;

		IF importe_monto_total IS NULL THEN 
			importe_monto_total :=0;
		END IF;

		IF monto_aporte IS NULL THEN 
			monto_aporte :=0;
		END IF;
		UPDATE salarios.planillas_ra 
		SET total_ra=importe_monto_total, total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
		WHERE id_planilla_ra = NEW.id_planilla_ra;
		RETURN NEW;
	END IF;
END;]]></definition>
</function>

<function name="planilla_re_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
importe_monto_total numeric(12,2) := 0;
monto_aporte numeric(12,2) := 0;
nombre_usuario text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	SELECT INTO importe_monto_total, monto_aporte sum(monto), sum(aporte) 
	FROM salarios.detalles_planillas_re 
	WHERE id_planilla_re = OLD.id_planilla_re;
	
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;
	
	IF monto_aporte IS NULL THEN 
		monto_aporte :=0;
	END IF;
	
	UPDATE salarios.planillas_re 
	SET total_re=importe_monto_total, total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
	WHERE id_planilla_re = OLD.id_planilla_re;
	
	RETURN OLD;
	
ELSIF (TG_OP = 'UPDATE') THEN
        SELECT INTO importe_monto_total, monto_aporte sum(monto), sum(aporte)
	FROM salarios.detalles_planillas_re 
	WHERE id_planilla_re = NEW.id_planilla_re;
	
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;
	
	IF monto_aporte IS NULL THEN 
		monto_aporte :=0;
	END IF;
	
	UPDATE salarios.planillas_re 
	SET total_re=importe_monto_total, total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
	WHERE id_planilla_re = NEW.id_planilla_re;
	
	RETURN NEW;
	
ELSIF (TG_OP = 'INSERT') THEN
        SELECT INTO importe_monto_total, monto_aporte sum(monto), sum(aporte)
	FROM salarios.detalles_planillas_re 
	WHERE id_planilla_re = NEW.id_planilla_re;
	
	IF importe_monto_total IS NULL THEN 
		importe_monto_total :=0;
	END IF;
	
	IF monto_aporte IS NULL THEN 
		monto_aporte :=0;
	END IF;
	
	UPDATE salarios.planillas_re 
	SET total_re=importe_monto_total, total_aporte=monto_aporte, usu_modi=nombre_usuario, fec_modi=now() 
	WHERE id_planilla_re = NEW.id_planilla_re;
	
	RETURN NEW;
	
END IF;
END;]]></definition>
</function>

<function name="planilla_salarios_actualiza_montos_totales"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
	presupuestado numeric(12,2) := 0;
	devengado numeric(12,2) := 0;
	aporte numeric(12,2) := 0;
	multa numeric(12,2) := 0;
	total_caja_fiscal numeric(12,2) := 0;
	nombre_usuario text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	
	Select 
		sum(monto_presupuestado), 
		sum(monto_devengado), 
		sum(monto_aporte), 
		sum(monto_multa),
		sum(monto_total_aporte) 
		INTO
		presupuestado,
		devengado,
		aporte,
		multa,
		total_caja_fiscal

	from salarios.detalles_planillas_salarios 
	where id_planilla_salario = OLD.id_planilla_salario;

	IF presupuestado IS NULL THEN 
		presupuestado :=0;
	END IF;
	IF devengado IS NULL THEN 
		devengado :=0;
	END IF;
	-- aportes = jubilacion
	IF aporte IS NULL THEN 
		aporte :=0;
	END IF;
	IF multa IS NULL THEN 
		multa :=0;
	END IF;
        -- total_caja_fiscal = (presupuestado - devengado) + jubilacion + multas
	IF total_caja_fiscal IS NULL THEN 
		total_caja_fiscal :=0;
	END IF;
	UPDATE salarios.planillas_salarios  SET 
						total_presupuestado=presupuestado,
						total_devengado=devengado, 
						total_aporte=aporte, 
						total_multa=multa, 
						total_monto_aporte=total_caja_fiscal,
						usu_modi=nombre_usuario, 
						fec_modi=now(),
						ip_modi=inet_client_addr()::varchar(30)
	WHERE id_planilla_salario = OLD.id_planilla_salario;
	RETURN OLD;

ELSIF (TG_OP = 'UPDATE') THEN
	Select 
		sum(monto_presupuestado), 
		sum(monto_devengado), 
		sum(monto_aporte), 
		sum(monto_multa),
		sum(monto_total_aporte) 
		INTO
		presupuestado,
		devengado,
		aporte,
		multa,
		total_caja_fiscal

	from salarios.detalles_planillas_salarios 
	where id_planilla_salario = NEW.id_planilla_salario;

	IF presupuestado IS NULL THEN 
		presupuestado :=0;
	END IF;
	IF devengado IS NULL THEN 
		devengado :=0;
	END IF;
	-- aportes = jubilacion
	IF aporte IS NULL THEN 
		aporte :=0;
	END IF;
	IF multa IS NULL THEN 
		multa :=0;
	END IF;
        -- total_caja_fiscal = (presupuestado - devengado) + jubilacion + multas
	IF total_caja_fiscal IS NULL THEN 
		total_caja_fiscal :=0;
	END IF;
	UPDATE salarios.planillas_salarios  SET 
						total_presupuestado=presupuestado,
						total_devengado=devengado, 
						total_aporte=aporte, 
						total_multa=multa, 
						total_monto_aporte=total_caja_fiscal,
						usu_modi=nombre_usuario, 
						fec_modi=now(),
						ip_modi=inet_client_addr()::varchar(30)
	WHERE id_planilla_salario = NEW.id_planilla_salario;
	RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN
	Select 
		sum(monto_presupuestado), 
		sum(monto_devengado), 
		sum(monto_aporte), 
		sum(monto_multa),
		sum(monto_total_aporte) 
		INTO
		presupuestado,
		devengado,
		aporte,
		multa,
		total_caja_fiscal

	from salarios.detalles_planillas_salarios 
	where id_planilla_salario = NEW.id_planilla_salario;

	IF presupuestado IS NULL THEN 
		presupuestado :=0;
	END IF;
	IF devengado IS NULL THEN 
		devengado :=0;
	END IF;
	-- aportes = jubilacion
	IF aporte IS NULL THEN 
		aporte :=0;
	END IF;
	IF multa IS NULL THEN 
		multa :=0;
	END IF;
        -- total_caja_fiscal = (presupuestado - devengado) + jubilacion + multas
	IF total_caja_fiscal IS NULL THEN 
		total_caja_fiscal :=0;
	END IF;
	UPDATE salarios.planillas_salarios  SET 
						total_presupuestado=presupuestado,
						total_devengado=devengado, 
						total_aporte=aporte, 
						total_multa=multa, 
						total_monto_aporte=total_caja_fiscal,
						usu_modi=nombre_usuario, 
						fec_modi=now(),
						ip_modi=inet_client_addr()::varchar(30)
	WHERE id_planilla_salario = NEW.id_planilla_salario;
	RETURN NEW;
END IF;
END;]]></definition>
</function>

<function name="planilla_vacante_actualiza_monto_vacante"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
importe_vacante numeric(12,2) := 0;
nombre_usuario text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	importe_vacante := sum(importe) from salarios.detalle_planillas_vacantes where id_planilla_vacante = OLD.id_planilla_vacante;
	IF importe_vacante IS NULL THEN 
		importe_vacante :=0;
	END IF;
	UPDATE salarios.planillas_vacante SET monto_vacante=importe_vacante,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_vacante = OLD.id_planilla_vacante;
	RETURN OLD;

ELSIF (TG_OP = 'UPDATE') THEN
        importe_vacante := sum(importe) from salarios.detalle_planillas_vacantes where id_planilla_vacante = NEW.id_planilla_vacante;
	IF importe_vacante IS NULL THEN 
		importe_vacante :=0;
	END IF;
	UPDATE salarios.planillas_vacante SET monto_vacante=importe_vacante, 
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_vacante = NEW.id_planilla_vacante;
	RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN
	importe_vacante := sum(importe) from salarios.detalle_planillas_vacantes where id_planilla_vacante = NEW.id_planilla_vacante;
	IF importe_vacante IS NULL THEN 
		importe_vacante :=0;
	END IF;
	UPDATE salarios.planillas_vacante SET monto_vacante=importe_vacante, 
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_vacante = NEW.id_planilla_vacante;
	RETURN NEW;
END IF;
END;]]></definition>
</function>

<function name="planillas_aguinaldos_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
v_monto numeric(20,2) := 0;
nombre_usuario     text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	v_monto := sum(monto) from salarios.planillas_detalles_aguinaldos where id_planilla_aguinaldo = OLD.id_planilla_aguinaldo;
	IF v_monto IS NULL THEN 
		v_monto :=0;
	END IF;

	UPDATE salarios.planillas_aguinaldos SET monto_total=v_monto,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_aguinaldo = OLD.id_planilla_aguinaldo;
	RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
        v_monto := sum(monto) from salarios.planillas_detalles_aguinaldos where id_planilla_aguinaldo = NEW.id_planilla_aguinaldo;
	IF v_monto IS NULL THEN 
		v_monto :=0;
	END IF;

	UPDATE salarios.planillas_aguinaldos SET monto_total=v_monto,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_aguinaldo = NEW.id_planilla_aguinaldo;
	RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN
	v_monto := sum(monto) from salarios.planillas_detalles_aguinaldos where id_planilla_aguinaldo = NEW.id_planilla_aguinaldo;
	IF v_monto IS NULL THEN 
		v_monto :=0;
	END IF;

	UPDATE salarios.planillas_aguinaldos SET monto_total=v_monto,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_aguinaldo = NEW.id_planilla_aguinaldo;
	RETURN NEW;
END IF;
END;]]></definition>
</function>

<function name="planillas_otras_transferencias_ctes_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
importe numeric(12,2) := 0;
nombre_usuario text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	importe := sum(importe_otra_transferencia_cte) from salarios.planillas_otras_transferencias_ctes_detalles where id_planilla_otra_transferencia_cte = OLD.id_planilla_otra_transferencia_cte;
	IF importe IS NULL THEN 
		importe :=0;
	END IF;

	UPDATE salarios.planillas_otras_transferencias_ctes SET monto_total_otra_transferencia_cte=importe,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_otra_transferencia_cte = OLD.id_planilla_otra_transferencia_cte;
	RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
        importe := sum(importe_otra_transferencia_cte) from salarios.planillas_otras_transferencias_ctes_detalles where id_planilla_otra_transferencia_cte = NEW.id_planilla_otra_transferencia_cte;
	IF importe IS NULL THEN 
		importe :=0;
	END IF;

	UPDATE salarios.planillas_otras_transferencias_ctes SET monto_total_otra_transferencia_cte=importe,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_otra_transferencia_cte = NEW.id_planilla_otra_transferencia_cte;
	RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN
	importe := sum(importe_otra_transferencia_cte) from salarios.planillas_otras_transferencias_ctes_detalles where id_planilla_otra_transferencia_cte = NEW.id_planilla_otra_transferencia_cte;
	IF importe IS NULL THEN 
		importe :=0;
	END IF;

	UPDATE salarios.planillas_otras_transferencias_ctes SET monto_total_otra_transferencia_cte=importe,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_otra_transferencia_cte = NEW.id_planilla_otra_transferencia_cte;
	RETURN NEW;
END IF;
END;]]></definition>
</function>

<function name="planillas_subsidios_actualiza_montos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
v_importe_monto_total numeric(12,2) := 0;
v_total_aporte numeric(12,2) := 0;
nombre_usuario text := user::text;
BEGIN
IF (TG_OP = 'DELETE') THEN
	v_importe_monto_total := sum(importe_monto) from salarios.detalles_planillas_subsidios where id_planilla_subsidio = OLD.id_planilla_subsidio;
	IF v_importe_monto_total IS NULL THEN 
		v_importe_monto_total :=0;
	END IF;
	
	v_total_aporte := sum(aporte) from salarios.detalles_planillas_subsidios where id_planilla_subsidio = OLD.id_planilla_subsidio;
	IF v_total_aporte IS NULL THEN 
		v_total_aporte :=0;
	END IF;
	UPDATE salarios.planillas_subsidios SET total_subsidio=v_importe_monto_total, total_aporte=v_total_aporte,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_subsidio = OLD.id_planilla_subsidio;
	RETURN OLD;
ELSIF (TG_OP = 'UPDATE') THEN
        v_importe_monto_total := sum(importe_monto) from salarios.detalles_planillas_subsidios where id_planilla_subsidio = NEW.id_planilla_subsidio;
	IF v_importe_monto_total IS NULL THEN 
		v_importe_monto_total :=0;
	END IF;

	v_total_aporte := sum(aporte) from salarios.detalles_planillas_subsidios where id_planilla_subsidio = NEW.id_planilla_subsidio;
	IF v_total_aporte IS NULL THEN 
		v_total_aporte :=0;
	END IF;
	
	UPDATE salarios.planillas_subsidios SET total_subsidio=v_importe_monto_total, total_aporte=v_total_aporte,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_subsidio = NEW.id_planilla_subsidio;
	RETURN NEW;
ELSIF (TG_OP = 'INSERT') THEN
	v_importe_monto_total := sum(importe_monto) from salarios.detalles_planillas_subsidios where id_planilla_subsidio = NEW.id_planilla_subsidio;
	IF v_importe_monto_total IS NULL THEN 
		v_importe_monto_total :=0;
	END IF;

	v_total_aporte := sum(aporte) from salarios.detalles_planillas_subsidios where id_planilla_subsidio = NEW.id_planilla_subsidio;
	IF v_total_aporte IS NULL THEN 
		v_total_aporte :=0;
	END IF;
	
	UPDATE salarios.planillas_subsidios SET total_subsidio=v_importe_monto_total, total_aporte=v_total_aporte,
	usu_modi=nombre_usuario, fec_modi=now() WHERE id_planilla_subsidio = NEW.id_planilla_subsidio;
	RETURN NEW;
END IF;
END;]]></definition>
</function>

<function name="planillas_subsidios_detalles"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_oficina">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario_subsidio">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="character varying"/>
	</parameter>
	<parameter name="funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="aporte_porcentaje">
		<type name="numeric"/>
	</parameter>
	<parameter name="cantidad">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_subsidio">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="aporte_jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="subsidio">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para obtener planilla de pago de subsidio de funcionarios
  * Fecha: 2012-04-30
  * Autor: Lic. José Cabrera
  * Parametros:
  *            in_id_mes mes de proceso
  *            in_gestion ejercicio aplicado
  *            in_id_administracion, identificador de la administracion 
  * 
  * Descripcion:  Calcular el sueldo devengado a partir del aporte de jubilacion 
  * ------------  
  */
	RETURN QUERY 
	SELECT  
		o.id_oficina,
		o.nombre AS nombre_oficina,
		o.nivel1, 
		o.nivel2,
		o.nivel3,
		o.nivel4,
		o.nivel5,
		fs.id_funcionario_subsidio,
		f.id_funcionario, 
		f.cedula_funcionario,
		f.ape_nom_funcionario,
		salarios.obtener_aporte_porcentaje(f.id_funcionario, false) AS aporte_porcentaje, --no tiene aporte
		fs.cantidad, 
		s.importe AS monto_subsidio, 
		fs.cantidad*s.importe AS importe_total,     
		0.0 AS aporte_jubilacion, -- No hay aporte
		fs.id_mes,
		fs.gestion,
		s.descripcion::text AS subsidio
	FROM salarios.funcionarios_subsidios fs
	INNER JOIN salarios.subsidios s 
		ON fs.id_subsidio = s.id_subsidio
	INNER JOIN legajos.funcionarios f 
		ON fs.id_funcionario = f.id_funcionario
	INNER JOIN legajos.oficinas o 
		ON fs.id_oficina = o.id_oficina
		AND o.gestion = in_gestion
	WHERE  fs.id_mes = in_id_mes
	   AND fs.gestion = in_gestion 
	   AND fs.id_administracion = in_id_administracion
	   AND fs.id_funcionario_subsidio not in 
                            (select a.id_funcionario_subsidio from salarios.detalles_planillas_subsidios a 
                            left join salarios.planillas_subsidios b on b.id_planilla_subsidio = a.id_planilla_subsidio
                            where b.id_mes=in_id_mes and b.gestion=in_gestion)
	order by o.id_oficina asc;

END;
]]></definition>
</function>

<function name="reporte_auditoria"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="nombres">
		<type name="text"/>
	</parameter>
	<parameter name="apellidos">
		<type name="text"/>
	</parameter>
	<parameter name="n1">
		<type name="integer"/>
	</parameter>
	<parameter name="n2">
		<type name="integer"/>
	</parameter>
	<parameter name="n3">
		<type name="integer"/>
	</parameter>
	<parameter name="n4">
		<type name="integer"/>
	</parameter>
	<parameter name="n5">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel1">
		<type name="text"/>
	</parameter>
	<parameter name="nivel2">
		<type name="text"/>
	</parameter>
	<parameter name="nivel3">
		<type name="text"/>
	</parameter>
	<parameter name="nivel4">
		<type name="text"/>
	</parameter>
	<parameter name="nivel5">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="tipo">
		<type name="text"/>
	</parameter>
	<parameter name="pres_111">
		<type name="integer"/>
	</parameter>
	<parameter name="deve_111">
		<type name="integer"/>
	</parameter>
	<parameter name="dife_199">
		<type name="integer"/>
	</parameter>
	<parameter name="gast_113">
		<type name="integer"/>
	</parameter>
	<parameter name="ga20_133">
		<type name="integer"/>
	</parameter>
	<parameter name="anti_133">
		<type name="integer"/>
	</parameter>
	<parameter name="grad_133">
		<type name="integer"/>
	</parameter>
	<parameter name="gesp_137">
		<type name="integer"/>
	</parameter>
	<parameter name="goca_133">
		<type name="integer"/>
	</parameter>
	<parameter name="otc_849">
		<type name="integer"/>
	</parameter>
	<parameter name="subs_131">
		<type name="integer"/>
	</parameter>
	<parameter name="rext_123">
		<type name="integer"/>
	</parameter>
	<parameter name="radi_125">
		<type name="integer"/>
	</parameter>
	<parameter name="total">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado de las liquidaciones de los funcionarios permanentes/comisionados por mes y gestion
  * Creado    : 2014-01-14 14:37:00
  * Modificado: 2014-04-24 11:18:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado 
  * 
  * Descripcion:  Genera un listado de los funcionarios permanentes/comisionados referentes a las liquidaciones el mes y la gestion ingresado
  * ------------  
  */
RETURN QUERY 
SELECT
*
FROM
(
SELECT
cgr.id::integer,
cgr.cedula_funcionario::text as cedula,
cgr.nombre_funcionario::text as nombres,
cgr.apellido_funcionario::text as apellidos,
cgr.nivel1::integer as n1,
cgr.nivel2::integer as n2,
cgr.nivel3::integer as n3,
cgr.nivel4::integer as n4,
cgr.nivel5::integer as n5,
cgr.nombre_nivel1::text as nivel1,
cgr.nombre_nivel2::text as nivel2,
cgr.nombre_nivel3::text as nivel3,
cgr.nombre_nivel4::text as nivel4,
cgr.nombre_nivel5::text as nivel5,
cgr.nombre_categoria::text as categoria,
cgr.nombre_cargo::text as cargo,
cgr.tipo_fun::text as tipo,
cgr.pres_111_fun::integer,
cgr.deve_111_fun::integer,
cgr.dife_199_fun::integer,
cgr.gast_113_fun::integer,

cgr.ga20_133_fun::integer,
/*cgr.ga40_133_fun::integer,
cgr.ga450_133_fun::integer,
cgr.ga700_133_fun::integer,
cgr.gp20_133_fun::integer,
cgr.gp40_133_fun::integer,
cgr.gp550_133_fun::integer,
cgr.gp700_133_fun::integer,
cgr.insal_133_fun::integer,

cgr.resp_133_fun::integer,
*/

cgr.anti_133_fun::integer,
cgr.grad_133_fun::integer,
cgr.gesp_137_fun::integer,
cgr.goca_133_fun::integer,
cgr.otc_849_fun::integer,
cgr.subs_131_fun::integer,
cgr.rext_123_fun::integer,
cgr.radi_125_fun::integer,
(cgr.deve_111_fun+
cgr.dife_199_fun+
cgr.gast_113_fun+

cgr.ga20_133_fun+
/*cgr.ga40_133_fun+
cgr.ga450_133_fun+
cgr.ga700_133_fun+
cgr.gp20_133_fun+
cgr.gp40_133_fun+
cgr.gp550_133_fun+
cgr.gp700_133_fun+
cgr.insal_133_fun+

cgr.resp_133_fun+*/

cgr.anti_133_fun+
cgr.grad_133_fun+
cgr.gesp_137_fun+
cgr.goca_133_fun+
cgr.otc_849_fun+
cgr.subs_131_fun+
cgr.rext_123_fun+
cgr.radi_125_fun)::integer as total
FROM
(
SELECT
  f.id_funcionario as id,
  f.cedula_funcionario,
  f.nombre_funcionario,
  f.apellido_funcionario,
  ocd.nivel1,
  ocd.nivel2,
  ocd.nivel3,
  ocd.nivel4,
  ocd.nivel5,
  ocd.nombre_nivel1,
  ocd.nombre_nivel2,
  CASE WHEN trim(ocd.nombre_nivel3) is null THEN (CASE WHEN ocd.nombre_nivel4 is null THEN ocd.nombre_nivel5 ELSE ocd.nombre_nivel4 END) ELSE ocd.nombre_nivel3 END as nombre_nivel3,
  ocd.nombre_nivel4,
  ocd.nombre_nivel5,
  cat.nombre_categoria,
  car.nombre_cargo,
  CASE WHEN cat.es_comisionado THEN 'COM ['||UPPER(cat.abreviatura_entidad)||']' ELSE 'PER ['||UPPER(cat.abreviatura_entidad)||']' END as tipo_fun,
  cim.importe::integer as pres_111_fun,
  (
  --SALARIO PERMANENTE [111]
    COALESCE(
  (
  SELECT 
   sum(dps.monto_devengado) as presupuestado
  FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario = ps.id_planilla_salario
  WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=f.id_funcionario
     ),0)
 ) as deve_111_fun,
 (
 --DIFERENCIA SALARIAL [199]
   COALESCE(
  (
 SELECT
   pdsd.importe_monto_diferencia::integer as importe
 FROM salarios.planilla_diferencia_salarial pds
 LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial 
 LEFT JOIN salarios.funcionarios_superiores                fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
 WHERE
   pds.id_administracion=in_id_administracion AND 
   pds.id_mes=in_id_mes AND
   pds.gestion=in_gestion AND 
   pds.estado=1 AND 
   fs.id_funcionario=f.id_funcionario
     ),0)
 ) as dife_199_fun,
 (
 --GASTO REPRESENTACION [113]
   COALESCE(
  (
 SELECT
   sum(pgrd.devengado_parcial)::integer as importe
 FROM salarios.planilla_gasto_representacion pgr
 LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion 
 LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
 WHERE
   pgr.id_administracion=in_id_administracion AND 
   pgr.id_mes=in_id_mes AND
   pgr.gestion=in_gestion AND 
   pgr.estado=1 AND 
   fr.id_funcionario=f.id_funcionario
     ),0)
 ) as gast_113_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION ADMINISTRATIVA 20% SP
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
        LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
        LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
        LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
        pb.id_mes=in_id_mes AND
        pb.gestion=in_gestion AND 
        pb.estado=1 AND 
        --(b.descripcion ilike '%GESTION ADMINISTRATIVA 20% SP%') AND
        fb.id_funcionario= f.id_funcionario
  ),0)
) as ga20_133_fun,
 /*(
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION ADMINISTRATIVA 40% (SP + GR)
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
        LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
        LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
        LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
        pb.id_mes=in_id_mes AND
        pb.gestion=in_gestion AND 
        pb.estado=1 AND 
        (b.descripcion ilike '%GESTION ADMINISTRATIVA 40% (SP + GR)%') AND 
        fb.id_funcionario= f.id_funcionario 
   ),0)
) as ga40_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION ADMINISTRATIVA - 450.000
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
        LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
        LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
        LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
        pb.id_mes=in_id_mes AND
        pb.gestion=in_gestion AND 
        pb.estado=1 AND
        (b.descripcion ilike '%GESTION ADMINISTRATIVA - 450.000%') AND 
        fb.id_funcionario= f.id_funcionario 
   ),0)
) as ga450_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION ADMINISTRATIVA - 700.000
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
        LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
        LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
        LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
        pb.id_mes=in_id_mes AND
        pb.gestion=in_gestion AND 
        pb.estado=1 AND
        (b.descripcion ilike '%GESTION ADMINISTRATIVA - 700.000%') AND 
        fb.id_funcionario= f.id_funcionario 
   ),0)
) as ga700_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION PRESUPUESTARIA 20% SP
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
	LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
	LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
	pb.id_administracion=in_id_administracion AND 
	pb.id_mes=in_id_mes AND
	pb.gestion=in_gestion AND 
	pb.estado=1 AND
	(b.descripcion ilike '%GESTION PRESUPUESTARIA 20% SP%') AND 
        fb.id_funcionario= f.id_funcionario 
   ),0)
) as gp20_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION PRESUPUESTARIA 40% (SP + GR)
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
	LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
	LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
	pb.id_administracion=in_id_administracion AND 
	pb.id_mes=in_id_mes AND
	pb.gestion=in_gestion AND 
	pb.estado=1 AND
	(b.descripcion ilike '%GESTION PRESUPUESTARIA 40% (SP + GR)%') AND 
        fb.id_funcionario= f.id_funcionario  
   ),0)
) as gp40_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION PRESUPUESTARIA - 550.000
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
	LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
	LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
	pb.id_mes=in_id_mes AND
	pb.gestion=in_gestion AND 
	pb.estado=1 AND
	(b.descripcion ilike '%GESTION PRESUPUESTARIA - 550.000%') AND 
        fb.id_funcionario= f.id_funcionario  
   ),0)
) as gp550_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION PRESUPUESTARIA - 700.000
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
	LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
	LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
	pb.id_administracion=in_id_administracion AND 
	pb.id_mes=in_id_mes AND
	pb.gestion=in_gestion AND 
	pb.estado=1 AND
	(b.descripcion ilike '%GESTION PRESUPUESTARIA - 700.000%') AND 
        fb.id_funcionario= f.id_funcionario  
   ),0)
) as gp700_133_fun,
 (
 --BONIFICACIONES Y GRATIFICACIONES [133] GESTION PRESUPUESTARIA - 700.000
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
	LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
	LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
	LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
	pb.id_administracion=in_id_administracion AND 
	pb.id_mes=in_id_mes AND
	pb.gestion=in_gestion AND 
	pb.estado=1 AND
	(b.descripcion ilike '%INSALUBRIDAD%') AND 
        fb.id_funcionario= f.id_funcionario    
   ),0)
) as insal_133_fun,
(
--BONIFICACIONES Y GRATIFICACIONES [133] RESPONSABILIDAD
   COALESCE(
  (
     SELECT
        sum(dpb.monto_total::integer) as importe
     FROM salarios.planillas_bonificaciones pb
        LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
        LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
        LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
     WHERE
        pb.id_administracion=in_id_administracion AND 
        pb.id_mes=in_id_mes AND
        pb.gestion=in_gestion AND 
        pb.estado=1 AND 
        (b.descripcion ilike '%ABOGADO FISCAL%' OR b.descripcion ilike '%RESPONSABILIDAD EN EL CARGO 80% (SP + GR)%') AND 
        fb.id_funcionario= f.id_funcionario
        ),0)
) as resp_133_fun,*/
 (
--ANTIGUEDAD [133]
  COALESCE(
  (
 SELECT
   dpa.importe_antiguedad::integer as importe
 FROM salarios.planillas_antiguedad pa
 LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad 
 WHERE
   pa.id_administracion=in_id_administracion AND 
   pa.id_mes=in_id_mes AND
   pa.gestion=in_gestion AND 
   pa.estado=1 AND 
   dpa.id_funcionario=f.id_funcionario
     ),0)
 ) as anti_133_fun,
 (
 --GRADO ACADEMICO [133]
   COALESCE(
  (
 SELECT
   dpp.importe_profesional::integer as importe
 FROM salarios.planilla_profesionales pp
 LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional 
 LEFT JOIN salarios.funcionarios_profesionales       fp ON  fp.id_funcionario_profesional=dpp.id_funcionario_profesional
 WHERE
   pp.id_administracion=in_id_administracion AND 
   pp.id_mes=in_id_mes AND
   pp.gestion=in_gestion AND 
   pp.estado=1 AND 
   fp.id_funcionario=f.id_funcionario
     ),0)
 ) as grad_133_fun,
 (
--GRATIFICACION ESPECIAL [137]
  COALESCE(
  (
 (
  SELECT
   sum(ge.importe) as importe
  FROM
  (
   SELECT
    dpge.importe_gratificacion::integer as importe,  
    (row_number() over())+120 as linea
   FROM salarios.planilla_gratificacion_especial pge
   LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge ON dpge.id_planilla_gratificacion=pge.id_planilla_gratificacion
   WHERE
     pge.id_administracion=in_id_administracion AND 
     pge.id_mes=in_id_mes AND
     pge.gestion=in_gestion AND 
     pge.estado=1 AND 
     dpge.id_funcionario=f.id_funcionario
  ) ge)
    ),0)
 ) as gesp_137_fun,
 (
 --GRATIFICACION OCASIONAL [133]
   COALESCE(
  (
 SELECT
   dpgo.importe_gratificacion::integer as importe
 FROM salarios.planilla_gratificacion_ocacional pgo
 LEFT JOIN salarios.detalle_planilla_gratificacion_ocacional dpgo ON dpgo.id_planilla_gratificacion_ocacional=pgo.id_planilla_gratificacion_ocacional 
 WHERE
    pgo.id_administracion=in_id_administracion AND 
    pgo.id_mes=in_id_mes AND
    pgo.gestion=in_gestion AND 
    pgo.estado=1 AND 
    dpgo.id_funcionario=f.id_funcionario
      ),0)
 ) as goca_133_fun,
 (
 --OTRAS TRANSFERENCIAS CORRIENTES [849]
   COALESCE(
  (
 SELECT 
   sum(otc.importe_gratificacion_otra_transferencia_cte::integer) as importe
 FROM
 (SELECT
   14 as orden,
   potcd.importe_otra_transferencia_cte::integer as monto_liquido,
   potcd.importe_otra_transferencia_cte::integer as importe_gratificacion_otra_transferencia_cte,  
   0 as importe_aporte_gratificacion,
   (row_number() over())+140 as linea
 FROM salarios.planillas_otras_transferencias_ctes potc
 LEFT JOIN salarios.planillas_otras_transferencias_ctes_detalles potcd ON potcd.id_planilla_otra_transferencia_cte=potc.id_planilla_otra_transferencia_cte
 WHERE
   potc.id_administracion=in_id_administracion AND 
   potc.id_mes=in_id_mes AND
   potc.gestion=in_gestion AND 
   potc.estado=1 AND 
   potcd.id_funcionario=f.id_funcionario
 ) otc
   ),0)
 ) as otc_849_fun,
(
--SUBSIDIOS [131]
  COALESCE(
  (
SELECT
  sum(dps.importe_monto::integer) as importe
FROM salarios.planillas_subsidios ps
LEFT JOIN salarios.detalles_planillas_subsidios dps ON dps.id_planilla_subsidio=ps.id_planilla_subsidio 
LEFT JOIN salarios.funcionarios_subsidios       fsu ON fsu.id_funcionario_subsidio=dps.id_funcionario_subsidio
LEFT JOIN salarios.subsidios 		        sub ON sub.id_subsidio=fsu.id_subsidio
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.estado=1 AND 
   fsu.id_funcionario=f.id_funcionario
     ),0)
) as subs_131_fun,
 
 (
--REMUNERACION EXTRAORDINARIA [123]
  COALESCE(
  (
  SELECT 
    sum(re.monto)::integer as importe
  FROM
  (SELECT
    dpre.monto::integer as monto,   
    (row_number() over())+160 as linea
  FROM salarios.planillas_re pre
  LEFT JOIN salarios.detalles_planillas_re dpre ON dpre.id_planilla_re=pre.id_planilla_re
  WHERE
    pre.id_administracion=in_id_administracion AND 
    pre.id_mes=in_id_mes AND
    pre.gestion=in_gestion AND 
    pre.estado=1 AND 
    dpre.id_funcionario=f.id_funcionario
  ) re
  ),0)
  ) as rext_123_fun,
  (
  --REMUNERACION ADICIONAL [125]
  COALESCE(
  (
  SELECT 
   sum(ra.monto)::integer as importea
  FROM
   (SELECT
    17 as orden,
    dpra.cantidad_horas,  
    dpra.monto::integer as monto,
    '0'::text as descuento,   
    dpra.aporte::integer as aporte, 
    (row_number() over())+170 as linea
  FROM salarios.planillas_ra pra
  LEFT JOIN salarios.detalles_planillas_ra dpra ON dpra.id_planilla_ra=pra.id_planilla_ra
  WHERE
   pra.id_administracion=in_id_administracion AND 
   pra.id_mes=in_id_mes AND
   pra.gestion=in_gestion AND 
   pra.estado=1 AND 
   dpra.id_funcionario=f.id_funcionario
  ) ra
  ),0)
  ) as radi_125_fun
FROM 
  salarios.funcionarios_categorias fc
  LEFT JOIN salarios.detalles_categorias dc             ON dc.id_detalle_categoria=fc.id_detalle_categoria
  LEFT JOIN salarios.categorias cat                     ON cat.id_categoria=dc.id_categoria
  LEFT JOIN salarios.cargos car                         ON car.id_cargo=cat.id_cargo
  LEFT JOIN salarios.categoria_importe_mensual cim      ON cim.id_categoria=cat.id_categoria AND cim.id_mes = in_id_mes -- id_mes
  LEFT JOIN legajos.funcionarios f                      ON f.id_funcionario=fc.id_funcionario
  --LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f.id_funcionario
  LEFT JOIN legajos.oficinas_con_descripciones      ocd ON ocd.id_oficina=fc.id_oficina 
WHERE
  fc.gestion=in_gestion AND
  fc.id_funcionario_categoria in (SELECT x.id_funcionario_categoria
						 FROM salarios.funcionarios_categorias x
						 WHERE (in_id_mes BETWEEN  extract(MONTH from x.desde) AND
							extract(MONTH from x.hasta-1) OR x.hasta is null) AND 
							x.gestion=fc.gestion AND 
							x.id_funcionario = fc.id_funcionario AND
							(
							     CASE
								WHEN 
								   in_id_funcionario='0'
								THEN
								   fc.id_funcionario>0
								ELSE
								   fc.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
							     END  
							)
					        ORDER BY x.id_funcionario_categoria LIMIT 1) AND
  
--  fc.hasta is null AND
--  f.estado_funcionario AND
  f.id_administracion IN (0,in_id_administracion) AND
  cat.id_cargo>0 AND
  (
     CASE
        WHEN 
	   char_length(in_id_funcionario)>1 
        THEN 
	   f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
        ELSE
	   f.id_funcionario>0
     END  
   )
--   AND
--   f.id_funcionario IN(466,218,2891,481,223,278,2987,305)
--  f.id_funcionario NOT IN(1721,1789,1720,1122,1344,1415,1790)
ORDER BY f.ape_nom_funcionario
) cgr
) cgr2
WHERE
cgr2.total>0;

END;
]]></definition>
</function>

<function name="reporte_pedido_fondo"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<comment><![CDATA[Fecha: 2011-06-11
Autor: Lic. Guillermo Galeano Fernández
Motivo: Utilizado en el pedido de fondo 
       (y en el resumen final de la planilla de salarios).-]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="reparticion">
		<type name="text"/>
	</parameter>
	<parameter name="suma_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="suma_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="suma_jubilacion">
		<type name="numeric"/>
	</parameter>
	<parameter name="suma_multas">
		<type name="numeric"/>
	</parameter>
	<parameter name="suma_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="suma_descuentos_varios_aplicados">
		<type name="numeric"/>
	</parameter>
	<parameter name="suma_liquido">
		<type name="numeric"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="id_estructura_presupuestaria">
		<type name="integer"/>
	</parameter>
	<parameter name="descripcion_estructura">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
	in_id_mes integer;
	in_gestion numeric;
BEGIN
Select id_mes, gestion into in_id_mes, in_gestion 
from salarios.planillas_salarios 
where id_planilla_salario=in_id_planilla_salario;

RETURN QUERY Select 
      case 
          when b.nombre_nivel2 is null then 'CARGOS VACANTES'::text 
      else b.nombre_nivel2::text 
      end as reparticion,
-- a.*
a.suma_presupuestado,
a.suma_devengado,
a.suma_jubilacion,
a.suma_multas,
a.suma_aporte,
a.suma_descuentos_varios_aplicados,
a.suma_liquido,
a.nivel1,
a.nivel2,
a.id_estructura_presupuestaria,
      case 
          when b.descripcion_estructura is null then ' '::text 
      else b.descripcion_estructura::text||' - '|| b.descripcion_programa::text
      end as descripcion_estructura
from
(
(SELECT 
	sum(a.monto_presupuestado) as suma_presupuestado, 
        sum(a.monto_devengado) as suma_devengado, 
        sum(a.monto_aporte) as suma_jubilacion, 
        sum(a.monto_multa) as suma_multas, 
        sum(a.monto_total_aporte) as suma_aporte,
        sum(a.importe_descuentos_varios_aplicado) as suma_descuentos_varios_aplicados,
--        sum((a.monto_devengado-(a.monto_aporte+a.monto_multa+a.importe_descuentos_varios_aplicado))) as suma_liquido,
        sum(a.importe_liquido_con_descuentos_varios) as suma_liquido,
	b.nivel1, 
	b.nivel2,
	b.id_estructura_presupuestaria 
        
FROM salarios.detalles_planillas_salarios a
		left join legajos.oficinas b 
			on (a.id_oficina=b.id_oficina)

WHERE  a.id_planilla_salario=in_id_planilla_salario

group by b.nivel1, b.nivel2, b.id_estructura_presupuestaria 
order by b.nivel1 asc, b.nivel2 asc, b.id_estructura_presupuestaria asc 
) 
union
(
Select
      sum(g.importe_total),
      0,
      0,
      0,
      sum(g.importe_total),
      0,
      0,
      0,
      0,      
      g.id_estructura_presupuestaria
From
(
SELECT 
	a.id_estructura_presupuestaria, 
	c.importe as importe_unitario,
	a.cantidad*c.importe as importe_total,
	c.id_mes
  FROM salarios.vacantes_categoria_cantidad(in_gestion,in_id_planilla_salario) a
	left join salarios.categoria_importe_mensual c
		on (a.id_categoria=c.id_categoria and c.id_mes = in_id_mes)
) as g
group by g.id_estructura_presupuestaria
)

order by id_estructura_presupuestaria asc, nivel1 desc, nivel2 asc
) as a

left join legajos.oficinas_con_descripciones b
	on (a.id_estructura_presupuestaria=b.id_estructura_presupuestaria and a.nivel1=b.nivel1 and a.nivel2 = b.nivel2 AND b.nivel3 = 0 AND b.nivel4 = 0 AND b.nivel5 = 0 and b.gestion=in_gestion)
--	on (a.id_estructura_presupuestaria=b.id_estructura_presupuestaria and a.nivel1=b.nivel1 and a.nivel2 = b.nivel2 AND b.nivel3 = 0 AND b.nivel4 = 0 AND b.nivel5 = 0 and b.gestion=2012)
order by id_estructura_presupuestaria asc, nivel1 desc, nivel2 asc
;

END;
]]></definition>
</function>

<function name="reporte_planilla_salario"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_detalle_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="dias_trabajados">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_multa">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_liquido">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_total_aporte">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_liquido_sin_descuentos_varios">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_descuentos_varios_solicitado">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_descuentos_varios_aplicado">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_descuentos_varios_diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_liquido_con_descuentos_varios">
		<type name="numeric"/>
	</parameter>
	<parameter name="ape_nom_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="cedula_funcionario">
		<type name="character varying"/>
	</parameter>
	<parameter name="cedula_numeric">
		<type name="numeric"/>
	</parameter>
	<parameter name="nombre_cargo">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_categoria">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_oficina1">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="estado">
		<type name="boolean"/>
	</parameter>
	<parameter name="nombre_nivel1">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel2">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel3">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel4">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel5">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_estructura_presupuestaria">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_tipo">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_programa">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_subprograma">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_objeto_gasto">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_fuente_financiamiento">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_departamento">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_proyecto">
		<type name="numeric"/>
	</parameter>
	<parameter name="cod_organismo_financiador">
		<type name="numeric"/>
	</parameter>
	<parameter name="descripcion_estructura_presupuestaria">
		<type name="text"/>
	</parameter>
	<parameter name="descripcion_tipo">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_programa">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_subprograma">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_objeto_gasto">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_fuente_financiamiento">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_alcance">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_proyecto">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_organismo_financiador">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_programa_abreviatura">
		<type name="character varying"/>
	</parameter>
	<parameter name="descripcion_programa_estado">
		<type name="boolean"/>
	</parameter>
	<parameter name="descripcion_estructura">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
DECLARE
	-- Para emitir notificaciones de depuracion:
	bDebug boolean :=false;
        tNombre_funcion text := '[salarios.reporte_planilla_salario(integer)]';

    rDetalle_Plla_salarios RECORD;
    -- desc_de_un_funcionario RECORD;
    nGestion numeric :=0;
    iId_mes integer := 0;


    iId_detalle_categoria_old integer :=0;
    iId_detalle_categoria_new integer :=0;

    iId_funcionario_categoria_old integer :=0;
    iId_funcionario_categoria_new integer :=0;
	nImporte_presupuestado_old numeric :=0;
	nImporte_presupuestado_new numeric :=0;
    iId_funcionario_categoria integer :=0;

    iId_detalle_categoria integer :=0;

     bandera_viejo integer :=0;
BEGIN
	/*
	Fecha: 2011-06-06
	Autor: Lic. Guillermo Galeano Fernández
	Motivo: Select para el reporte de la planilla de salarios.
	*/

	-- Función para obtener los datos para la planilla de salarios.
	-- Autor: Lic. Guillermo Galeano Fernández
	-- Fecha: 2012-04-09
	-- 2012-05-19: Correcciones para usar estados de categorías por gestion

-- Obtener la gestion de esta planilla de salario:
Select 
	za.gestion, 
	za.id_mes 
into 
	nGestion, 
	iId_mes 
from salarios.planillas_salarios za
where za.id_planilla_salario=in_id_planilla_salario;

IF (bDebug IS TRUE) THEN
	RAISE NOTICE '% - % - 
nGestion=%, iId_mes=%.-',tNombre_funcion, now(),nGestion, iId_mes;
END IF;

FOR rDetalle_Plla_salarios IN 
	  SELECT
		a.id_detalle_planilla_salario,
		a.id_planilla_salario,
		a.id_funcionario,
		a.id_oficina,
		a.dias_trabajados,
		a.monto_presupuestado,
		a.monto_devengado,
		a.monto_aporte,
		a.monto_multa,
		(a.monto_devengado-(a.monto_aporte+a.monto_multa)) as monto_liquido,
		a.monto_total_aporte,
		  a.importe_liquido_sin_descuentos_varios,
		  a.importe_descuentos_varios_solicitado,
		  a.importe_descuentos_varios_aplicado,
		  a.importe_descuentos_varios_diferencia,
		  a.importe_liquido_con_descuentos_varios,
		a.id_detalle_categoria,

		b.ape_nom_funcionario,
		b.cedula_funcionario,
		trim(b.cedula_funcionario)::numeric as cedula_numeric

	  FROM salarios.detalles_planillas_salarios a
			left join legajos.funcionarios b
				on (a.id_funcionario=b.id_funcionario)

	WHERE a.id_planilla_salario=in_id_planilla_salario
 	order by a.id_funcionario asc, a.monto_presupuestado asc
LOOP

-- Cargar los datos recuperados en las variables de salida!:

		id_detalle_planilla_salario:=rDetalle_Plla_salarios.id_detalle_planilla_salario;
		id_planilla_salario:=rDetalle_Plla_salarios.id_planilla_salario;
		id_funcionario:=rDetalle_Plla_salarios.id_funcionario;
		id_oficina:=rDetalle_Plla_salarios.id_oficina;
		dias_trabajados:=rDetalle_Plla_salarios.dias_trabajados;
		monto_presupuestado:=rDetalle_Plla_salarios.monto_presupuestado;
		monto_devengado:=rDetalle_Plla_salarios.monto_devengado;
		monto_aporte:=rDetalle_Plla_salarios.monto_aporte;
		monto_multa:=rDetalle_Plla_salarios.monto_multa;
		monto_liquido:=rDetalle_Plla_salarios.monto_liquido;
		monto_total_aporte:=rDetalle_Plla_salarios.monto_total_aporte;
		  importe_liquido_sin_descuentos_varios:=rDetalle_Plla_salarios.importe_liquido_sin_descuentos_varios;
		  importe_descuentos_varios_solicitado:=rDetalle_Plla_salarios.importe_descuentos_varios_solicitado;
		  importe_descuentos_varios_aplicado:=rDetalle_Plla_salarios.importe_descuentos_varios_aplicado;
		  importe_descuentos_varios_diferencia:=rDetalle_Plla_salarios.importe_descuentos_varios_diferencia;
		  importe_liquido_con_descuentos_varios:=rDetalle_Plla_salarios.importe_liquido_con_descuentos_varios;


		ape_nom_funcionario:=rDetalle_Plla_salarios.ape_nom_funcionario;
		cedula_funcionario:=rDetalle_Plla_salarios.cedula_funcionario;
		cedula_numeric:=rDetalle_Plla_salarios.cedula_numeric;

                iId_detalle_categoria:=rDetalle_Plla_salarios.id_detalle_categoria;

-- a) Recuperar el cargo y la categoria actual de este funcionario.

	-- verificar si es un ascenso (y el funcionario figura dos veces en la planilla)
	SELECT 
		zb.id_funcionario_categoria_old,
		zb.id_funcionario_categoria_new,
		zc.id_detalle_categoria as id_detalle_categoria_old,
		zd.id_detalle_categoria as id_detalle_categoria_new,
(
Select
	ze.importe
from salarios.categoria_importe_mensual ze
where ze.id_categoria = (
Select zf.id_categoria 
from salarios.detalles_categorias zf where zf.id_detalle_categoria = zd.id_detalle_categoria
)
and ze.id_mes= iId_mes 
limit 1

) as importe_presupuestado_new,
(
Select
	ze.importe
from salarios.categoria_importe_mensual ze
where ze.id_categoria = (
Select zf.id_categoria 
from salarios.detalles_categorias zf where zf.id_detalle_categoria = zc.id_detalle_categoria 
)
and ze.id_mes= iId_mes 
limit 1

) as importe_presupuestado_old

	INTO
		iId_funcionario_categoria_old,
		iId_funcionario_categoria_new,
		iId_detalle_categoria_old,
		iId_detalle_categoria_new,
	nImporte_presupuestado_new,
	nImporte_presupuestado_old

	FROM salarios.funcionarios_recategorizacion_ascenso zb
		left join salarios.funcionarios_categorias zc
			on (zb.id_funcionario_categoria_old = zc.id_funcionario_categoria)
		left join salarios.funcionarios_categorias zd
			on (zb.id_funcionario_categoria_new = zd.id_funcionario_categoria)

	where zb.id_funcionario= rDetalle_Plla_salarios.id_funcionario 
		and zb.gestion= nGestion 
		and zb.id_mes= iId_mes;

	IF (bDebug IS TRUE) THEN
		RAISE NOTICE '% - % - 
 rDetalle_Plla_salarios.id_funcionario=%',tNombre_funcion, now(), rDetalle_Plla_salarios.id_funcionario;
		RAISE NOTICE '% - % - 
 iId_funcionario_categoria_old=%, 
 iId_funcionario_categoria_new=%, 
 iId_detalle_categoria_old=%, 
 iId_detalle_categoria_new=%,
 nImporte_presupuestado_old=%,
 nImporte_presupuestado_new=%',tNombre_funcion, now(), iId_funcionario_categoria_old, iId_funcionario_categoria_new, iId_detalle_categoria_old, iId_detalle_categoria_new, nImporte_presupuestado_old, nImporte_presupuestado_new;
	END IF;

IF (bDebug IS TRUE) THEN
	RAISE NOTICE '% - % - 
 verificar bandera si = 0 ',tNombre_funcion, now();
	RAISE NOTICE '% - % - 
 bandera_viejo=%',tNombre_funcion, now(), bandera_viejo;
END IF;
	-- verificar bandera si es true
IF (bandera_viejo=0) THEN
	IF (bDebug IS TRUE) THEN
		RAISE NOTICE '% - % - 
 bandera_viejo=% sí es igual a 0 ',tNombre_funcion, now(),bandera_viejo;
	END IF;

	-- si existe en recategorizacion_ascenso poner bandera a true para proxima pasada
	IF (iId_funcionario_categoria_old is not null and (monto_presupuestado=nImporte_presupuestado_old) ) THEN
		IF (bDebug IS TRUE) THEN
			-- ¿imprimir importe presupuestado, fecha desde y hasta 
			-- del detalle de la planilla de salario para comparar!!!?
			RAISE NOTICE '% - % - 
 iId_funcionario_categoria_old=% no es null',tNombre_funcion, now(),iId_funcionario_categoria_old;
			RAISE NOTICE '% - % - 
 Primera aparición! de este funcionario en esta planilla de salarios!',tNombre_funcion, now();
			RAISE NOTICE '% - % - 
 ponemos bandera_viejo=1',tNombre_funcion, now();
		END IF;

		bandera_viejo:=1;
		-- si presupuestado actual es igual a presupuestado old utilizar el id old sino el id new:
		Select
			c.id_detalle_categoria
		INTO	iId_detalle_categoria
		From salarios.funcionarios_categorias c
		where c.id_funcionario_categoria = iId_funcionario_categoria_old;
	ELSE
		IF (bDebug IS TRUE) THEN
			RAISE NOTICE '% - % - 
 Segunda aparición! de este funcionario en esta planilla de salarios!',tNombre_funcion, now();
			RAISE NOTICE '% - % - 
 iId_funcionario_categoria_old=% es null!',tNombre_funcion, now(),iId_funcionario_categoria_old;
			RAISE NOTICE '% - % - 
 entro por el ELSE',tNombre_funcion, now();
		END IF;

		Select
			c.id_detalle_categoria
		INTO	iId_detalle_categoria
		From salarios.funcionarios_categorias c
		where c.id_funcionario = rDetalle_Plla_salarios.id_funcionario 
				and c.estado is true 
				and c.gestion = nGestion;
	END IF;
ELSE
	bandera_viejo:=0;
	IF (bDebug IS TRUE) THEN
		RAISE NOTICE '% - % - 
 entró por el ELSE de IF (bandera_viejo=0) THEN 
 ponemos bandera_viejo=0',tNombre_funcion, now();
	END IF;

	Select
		c.id_detalle_categoria
	INTO	iId_detalle_categoria
	From salarios.funcionarios_categorias c
	where c.id_funcionario = rDetalle_Plla_salarios.id_funcionario 
			and c.estado is true 
			and c.gestion = nGestion;
END IF;
IF (bDebug IS TRUE) THEN
	RAISE NOTICE '% - % - 
 iId_detalle_categoria=%',tNombre_funcion, now(),iId_detalle_categoria;
END IF;

-- Ticket #699: Aquí se sobreescribe cualquier valor de id_detalle_categoria
-- con lo proveniente del detalle de la planilla de salarios!!!!

       iId_detalle_categoria:=rDetalle_Plla_salarios.id_detalle_categoria;

	Select
		e.nombre_categoria,
		f.nombre_cargo
	INTO 
		nombre_categoria, 
		nombre_cargo 
	from salarios.detalles_categorias d
		left join salarios.categorias e
			on (d.id_categoria=e.id_categoria)
		left join salarios.cargos f
			on (e.id_cargo=f.id_cargo)
	where d.id_detalle_categoria=iId_detalle_categoria;
	IF (bDebug IS TRUE) THEN
		RAISE NOTICE '% - % - 
 nombre_categoria=%, 
 nombre_cargo=%',tNombre_funcion, now(), nombre_categoria, nombre_cargo;
	END IF;
-- b) Recuperar los datos de la oficina de la categoria de este funcionario.
	Select 
		g.id_oficina,
		g.nombre,
		g.nivel1, 
		g.nivel2, 
		g.nivel3, 
		g.nivel4, 
		g.nivel5, 
		g.estado, 
		g.nombre_nivel1, 
		g.nombre_nivel2, 
		g.nombre_nivel3, 
		g.nombre_nivel4, 
		g.nombre_nivel5, 
		g.id_estructura_presupuestaria, 
		g.gestion, 
		g.cod_tipo, 
		g.cod_programa, 
		g.cod_subprograma, 
		g.cod_objeto_gasto, 
		g.cod_fuente_financiamiento, 
		g.cod_departamento, 
		g.cod_proyecto, 
		g.cod_organismo_financiador, 
		g.descripcion_estructura_presupuestaria, 
		g.descripcion_tipo, 
		g.descripcion_programa, 
		g.descripcion_subprograma, 
		g.descripcion_objeto_gasto, 
		g.descripcion_fuente_financiamiento, 
		g.descripcion_alcance, 
		g.descripcion_proyecto, 
		g.descripcion_organismo_financiador, 
		g.descripcion_programa_abreviatura, 
		g.descripcion_programa_estado, 
		g.descripcion_estructura
INTO
		id_oficina1,
		nombre,
		nivel1, 
		nivel2, 
		nivel3, 
		nivel4, 
		nivel5, 
		estado, 
		nombre_nivel1, 
		nombre_nivel2, 
		nombre_nivel3, 
		nombre_nivel4, 
		nombre_nivel5, 
		id_estructura_presupuestaria, 
		gestion, 
		cod_tipo, 
		cod_programa, 
		cod_subprograma, 
		cod_objeto_gasto, 
		cod_fuente_financiamiento, 
		cod_departamento, 
		cod_proyecto, 
		cod_organismo_financiador, 
		descripcion_estructura_presupuestaria, 
		descripcion_tipo, 
		descripcion_programa, 
		descripcion_subprograma, 
		descripcion_objeto_gasto, 
		descripcion_fuente_financiamiento, 
		descripcion_alcance, 
		descripcion_proyecto, 
		descripcion_organismo_financiador, 
		descripcion_programa_abreviatura, 
		descripcion_programa_estado, 
		descripcion_estructura

	from legajos.oficinas_con_descripciones g
	WHERE g.id_oficina=rDetalle_Plla_salarios.id_oficina;

	RETURN NEXT;
END LOOP;
RETURN;
END;
]]></definition>
</function>

<function name="reporte_resumen_desc_varios_no_aplicados"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="id_tipo_descuento">
		<type name="integer"/>
	</parameter>
	<parameter name="remitido">
		<type name="numeric"/>
	</parameter>
	<parameter name="aplicado">
		<type name="numeric"/>
	</parameter>
	<parameter name="no_descontado">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="numeric"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_tipo_descuento" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
Fecha   : 2012-09-14
Autor   : Lic. Guillermo Galeano Fernández
Objetivo: Obtener los totales para el resumen final 
          del reporte de importes no descontados.-

*/

id_administracion := IN_ID_ADMINISTRACION;
gestion := IN_GESTION;
id_mes := IN_ID_MES;
id_tipo_descuento := IN_ID_TIPO_DESCUENTO;


-- Sumatoria final:

-- total aplicado
Select 
	sum(a.monto_descuento) -- as aplicado
	INTO aplicado
FROM salarios.detalles_planillas_descuentos a
	LEFT JOIN salarios.planillas_descuentos b
		ON (a.id_planilla_descuento=b.id_planilla_descuento)
	LEFT JOIN salarios.descuentos_aso c
		ON (a.id_descuento_aso=c.id_descuento_aso)

WHERE b.id_administracion = IN_ID_ADMINISTRACION
AND b.gestion = IN_GESTION
AND b.id_mes = IN_ID_MES
AND c.id_tipo_descuento = IN_ID_TIPO_DESCUENTO;

-- total no_descontado
Select 
	sum(importe_no_descontado_gral) -- as no_descontado
	INTO no_descontado
From
salarios.reporte_seguimiento_descuentos_varios_importados_a_aplicados
(IN_ID_ADMINISTRACION, 
IN_GESTION,
IN_ID_MES, 
IN_ID_TIPO_DESCUENTO);


-- sumatoria: planilla remitida
Select
	sum(a.importe) -- as remitido
	INTO remitido
FROM salarios.aso_temporales a
WHERE a.id_administracion = IN_ID_ADMINISTRACION
AND a.gestion = IN_GESTION
AND a.id_mes = IN_ID_MES
AND a.id_tipo_descuento = IN_ID_TIPO_DESCUENTO;

RETURN NEXT;

END;
]]></definition>
</function>

<function name="reporte_resumen_descuentos_varios_para_tesoreria"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<comment><![CDATA[Realiza una sumatoria de los descuentos de este tipo agrupado por oficina del detalle de planilla de salarios. GGF.]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_estructura_presupuestaria">
		<type name="integer"/>
	</parameter>
	<parameter name="descripcion_estructura">
		<type name="text"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_nivel1">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel2">
		<type name="character varying"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="mes_descripcion">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_tipo_descuento">
		<type name="integer"/>
	</parameter>
	<parameter name="td_descripcion">
		<type name="text"/>
	</parameter>
	<parameter name="td_abreviatura">
		<type name="character varying"/>
	</parameter>
	<parameter name="td_orden">
		<type name="integer"/>
	</parameter>
	<parameter name="aplicado">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY
Select 
	c.id_estructura_presupuestaria,
	c.descripcion_estructura,
	c.nivel1,
	c.nivel2,
	c.nombre_nivel1,
	c.nombre_nivel2,
	x.gestion,
	x.mes_descripcion,
	d.id_tipo_descuento,
	d.descripcion as "td_descripcion",
	d.abreviatura as "td_abreviatura",
	d.orden as "td_orden",	
	sum (x.aplicado) as aplicado	
from
(
SELECT 
	a.id_oficina, 
	u.gestion,
	v.mes_descripcion,
	d.id_tipo_descuento,
	d.descripcion as "td_descripcion",
	d.abreviatura as "td_abreviatura",
	d.orden as "td_orden",
	sum(b.monto_solicitado) as "solicitado", 
	sum(b.monto_descuento) as "aplicado", 
	sum(b.monto_diferencia) as "diferencia" 

FROM salarios.detalles_planillas_salarios a
	LEFT JOIN salarios.obtener_detalles_planillas_descuentos_con_id_tipo_descuento((Select z.id_planilla_descuento from salarios.planillas_descuentos z where z.id_planilla_salario=IN_ID_PLANILLA_SALARIO)) b
		ON (a.id_funcionario=b.id_funcionario)
	LEFT JOIN salarios.planillas_salarios u
		ON (u.id_planilla_salario = a.id_planilla_salario)
	LEFT JOIN meses v
		ON (v.id_mes = u.id_mes)
	LEFT JOIN salarios.tipos_descuentos d 
		on (d.id_tipo_descuento = b.id_tipo_descuento)	
WHERE a.id_planilla_salario=IN_ID_PLANILLA_SALARIO
	and b.id_tipo_descuento>0
	
GROUP BY a.id_oficina,
	 u.gestion,
	 v.mes_descripcion,
	 d.id_tipo_descuento,
	 d.descripcion,
	 d.abreviatura,
	 d.orden
ORDER BY a.id_oficina asc
) x
	LEFT JOIN legajos.oficinas_con_descripciones c 
		on (x.id_oficina=c.id_oficina)
	LEFT JOIN salarios.tipos_descuentos d 
		on (d.id_tipo_descuento=x.id_tipo_descuento)
GROUP BY
	c.id_estructura_presupuestaria,
	c.descripcion_estructura,
	c.nivel1,
	c.nivel2,
	c.nombre_nivel1,
	c.nombre_nivel2,
	x.gestion,
	x.mes_descripcion,
	d.id_tipo_descuento,
	d.descripcion,
	d.abreviatura,
	d.orden 
ORDER BY d.id_tipo_descuento,c.nivel1,c.nivel2
;

END;
]]></definition>
</function>

<function name="reporte_resumen_descuentos_varios_por_aso"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<comment><![CDATA[Realiza una sumatoria de los descuentos de este tipo agrupado por oficina del detalle de planilla de salarios. GGF.]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="solicitado">
		<type name="numeric"/>
	</parameter>
	<parameter name="aplicado">
		<type name="numeric"/>
	</parameter>
	<parameter name="diferencia">
		<type name="numeric"/>
	</parameter>
	<parameter name="nombre">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel1">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel2">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel3">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel4">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel5">
		<type name="character varying"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_estructura_presupuestaria">
		<type name="integer"/>
	</parameter>
	<parameter name="descripcion_estructura">
		<type name="text"/>
	</parameter>
	<parameter name="id_tipo_descuento">
		<type name="integer"/>
	</parameter>
	<parameter name="td_descripcion">
		<type name="text"/>
	</parameter>
	<parameter name="td_abreviatura">
		<type name="character varying"/>
	</parameter>
	<parameter name="td_orden">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_tipo_descuento" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
Datos para el reporte: Resumen de descuentos varios.
Fecha: 2012-08-11
Autor: Lic. Guillermo Galeano Fernández

*/

/*
Datos requeridos:

REPARTICION a nivel de direcciones
(agrupado por programas),  
sueldo liquido, 

solicitado
(planilla remitida por aso), 
aplicado, diferencia

y esto por cada asociación.

*/
RETURN QUERY
Select 
	x.id_oficina,
	x.solicitado,
	x.aplicado,
	x.diferencia,
	c.nombre,
	c.nombre_nivel1,
	c.nombre_nivel2,
	c.nombre_nivel3,
	c.nombre_nivel4,
	c.nombre_nivel5,
	c.nivel1,
	c.nivel2,
	c.nivel3,
	c.nivel4,
	c.nivel5,
	c.id_estructura_presupuestaria,
	c.descripcion_estructura,
	d.id_tipo_descuento,
	d.descripcion as "td_descripcion",
	d.abreviatura as "td_abreviatura",
	d.orden as "td_orden"
-- *
from
(


SELECT 
--	a.id_detalle_planilla_salario, 
--	a.id_administracion, 
--	a.id_planilla_salario, 
--        a.id_funcionario, 
	a.id_oficina, 
--	a.dias_trabajados, 
--	a.id_detalle_categoria,
--	a.monto_presupuestado, 
--	a.monto_devengado, 
--	a.monto_aporte, 
--	a.monto_multa, 
--	a.monto_total_aporte, 
--	a.usu_alta, 
--	a.fec_alta, 
--	a.usu_modi, 
--	a.fec_modi, 
--	a.ip_alta, 
--	a.ip_modi, 
--	sum(a.importe_liquido_sin_descuentos_varios) as "importe_liquido_sin_descuentos_varios",
	sum(b.monto_solicitado) as "solicitado", 
	sum(b.monto_descuento) as "aplicado", 
	sum(b.monto_diferencia) as "diferencia" 
--	sum(a.importe_liquido_con_descuentos_varios) as "importe_liquido_con_descuentos_varios"

FROM salarios.detalles_planillas_salarios a
	LEFT JOIN salarios.obtener_detalles_planillas_descuentos_con_id_tipo_descuento((Select z.id_planilla_descuento from salarios.planillas_descuentos z where z.id_planilla_salario=IN_ID_PLANILLA_SALARIO)) b
		ON (a.id_funcionario=b.id_funcionario)

WHERE a.id_planilla_salario=IN_ID_PLANILLA_SALARIO
	and b.id_tipo_descuento=IN_ID_TIPO_DESCUENTO
GROUP BY a.id_oficina
ORDER BY a.id_oficina asc
) x
	LEFT JOIN legajos.oficinas_con_descripciones c 
		on (x.id_oficina=c.id_oficina)
	LEFT JOIN salarios.tipos_descuentos d 
		on (d.id_tipo_descuento=IN_ID_TIPO_DESCUENTO)

;

END;
]]></definition>
</function>

<function name="reporte_resumen_descuentos_varios_por_aso2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<comment><![CDATA[Realiza una sumatoria de los descuentos de este tipo agrupado por oficina del detalle de planilla de salarios. GGF.]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_estructura_presupuestaria">
		<type name="integer"/>
	</parameter>
	<parameter name="descripcion_estructura">
		<type name="text"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_nivel1">
		<type name="character varying"/>
	</parameter>
	<parameter name="nombre_nivel2">
		<type name="character varying"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="mes_descripcion">
		<type name="character varying"/>
	</parameter>
	<parameter name="id_tipo_descuento">
		<type name="integer"/>
	</parameter>
	<parameter name="td_descripcion">
		<type name="text"/>
	</parameter>
	<parameter name="td_abreviatura">
		<type name="character varying"/>
	</parameter>
	<parameter name="td_orden">
		<type name="integer"/>
	</parameter>
	<parameter name="solicitado">
		<type name="numeric"/>
	</parameter>
	<parameter name="aplicado">
		<type name="numeric"/>
	</parameter>
	<parameter name="diferencia">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_tipo_descuento" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
Datos para el reporte: Resumen de descuentos varios.
Fecha: 2012-08-11
Autor: Lic. Guillermo Galeano Fernández

*/

/*
Datos requeridos:

REPARTICION a nivel de direcciones
(agrupado por programas),  
sueldo liquido, 

solicitado
(planilla remitida por aso), 
aplicado, diferencia

y esto por cada asociación.

*/
RETURN QUERY
Select 
	c.id_estructura_presupuestaria,
	c.descripcion_estructura,
	c.nivel1,
	c.nivel2,
	c.nombre_nivel1,
	c.nombre_nivel2,
	x.gestion,
	x.mes_descripcion,
	d.id_tipo_descuento,
	d.descripcion as "td_descripcion",
	d.abreviatura as "td_abreviatura",
	d.orden as "td_orden",
	sum (x.solicitado) as solicitado,
	sum (x.aplicado) as aplicado,
	sum (x.diferencia) as diferencia
	
-- *
from
(


SELECT 
--	a.id_detalle_planilla_salario, 
--	a.id_administracion, 
--	a.id_planilla_salario, 
--        a.id_funcionario, 
	a.id_oficina, 
--	a.dias_trabajados, 
--	a.id_detalle_categoria,
--	a.monto_presupuestado, 
--	a.monto_devengado, 
--	a.monto_aporte, 
--	a.monto_multa, 
--	a.monto_total_aporte, 
--	a.usu_alta, 
--	a.fec_alta, 
--	a.usu_modi, 
--	a.fec_modi, 
--	a.ip_alta, 
--	a.ip_modi, 
	u.gestion,
	v.mes_descripcion,
--	sum(a.importe_liquido_sin_descuentos_varios) as "importe_liquido_sin_descuentos_varios",
	sum(b.monto_solicitado) as "solicitado", 
	sum(b.monto_descuento) as "aplicado", 
	sum(b.monto_diferencia) as "diferencia" 
--	sum(a.importe_liquido_con_descuentos_varios) as "importe_liquido_con_descuentos_varios"

FROM salarios.detalles_planillas_salarios a
	LEFT JOIN salarios.obtener_detalles_planillas_descuentos_con_id_tipo_descuento((Select z.id_planilla_descuento from salarios.planillas_descuentos z where z.id_planilla_salario=IN_ID_PLANILLA_SALARIO)) b
		ON (a.id_funcionario=b.id_funcionario)
	LEFT JOIN salarios.planillas_salarios u
		ON (u.id_planilla_salario = a.id_planilla_salario)
	LEFT JOIN meses v
		ON (v.id_mes = u.id_mes)
WHERE a.id_planilla_salario=IN_ID_PLANILLA_SALARIO
	and b.id_tipo_descuento=IN_ID_TIPO_DESCUENTO
GROUP BY a.id_oficina,
	 u.gestion,
	 v.mes_descripcion
ORDER BY a.id_oficina asc
) x
	LEFT JOIN legajos.oficinas_con_descripciones c 
		on (x.id_oficina=c.id_oficina)
	LEFT JOIN salarios.tipos_descuentos d 
		on (d.id_tipo_descuento=IN_ID_TIPO_DESCUENTO)
GROUP BY
	c.id_estructura_presupuestaria,
	c.descripcion_estructura,
	c.nivel1,
	c.nivel2,
	c.nombre_nivel1,
	c.nombre_nivel2,
	x.gestion,
	x.mes_descripcion,
	d.id_tipo_descuento,
	d.descripcion,
	d.abreviatura,
	d.orden 
ORDER BY c.nivel1,c.nivel2
;

END;
]]></definition>
</function>

<function name="reporte_seguimiento_descuentos_varios_importados_a_aplicados"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="ggaleano"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="importe_remitido">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_descuento_aso">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_solicitado_plla_descuentos">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_descontado_plla_descuentos">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_no_descontado_plla_descuentos">
		<type name="numeric"/>
	</parameter>
	<parameter name="importe_no_descontado_gral">
		<type name="numeric"/>
	</parameter>
	<parameter name="autorizacion_estado">
		<type name="boolean"/>
	</parameter>
	<parameter name="autorizacion_desde">
		<type name="date"/>
	</parameter>
	<parameter name="autorizacion_hasta">
		<type name="date"/>
	</parameter>
	<parameter name="ape_nom_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="motivo_inconsistencia">
		<type name="text"/>
	</parameter>
	<parameter name="id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="id_tipo_descuento">
		<type name="integer"/>
	</parameter>
	<parameter name="descripcion_tipo_descuento">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="numeric"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_tipo_descuento" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
RETURN QUERY
-- Fecha: 2012-09-10
-- Autor: Lic. Guillermo Galeano Fernandez
-- Motivo: Funcion para obtener los datos para el reporte 
-- Diferencias de importación por Tipos de Descuentos.

/*
Datos esperados:
a) Todos los importes y CI solicitados por la Aso en un mes.
b) La diferencia entre lo solicitado-aso y lo importado a descuentos disponibles.
c) La diferencia enter lo disponible y lo aplicado.

Contemplar que esto es un reporte histórico, y debe coincidir con 
la fecha de vigencia de la autorización.


*/

-- [DescuentoAsoAgregar.jsp] SELECT id_tipo_descuento, id_tipo_descuento||' - '||abreviatura ||' - '||descripcion as descripcion  FROM salarios.tipos_descuentos   WHERE aso is true order by id_tipo_descuento asc
-- [DescuentoAsoAgregar.jsp] 
/*
SELECT  

	f.id_funcionario, 
	a.cedula,  
	-- trim(replace(to_char(trim(a.cedula::text)::integer, '999,999,999,999,999'),',','.')) AS cedula1, 
	CASE 
		When f.ape_nom_funcionario is null then 'ERROR: FUNCIONARIO INEXISTENTE.' 
		else f.ape_nom_funcionario 
	END as ape_nom_funcionario,

	t.abreviatura, 
	a.importe, 
--	trim(replace(to_char(a.importe, '999,999,999,999,999'),',','.')) AS importe1, 

	case  
		when au.estado is true AND not (
				Select count(1) > 0 
				from salarios.descuentos_aso da 
				where  da.id_administracion in (0,1)  
					and da.id_mes = 1 
					and da.gestion = 2012 
					and da.id_tipo_descuento = 12 
					and da.id_funcionario = f.id_funcionario
				) then 'OK'   
		when au.estado is true 
			AND (
				Select count(1) > 0 
				from salarios.descuentos_aso da 
				where  da.id_administracion in (0,1)  
					and da.id_mes = 1 
					and da.gestion = 2012 
					and da.id_tipo_descuento = 12 
					and da.id_funcionario = f.id_funcionario
				) then 'ERROR: DESCUENTO EXISTENTE PARA ESTA GESTION Y MES.'  
		else 'ERROR: SIN AUTORIZACION VIGENTE.'  
	end as estado
FROM salarios.aso_temporales a    
	LEFT join legajos.funcionarios f 
		on (a.cedula = f.cedula_funcionario)    
	LEFT join salarios.autorizaciones au 
		on (au.id_funcionario=f.id_funcionario 
			and au.id_tipo_descuento = a.id_tipo_descuento 
			and au.estado)    
	LEFT join salarios.tipos_descuentos t 
		on t.id_tipo_descuento = a.id_tipo_descuento  
WHERE  a.id_administracion in (0,1)  
	AND a.gestion = 2012 
	AND a.id_mes = 1 
	AND a.id_tipo_descuento = 12

	-- aqui se verifica que no sea un funcionario contratado:
	AND f.id_funcionario not in (
					SELECT id_funcionario 
					FROM legajos.situacion_administrativa_actual 
					where id_tipo_funcionario = 'CON' 
					)  
ORDER BY estado desc, a.cedula asc 
*/
-- ------------------------------------------------------

SELECT 
	a.cedula::text,
	a.importe as "importe_remitido",
	da.monto as "importe_descuento_aso",
	dpd.monto_solicitado as "importe_solicitado_plla_descuentos",
	dpd.monto_descuento as "importe_descontado_plla_descuentos",
(dpd.monto_solicitado - dpd.monto_descuento) as "importe_no_descontado_plla_descuentos",

CASE
	WHEN (dpd.monto_solicitado - dpd.monto_descuento) IS NULL THEN a.importe
	ELSE (dpd.monto_solicitado - dpd.monto_descuento)

END

AS "importe_no_descontado_gral",
au.estado as "autorizacion_estado",
au.desde as "autorizacion_desde",
au.hasta as "autorizacion_hasta",
	f.ape_nom_funcionario::text,
CASE 
	When f.ape_nom_funcionario is null then 'FUNCIONARIO INEXISTENTE.' 
	When au.estado is true AND f.ape_nom_funcionario is NOT null AND da.monto is null then 'CON AUTORIZACION - NO AGREGADO.' 	
	When au.estado is null OR au.estado is false AND f.ape_nom_funcionario is NOT null then 'FUNCIONARIO SIN AUTORIZACION.' 
--	When da.monto is null AND f.ape_nom_funcionario is NOT null then 'FUNCIONARIO SIN AUTORIZACION.' 
WHEN (
((dpd.monto_solicitado - dpd.monto_descuento) > 0) and 
f.ape_nom_funcionario is NOT null
) THEN 'DIFERENCIA NO DESCONTADA'

END
AS "motivo_inconsistencia",
a.id_administracion,
a.gestion,
a.id_mes,
a.id_tipo_descuento,
z.descripcion::text as "descripcion_tipo_descuento"
FROM salarios.aso_temporales a
	LEFT join legajos.funcionarios f 
		on (a.cedula = f.cedula_funcionario)

	LEFT join salarios.autorizaciones au 
		on (au.id_funcionario=f.id_funcionario 
			and au.id_tipo_descuento = a.id_tipo_descuento 
			and au.estado
			)    

	LEFT JOIN salarios.descuentos_aso da 
		ON ( da.id_administracion = a.id_administracion
		and da.id_mes = a.id_mes 
		and da.gestion = a.gestion
		and da.id_tipo_descuento = a.id_tipo_descuento
		and da.id_funcionario = f.id_funcionario
		AND da.estado = 1
		)

	LEFT JOIN salarios.detalles_planillas_descuentos dpd
		ON (da.id_descuento_aso=dpd.id_descuento_aso)
	LEFT JOIN salarios.tipos_descuentos z 
		ON (a.id_tipo_descuento = z.id_tipo_descuento)

WHERE a.id_administracion = IN_ID_ADMINISTRACION
AND a.gestion = IN_GESTION
AND a.id_mes = IN_ID_MES
AND a.id_tipo_descuento = IN_ID_TIPO_DESCUENTO
AND (
	((dpd.monto_solicitado - dpd.monto_descuento) > 0) 
     OR ((dpd.monto_solicitado - dpd.monto_descuento) is null)
)
;
END;
]]></definition>
</function>

<function name="retiro_voluntario_beneficiario_detallado"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="integer"/>
	</parameter>
	<parameter name="fecha_nombramiento">
		<type name="text"/>
	</parameter>
	<parameter name="nro_nombramiento">
		<type name="text"/>
	</parameter>
	<parameter name="nivel1">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel2">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel3">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel4">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel5">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_nivel1">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_nivel2">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_nivel3">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_nivel4">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_nivel5">
		<type name="text"/>
	</parameter>
	<parameter name="id_detalle_planilla_salario">
		<type name="integer"/>
	</parameter>
	<parameter name="nombre_categoria">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_cargo">
		<type name="text"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="integer"/>
	</parameter>
	<parameter name="dia_calculo">
		<type name="integer"/>
	</parameter>
	<parameter name="u6m_total">
		<type name="integer"/>
	</parameter>
	<parameter name="u6m_mensual">
		<type name="integer"/>
	</parameter>
	<parameter name="u6m_diario">
		<type name="integer"/>
	</parameter>
	<parameter name="meses_antiguedad">
		<type name="integer"/>
	</parameter>
	<parameter name="antiguedad_real">
		<type name="integer"/>
	</parameter>
	<parameter name="pre_aviso">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_pre_aviso">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_indemnizacion">
		<type name="integer"/>
	</parameter>
	<parameter name="saldo_vac_uno">
		<type name="integer"/>
	</parameter>
	<parameter name="saldo_vac_dos">
		<type name="integer"/>
	</parameter>
	<parameter name="monto_vacaciones">
		<type name="integer"/>
	</parameter>
	<parameter name="calcular_aguinaldo">
		<type name="boolean"/>
	</parameter>
	<parameter name="monto_aguinaldo">
		<type name="integer"/>
	</parameter>
	<parameter name="total">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_dia_calculo" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_calcular_aguinaldo" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar los detalles de remuneracion resumida y calculada de un beneficiario de retiro voluntario
  * Creado    : 2013-11-29 11:45:00
  * Modificado: 2014-01-08 17:09:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion  administración del proceso		
  *            in_id_mes             mes de proceso
  *            in_gestion            ejercicio aplicado
  *            in_id_funcionario     identificador del funcionario
  *	       in_dia_calculo        días utilizado para cálculo
  *            in_calcular_aguinaldo calcular monto Gs. Aguinaldo gestion [1:SI 0:NO]   
  * 
  * Descripcion:  Genera un registro con los detalles necesarios para el cálculo y los montos calculados 
  * -----------------------------------------------------------------------------------------------------  
  */
RETURN QUERY
SELECT
*,
(monto_pre_aviso3+monto_indemnizacion3+monto_vacaciones3+monto_vacaciones3) as total
FROM
(
SELECT
	in_id_funcionario,
	in_id_mes,
	in_gestion,
	to_char(fecha_inicio,'DD/MM/YYYY')::text as fecha_nombramiento,
	nro_nombramiento2 as nro_nombramiento,
	nivel1_n as nivel1,
	nivel2_n as nivel2,
	nivel3_n as nivel3,
	nivel4_n as nivel4,
	nivel5_n as nivel5,
	nombre_nivel1_n::text as nombre_nivel1,
	nombre_nivel2_n::text as nombre_nivel2,
	nombre_nivel3_n::text as nombre_nivel3,
	nombre_nivel4_n::text as nombre_nivel4,
	nombre_nivel5_n::text as nombre_nivel5,
	id_detalle_planilla_salario2 as id_detalle_planilla_salario,
	nombre_categoria2::text as nombre_categoria,
	nombre_cargo2::text as nombre_cargo,
	presupuestado2 as presupuestado,
	dia_calculo2 as dia_calculo,
	u6m_total2 as u6m_total,
	u6m_mensual2 as u6m_mensual,
	u6m_diario2 as u6m_diario,
	meses_antiguedad2 as meses_antiguedad,
	antiguedad_real2 as antiguedad_real,
	pre_aviso2 as pre_aviso,
	pre_aviso2*u6m_diario2 as monto_pre_aviso3,
	dia_calculo2*u6m_diario2*antiguedad_real2 as monto_indemnizacion3,
	saldo_vac_uno2 as saldo_vac_uno,
	saldo_vac_dos2 as saldo_vac_dos,
	(saldo_vac_uno2+saldo_vac_dos2)*u6m_diario2 as monto_vacaciones3,
	CASE WHEN in_calcular_aguinaldo=1 THEN true::bool ELSE false::bool END AS calcular_aguinaldo,
	(SELECT (sum(x.total)::dec/(12))::int as monto_total FROM salarios.retiro_voluntario_union_remuneraciones(in_id_administracion,in_id_mes,in_gestion,in_id_funcionario) x where x.gestion=in_gestion) as monto_aginaldo3
FROM
	(
		SELECT 
		*,
		(u6m_mensual2*6)::int as u6m_total2,
		(u6m_mensual2::dec/dia_calculo2)::int as u6m_diario2,
		nombramiento[1] as fecha_nombramiento2,
		nombramiento[2] as nro_nombramiento2,
		(
		  case
		  when antiguedad_real2 >=2 AND antiguedad_real2 <=5  then 45 
		  when antiguedad_real2 >=6 AND antiguedad_real2 <=10 then 60
		  when antiguedad_real2 >=11                         then 90
		  end
		) as pre_aviso2,
		case when saldo_vac_1 is null then 0 else saldo_vac_1 end as saldo_vac_uno2,
		case when saldo_vac_2 is null then 0 else saldo_vac_2 end as saldo_vac_dos2
		FROM
		(
		SELECT 
		  (
			SELECT
			('{'||vfha.fecha_disposicion||','||vfha.nro_disposicion||'}')::text[] as nro_fecha_disposicion
			FROM 
			legajos.datos_administrativos da  
			LEFT JOIN legajos.funcionarios b ON b.id_funcionario = da.id_funcionario 
			LEFT JOIN legajos.vista_funcionarios_historial_administrativo vfha ON vfha.id_dato_administrativo = da.id_dato_administrativo
			LEFT JOIN legajos.situacion_administrativa_actual sa ON sa.id_funcionario = fun.id_funcionario
			WHERE 
			da.id_funcionario =  fun.id_funcionario ::integer and 
			vfha.fecha_disposicion = to_char(sa.fecha_inicio,'DD/MM/YYYY') limit 1
		  ) as nombramiento,
		  dps.id_detalle_planilla_salario as id_detalle_planilla_salario2,
		  dps.monto_presupuestado::int as presupuestado2,
		  in_dia_calculo as dia_calculo2,
		  (SELECT (sum(z.total)::dec/6)::int as total2 FROM salarios.retiro_voluntario_union_remuneraciones(in_id_administracion,in_id_mes,in_gestion,in_id_funcionario) z where u6m) as u6m_mensual2,
		  (
		    SELECT 
		    v.saldo_dias
		    FROM control.vacaciones_disponibles v
		    inner join legajos.funcionarios f on v.id_funcionario = f.id_funcionario
		    inner join legajos.situacion_administrativa_actual sa on
		    f.id_funcionario = sa.id_funcionario
		    where 
		    v.gestion = in_gestion-1 and 
		    v.id_administracion in(0,in_id_administracion) and 
		    f.id_funcionario=fun.id_funcionario
		  ) as saldo_vac_1,
		  (
		    SELECT 
		    v.saldo_dias
		    FROM control.vacaciones_disponibles v
		    inner join legajos.funcionarios f on v.id_funcionario = f.id_funcionario
		    inner join legajos.situacion_administrativa_actual sa on
		    f.id_funcionario = sa.id_funcionario
		    where 
		    v.gestion = in_gestion and 
		    v.id_administracion in (0,in_id_administracion) and 
		    f.id_funcionario=fun.id_funcionario
		  ) as saldo_vac_2,  
		  (
		    SELECT
		(a.datos_antiguedad[1])::int*12+to_char(a.datos_antiguedad[3]::int,'00')::int as meses
	FROM
		(SELECT regexp_split_to_array(funcion_antiguedad_en_texto((SELECT funcion_calcular_antiguedad(fun.id_funcionario,(('01-'||in_id_mes||'-'||in_gestion)::date + interval '1 month'- interval '1 day')::date))), E'\\s+') as datos_antiguedad) a
		  ) as meses_antiguedad2,
		  (
		    SELECT
		    CASE WHEN b.cumple>=18 THEN b.antiguedad ELSE (b.antiguedad-(18-b.cumple)) END as antiguedad
		    FROM
		    (
		    SELECT
		    a.datos_antiguedad[1]::int as años, 
		    a.datos_antiguedad[3]::int as meses,
		    (SELECT 
		    --CASE WHEN -(a.datos_cumple[3]::int)>=6 THEN (-(a.datos_cumple[1]::int)+1) ELSE -(a.datos_cumple[1]::int) END as cumple 
		    -(a.datos_cumple[1]::int) as cumple
		    FROM
		    (SELECT regexp_split_to_array(funcion_antiguedad_en_texto((SELECT funcion_calcular_antiguedad(dps.id_funcionario,fun.fecha_nac_funcionario))), E'\\s+') as datos_cumple) a) as cumple,
		    CASE WHEN a.datos_antiguedad[3]::int>=6 THEN (a.datos_antiguedad[1]::int+1) ELSE a.datos_antiguedad[1]::int END as antiguedad
		    FROM
		    (SELECT regexp_split_to_array(funcion_antiguedad_en_texto((SELECT funcion_calcular_antiguedad(dps.id_funcionario,(('01-'||in_id_mes||'-'||in_gestion)::date + interval '1 month'- interval '1 day')::date))), E'\\s+') as datos_antiguedad) a
		    ) b
		  ) as antiguedad_real2,
		  cat.nombre_categoria as nombre_categoria2,
		  car.nombre_cargo as nombre_cargo2,
		  ocd.nivel1 as nivel1_n,
		  ocd.nivel2 as nivel2_n,
		  ocd.nivel3 as nivel3_n,
		  ocd.nivel4 as nivel4_n,
		  ocd.nivel5 as nivel5_n,
		  ocd.nombre_nivel1 as nombre_nivel1_n,
		  ocd.nombre_nivel2 as nombre_nivel2_n,
		  ocd.nombre_nivel3 as nombre_nivel3_n,
		  ocd.nombre_nivel4 as nombre_nivel4_n,
		  ocd.nombre_nivel5 as nombre_nivel5_n,
		  saa.fecha_inicio
		FROM 
		   salarios.planillas_salarios ps
		   LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario = ps.id_planilla_salario
		   LEFT JOIN salarios.detalles_categorias          dc ON dc.id_detalle_categoria = dps.id_detalle_categoria
		   LEFT JOIN salarios.categorias		  cat ON cat.id_categoria = dc.id_categoria
		   LEFT JOIN salarios.cargos			  car ON car.id_cargo=cat.id_cargo
		   LEFT JOIN legajos.oficinas_con_descripciones   ocd ON ocd.id_oficina=dps.id_oficina
		   LEFT JOIN legajos.funcionarios                 fun ON fun.id_funcionario=dps.id_funcionario
		   LEFT JOIN legajos.situacion_administrativa_actual     saa ON saa.id_funcionario=fun.id_funcionario
		WHERE
		   ps.id_administracion=in_id_administracion AND 
		   ps.id_mes=in_id_mes AND
		   ps.gestion=in_gestion AND 
		   ps.id_estado=1 AND
		   dps.id_funcionario=in_id_funcionario
		   limit 1
	 ) haberes
 ) datos_beneficiario
 ) final;

END;
]]></definition>
</function>

<function name="retiro_voluntario_beneficiario_remuneracion"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_mes">
		<type name="integer"/>
	</parameter>
	<parameter name="gestion">
		<type name="integer"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="beneficiario">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="importe">
		<type name="integer"/>
	</parameter>
	<parameter name="diferencia_salarial">
		<type name="integer"/>
	</parameter>
	<parameter name="gastos_representacion">
		<type name="integer"/>
	</parameter>
	<parameter name="remuneracion_extraordinaria">
		<type name="integer"/>
	</parameter>
	<parameter name="bonificacion_gratificacion">
		<type name="integer"/>
	</parameter>
	<parameter name="grado_academico">
		<type name="integer"/>
	</parameter>
	<parameter name="antiguedad">
		<type name="integer"/>
	</parameter>
	<parameter name="total">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar las remuneraciones sin aporte jubilatorio de un beneficiario de retiro voluntario
  * Creado    : 2013-11-25 19:20:00
  * Modificado: 2014-10-13 10:28:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administracion del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado
  *            in_id_funcionario    identificador del funcionario 
  * 
  * Descripcion:  Genera un registro discriminando sus haberes que no tengan aportes jubilatorios
  * ------------  
  */
RETURN QUERY 
SELECT
haber.in_id_mes,
haber.in_gestion,
haber.in_id_funcionario,
haber.cedula_funcionario::text,
haber.ape_nom_funcionario::text,
haber.categoria::text,
CASE WHEN haber.importe IS NULL THEN 0 ELSE haber.importe END as importe,
CASE WHEN haber.diferencia_salarial IS NULL THEN 0  ELSE haber.diferencia_salarial END as diferencia_salarial,
CASE WHEN haber.gasto_representacion IS NULL THEN 0 ELSE haber.gasto_representacion END as gasto_representacion,
CASE WHEN haber.remuneracion_extraordinaria IS NULL THEN 0 ELSE haber.remuneracion_extraordinaria END as remuneracion_extraordinaria,
CASE WHEN haber.gratificacion_bonificacion IS NULL THEN 0 ELSE haber.gratificacion_bonificacion END as gratificacion_bonificacion,
CASE WHEN haber.grado_academico IS NULL THEN 0 ELSE haber.grado_academico END as grado_academico,
CASE WHEN haber.antiguedad IS NULL THEN 0 ELSE haber.antiguedad END as antiguedad,
(
CASE WHEN haber.importe IS NULL THEN 0 ELSE haber.importe END+
CASE WHEN haber.diferencia_salarial IS NULL THEN 0  ELSE haber.diferencia_salarial END+
CASE WHEN haber.gasto_representacion IS NULL THEN 0 ELSE haber.gasto_representacion END+
CASE WHEN haber.remuneracion_extraordinaria IS NULL THEN 0 ELSE haber.remuneracion_extraordinaria END +
CASE WHEN haber.gratificacion_bonificacion IS NULL THEN 0 ELSE haber.gratificacion_bonificacion END +
CASE WHEN haber.grado_academico IS NULL THEN 0 ELSE haber.grado_academico END +
CASE WHEN haber.antiguedad IS NULL THEN 0 ELSE haber.antiguedad END ) as total
FROM
(
SELECT
in_id_mes,
in_gestion,
in_id_funcionario,
cedula_funcionario,
ape_nom_funcionario,
(
--CATEGORIA
SELECT
  cat.nombre_categoria as categoria
FROM 
  salarios.funcionarios_categorias fc
  LEFT JOIN salarios.detalles_categorias dc             ON dc.id_detalle_categoria=fc.id_detalle_categoria
  LEFT JOIN salarios.categorias cat                     ON cat.id_categoria=dc.id_categoria
WHERE
  fc.gestion=in_gestion and
  ((in_id_mes BETWEEN  extract(MONTH from fc.desde) and extract(MONTH from fc.hasta-1) OR fc.hasta is null)) AND
  cat.id_cargo>0 and
  fc.id_funcionario=f.id_funcionario 
ORDER BY 
  fc.id_funcionario_categoria desc limit 1
) as categoria,
(
--SALARIO PERMANENTE [111]
SELECT  
  --dps.monto_presupuestado::int as importe
  sum (dps.monto_devengado)::int as importe
FROM 
   salarios.planillas_salarios ps
   LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario = ps.id_planilla_salario
WHERE
   ps.id_administracion=in_id_administracion AND 
   ps.id_mes=in_id_mes AND
   ps.gestion=in_gestion AND 
   ps.id_estado=1 AND 
   dps.id_funcionario=f.id_funcionario
GROUP BY
   dps.id_funcionario
) as importe,
(
--DIFERENCIA SALARIAL Y OTROS GASTOS [199] 
(
SELECT
  pdsd.importe_monto_diferencia::int as importe
FROM salarios.planilla_diferencia_salarial pds
LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial 
LEFT JOIN salarios.funcionarios_superiores                fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
WHERE
   pds.id_tipo_pagos_varios=1 AND		
   pds.id_administracion=in_id_administracion AND 
   pds.id_mes=in_id_mes AND
   pds.gestion=in_gestion AND 
   pds.estado=1 AND 
   fs.id_funcionario=f.id_funcionario
)
) as diferencia_salarial,
(
--GASTO REPRESENTACION [113]
SELECT
  sum(pgrd.devengado_parcial)::integer as importe
FROM salarios.planilla_gasto_representacion pgr
LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion 
LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
WHERE
   pgr.id_administracion=in_id_administracion AND 
   pgr.id_mes=in_id_mes AND
   pgr.gestion=in_gestion AND 
   pgr.estado=1 AND 
   fr.id_funcionario=f.id_funcionario
) as gasto_representacion,
--REMUNERACION EXTRAORDINARIA [123]
(
SELECT 
  sum(re.monto)::int as importe
FROM
(SELECT
  16 as orden,
  dpre.cantidad_horas,  
  dpre.monto::integer as monto,   
  dpre.aporte::integer as aporte, 
  (row_number() over())+160 as linea
FROM salarios.planillas_re pre
LEFT JOIN salarios.detalles_planillas_re dpre ON dpre.id_planilla_re=pre.id_planilla_re
WHERE
   pre.id_administracion=in_id_administracion AND 
   pre.id_mes=in_id_mes AND
   pre.gestion=in_gestion AND 
   pre.estado=1 AND 
   dpre.id_funcionario=f.id_funcionario
) re
) as remuneracion_extraordinaria,
(
--BONIFICACIONES Y GRATIFICACIONES [133]
SELECT
  sum(dpb.monto_total)::int as importe
FROM salarios.planillas_bonificaciones pb
LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion 
LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
LEFT JOIN salarios.bonificaciones                      b ON  b.id_bonificacion=fb.id_bonificacion
WHERE
   pb.id_administracion=in_id_administracion AND 
   pb.id_mes=in_id_mes AND
   pb.gestion=in_gestion AND 
   pb.estado=1 AND 
   fb.id_funcionario=f.id_funcionario
) as gratificacion_bonificacion,
(
--GRADO ACADEMICO [133]
SELECT
  dpp.importe_profesional::int as importe
FROM salarios.planilla_profesionales pp
LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional 
LEFT JOIN salarios.funcionarios_profesionales       fp ON  fp.id_funcionario_profesional=dpp.id_funcionario_profesional
WHERE
   pp.id_administracion=in_id_administracion AND 
   pp.id_mes=in_id_mes AND
   pp.gestion=in_gestion AND 
   pp.estado=1 AND 
   fp.id_funcionario=f.id_funcionario
) as grado_academico,
(
--ANTIGUEDAD [133]
SELECT
  dpa.importe_antiguedad::int as importe
FROM salarios.planillas_antiguedad pa
LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad 
WHERE
   pa.id_administracion=in_id_administracion AND 
   pa.id_mes=in_id_mes AND
   pa.gestion=in_gestion AND 
   pa.estado=1 AND 
   dpa.id_funcionario=f.id_funcionario
) as antiguedad
FROM 
legajos.funcionarios f
WHERE
f.id_funcionario=in_id_funcionario
) haber;

END;
]]></definition>
</function>

<usertype name="registro_retiro_voluntario_union_remuneraciones" configuration="composite">
	<schema name="public"/>
	<role name="postgres"/>
	<typeattrib name="id_mes">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="gestion">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="id_funcionario">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="cedula">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="beneficiario">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="categoria">
		<type name="text"/>
	</typeattrib>
	<typeattrib name="importe">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="diferencia_salarial">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="gastos_representacion">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="remuneracion_extraordinaria">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="bonificacion_gratificacion">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="grado_academico">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="antiguedad">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="total">
		<type name="integer"/>
	</typeattrib>
	<typeattrib name="u6m">
		<type name="boolean"/>
	</typeattrib>
</usertype>

<function name="retiro_voluntario_union_remuneraciones"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="public.registro_retiro_voluntario_union_remuneraciones"/>
	</return-type>
	<parameter name="in_id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes_retiro">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion_retiro">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[

/*
--DROP TYPE registro_retiro_voluntario_union_remuneraciones
--CREATE TYPE registro_retiro_voluntario_union_remuneraciones AS (
id_mes integer, gestion integer, id_funcionario integer, cedula text, beneficiario text, categoria text, importe integer, diferencia_salarial integer, gastos_representacion integer, remuneracion_extraordinaria integer, bonificacion_gratificacion integer, grado_academico integer, antiguedad integer, total integer, u6m boolean
);
*/

DECLARE   sql text := '';
	  bandera integer := 0;
	  no_mostrar integer := 0;
	  i integer := 0;
	  mes_auxiliar integer := 0;
	  id_mes_desde integer := 0;
	  mes integer := 0;
	  gestion_anterior integer:= 0;
	  registros registro_retiro_voluntario_union_remuneraciones;

BEGIN
/*
  HASTA    Ult. 6 Meses     DESDE
-----------------------------------------------------
12 2013        6                 7 2013
11 2013        6                 6 2013
10 2013        6                 5 2013
9 2013         6                 4 2013
8 2013         6                 3 2013
7 2013         6                 2 2013
6 2013         6                 1 2013
5 2013         6                12 2012
4 2013         6                11 2012
3 2013         6                10 2012
2 2013         6                 9 2012
1 2013         6                 8 2012
*/
IF (in_id_mes_retiro <= 5) THEN
	id_mes_desde = in_id_mes_retiro + 7;
ELSE
	bandera = 1;
	id_mes_desde = in_id_mes_retiro - 5;
END IF;
  FOR x IN 1..17 LOOP
        i = i +1;
	IF (bandera = 1 AND i = 1) THEN
	    i = 6;
	    mes_auxiliar = in_id_mes_retiro;
	ELSE
	    IF (i = 1) THEN
		mes_auxiliar = in_id_mes_retiro;
		in_id_mes_retiro = 12 + id_mes_desde;
	    END IF;
	END IF;
	IF (i <= 5) THEN
	    mes = 7 + i;
	    gestion_anterior = in_gestion_retiro - 1;
	ELSE
	    mes = i - 5;
	    gestion_anterior = in_gestion_retiro;
	    in_id_mes_retiro = mes_auxiliar;
	    IF (i = 6 AND bandera = 0) THEN
		id_mes_desde = mes;
	    END IF;
	END IF;
	no_mostrar := 0;

	IF ((mes >= id_mes_desde AND mes <= in_id_mes_retiro)) THEN
	    sql := sql ||' SELECT *,true as u6m
	    FROM salarios.retiro_voluntario_beneficiario_remuneracion('|| in_id_administracion || ',' || mes || ',' || gestion_anterior || ',' || in_id_funcionario || ')';
	    
	ELSE
	    IF (gestion_anterior = in_gestion_retiro AND i < 17) THEN
		sql := sql ||' SELECT *,false as u6m
		FROM salarios.retiro_voluntario_beneficiario_remuneracion('|| in_id_administracion || ',' || mes || ',' || gestion_anterior || ',' || in_id_funcionario || ')';
		
	    ELSE
		IF (gestion_anterior = in_gestion_retiro AND i = 17) THEN
		    sql := sql ||' SELECT *,false as u6m
		    FROM salarios.retiro_voluntario_beneficiario_remuneracion('|| in_id_administracion || ',' || mes || ',' || gestion_anterior || ',' || in_id_funcionario || ')';
		ELSE
		    no_mostrar = 1;
		END IF;
	    END IF;
	END IF;
	IF (i < 17 AND no_mostrar = 0) THEN
	    sql := sql ||' UNION ';
	END IF;
	  
  END LOOP;
  RAISE NOTICE 'sql: %',sql;
  --EXECUTE sql INTO registros;
  RETURN QUERY
     EXECUTE sql;
  /*FOR registros IN (sql) LOOP
     RETURN NEXT registros;
  END LOOP;*/
  EXCEPTION
	     WHEN OTHERS THEN
		RAISE EXCEPTION 'Fallo la orden SQL: %. El error fue: %',sql,SQLERRM;
END; 
]]></definition>
</function>

<function name="retiros_voluntarios_planillas_actualiza_descuentos"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
	v_total_descuentos numeric(15,2) := 0;
	v_id_planilla integer :=0;	
	v_id_planilla_detalle integer :=0;
	nombre_usuario text := user::text;
BEGIN
	IF (TG_OP = 'DELETE') THEN
		v_id_planilla_detalle = OLD.id_retiro_voluntario_planilla_detalle;
		SELECT INTO      
	               --en estas variables
		       v_id_planilla  
		       --cargar los siguientes resultado
		       a.id_retiro_voluntario_planilla
	       FROM salarios.retiros_voluntarios_planillas_detalles a
	       WHERE a.id_retiro_voluntario_planilla_detalle = v_id_planilla_detalle;

	       SELECT INTO      
	               --en estas variables
		       v_total_descuentos
		       --cargar los siguientes resultado
		       sum(a.monto_descuento)		       
	       FROM salarios.retiros_voluntarios_planillas_detalles_descuentos a
	       LEFT JOIN salarios.retiros_voluntarios_planillas_detalles b ON (b.id_retiro_voluntario_planilla_detalle = a.id_retiro_voluntario_planilla_detalle)
	       WHERE b.id_retiro_voluntario_planilla = v_id_planilla;
	       IF v_total_descuentos IS NULL THEN 
		       v_total_descuentos :=0;		       
	       END IF;
	       UPDATE salarios.retiros_voluntarios_planillas 
	       SET         
		       total_descuentos=v_total_descuentos,		       
		       usu_modi=nombre_usuario, fec_modi=now() 
	       WHERE id_retiro_voluntario_planilla = v_id_planilla;                              
	       RETURN OLD;		      
	ELSIF (TG_OP = 'UPDATE') THEN
	       SELECT INTO      
	               --en estas variables
		       v_total_descuentos,
		       v_id_planilla  
		       --cargar los siguientes resultado
		       sum(b.monto_descuento),
		       max(a.id_retiro_voluntario_planilla)		       
	       FROM salarios.retiros_voluntarios_planillas_detalles_descuentos b
	       LEFT JOIN salarios.retiros_voluntarios_planillas_detalles a ON (a.id_retiro_voluntario_planilla_detalle = b.id_retiro_voluntario_planilla_detalle)
	       WHERE a.id_retiro_voluntario_planilla = (
							SELECT max(a.id_retiro_voluntario_planilla)		       
							FROM salarios.retiros_voluntarios_planillas_detalles_descuentos b
							LEFT JOIN salarios.retiros_voluntarios_planillas_detalles a ON (a.id_retiro_voluntario_planilla_detalle = b.id_retiro_voluntario_planilla_detalle)
							WHERE b.id_retiro_voluntario_planilla_detalle = NEW.id_retiro_voluntario_planilla_detalle);
	      
	       IF v_total_descuentos IS NULL THEN 
		       v_total_descuentos :=0;		       
	       END IF;
	       UPDATE salarios.retiros_voluntarios_planillas 
	       SET         
		       total_descuentos=v_total_descuentos,
		       usu_modi=nombre_usuario, fec_modi=now()  
	       WHERE id_retiro_voluntario_planilla = v_id_planilla;                               
	       RETURN NEW;                               
	ELSIF (TG_OP = 'INSERT') THEN
	       SELECT INTO      
	               --en estas variables
		       v_total_descuentos,
		       v_id_planilla  
		       --cargar los siguientes resultado
		       sum(b.monto_descuento),
		       max(a.id_retiro_voluntario_planilla)		       
	       FROM salarios.retiros_voluntarios_planillas_detalles_descuentos b
	       LEFT JOIN salarios.retiros_voluntarios_planillas_detalles a ON (a.id_retiro_voluntario_planilla_detalle = b.id_retiro_voluntario_planilla_detalle)
	       WHERE a.id_retiro_voluntario_planilla = (
							SELECT max(a.id_retiro_voluntario_planilla)		       
							FROM salarios.retiros_voluntarios_planillas_detalles_descuentos b
							LEFT JOIN salarios.retiros_voluntarios_planillas_detalles a ON (a.id_retiro_voluntario_planilla_detalle = b.id_retiro_voluntario_planilla_detalle)
							WHERE b.id_retiro_voluntario_planilla_detalle = NEW.id_retiro_voluntario_planilla_detalle);
	      
	       IF v_total_descuentos IS NULL THEN 
		       v_total_descuentos :=0;		       
	       END IF;
	       UPDATE salarios.retiros_voluntarios_planillas 
	       SET         
		       total_descuentos=v_total_descuentos,
		       usu_modi=nombre_usuario, fec_modi=now()  
	       WHERE id_retiro_voluntario_planilla = v_id_planilla;                               
	       RETURN NEW;                               
	END IF;
END;]]></definition>
</function>

<function name="retiros_voluntarios_planillas_actualiza_haberes"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="0">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<type name="trigger"/>
	</return-type>
	<definition><![CDATA[
DECLARE
	v_total_haberes numeric(15,2) := 0;	
	nombre_usuario text := user::text;
BEGIN
	IF (TG_OP = 'DELETE') THEN
	       SELECT INTO      
	               --en estas variables
		       v_total_haberes  
		       --cargar los siguientes resultado
		       sum(item_c_monto_pre_aviso+item_d_monto_indemnizacion+item_e_monto_vacaciones+item_f_monto_aguinaldo)		       
	       FROM salarios.retiros_voluntarios_planillas_detalles
	       WHERE id_retiro_voluntario_planilla = OLD.id_retiro_voluntario_planilla;
	       IF v_total_haberes IS NULL THEN 
		       v_total_haberes :=0;		       
	       END IF;
	       UPDATE salarios.retiros_voluntarios_planillas 
	       SET         
		       total_haberes=v_total_haberes,		       
		       usu_modi=nombre_usuario, fec_modi=now() 
	       WHERE id_retiro_voluntario_planilla = OLD.id_retiro_voluntario_planilla;                              
	       RETURN OLD;		      
	ELSIF (TG_OP = 'UPDATE') THEN
	       SELECT INTO      
		       --en estas variables
		       v_total_haberes  
		       --cargar los siguientes resultado
		       sum(item_c_monto_pre_aviso+item_d_monto_indemnizacion+item_e_monto_vacaciones+item_f_monto_aguinaldo)		       
	       FROM salarios.retiros_voluntarios_planillas_detalles
	       WHERE id_retiro_voluntario_planilla = NEW.id_retiro_voluntario_planilla;
	      
	       IF v_total_haberes IS NULL THEN 
		       v_total_haberes :=0;		       
	       END IF;
	       UPDATE salarios.retiros_voluntarios_planillas 
	       SET         
		       total_haberes=v_total_haberes,
		       usu_modi=nombre_usuario, fec_modi=now()  
	       WHERE id_retiro_voluntario_planilla = NEW.id_retiro_voluntario_planilla;                               
	       RETURN NEW;                               
	ELSIF (TG_OP = 'INSERT') THEN
	       SELECT INTO      
		       --en estas variables
		       v_total_haberes  
		       --cargar los siguientes resultado
		       sum(item_c_monto_pre_aviso+item_d_monto_indemnizacion+item_e_monto_vacaciones+item_f_monto_aguinaldo)
	       FROM salarios.retiros_voluntarios_planillas_detalles 
	       WHERE id_retiro_voluntario_planilla = NEW.id_retiro_voluntario_planilla;                               
	       IF v_total_haberes IS NULL THEN 
		       v_total_haberes :=0;		       
	       END IF; 
	       UPDATE salarios.retiros_voluntarios_planillas 
	       SET         
		       total_haberes=v_total_haberes,
		       usu_modi=nombre_usuario, fec_modi=now()  
	       WHERE id_retiro_voluntario_planilla = NEW.id_retiro_voluntario_planilla;                               
	       RETURN NEW;                               
	END IF;
END;]]></definition>
</function>

<function name="sfp_informe_anual_v2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="linea">
		<type name="text"/>
	</parameter>
	<parameter name="ci">
		<type name="text"/>
	</parameter>
	<parameter name="funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="og">
		<type name="integer"/>
	</parameter>
	<parameter name="denominacion">
		<type name="text"/>
	</parameter>
	<parameter name="ene">
		<type name="numeric"/>
	</parameter>
	<parameter name="feb">
		<type name="numeric"/>
	</parameter>
	<parameter name="mar">
		<type name="numeric"/>
	</parameter>
	<parameter name="abr">
		<type name="numeric"/>
	</parameter>
	<parameter name="may">
		<type name="numeric"/>
	</parameter>
	<parameter name="jun">
		<type name="numeric"/>
	</parameter>
	<parameter name="jul">
		<type name="numeric"/>
	</parameter>
	<parameter name="ago">
		<type name="numeric"/>
	</parameter>
	<parameter name="sep">
		<type name="numeric"/>
	</parameter>
	<parameter name="oct">
		<type name="numeric"/>
	</parameter>
	<parameter name="nov">
		<type name="numeric"/>
	</parameter>
	<parameter name="dic">
		<type name="numeric"/>
	</parameter>
	<parameter name="total_a_dic">
		<type name="numeric"/>
	</parameter>
	<parameter name="aguinaldo">
		<type name="numeric"/>
	</parameter>
	<parameter name="monto_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="tipo_funcionario">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_tipo_funcionario" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar el reporte de RESUMEN ANUAL de PLANILLA GENERAL DE PAGOS solicitado por 
  * la Secretaría Función Pública de acuerdo a la Ley Nº 5.189/2014 Art. 7º.-   
  * por administracion, mes, gestion y/o id_funcionario
  * Creado    : 2016-01-14 08:20:00
  * Modificado: 2016-01-14 17:00:00
  * Modificado: 2016-01-20 14:10:48
  * Modificado: 2017-05-08 10:00:00 Se agregan pagos de contratados por excendentes, nocturnos y bonificaciones
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración
  *            in_tipo_funcionario  [0:todos 1:Permanente 2:Contratado 3:Comisionado] 
  *            in_gestion           ejercicio aplicado [2013-...]
  * 	       in_id_funcionario    ['0':todos '1782,687,...':ids_funcionarios específicos]
  * Descripcion:  Artículo 7º.- Todas las instituciones y dependencias citadas en el artículo 2º deberán
  *                             publicar cada fin de ejercicio, un resumen total de los ingresos de cada uno
  *                             de los funcionarios incluyendo, los montos de remuneraciones básicas, adicionales
  *                             complementarias, otros gastos de personal y viáticos por cada funcionario o empleado
  *                             permanente, contratado o de elección popular. Estos resúmenes deben ser publicados 
  *                             a más tardar el último día hábil del mes de enero de cada año.
  * ------------  
    
  FUNCION PL/PGSQL UTILIZADA 
     salarios.obtener_ids_funcionarios_mes_gestion(integer,integer,integer,text)
     
        in_id_administracion administración del proceso [1:DA, 2:SET, 3: AMBAS]
        in_tipo_funcionario  tipo funcionario           [0: TODOS, 1:PERMANENTE, 2:CONTRATADO]
        in_id_mes            mes necesario              [0: TODOS]		
        in_gestion           ejercicio aplicado         [Ej.: 2014]
   */
RETURN QUERY

SELECT
   --row_number() over(PARTITION by a.id_funcionario ORDER BY replace(a.ci,'.','')::int,a.orden,a.ene desc) as item,
   a.id_funcionario,
   a.linea,
   a.ci,     
   trim(a.funcionario) as funcionario,
   a.og,
   a.denominacion,
   a.ene::numeric(15,0),a.feb::numeric(15,0),a.mar::numeric(15,0),
   a.abr::numeric(15,0),a.may::numeric(15,0),a.jun::numeric(15,0),
   a.jul::numeric(15,0),a.ago::numeric(15,0),a.sep::numeric(15,0),
   a.oct::numeric(15,0),a.nov::numeric(15,0),a.dic::numeric(15,0),
   a.total::numeric(15,0) as total_a_dic,
   a.aguinaldo::numeric(15,0),
   (SUM(a.total+a.aguinaldo) OVER(PARTITION BY a.id_funcionario))::numeric(15,0) as monto_total,
   a.orden,
   a.tipo_funcionario
FROM (
-- CONTRATADOS - POR UNIDAD DE TIEMPO - JORNALES/PERSONAL TECNICO/HONORARIOS PROFESIONALES (141/144/145)
SELECT
   ''::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   CASE 
      WHEN pagado.objeto_gasto=141 THEN 'PERSONAL TÉCNICO - POR UNIDAD DE TIEMPO'::text 
      WHEN pagado.objeto_gasto=144 THEN 'JORNALES - POR UNIDAD DE TIEMPO'::text
      WHEN pagado.objeto_gasto=145 THEN 'HONORARIOS PROFESIONALES - POR UNIDAD DE TIEMPO'::text
   END as denominacion,
   1 as orden,
   'CON'::text as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         pad.objeto_gasto,
         MAX(CASE WHEN pad.id_mes= 1 THEN pad.monto ELSE 0 END) as ene,
         MAX(CASE WHEN pad.id_mes= 2 THEN pad.monto ELSE 0 END) as feb,
         MAX(CASE WHEN pad.id_mes= 3 THEN pad.monto ELSE 0 END) as mar,
         MAX(CASE WHEN pad.id_mes= 4 THEN pad.monto ELSE 0 END) as abr,
         MAX(CASE WHEN pad.id_mes= 5 THEN pad.monto ELSE 0 END) as may,
         MAX(CASE WHEN pad.id_mes= 6 THEN pad.monto ELSE 0 END) as jun,
         MAX(CASE WHEN pad.id_mes= 7 THEN pad.monto ELSE 0 END) as jul,
         MAX(CASE WHEN pad.id_mes= 8 THEN pad.monto ELSE 0 END) as ago,
         MAX(CASE WHEN pad.id_mes= 9 THEN pad.monto ELSE 0 END) as sep,
         MAX(CASE WHEN pad.id_mes=10 THEN pad.monto ELSE 0 END) as oct,
         MAX(CASE WHEN pad.id_mes=11 THEN pad.monto ELSE 0 END) as nov,
         MAX(CASE WHEN pad.id_mes=12 THEN pad.monto ELSE 0 END) as dic,
         (SUM(pad.monto))::numeric(15,0) as total,         
         (SUM(pad.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios_contratados.planillas_aguinaldos_detalles pad
	 LEFT JOIN salarios_contratados.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pad.id_planilla_aguinaldo
	 LEFT JOIN salarios_contratados.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pad.id_funcionario_aguinaldo AND fa.objeto_gasto=pad.objeto_gasto
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=1 AND
         pa.estado=1 AND
         fa.gestion=in_gestion
      GROUP BY
         fa.id_funcionario,
         pad.objeto_gasto
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          2,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL
-- CONTRATADOS SALARIOS - POR PRODUCTO - JORNALES/PERSONAL TECNICO/HONORARIOS PROFESIONALES (141/144/145)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   1 as orden,
   'CON'::text as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         psd.id_funcionario,
         ''::text as linea,
         psd.objeto_gasto as objeto_gasto,
         CASE 
            WHEN psd.objeto_gasto=141 THEN 'PERSONAL TÉCNICO - POR PRODUCTO'::text 
            WHEN psd.objeto_gasto=144 THEN 'JORNALES - POR PRODUCTO'::text
            WHEN psd.objeto_gasto=145 THEN 'HONORARIOS PROFESIONALES - POR PRODUCTO'::text
         END as denominador,
         SUM(CASE WHEN ps.id_mes= 1 THEN psd.monto_devengado ELSE 0 END) as ene,
         SUM(CASE WHEN ps.id_mes= 2 THEN psd.monto_devengado ELSE 0 END) as feb,
         SUM(CASE WHEN ps.id_mes= 3 THEN psd.monto_devengado ELSE 0 END) as mar,
         SUM(CASE WHEN ps.id_mes= 4 THEN psd.monto_devengado ELSE 0 END) as abr,
         SUM(CASE WHEN ps.id_mes= 5 THEN psd.monto_devengado ELSE 0 END) as may,
         SUM(CASE WHEN ps.id_mes= 6 THEN psd.monto_devengado ELSE 0 END) as jun,
         SUM(CASE WHEN ps.id_mes= 7 THEN psd.monto_devengado ELSE 0 END) as jul,
         SUM(CASE WHEN ps.id_mes= 8 THEN psd.monto_devengado ELSE 0 END) as ago,
         SUM(CASE WHEN ps.id_mes= 9 THEN psd.monto_devengado ELSE 0 END) as sep,
         SUM(CASE WHEN ps.id_mes=10 THEN psd.monto_devengado ELSE 0 END) as oct,
         SUM(CASE WHEN ps.id_mes=11 THEN psd.monto_devengado ELSE 0 END) as nov,
         SUM(CASE WHEN ps.id_mes=12 THEN psd.monto_devengado ELSE 0 END) as dic,
         (SUM(psd.monto_devengado))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios_contratados.planillas_salarios_detalles psd
         LEFT JOIN salarios_contratados.planillas_salarios ps ON ps.id_planilla_salario=psd.id_planilla_salario
         LEFT JOIN salarios_contratados.funcionarios_contratos fc ON fc.id_funcionario_contrato=psd.id_funcionario_contrato
         LEFT JOIN legajos.tipo_contrato tc ON tc.id_tipo_contrato=fc.id_tipo_contrato
      WHERE
         ps.gestion=in_gestion AND
         ps.id_estado=1 AND
         tc.descripcion_tipo ilike '%POR PRODUCTO%'
      GROUP BY
         psd.id_funcionario,
         psd.objeto_gasto
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          2,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END  

UNION ALL

-- CONTRATADOS REMUNERACION EXTRAORDINARIA - JORNALES/PERSONAL TECNICO/HONORARIOS PROFESIONALES (141/144/145) 
SELECT
   ''::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   CASE 
      WHEN pagado.objeto_gasto=141 THEN 'PERSONAL TÉCNICO - REMUNERACIÓN EXTRAORDINARIA'::text 
      WHEN pagado.objeto_gasto=144 THEN 'JORNALES - REMUNERACIÓN EXTRAORDINARIA'::text
      WHEN pagado.objeto_gasto=145 THEN 'HONORARIOS PROFESIONALES - REMUNERACIÓN EXTRAORDINARIA'::text
   END as denominacion,
   2 as orden,
   'CON'::text as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         pad.objeto_gasto,
         SUM(CASE WHEN pad.id_mes= 1 THEN pad.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pad.id_mes= 2 THEN pad.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pad.id_mes= 3 THEN pad.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pad.id_mes= 4 THEN pad.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pad.id_mes= 5 THEN pad.monto ELSE 0 END) as may,
         SUM(CASE WHEN pad.id_mes= 6 THEN pad.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pad.id_mes= 7 THEN pad.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pad.id_mes= 8 THEN pad.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pad.id_mes= 9 THEN pad.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pad.id_mes=10 THEN pad.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pad.id_mes=11 THEN pad.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pad.id_mes=12 THEN pad.monto ELSE 0 END) as dic,
         (SUM(pad.monto))::numeric(15,0) as total,         
         (SUM(pad.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios_contratados.planillas_aguinaldos_detalles pad
	 LEFT JOIN salarios_contratados.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pad.id_planilla_aguinaldo
	 LEFT JOIN salarios_contratados.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pad.id_funcionario_aguinaldo AND fa.objeto_gasto=pad.objeto_gasto
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=2 AND
         pa.estado=1 AND
         fa.gestion=in_gestion
      GROUP BY
         fa.id_funcionario,
         pad.objeto_gasto
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          2,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- CONTRATADOS REMUNERACION ADICIONAL - JORNALES/PERSONAL TECNICO/HONORARIOS PROFESIONALES (141/144/145) 
SELECT
   ''::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   CASE 
      WHEN pagado.objeto_gasto=141 THEN 'PERSONAL TÉCNICO - REMUNERACIÓN ADICIONAL'::text 
      WHEN pagado.objeto_gasto=144 THEN 'JORNALES - REMUNERACIÓN ADICIONAL'::text
      WHEN pagado.objeto_gasto=145 THEN 'HONORARIOS PROFESIONALES - REMUNERACIÓN ADICIONAL'::text
   END as denominacion,
   3 as orden,
   'CON'::text as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         pad.objeto_gasto,
         SUM(CASE WHEN pad.id_mes= 1 THEN pad.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pad.id_mes= 2 THEN pad.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pad.id_mes= 3 THEN pad.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pad.id_mes= 4 THEN pad.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pad.id_mes= 5 THEN pad.monto ELSE 0 END) as may,
         SUM(CASE WHEN pad.id_mes= 6 THEN pad.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pad.id_mes= 7 THEN pad.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pad.id_mes= 8 THEN pad.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pad.id_mes= 9 THEN pad.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pad.id_mes=10 THEN pad.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pad.id_mes=11 THEN pad.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pad.id_mes=12 THEN pad.monto ELSE 0 END) as dic,
         (SUM(pad.monto))::numeric(15,0) as total,         
         (SUM(pad.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios_contratados.planillas_aguinaldos_detalles pad
	 LEFT JOIN salarios_contratados.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pad.id_planilla_aguinaldo
	 LEFT JOIN salarios_contratados.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pad.id_funcionario_aguinaldo AND fa.objeto_gasto=pad.objeto_gasto
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=3 AND
         pa.estado=1 AND
         fa.gestion=in_gestion
      GROUP BY
         fa.id_funcionario,
         pad.objeto_gasto
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          2,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- CONTRATADOS GRATIFICACIÓN OCASIONAL - JORNALES/PERSONAL TECNICO/HONORARIOS PROFESIONALES (141/144/145) 
SELECT
   ''::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   CASE 
      WHEN pagado.objeto_gasto=141 THEN 'PERSONAL TÉCNICO - GRATIFICACIÓN OCASIONAL'::text 
      WHEN pagado.objeto_gasto=144 THEN 'JORNALES - GRATIFICACIÓN OCASIONAL'::text
      WHEN pagado.objeto_gasto=145 THEN 'HONORARIOS PROFESIONALES - GRATIFICACIÓN OCASIONAL'::text
   END as denominacion,
   4 as orden,
   'CON'::text as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         pad.objeto_gasto,
         SUM(CASE WHEN pad.id_mes= 1 THEN pad.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pad.id_mes= 2 THEN pad.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pad.id_mes= 3 THEN pad.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pad.id_mes= 4 THEN pad.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pad.id_mes= 5 THEN pad.monto ELSE 0 END) as may,
         SUM(CASE WHEN pad.id_mes= 6 THEN pad.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pad.id_mes= 7 THEN pad.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pad.id_mes= 8 THEN pad.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pad.id_mes= 9 THEN pad.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pad.id_mes=10 THEN pad.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pad.id_mes=11 THEN pad.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pad.id_mes=12 THEN pad.monto ELSE 0 END) as dic,
         (SUM(pad.monto))::numeric(15,0) as total,         
         (SUM(pad.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios_contratados.planillas_aguinaldos_detalles pad
	 LEFT JOIN salarios_contratados.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pad.id_planilla_aguinaldo
	 LEFT JOIN salarios_contratados.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pad.id_funcionario_aguinaldo AND fa.objeto_gasto=pad.objeto_gasto
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=4 AND
         pa.estado=1 AND
         fa.gestion=in_gestion
      GROUP BY
         fa.id_funcionario,
         pad.objeto_gasto
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          2,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL
-- CONTRATADOS SUBSIDIO FAMILIAR - JORNALES/PERSONAL TECNICO/HONORARIOS PROFESIONALES (141/144/145)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   5 as orden,
   'CON'::text as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fs.id_funcionario,
         ''::text as linea,
         dps.objeto_gasto as objeto_gasto,
         CASE 
            WHEN dps.objeto_gasto=141 THEN 'PERSONAL TÉCNICO - SUBSIDIO FAMILIAR'::text 
            WHEN dps.objeto_gasto=144 THEN 'JORNALES - SUBSIDIO FAMILIAR'::text
            WHEN dps.objeto_gasto=145 THEN 'HONORARIOS PROFESIONALES - SUBSIDIO FAMILIAR'::text
         END||' ('||MAX(s.descripcion)||')' as denominador,
         fs.id_subsidio,
         SUM(CASE WHEN ps.id_mes= 1 THEN dps.importe_subsidio ELSE 0 END) as ene,
         SUM(CASE WHEN ps.id_mes= 2 THEN dps.importe_subsidio ELSE 0 END) as feb,
         SUM(CASE WHEN ps.id_mes= 3 THEN dps.importe_subsidio ELSE 0 END) as mar,
         SUM(CASE WHEN ps.id_mes= 4 THEN dps.importe_subsidio ELSE 0 END) as abr,
         SUM(CASE WHEN ps.id_mes= 5 THEN dps.importe_subsidio ELSE 0 END) as may,
         SUM(CASE WHEN ps.id_mes= 6 THEN dps.importe_subsidio ELSE 0 END) as jun,
         SUM(CASE WHEN ps.id_mes= 7 THEN dps.importe_subsidio ELSE 0 END) as jul,
         SUM(CASE WHEN ps.id_mes= 8 THEN dps.importe_subsidio ELSE 0 END) as ago,
         SUM(CASE WHEN ps.id_mes= 9 THEN dps.importe_subsidio ELSE 0 END) as sep,
         SUM(CASE WHEN ps.id_mes=10 THEN dps.importe_subsidio ELSE 0 END) as oct,
         SUM(CASE WHEN ps.id_mes=11 THEN dps.importe_subsidio ELSE 0 END) as nov,
         SUM(CASE WHEN ps.id_mes=12 THEN dps.importe_subsidio ELSE 0 END) as dic,
         (SUM(dps.importe_subsidio))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios_contratados.planillas_subsidios_detalles dps
         LEFT JOIN salarios_contratados.planillas_subsidios ps ON ps.id_planilla_subsidio=dps.id_planilla_subsidio
         LEFT JOIN salarios_contratados.funcionarios_subsidios fs ON fs.id_funcionario_subsidio=dps.id_funcionario_subsidio
         LEFT JOIN salarios_contratados.subsidios s ON s.id_subsidio=fs.id_subsidio
      WHERE
         ps.gestion=in_gestion AND
         ps.estado=1
      GROUP BY
         fs.id_funcionario,
         fs.id_subsidio,
         dps.objeto_gasto
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          2,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END
       
UNION ALL
-- CONTRATADOS EXCEDENTE/RECARGO NOCTURNO - JORNALES/PERSONAL TECNICO/HONORARIOS PROFESIONALES (141/144/145) 
SELECT
   ''::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   CASE 
      WHEN pagado.objeto_gasto=141 THEN ('PERSONAL TÉCNICO - '||pagado.concepto_tipo)::text 
      WHEN pagado.objeto_gasto=144 THEN ('JORNALES - '||pagado.concepto_tipo)::text
      WHEN pagado.objeto_gasto=145 THEN ('HONORARIOS PROFESIONALES - '||pagado.concepto_tipo)::text
   END as denominacion,
   6 as orden,
   'CON'::text as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         pad.objeto_gasto,
         CASE WHEN ps.id_tipo_pago=1 THEN 'EXCEDENTE'::text ELSE 'RECARGO NOCTURNO'::text END concepto_tipo,
         SUM(CASE WHEN pad.id_mes= 1 THEN pad.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pad.id_mes= 2 THEN pad.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pad.id_mes= 3 THEN pad.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pad.id_mes= 4 THEN pad.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pad.id_mes= 5 THEN pad.monto ELSE 0 END) as may,
         SUM(CASE WHEN pad.id_mes= 6 THEN pad.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pad.id_mes= 7 THEN pad.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pad.id_mes= 8 THEN pad.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pad.id_mes= 9 THEN pad.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pad.id_mes=10 THEN pad.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pad.id_mes=11 THEN pad.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pad.id_mes=12 THEN pad.monto ELSE 0 END) as dic,
         (SUM(pad.monto))::numeric(15,0) as total,         
         (SUM(pad.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios_contratados.planillas_aguinaldos_detalles pad
	 LEFT JOIN salarios_contratados.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pad.id_planilla_aguinaldo
	 LEFT JOIN salarios_contratados.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pad.id_funcionario_aguinaldo AND fa.objeto_gasto=pad.objeto_gasto
	 LEFT JOIN salarios_contratados.planillas_serenos_detalles psd ON psd.id_planilla_sereno_detalle=fa.id_detalle_planilla
	 LEFT JOIN salarios_contratados.planillas_serenos ps ON ps.id_planilla_sereno=psd.id_planilla_sereno
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=5 AND
         pa.estado=1 AND
         fa.gestion=in_gestion
      GROUP BY
         fa.id_funcionario,
         ps.id_tipo_pago,
         pad.objeto_gasto
   ) pagado ON pagado.id_funcionario=f.id_funcionario

WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          2,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END 

UNION ALL
-- CONTRATADOS BONIFICACIONES - JORNALES/PERSONAL TECNICO/HONORARIOS PROFESIONALES (141/144/145) 
SELECT
   ''::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   CASE 
      WHEN pagado.objeto_gasto=141 THEN ('PERSONAL TÉCNICO - '||pagado.concepto_tipo)::text 
      WHEN pagado.objeto_gasto=144 THEN ('JORNALES - '||pagado.concepto_tipo)::text
      WHEN pagado.objeto_gasto=145 THEN ('HONORARIOS PROFESIONALES - '||pagado.concepto_tipo)::text
   END as denominacion,
   7 as orden,
   'CON'::text as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         pad.objeto_gasto,
         tb.descripcion as concepto_tipo,
         SUM(CASE WHEN pad.id_mes= 1 THEN pad.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pad.id_mes= 2 THEN pad.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pad.id_mes= 3 THEN pad.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pad.id_mes= 4 THEN pad.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pad.id_mes= 5 THEN pad.monto ELSE 0 END) as may,
         SUM(CASE WHEN pad.id_mes= 6 THEN pad.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pad.id_mes= 7 THEN pad.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pad.id_mes= 8 THEN pad.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pad.id_mes= 9 THEN pad.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pad.id_mes=10 THEN pad.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pad.id_mes=11 THEN pad.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pad.id_mes=12 THEN pad.monto ELSE 0 END) as dic,
         (SUM(pad.monto))::numeric(15,0) as total,         
         (SUM(pad.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios_contratados.planillas_aguinaldos_detalles pad
	 LEFT JOIN salarios_contratados.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pad.id_planilla_aguinaldo
	 LEFT JOIN salarios_contratados.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pad.id_funcionario_aguinaldo AND fa.objeto_gasto=pad.objeto_gasto
	 LEFT JOIN salarios_contratados.planillas_bonificaciones_detalles pbd ON pbd.id_planilla_bonificacion_detalle=fa.id_detalle_planilla
	 --LEFT JOIN salarios_contratados.planillas_bonificaciones pb ON pb.id_planilla_bonificacion=pbd.id_planilla_bonificacion
	 LEFT JOIN salarios_contratados.funcionarios_bonificaciones fb ON fb.id_funcionario_bonificacion=pbd.id_funcionario_bonificacion
	 LEFT JOIN salarios_contratados.tipos_bonificaciones tb ON tb.id_tipo_bonificacion=fb.id_tipo_bonificacion
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=6 AND
         pa.estado=1 AND
         fa.gestion=in_gestion
      GROUP BY
         fa.id_funcionario,
         tb.descripcion,
         pad.objeto_gasto
   ) pagado ON pagado.id_funcionario=f.id_funcionario

WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          2,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL
-- PERMANENTES - COMISIONADOS
-- PERMANENTES SUELDO (111)
SELECT
   dc.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   'SUELDO'::text as denominacion,
   1 as orden,
   'PER'::text as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         max(dps.id_detalle_categoria) as id_detalle_categoria,
         111 as objeto_gasto,
         SUM(CASE WHEN pda.id_mes= 1 THEN pda.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pda.id_mes= 2 THEN pda.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pda.id_mes= 3 THEN pda.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pda.id_mes= 4 THEN pda.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pda.id_mes= 5 THEN pda.monto ELSE 0 END) as may,
         SUM(CASE WHEN pda.id_mes= 6 THEN pda.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pda.id_mes= 7 THEN pda.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pda.id_mes= 8 THEN pda.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pda.id_mes= 9 THEN pda.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pda.id_mes=10 THEN pda.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pda.id_mes=11 THEN pda.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pda.id_mes=12 THEN pda.monto ELSE 0 END) as dic,
         (SUM(pda.monto))::numeric(15,0) as total,
         (SUM(pda.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios.planillas_detalles_aguinaldos pda
         LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
         LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
         LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_detalle_planilla_salario=fa.id_detalle_planilla
         LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=dps.id_detalle_categoria
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=1 AND
         pa.estado=1
      GROUP BY
         fa.id_funcionario
   ) pagado ON pagado.id_funcionario=f.id_funcionario
   LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=pagado.id_detalle_categoria
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- PERMANENTES GASTO DE REPRESENTACION (113)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   'GASTO DE REPRESENTACION'::text as denominacion,
   2 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado as es_comisionado,
         113 as objeto_gasto,
         SUM(CASE WHEN pda.id_mes= 1 THEN pda.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pda.id_mes= 2 THEN pda.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pda.id_mes= 3 THEN pda.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pda.id_mes= 4 THEN pda.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pda.id_mes= 5 THEN pda.monto ELSE 0 END) as may,
         SUM(CASE WHEN pda.id_mes= 6 THEN pda.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pda.id_mes= 7 THEN pda.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pda.id_mes= 8 THEN pda.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pda.id_mes= 9 THEN pda.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pda.id_mes=10 THEN pda.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pda.id_mes=11 THEN pda.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pda.id_mes=12 THEN pda.monto ELSE 0 END) as dic,
         (SUM(pda.monto))::numeric(15,0) as total,
         (SUM(pda.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios.planillas_detalles_aguinaldos pda
         LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
         LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_representacion,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fr.id_funcionario_representacion) as id_funcionario_representacion,
	          fr.id_funcionario
	       FROM 
	          salarios.funcionarios_representaciones fr
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fr.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          extract(year from fr.desde) = in_gestion
	       GROUP BY
	          fr.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_representaciones y ON y.id_funcionario_representacion = x.id_funcionario_representacion
	    LEFT JOIN salarios.detalles_categorias          dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias                    c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fa.id_funcionario
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=2 AND
         pa.estado=1
      GROUP BY
         fa.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- PERMANENTES REMUNERACIÓN EXTRAORDINARIA (123)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   'REMUNERACIÓN EXTRAORDINARIA'::text as denominacion,
   3 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         123 as objeto_gasto,
         SUM(CASE WHEN pda.id_mes= 1 THEN pda.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pda.id_mes= 2 THEN pda.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pda.id_mes= 3 THEN pda.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pda.id_mes= 4 THEN pda.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pda.id_mes= 5 THEN pda.monto ELSE 0 END) as may,
         SUM(CASE WHEN pda.id_mes= 6 THEN pda.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pda.id_mes= 7 THEN pda.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pda.id_mes= 8 THEN pda.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pda.id_mes= 9 THEN pda.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pda.id_mes=10 THEN pda.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pda.id_mes=11 THEN pda.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pda.id_mes=12 THEN pda.monto ELSE 0 END) as dic,
         (SUM(pda.monto))::numeric(15,0) as total,
         (SUM(pda.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios.planillas_detalles_aguinaldos pda
         LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
         LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fa.id_funcionario
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=9 AND
         pa.estado=1
      GROUP BY
         fa.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END
   
UNION ALL

-- PERMANENTES REMUNERACIÓN ADICIONAL (125)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   'REMUNERACIÓN ADICIONAL'::text as denominacion,
   4 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         125 as objeto_gasto,
         SUM(CASE WHEN pda.id_mes= 1 THEN pda.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pda.id_mes= 2 THEN pda.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pda.id_mes= 3 THEN pda.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pda.id_mes= 4 THEN pda.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pda.id_mes= 5 THEN pda.monto ELSE 0 END) as may,
         SUM(CASE WHEN pda.id_mes= 6 THEN pda.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pda.id_mes= 7 THEN pda.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pda.id_mes= 8 THEN pda.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pda.id_mes= 9 THEN pda.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pda.id_mes=10 THEN pda.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pda.id_mes=11 THEN pda.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pda.id_mes=12 THEN pda.monto ELSE 0 END) as dic,
         (SUM(pda.monto))::numeric(15,0) as total,
         (SUM(pda.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios.planillas_detalles_aguinaldos pda
         LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
         LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fa.id_funcionario
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=10 AND
         pa.estado=1
      GROUP BY
         fa.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END
   
UNION ALL

-- PERMANENTES SUBSIDIO FAMILIAR (131)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   5 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fs.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         131 as objeto_gasto,
         'SUBSIDIO FAMILIAR'::text||' ('||MAX(s.descripcion)||')' as denominador,
         fs.id_subsidio,
         SUM(CASE WHEN ps.id_mes= 1 THEN dps.importe_monto ELSE 0 END) as ene,
         SUM(CASE WHEN ps.id_mes= 2 THEN dps.importe_monto ELSE 0 END) as feb,
         SUM(CASE WHEN ps.id_mes= 3 THEN dps.importe_monto ELSE 0 END) as mar,
         SUM(CASE WHEN ps.id_mes= 4 THEN dps.importe_monto ELSE 0 END) as abr,
         SUM(CASE WHEN ps.id_mes= 5 THEN dps.importe_monto ELSE 0 END) as may,
         SUM(CASE WHEN ps.id_mes= 6 THEN dps.importe_monto ELSE 0 END) as jun,
         SUM(CASE WHEN ps.id_mes= 7 THEN dps.importe_monto ELSE 0 END) as jul,
         SUM(CASE WHEN ps.id_mes= 8 THEN dps.importe_monto ELSE 0 END) as ago,
         SUM(CASE WHEN ps.id_mes= 9 THEN dps.importe_monto ELSE 0 END) as sep,
         SUM(CASE WHEN ps.id_mes=10 THEN dps.importe_monto ELSE 0 END) as oct,
         SUM(CASE WHEN ps.id_mes=11 THEN dps.importe_monto ELSE 0 END) as nov,
         SUM(CASE WHEN ps.id_mes=12 THEN dps.importe_monto ELSE 0 END) as dic,
         (SUM(dps.importe_monto))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios.detalles_planillas_subsidios dps
         LEFT JOIN salarios.planillas_subsidios ps ON ps.id_planilla_subsidio=dps.id_planilla_subsidio
         LEFT JOIN salarios.funcionarios_subsidios fs ON fs.id_funcionario_subsidio=dps.id_funcionario_subsidio
         LEFT JOIN salarios.subsidios s ON s.id_subsidio=fs.id_subsidio
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fs.id_funcionario
      WHERE
         ps.gestion=in_gestion AND
         ps.estado=1
      GROUP BY
         fs.id_funcionario,
         fc.es_comisionado,
         fs.id_subsidio
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- PERMANENTES GRATIFICACIONES Y BONIFICACIONES (133)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   'BONIF. POR '::text||pagado.descripcion as denominacion,
   6 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         max(b.descripcion)::text as descripcion,
         133 as objeto_gasto,
         SUM(CASE WHEN pda.id_mes= 1 THEN pda.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pda.id_mes= 2 THEN pda.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pda.id_mes= 3 THEN pda.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pda.id_mes= 4 THEN pda.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pda.id_mes= 5 THEN pda.monto ELSE 0 END) as may,
         SUM(CASE WHEN pda.id_mes= 6 THEN pda.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pda.id_mes= 7 THEN pda.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pda.id_mes= 8 THEN pda.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pda.id_mes= 9 THEN pda.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pda.id_mes=10 THEN pda.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pda.id_mes=11 THEN pda.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pda.id_mes=12 THEN pda.monto ELSE 0 END) as dic,
         (SUM(pda.monto))::numeric(15,0) as total,
         (SUM(pda.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios.planillas_detalles_aguinaldos pda
         LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
         LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
         LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_detalle_planilla_bonificacion=fa.id_detalle_planilla
         LEFT JOIN salarios.funcionarios_bonificaciones fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
         LEFT JOIN salarios.bonificaciones b ON b.id_bonificacion=fb.id_bonificacion
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fa.id_funcionario
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=3 AND
         pa.estado=1
      GROUP BY
         fa.id_funcionario,
         fc.es_comisionado,
         b.id_bonificacion
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- PERMANENTES GRATIFICACIONES Y BONIFICACIONES - GRADO ACADEMICO (133)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   'BONIF. POR GRADO ACADÉMICO' as denominacion,
   7 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         133 as objeto_gasto,
         SUM(CASE WHEN pda.id_mes= 1 THEN pda.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pda.id_mes= 2 THEN pda.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pda.id_mes= 3 THEN pda.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pda.id_mes= 4 THEN pda.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pda.id_mes= 5 THEN pda.monto ELSE 0 END) as may,
         SUM(CASE WHEN pda.id_mes= 6 THEN pda.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pda.id_mes= 7 THEN pda.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pda.id_mes= 8 THEN pda.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pda.id_mes= 9 THEN pda.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pda.id_mes=10 THEN pda.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pda.id_mes=11 THEN pda.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pda.id_mes=12 THEN pda.monto ELSE 0 END) as dic,
         (SUM(pda.monto))::numeric(15,0) as total,
         (SUM(pda.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios.planillas_detalles_aguinaldos pda
         LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
         LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fa.id_funcionario
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=4 AND
         pa.estado=1
      GROUP BY
         fa.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END
       
UNION ALL

-- PERMANENTES GRATIFICACIONES Y BONIFICACIONES - ANTIGÜEDAD (133)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   'BONIF. POR ANTIGÜEDAD' as denominacion,
   8 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         133 as objeto_gasto,
         SUM(CASE WHEN pda.id_mes= 1 THEN pda.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pda.id_mes= 2 THEN pda.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pda.id_mes= 3 THEN pda.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pda.id_mes= 4 THEN pda.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pda.id_mes= 5 THEN pda.monto ELSE 0 END) as may,
         SUM(CASE WHEN pda.id_mes= 6 THEN pda.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pda.id_mes= 7 THEN pda.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pda.id_mes= 8 THEN pda.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pda.id_mes= 9 THEN pda.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pda.id_mes=10 THEN pda.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pda.id_mes=11 THEN pda.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pda.id_mes=12 THEN pda.monto ELSE 0 END) as dic,
         (SUM(pda.monto))::numeric(15,0) as total,
         (SUM(pda.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios.planillas_detalles_aguinaldos pda
         LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
         LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fa.id_funcionario
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=5 AND
         pa.estado=1
      GROUP BY
         fa.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END
   
UNION ALL

-- PERMANENTES GRATIFICACIONES Y BONIFICACIONES - OCASIONAL (133)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   'BONIF. Y GRATIF. OCASIONAL' as denominacion,
   9 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         133 as objeto_gasto,
         SUM(CASE WHEN pda.id_mes= 1 THEN pda.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pda.id_mes= 2 THEN pda.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pda.id_mes= 3 THEN pda.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pda.id_mes= 4 THEN pda.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pda.id_mes= 5 THEN pda.monto ELSE 0 END) as may,
         SUM(CASE WHEN pda.id_mes= 6 THEN pda.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pda.id_mes= 7 THEN pda.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pda.id_mes= 8 THEN pda.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pda.id_mes= 9 THEN pda.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pda.id_mes=10 THEN pda.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pda.id_mes=11 THEN pda.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pda.id_mes=12 THEN pda.monto ELSE 0 END) as dic,
         (SUM(pda.monto))::numeric(15,0) as total,
         (SUM(pda.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios.planillas_detalles_aguinaldos pda
         LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
         LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fa.id_funcionario
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=8 AND
         pa.estado=1
      GROUP BY
         fa.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- PERMANENTES GRATIFICACION POR SERVICIOS ESPECIALES (137)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   'GRATIF. POR SERVICIOS ESPECIALES' as denominacion,
   10 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         137 as objeto_gasto,
         SUM(CASE WHEN pda.id_mes= 1 THEN pda.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pda.id_mes= 2 THEN pda.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pda.id_mes= 3 THEN pda.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pda.id_mes= 4 THEN pda.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pda.id_mes= 5 THEN pda.monto ELSE 0 END) as may,
         SUM(CASE WHEN pda.id_mes= 6 THEN pda.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pda.id_mes= 7 THEN pda.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pda.id_mes= 8 THEN pda.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pda.id_mes= 9 THEN pda.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pda.id_mes=10 THEN pda.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pda.id_mes=11 THEN pda.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pda.id_mes=12 THEN pda.monto ELSE 0 END) as dic,
         (SUM(pda.monto))::numeric(15,0) as total,
         (SUM(pda.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios.planillas_detalles_aguinaldos pda
         LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
         LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fa.id_funcionario
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=7 AND
         pa.estado=1
      GROUP BY
         fa.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END
   
UNION ALL

-- PERMANENTES OTROS GASTOS DEL PERSONAL / DIFERENCIA SALARIAL (199)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   11 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fa.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         199 as objeto_gasto,
         CASE WHEN pdsd.id_funcionario_superior IS NOT NULL THEN 'DIFERENCIA SALARIAL'::text ELSE 'OTROS GASTOS DEL PERSONAL'::text END as denominador,
         SUM(CASE WHEN pda.id_mes= 1 THEN pda.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pda.id_mes= 2 THEN pda.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pda.id_mes= 3 THEN pda.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pda.id_mes= 4 THEN pda.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pda.id_mes= 5 THEN pda.monto ELSE 0 END) as may,
         SUM(CASE WHEN pda.id_mes= 6 THEN pda.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pda.id_mes= 7 THEN pda.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pda.id_mes= 8 THEN pda.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pda.id_mes= 9 THEN pda.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pda.id_mes=10 THEN pda.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pda.id_mes=11 THEN pda.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pda.id_mes=12 THEN pda.monto ELSE 0 END) as dic,
         (SUM(pda.monto))::numeric(15,0) as total,
         (SUM(pda.monto)/12)::numeric(15,0) as aguinaldo
      FROM
         salarios.planillas_detalles_aguinaldos pda
         LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
         LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
         LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial_detalle=fa.id_detalle_planilla
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fa.id_funcionario
      WHERE
         pa.gestion=in_gestion AND
         pa.id_tipo_aguinaldo=6 AND
         pa.estado=1
      GROUP BY
         fa.id_funcionario,
         fc.es_comisionado,
         pdsd.id_funcionario_superior,
         pdsd.id_funcionario
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- PERMANENTES PROGRAMA RETIRO VOLUNTARIO (845)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   12 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         rvpd.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         845 as objeto_gasto,
         'PROGRAMA RETIRO VOLUNTARIO'::text as denominador,
         SUM(CASE WHEN rvp.id_mes_retiro= 1 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as ene,
         SUM(CASE WHEN rvp.id_mes_retiro= 2 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as feb,
         SUM(CASE WHEN rvp.id_mes_retiro= 3 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as mar,
         SUM(CASE WHEN rvp.id_mes_retiro= 4 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as abr,
         SUM(CASE WHEN rvp.id_mes_retiro= 5 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as may,
         SUM(CASE WHEN rvp.id_mes_retiro= 6 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as jun,
         SUM(CASE WHEN rvp.id_mes_retiro= 7 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as jul,
         SUM(CASE WHEN rvp.id_mes_retiro= 8 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as ago,
         SUM(CASE WHEN rvp.id_mes_retiro= 9 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as sep,
         SUM(CASE WHEN rvp.id_mes_retiro=10 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as oct,
         SUM(CASE WHEN rvp.id_mes_retiro=11 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as nov,
         SUM(CASE WHEN rvp.id_mes_retiro=12 THEN (rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo) ELSE 0 END) as dic,
         (SUM((rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+rvpd.item_e_monto_vacaciones+rvpd.item_f_monto_aguinaldo)))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios.retiros_voluntarios_planillas_detalles rvpd
         LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=rvpd.id_funcionario
      WHERE
         rvp.gestion_retiro=in_gestion AND
         rvp.id_estado=1
      GROUP BY
         rvpd.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- PERMANENTES OTRAS TRANSFERENCIAS CORRIENTES (849)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   13 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         potcd.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         849 as objeto_gasto,
         'OTRAS TRANSFERENCIAS CTES.'::text as denominador,
         SUM(CASE WHEN potc.id_mes= 1 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as ene,
         SUM(CASE WHEN potc.id_mes= 2 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as feb,
         SUM(CASE WHEN potc.id_mes= 3 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as mar,
         SUM(CASE WHEN potc.id_mes= 4 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as abr,
         SUM(CASE WHEN potc.id_mes= 5 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as may,
         SUM(CASE WHEN potc.id_mes= 6 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as jun,
         SUM(CASE WHEN potc.id_mes= 7 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as jul,
         SUM(CASE WHEN potc.id_mes= 8 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as ago,
         SUM(CASE WHEN potc.id_mes= 9 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as sep,
         SUM(CASE WHEN potc.id_mes=10 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as oct,
         SUM(CASE WHEN potc.id_mes=11 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as nov,
         SUM(CASE WHEN potc.id_mes=12 THEN potcd.importe_otra_transferencia_cte ELSE 0 END) as dic,
         (SUM(potcd.importe_otra_transferencia_cte))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios.planillas_otras_transferencias_ctes_detalles potcd
         LEFT JOIN salarios.planillas_otras_transferencias_ctes potc ON potc.id_planilla_otra_transferencia_cte=potcd.id_planilla_otra_transferencia_cte
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=potcd.id_funcionario
      WHERE
         potc.gestion=in_gestion AND
         potc.estado=1
      GROUP BY
         potcd.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL
-- EXCEPCIONES POR PROGRAMA DE RETIRO VOLUNTARIO A LOS OBJETOS DE GASTOS: 111, 113, 123, 133, 199
-- PERMANENTES SUELDO (111)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   1 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         dps.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         111 as objeto_gasto,
         'SUELDO'::text as denominador,
         SUM(CASE WHEN ps.id_mes= 1 THEN dps.monto_devengado ELSE 0 END) as ene,
         SUM(CASE WHEN ps.id_mes= 2 THEN dps.monto_devengado ELSE 0 END) as feb,
         SUM(CASE WHEN ps.id_mes= 3 THEN dps.monto_devengado ELSE 0 END) as mar,
         SUM(CASE WHEN ps.id_mes= 4 THEN dps.monto_devengado ELSE 0 END) as abr,
         SUM(CASE WHEN ps.id_mes= 5 THEN dps.monto_devengado ELSE 0 END) as may,
         SUM(CASE WHEN ps.id_mes= 6 THEN dps.monto_devengado ELSE 0 END) as jun,
         SUM(CASE WHEN ps.id_mes= 7 THEN dps.monto_devengado ELSE 0 END) as jul,
         SUM(CASE WHEN ps.id_mes= 8 THEN dps.monto_devengado ELSE 0 END) as ago,
         SUM(CASE WHEN ps.id_mes= 9 THEN dps.monto_devengado ELSE 0 END) as sep,
         SUM(CASE WHEN ps.id_mes=10 THEN dps.monto_devengado ELSE 0 END) as oct,
         SUM(CASE WHEN ps.id_mes=11 THEN dps.monto_devengado ELSE 0 END) as nov,
         SUM(CASE WHEN ps.id_mes=12 THEN dps.monto_devengado ELSE 0 END) as dic,
         (SUM(dps.monto_devengado))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios.detalles_planillas_salarios dps
         LEFT JOIN salarios.planillas_salarios ps ON ps.id_planilla_salario=dps.id_planilla_salario
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=dps.id_funcionario
      WHERE
         ps.gestion=in_gestion AND
         ps.id_estado=1 AND
         dps.id_funcionario IN(
            SELECT
               rvpd.id_funcionario
            FROM
               salarios.retiros_voluntarios_planillas_detalles rvpd
               LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
            WHERE
               rvp.gestion_retiro=in_gestion AND
               rvp.id_estado=1 AND
               rvpd.item_f_aguinaldo
         )
      GROUP BY
         dps.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- PERMANENTES GASTO DE REPRESENTACION (113)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   2 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fr.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         113 as objeto_gasto,
         'GASTO DE REPRESENTACION'::text as denominador,
         SUM(CASE WHEN pgr.id_mes= 1 THEN pgrd.devengado_parcial ELSE 0 END) as ene,
         SUM(CASE WHEN pgr.id_mes= 2 THEN pgrd.devengado_parcial ELSE 0 END) as feb,
         SUM(CASE WHEN pgr.id_mes= 3 THEN pgrd.devengado_parcial ELSE 0 END) as mar,
         SUM(CASE WHEN pgr.id_mes= 4 THEN pgrd.devengado_parcial ELSE 0 END) as abr,
         SUM(CASE WHEN pgr.id_mes= 5 THEN pgrd.devengado_parcial ELSE 0 END) as may,
         SUM(CASE WHEN pgr.id_mes= 6 THEN pgrd.devengado_parcial ELSE 0 END) as jun,
         SUM(CASE WHEN pgr.id_mes= 7 THEN pgrd.devengado_parcial ELSE 0 END) as jul,
         SUM(CASE WHEN pgr.id_mes= 8 THEN pgrd.devengado_parcial ELSE 0 END) as ago,
         SUM(CASE WHEN pgr.id_mes= 9 THEN pgrd.devengado_parcial ELSE 0 END) as sep,
         SUM(CASE WHEN pgr.id_mes=10 THEN pgrd.devengado_parcial ELSE 0 END) as oct,
         SUM(CASE WHEN pgr.id_mes=11 THEN pgrd.devengado_parcial ELSE 0 END) as nov,
         SUM(CASE WHEN pgr.id_mes=12 THEN pgrd.devengado_parcial ELSE 0 END) as dic,
         (SUM(pgrd.devengado_parcial))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios.planilla_gasto_representacion_detalle pgrd
         LEFT JOIN salarios.planilla_gasto_representacion pgr ON pgr.id_planilla_gasto_representacion=pgrd.id_planilla_gasto_representacion
         LEFT JOIN salarios.funcionarios_representaciones fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fr.id_funcionario
      WHERE
         pgr.gestion= in_gestion AND
         pgr.estado=1 AND
         fr.id_funcionario IN(
            SELECT
               rvpd.id_funcionario
            FROM
               salarios.retiros_voluntarios_planillas_detalles rvpd
               LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
            WHERE
               rvp.gestion_retiro= in_gestion AND
               rvp.id_estado=1 AND
               rvpd.item_f_aguinaldo
         )
      GROUP BY
         fr.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- PERMANENTES REMUNERACIÓN EXTRAORDINARIA (123)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   3 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         dpre.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         123 as objeto_gasto,
         'REMUNERACIÓN EXTRAORDINARIA'::text as denominador,
         SUM(CASE WHEN pre.id_mes= 1 THEN dpre.monto ELSE 0 END) as ene,
         SUM(CASE WHEN pre.id_mes= 2 THEN dpre.monto ELSE 0 END) as feb,
         SUM(CASE WHEN pre.id_mes= 3 THEN dpre.monto ELSE 0 END) as mar,
         SUM(CASE WHEN pre.id_mes= 4 THEN dpre.monto ELSE 0 END) as abr,
         SUM(CASE WHEN pre.id_mes= 5 THEN dpre.monto ELSE 0 END) as may,
         SUM(CASE WHEN pre.id_mes= 6 THEN dpre.monto ELSE 0 END) as jun,
         SUM(CASE WHEN pre.id_mes= 7 THEN dpre.monto ELSE 0 END) as jul,
         SUM(CASE WHEN pre.id_mes= 8 THEN dpre.monto ELSE 0 END) as ago,
         SUM(CASE WHEN pre.id_mes= 9 THEN dpre.monto ELSE 0 END) as sep,
         SUM(CASE WHEN pre.id_mes=10 THEN dpre.monto ELSE 0 END) as oct,
         SUM(CASE WHEN pre.id_mes=11 THEN dpre.monto ELSE 0 END) as nov,
         SUM(CASE WHEN pre.id_mes=12 THEN dpre.monto ELSE 0 END) as dic,
         (SUM(dpre.monto))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios.detalles_planillas_re dpre
         LEFT JOIN salarios.planillas_re pre ON pre.id_planilla_re=dpre.id_planilla_re
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=dpre.id_funcionario
      WHERE
         pre.gestion=in_gestion AND
         pre.estado=1 AND
         dpre.id_funcionario IN(
            SELECT
               rvpd.id_funcionario
            FROM
               salarios.retiros_voluntarios_planillas_detalles rvpd
               LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
            WHERE
               rvp.gestion_retiro=in_gestion AND
               rvp.id_estado=1 AND
               rvpd.item_f_aguinaldo
         )
      GROUP BY
         dpre.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- PERMANENTES BONIFICACIONES Y GRATIFICACIONES (133)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   4 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fb.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         133 as objeto_gasto,
         max(b.descripcion)::text as denominador,
         SUM(CASE WHEN pb.id_mes= 1 THEN dpb.importe_monto ELSE 0 END) as ene,
         SUM(CASE WHEN pb.id_mes= 2 THEN dpb.importe_monto ELSE 0 END) as feb,
         SUM(CASE WHEN pb.id_mes= 3 THEN dpb.importe_monto ELSE 0 END) as mar,
         SUM(CASE WHEN pb.id_mes= 4 THEN dpb.importe_monto ELSE 0 END) as abr,
         SUM(CASE WHEN pb.id_mes= 5 THEN dpb.importe_monto ELSE 0 END) as may,
         SUM(CASE WHEN pb.id_mes= 6 THEN dpb.importe_monto ELSE 0 END) as jun,
         SUM(CASE WHEN pb.id_mes= 7 THEN dpb.importe_monto ELSE 0 END) as jul,
         SUM(CASE WHEN pb.id_mes= 8 THEN dpb.importe_monto ELSE 0 END) as ago,
         SUM(CASE WHEN pb.id_mes= 9 THEN dpb.importe_monto ELSE 0 END) as sep,
         SUM(CASE WHEN pb.id_mes=10 THEN dpb.importe_monto ELSE 0 END) as oct,
         SUM(CASE WHEN pb.id_mes=11 THEN dpb.importe_monto ELSE 0 END) as nov,
         SUM(CASE WHEN pb.id_mes=12 THEN dpb.importe_monto ELSE 0 END) as dic,
         (SUM(dpb.importe_monto))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios.detalles_planillas_bonificaciones dpb
         LEFT JOIN salarios.planillas_bonificaciones pb ON pb.id_planilla_bonificacion=dpb.id_planilla_bonificacion
         LEFT JOIN salarios.funcionarios_bonificaciones fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
         LEFT JOIN salarios.bonificaciones b ON b.id_bonificacion=fb.id_bonificacion
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fb.id_funcionario
      WHERE
         pb.gestion=in_gestion AND
         pb.estado=1 AND
         fb.id_funcionario IN(
            SELECT
               rvpd.id_funcionario
            FROM
               salarios.retiros_voluntarios_planillas_detalles rvpd
               LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
            WHERE
               rvp.gestion_retiro=in_gestion AND
               rvp.id_estado=1 AND
               rvpd.item_f_aguinaldo
         )
      GROUP BY
         fb.id_funcionario,
         fc.es_comisionado,
         b.id_bonificacion
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL

-- PERMANENTES BONIFICACIONES Y GRATIFICACIONES - GRADO ACADEMICO (133)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   4 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         fp.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         133 as objeto_gasto,
         'BONIF. POR GRADO ACADÉMICO'::text as denominador,
         SUM(CASE WHEN pp.id_mes= 1 THEN dpp.importe_profesional ELSE 0 END) as ene,
         SUM(CASE WHEN pp.id_mes= 2 THEN dpp.importe_profesional ELSE 0 END) as feb,
         SUM(CASE WHEN pp.id_mes= 3 THEN dpp.importe_profesional ELSE 0 END) as mar,
         SUM(CASE WHEN pp.id_mes= 4 THEN dpp.importe_profesional ELSE 0 END) as abr,
         SUM(CASE WHEN pp.id_mes= 5 THEN dpp.importe_profesional ELSE 0 END) as may,
         SUM(CASE WHEN pp.id_mes= 6 THEN dpp.importe_profesional ELSE 0 END) as jun,
         SUM(CASE WHEN pp.id_mes= 7 THEN dpp.importe_profesional ELSE 0 END) as jul,
         SUM(CASE WHEN pp.id_mes= 8 THEN dpp.importe_profesional ELSE 0 END) as ago,
         SUM(CASE WHEN pp.id_mes= 9 THEN dpp.importe_profesional ELSE 0 END) as sep,
         SUM(CASE WHEN pp.id_mes=10 THEN dpp.importe_profesional ELSE 0 END) as oct,
         SUM(CASE WHEN pp.id_mes=11 THEN dpp.importe_profesional ELSE 0 END) as nov,
         SUM(CASE WHEN pp.id_mes=12 THEN dpp.importe_profesional ELSE 0 END) as dic,
         (SUM(dpp.importe_profesional))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios.detalle_planillas_profesionales dpp
         LEFT JOIN salarios.planilla_profesionales pp ON pp.id_planilla_profesional=dpp.id_planilla_profesional
         LEFT JOIN salarios.funcionarios_profesionales fp ON fp.id_funcionario_profesional=dpp.id_funcionario_profesional
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=fp.id_funcionario
      WHERE
         pp.gestion=in_gestion AND
         pp.estado=1 AND
         fp.id_funcionario IN(
            SELECT
               rvpd.id_funcionario
            FROM
               salarios.retiros_voluntarios_planillas_detalles rvpd
               LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
            WHERE
               rvp.gestion_retiro=in_gestion AND
               rvp.id_estado=1 AND
               rvpd.item_f_aguinaldo
         )
      GROUP BY
         fp.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL
-- PERMANENTES BONIFICACIONES Y GRATIFICACIONES - ANTIGÜEDAD (133)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   4 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         dpa.id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         133 as objeto_gasto,
         'BONIF. POR ANTIGÜEDAD'::text as denominador,
         SUM(CASE WHEN pa.id_mes= 1 THEN dpa.importe_antiguedad ELSE 0 END) as ene,
         SUM(CASE WHEN pa.id_mes= 2 THEN dpa.importe_antiguedad ELSE 0 END) as feb,
         SUM(CASE WHEN pa.id_mes= 3 THEN dpa.importe_antiguedad ELSE 0 END) as mar,
         SUM(CASE WHEN pa.id_mes= 4 THEN dpa.importe_antiguedad ELSE 0 END) as abr,
         SUM(CASE WHEN pa.id_mes= 5 THEN dpa.importe_antiguedad ELSE 0 END) as may,
         SUM(CASE WHEN pa.id_mes= 6 THEN dpa.importe_antiguedad ELSE 0 END) as jun,
         SUM(CASE WHEN pa.id_mes= 7 THEN dpa.importe_antiguedad ELSE 0 END) as jul,
         SUM(CASE WHEN pa.id_mes= 8 THEN dpa.importe_antiguedad ELSE 0 END) as ago,
         SUM(CASE WHEN pa.id_mes= 9 THEN dpa.importe_antiguedad ELSE 0 END) as sep,
         SUM(CASE WHEN pa.id_mes=10 THEN dpa.importe_antiguedad ELSE 0 END) as oct,
         SUM(CASE WHEN pa.id_mes=11 THEN dpa.importe_antiguedad ELSE 0 END) as nov,
         SUM(CASE WHEN pa.id_mes=12 THEN dpa.importe_antiguedad ELSE 0 END) as dic,
         (SUM(dpa.importe_antiguedad))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios.detalle_planilla_antiguedad dpa
         LEFT JOIN salarios.planillas_antiguedad pa ON pa.id_planilla_antiguedad=dpa.id_planilla_antiguedad
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=dpa.id_funcionario
      WHERE
         pa.gestion=in_gestion AND
         pa.estado=1 AND
         dpa.id_funcionario IN(
            SELECT
               rvpd.id_funcionario
            FROM
               salarios.retiros_voluntarios_planillas_detalles rvpd
               LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
            WHERE
               rvp.gestion_retiro=in_gestion AND
               rvp.id_estado=1 AND
               rvpd.item_f_aguinaldo
         )
      GROUP BY
         dpa.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END

UNION ALL
-- PERMANENTES OTROS GASTOS DEL PERSONAL / DIFERENCIA SALARIAL (199)
SELECT
   pagado.linea::text as linea,
   f.id_funcionario,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as ci,
   f.nombre_funcionario||' '||f.apellido_funcionario as funcionario,
   pagado.ene,pagado.feb,pagado.mar,pagado.abr,pagado.may,pagado.jun,
   pagado.jul,pagado.ago,pagado.sep,pagado.oct,pagado.nov,pagado.dic,
   pagado.total,
   pagado.aguinaldo,
   pagado.objeto_gasto as og,
   pagado.denominador,
   11 as orden,
   CASE WHEN pagado.es_comisionado THEN 'COM'::text ELSE 'PER'::text END as tipo_funcionario
FROM
   legajos.funcionarios f
   INNER JOIN (
      SELECT
         COALESCE(pdsd.id_funcionario,fs.id_funcionario) as id_funcionario,
         max(fc.linea) as linea,
         fc.es_comisionado,
         199 as objeto_gasto,
         CASE WHEN pdsd.id_funcionario_superior IS NOT NULL THEN 'DIFERENCIA SALARIAL'::text ELSE 'OTROS GASTOS DEL PERSONAL'::text END as denominador,
         SUM(CASE WHEN pds.id_mes= 1 THEN pdsd.importe_monto_diferencia ELSE 0 END) as ene,
         SUM(CASE WHEN pds.id_mes= 2 THEN pdsd.importe_monto_diferencia ELSE 0 END) as feb,
         SUM(CASE WHEN pds.id_mes= 3 THEN pdsd.importe_monto_diferencia ELSE 0 END) as mar,
         SUM(CASE WHEN pds.id_mes= 4 THEN pdsd.importe_monto_diferencia ELSE 0 END) as abr,
         SUM(CASE WHEN pds.id_mes= 5 THEN pdsd.importe_monto_diferencia ELSE 0 END) as may,
         SUM(CASE WHEN pds.id_mes= 6 THEN pdsd.importe_monto_diferencia ELSE 0 END) as jun,
         SUM(CASE WHEN pds.id_mes= 7 THEN pdsd.importe_monto_diferencia ELSE 0 END) as jul,
         SUM(CASE WHEN pds.id_mes= 8 THEN pdsd.importe_monto_diferencia ELSE 0 END) as ago,
         SUM(CASE WHEN pds.id_mes= 9 THEN pdsd.importe_monto_diferencia ELSE 0 END) as sep,
         SUM(CASE WHEN pds.id_mes=10 THEN pdsd.importe_monto_diferencia ELSE 0 END) as oct,
         SUM(CASE WHEN pds.id_mes=11 THEN pdsd.importe_monto_diferencia ELSE 0 END) as nov,
         SUM(CASE WHEN pds.id_mes=12 THEN pdsd.importe_monto_diferencia ELSE 0 END) as dic,
         (SUM(pdsd.importe_monto_diferencia))::numeric(15,0) as total,
         (0)::numeric(15,0) as aguinaldo
      FROM
         salarios.planilla_diferencia_salarial_detalle pdsd
         LEFT JOIN salarios.planilla_diferencia_salarial pds ON pds.id_planilla_diferencia_salarial=pdsd.id_planilla_diferencia_salarial
         LEFT JOIN salarios.funcionarios_superiores fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
         LEFT JOIN (
	    SELECT 
	       x.id_funcionario,
	       x.id_funcionario_categoria,
	       y.id_detalle_categoria,
	       dc.linea,
	       c.es_comisionado
	    FROM
	    (
	       SELECT 
	          max(fc.id_funcionario_categoria) as id_funcionario_categoria,
	          fc.id_funcionario
	       FROM 
	          salarios.funcionarios_categorias fc
	          LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=fc.id_detalle_categoria
	          LEFT JOIN salarios.categorias c ON c.id_categoria=dc.id_categoria
	       WHERE 
	          fc.gestion = in_gestion
	       GROUP BY
	          fc.id_funcionario
	    ) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias              c ON c.id_categoria=dc.id_categoria
         ) fc ON fc.id_funcionario=pdsd.id_funcionario
      WHERE
         pds.gestion=in_gestion AND
         pds.estado=1 AND
         COALESCE(pdsd.id_funcionario,fs.id_funcionario) IN(
            SELECT
               rvpd.id_funcionario
            FROM
               salarios.retiros_voluntarios_planillas_detalles rvpd
               LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
            WHERE
               rvp.gestion_retiro=in_gestion AND
               rvp.id_estado=1 AND
               rvpd.item_f_aguinaldo
         )
      GROUP BY
      COALESCE(pdsd.id_funcionario,fs.id_funcionario),
         pdsd.id_funcionario_superior,
         fs.id_funcionario,
         fc.es_comisionado
   ) pagado ON pagado.id_funcionario=f.id_funcionario
WHERE
   CASE 
      WHEN 
         in_id_funcionario='0' 
      THEN 
	 f.id_funcionario IN(
	    SELECT 
	       h.id_funcionario 
	    FROM 
	       salarios.obtener_ids_funcionarios_mes_gestion(
	          in_id_administracion,-- administracion
	          1,                   -- tipo funcionario
	          0,                   -- meses
	          in_gestion           -- gestion
	       ) h
	 )
       ELSE 
          f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) 
       END
) a
WHERE
   CASE 
      WHEN in_tipo_funcionario=3 THEN a.tipo_funcionario='COM'
      WHEN in_tipo_funcionario=2 THEN a.tipo_funcionario='CON'
      WHEN in_tipo_funcionario=1 THEN a.tipo_funcionario='PER'
      WHEN in_tipo_funcionario=0 THEN true
   END
ORDER BY
   replace(a.ci,'.','')::int,a.orden,a.ene desc
;
END;
]]></definition>
</function>

<function name="sfp_informe_liquidaciones_permanentes_comisionados"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="nivel">
		<type name="text"/>
	</parameter>
	<parameter name="linea">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="apellido">
		<type name="text"/>
	</parameter>
	<parameter name="nombre">
		<type name="text"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="text"/>
	</parameter>
	<parameter name="id_detalle_categoria">
		<type name="integer"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="integer"/>
	</parameter>
	<parameter name="devengado">
		<type name="integer"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado de las liquidaciones de los funcionarios permanentes/comisionados por mes y gestion
  * Creado    : 2014-02-18 15:33:48
  * Modificado: 2014-08-22 08:59:25
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administracion del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado 
  * 
  * Descripcion:  Genera un listado de los funcionarios permanentes/comisionados referentes a las liquidaciones al mes y la gestion ingresado
  *               como informe para la Secretaria de la Funcion Publica (SFP)  
  * ------------  
  */
RETURN QUERY 
SELECT 
*
FROM
(
(
SELECT
max(f_publica.id_funcionario) as id_funcionario,--
f_publica.concepto as concepto,--
max(f_publica.nivel) as nivel,--
max(f_publica.linea) as linea,--
f_publica.cedula::text as cedula,--
max(f_publica.apellido) as apellido,--
max(f_publica.nombre) as nombre,--
f_publica.objeto_gasto::text as objeto_gasto,--
max(f_publica.id_detalle_categoria::int) as id_detalle_categoria,--
max(f_publica.categoria) as categoria,--
(sum(f_publica.presupuestado)::int) as presupuestado,--
(sum(f_publica.devengado)::int) as devengado,
max(f_publica.orden)::int as orden,
max(f_publica.cargo) as cargo
FROM (
--PLANILLAS SALARIOS
SELECT
fun.id_funcionario,
'SUELDO'||' - '||cat.nombre_categoria as concepto,
--ocd.nombre_nivel1 as nivel,
CASE 
WHEN fc.id_funcionario_categoria NOTNULL 
THEN ocd.nombre_nivel1 
ELSE (
SELECT ocd2.nombre_nivel1 
FROM 
legajos.situacion_administrativa_actual saa
LEFT JOIN legajos.oficinas_con_descripciones ocd2 on ocd2.id_oficina=saa.id_oficina_presta
WHERE
saa.id_funcionario=fun.id_funcionario
) 
END as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dps.monto_presupuestado as presupuestado,
dps.monto_devengado as devengado,
(row_number() over())+100 as orden,
car.nombre_cargo as cargo
FROM legajos.funcionarios fun
 LEFT JOIN salarios.detalles_planillas_salarios dps on dps.id_funcionario=fun.id_funcionario
 LEFT JOIN salarios.planillas_salarios ps on ps.id_planilla_salario=dps.id_planilla_salario
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_salarios'
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=dps.id_detalle_categoria
 LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and 
 CASE WHEN
    fc.gestion=in_gestion and fc.hasta isnull
 THEN
    fc.gestion=in_gestion and fc.hasta isnull
 ELSE
    (fc.gestion=(in_gestion-1) and fc.hasta>=('01-'||in_id_mes::text||'-'||(in_gestion-1)::text)::date AND fc.hasta<=((date_trunc('month', ('01-'||in_id_mes::text||'-'||(in_gestion-1)::text)::date) + interval '1 month') - interval '1 day')::date)
 END
 --LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and ((fc.hasta is null OR (fc.hasta>=('01-'||in_id_mes::text||'-'||in_gestion::text)::date AND fc.hasta<=((date_trunc('month', ('01-'||in_id_mes::text||'-'||in_gestion::text)::date) + interval '1 month') - interval '1 day')::date)) )
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=fc.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
ps.id_administracion=in_id_administracion AND 
ps.gestion=in_gestion AND 
ps.id_mes=in_id_mes AND
ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END 

UNION
--PLANILLAS GASTOS REPRESENTACION/PERMANENTES
SELECT
fun.id_funcionario,
'GASTO REPRES.' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dpgr.presupuestado_parcial as presupuestado,
dpgr.devengado_parcial as devengado,
(row_number() over())+200 as orden,
car.nombre_cargo as cargo
FROM  salarios.funcionarios_representaciones fr
 LEFT JOIN salarios.planilla_gasto_representacion_detalle dpgr on dpgr.id_funcionario_representacion=fr.id_funcionario_representacion
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fr.id_funcionario
 LEFT JOIN salarios.planilla_gasto_representacion pgr on pgr.id_planilla_gasto_representacion=dpgr.id_planilla_gasto_representacion
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planilla_gasto_representacion'
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=fr.id_detalle_categoria
 LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpgr.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
pgr.id_administracion=in_id_administracion ANd 
pgr.gestion=in_gestion AND 
pgr.id_mes=in_id_mes AND
pgr.estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
--AND fc.id_funcionario_categoria NOTNULL

UNION
--PLANILLAS GASTOS REPRESENTACION/COMISIONADOS
SELECT
fun.id_funcionario,
'GASTO REPRES.' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dpgr.presupuestado_parcial as presupuestado,
dpgr.devengado_parcial as devengado,
(row_number() over())+200 as orden,
car.nombre_cargo as cargo
FROM  salarios.funcionarios_representaciones fr
 LEFT JOIN salarios.planilla_gasto_representacion_detalle dpgr on dpgr.id_funcionario_representacion=fr.id_funcionario_representacion
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fr.id_funcionario
 LEFT JOIN salarios.planilla_gasto_representacion pgr on pgr.id_planilla_gasto_representacion=dpgr.id_planilla_gasto_representacion
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planilla_gasto_representacion'
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=fr.id_detalle_categoria
 LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN salarios.funcionarios_categorias fc2 on fc2.id_funcionario=fr.id_funcionario and fc2.gestion=in_gestion and fc2.hasta isnull
 LEFT JOIN salarios.detalles_categorias dc2 on dc2.id_detalle_categoria=fc2.id_detalle_categoria
 LEFT JOIN salarios.categorias cat2 on cat2.id_categoria=dc2.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpgr.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
pgr.id_administracion=in_id_administracion AND 
pgr.gestion=in_gestion AND 
pgr.id_mes=in_id_mes AND 
cat2.es_comisionado=true AND
pgr.estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END

UNION
--PLANILLAS BONIFICACIONES/PERMANENTES
SELECT
fun.id_funcionario,
'BONIFICACION' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dpb.monto_total as presupuestado,
dpb.monto_total as devengado,
(row_number() over())+300 as orden,
car.nombre_cargo as cargo
FROM salarios.funcionarios_bonificaciones fb
 LEFT JOIN salarios.detalles_planillas_bonificaciones dpb on dpb.id_funcionario_bonificacion=fb.id_funcionario_bonificacion
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fb.id_funcionario
 LEFT JOIN salarios.planillas_bonificaciones pb on pb.id_planilla_bonificacion=dpb.id_planilla_bonificacion
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_bonificaciones'
 --LEFT JOIN salarios.detalles_planillas_salarios dps on dps.id_funcionario=fb.id_funcionario
 --LEFT JOIN salarios.planillas_salarios ps on ps.id_planilla_salario=dps.id_planilla_salario
 LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       --fc.id_funcionario IN (2439) AND
	       fc.gestion = in_gestion --AND
	       --fc.id_administracion = in_id_administracion --AND 
	       --(fc.hasta is null OR (9 BETWEEN extract(month from fc.desde) AND extract(month from fc.hasta)))
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
 ) dps ON (dps.id_funcionario = fun.id_funcionario)
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=dps.id_detalle_categoria
 --LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull

 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpb.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
cat.es_comisionado is false and
pb.id_administracion=in_id_administracion and 
pb.gestion=in_gestion and 
pb.id_mes=in_id_mes and 
--ps.gestion=in_gestion and 
--ps.id_mes=in_id_mes AND
pb.estado=1 AND
--ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
--AND fc.id_funcionario_categoria NOTNULL

UNION
--PLANILLAS BONIFICACIONES/COMISIONADOS
SELECT
fun.id_funcionario,
'BONIFICACION' as concepto,
ocd.nombre_nivel1 as nivel,
dc2.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc2.id_detalle_categoria as id_detalle_categoria,
cat2.nombre_categoria as categoria,
dpb.monto_total as presupuestado,
dpb.monto_total as devengado,
(row_number() over())+300 as orden,
car.nombre_cargo as cargo
FROM salarios.funcionarios_bonificaciones fb
 LEFT JOIN salarios.detalles_planillas_bonificaciones dpb on dpb.id_funcionario_bonificacion=fb.id_funcionario_bonificacion
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fb.id_funcionario
 LEFT JOIN salarios.planillas_bonificaciones pb on pb.id_planilla_bonificacion=dpb.id_planilla_bonificacion
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_bonificaciones'
 LEFT JOIN salarios.funcionarios_categorias fc2 on fc2.id_funcionario=fb.id_funcionario and fc2.gestion=in_gestion and fc2.hasta isnull
 LEFT JOIN salarios.detalles_categorias dc2 on dc2.id_detalle_categoria=fc2.id_detalle_categoria
 LEFT JOIN salarios.categorias cat2 on cat2.id_categoria=dc2.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpb.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat2.id_cargo)
WHERE
pb.id_administracion=in_id_administracion AND 
pb.gestion=in_gestion AND 
pb.id_mes=in_id_mes AND 
cat2.es_comisionado=true AND
pb.estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END 

UNION
--PLANILLAS PROFESIONALES/PERMANENTES
SELECT
fun.id_funcionario,
'PROFESIONAL' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dpp.importe_profesional as presupuestado,
dpp.importe_profesional as devengado,
(row_number() over())+400 as orden,
car.nombre_cargo as cargo
FROM salarios.funcionarios_profesionales fp
 LEFT JOIN salarios.detalle_planillas_profesionales dpp on dpp.id_funcionario_profesional=fp.id_funcionario_profesional
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fp.id_funcionario
 LEFT JOIN salarios.planilla_profesionales pp on pp.id_planilla_profesional=dpp.id_planilla_profesional
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planilla_profesionales'
 --LEFT JOIN salarios.detalles_planillas_salarios dps on dps.id_funcionario=fp.id_funcionario
 --LEFT JOIN salarios.planillas_salarios ps on ps.id_planilla_salario=dps.id_planilla_salario
 LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       --fc.id_funcionario IN (2439) AND
	       fc.gestion = in_gestion --AND
	       --fc.id_administracion = in_id_administracion --AND 
	       --(fc.hasta is null OR (9 BETWEEN extract(month from fc.desde) AND extract(month from fc.hasta)))
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
 ) dps ON (dps.id_funcionario = fun.id_funcionario)
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=dps.id_detalle_categoria
 --LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpp.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
cat.es_comisionado is false and
pp.id_administracion=in_id_administracion AND 
pp.gestion=in_gestion AND 
pp.id_mes=in_id_mes AND 
--ps.gestion=in_gestion AND 
--ps.id_mes=in_id_mes AND
pp.estado=1 AND
--ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
--AND fc.id_funcionario_categoria NOTNULL

UNION
--PLANILLAS PROFESIONALES/COMISIONADOS
SELECT
fun.id_funcionario,
'PROFESIONAL' as concepto,
ocd.nombre_nivel1 as nivel,
dc2.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc2.id_detalle_categoria as id_detalle_categoria,
cat2.nombre_categoria as categoria,
dpp.importe_profesional as presupuestado,
dpp.importe_profesional as devengado,
(row_number() over())+400 as orden,
car.nombre_cargo as cargo
FROM salarios.funcionarios_profesionales fp
 LEFT JOIN salarios.detalle_planillas_profesionales dpp on dpp.id_funcionario_profesional=fp.id_funcionario_profesional
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fp.id_funcionario
 LEFT JOIN salarios.planilla_profesionales pp on pp.id_planilla_profesional=dpp.id_planilla_profesional
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planilla_profesionales'
 LEFT JOIN salarios.funcionarios_categorias fc2 on fc2.id_funcionario=fp.id_funcionario and fc2.gestion=in_gestion and fc2.hasta isnull
 LEFT JOIN salarios.detalles_categorias dc2 on dc2.id_detalle_categoria=fc2.id_detalle_categoria
 LEFT JOIN salarios.categorias cat2 on cat2.id_categoria=dc2.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpp.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat2.id_cargo)
WHERE
pp.id_administracion=in_id_administracion AND 
pp.gestion=in_gestion AND 
pp.id_mes=in_id_mes AND
cat2.es_comisionado=true AND
pp.estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END

UNION
--PLANILLAS ANTIGUEDAD/PERMANENTES
SELECT
fun.id_funcionario,
'ANTIGUEDAD' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dpa.importe_antiguedad as presupuestado,
dpa.importe_antiguedad as devengado,
(row_number() over())+500 as orden,
car.nombre_cargo as cargo
FROM salarios.funcionarios_antiguedades fa
 LEFT JOIN salarios.detalle_planilla_antiguedad dpa on dpa.id_funcionario=fa.id_funcionario
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fa.id_funcionario
 LEFT JOIN salarios.planillas_antiguedad pa on pa.id_planilla_antiguedad=dpa.id_planilla_antiguedad
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_antiguedad'
 --LEFT JOIN salarios.detalles_planillas_salarios dps on dps.id_funcionario=fa.id_funcionario
 --LEFT JOIN salarios.planillas_salarios ps on ps.id_planilla_salario=dps.id_planilla_salario
 LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       --fc.id_funcionario IN (2439) AND
	       fc.gestion = in_gestion --AND
	       --fc.id_administracion = in_id_administracion --AND 
	       --(fc.hasta is null OR (9 BETWEEN extract(month from fc.desde) AND extract(month from fc.hasta)))
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
 ) dps ON (dps.id_funcionario = fun.id_funcionario)
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=dps.id_detalle_categoria
 --LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpa.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
cat.es_comisionado is false and
pa.id_administracion=in_id_administracion AND 
pa.gestion=in_gestion AND 
pa.id_mes=in_id_mes AND 
--ps.gestion=in_gestion AND 
--ps.id_mes=in_id_mes AND
pa.estado=1 AND
--ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
--AND fc.id_funcionario_categoria NOTNULL

UNION
--PLANILLAS ANTIGUEDAD/COMISIONADOS
SELECT
fun.id_funcionario,
'ANTIGUEDAD' as concepto,
ocd.nombre_nivel1 as nivel,
dc2.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc2.id_detalle_categoria as id_detalle_categoria,
cat2.nombre_categoria as categoria,
dpa.importe_antiguedad as presupuestado,
dpa.importe_antiguedad as devengado,
(row_number() over())+500 as orden,
car.nombre_cargo as cargo
FROM salarios.funcionarios_antiguedades fa
 LEFT JOIN salarios.detalle_planilla_antiguedad dpa on dpa.id_funcionario=fa.id_funcionario
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fa.id_funcionario
 LEFT JOIN salarios.planillas_antiguedad pa on pa.id_planilla_antiguedad=dpa.id_planilla_antiguedad
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_antiguedad'
 LEFT JOIN salarios.funcionarios_categorias fc2 on fc2.id_funcionario=fa.id_funcionario and fc2.gestion=in_gestion and fc2.hasta isnull
 LEFT JOIN salarios.detalles_categorias dc2 on dc2.id_detalle_categoria=fc2.id_detalle_categoria
 LEFT JOIN salarios.categorias cat2 on cat2.id_categoria=dc2.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpa.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat2.id_cargo)
WHERE
pa.id_administracion=in_id_administracion ANd 
pa.gestion=in_gestion AND 
pa.id_mes=in_id_mes AND 
cat2.es_comisionado=true AND
pa.estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END

UNION
--PLANILLAS GRATIFICACION ESPECIAL/PERMANENTES
SELECT
fun.id_funcionario,
'GRAT. ESPECIAL' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dpge.importe_gratificacion as presupuestado,
dpge.importe_gratificacion as devengado,
(row_number() over())+600 as orden,
car.nombre_cargo as cargo
FROM  legajos.funcionarios fun
 LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge on dpge.id_funcionario=fun.id_funcionario
 LEFT JOIN salarios.planilla_gratificacion_especial pge on pge.id_planilla_gratificacion=dpge.id_planilla_gratificacion
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planilla_gratificacion_especial'
 --LEFT JOIN salarios.detalles_planillas_salarios dps on dps.id_funcionario=fun.id_funcionario
 --LEFT JOIN salarios.planillas_salarios ps on ps.id_planilla_salario=dps.id_planilla_salario
 LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       --fc.id_funcionario IN (2439) AND
	       fc.gestion = in_gestion --AND
	       --fc.id_administracion = in_id_administracion --AND 
	       --(fc.hasta is null OR (9 BETWEEN extract(month from fc.desde) AND extract(month from fc.hasta)))
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
 ) dps ON (dps.id_funcionario = fun.id_funcionario)
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=dps.id_detalle_categoria
 --LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpge.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
cat.es_comisionado is false and
pge.id_administracion=in_id_administracion AND 
pge.gestion=in_gestion AND 
pge.id_mes=in_id_mes AND 
--ps.gestion=in_gestion AND 
--ps.id_mes=in_id_mes AND
pge.estado=1 AND
--ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
--AND fc.id_funcionario_categoria NOTNULL

UNION
--PLANILLAS GRATIFICACION ESPECIAL/COMISIONADOS
SELECT
fun.id_funcionario,
'GRAT. ESPECIAL' as concepto,
ocd.nombre_nivel1 as nivel,
dc2.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc2.id_detalle_categoria as id_detalle_categoria,
cat2.nombre_categoria as categoria,
dpge.importe_gratificacion as presupuestado,
dpge.importe_gratificacion as devengado,
(row_number() over())+600 as orden,
car.nombre_cargo as cargo
FROM  legajos.funcionarios fun
 LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge on dpge.id_funcionario=fun.id_funcionario
 LEFT JOIN salarios.planilla_gratificacion_especial pge on pge.id_planilla_gratificacion=dpge.id_planilla_gratificacion
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planilla_gratificacion_especial'
 LEFT JOIN salarios.funcionarios_categorias fc2 on fc2.id_funcionario=dpge.id_funcionario and fc2.gestion=in_gestion and fc2.hasta isnull
 LEFT JOIN salarios.detalles_categorias dc2 on dc2.id_detalle_categoria=fc2.id_detalle_categoria
 LEFT JOIN salarios.categorias cat2 on cat2.id_categoria=dc2.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpge.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat2.id_cargo)
WHERE
pge.id_administracion=in_id_administracion AND 
pge.gestion=in_gestion AND 
pge.id_mes=in_id_mes AND 
cat2.es_comisionado=true AND
pge.estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END

UNION
--PLANILLAS DIFERENCIA SALARIAL/PERMANENTES
SELECT
fun.id_funcionario,
'DIF. SALARIAL' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dpdf.importe_monto_diferencia as presupuestado,
dpdf.importe_monto_diferencia as devengado,
(row_number() over())+700 as orden,
car.nombre_cargo as cargo
FROM salarios.funcionarios_superiores fs
 LEFT JOIN salarios.planilla_diferencia_salarial_detalle dpdf on dpdf.id_funcionario_superior=fs.id_funcionario_superior
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fs.id_funcionario
 LEFT JOIN salarios.planilla_diferencia_salarial pds on pds.id_planilla_diferencia_salarial=dpdf.id_planilla_diferencia_salarial
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planilla_diferencia_salarial'
 --LEFT JOIN salarios.detalles_planillas_salarios dps on dps.id_funcionario=fs.id_funcionario
 --LEFT JOIN salarios.planillas_salarios ps on ps.id_planilla_salario=dps.id_planilla_salario
 LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       --fc.id_funcionario IN (2439) AND
	       fc.gestion = in_gestion --AND
	       --fc.id_administracion = in_id_administracion --AND 
	       --(fc.hasta is null OR (9 BETWEEN extract(month from fc.desde) AND extract(month from fc.hasta)))
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
 ) dps ON (dps.id_funcionario = fun.id_funcionario)
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=dps.id_detalle_categoria
 --LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpdf.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
cat.es_comisionado is false and
pds.id_administracion=in_id_administracion AND 
pds.gestion=in_gestion AND 
pds.id_mes=in_id_mes AND 
--ps.gestion=in_gestion AND 
--ps.id_mes=in_id_mes AND
pds.estado=1 AND
--ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
--AND fc.id_funcionario_categoria NOTNULL

UNION
--PLANILLAS DIFERENCIA SALARIAL/COMISIONADOS
SELECT
fun.id_funcionario,
'DIF. SALARIAL' as concepto,
ocd.nombre_nivel1 as nivel,
dc2.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc2.id_detalle_categoria as id_detalle_categoria,
cat2.nombre_categoria as categoria,
dpdf.importe_monto_diferencia as presupuestado,
dpdf.importe_monto_diferencia as devengado,
(row_number() over())+700 as orden,
car.nombre_cargo as cargo
FROM salarios.funcionarios_superiores fs
 LEFT JOIN salarios.planilla_diferencia_salarial_detalle dpdf on dpdf.id_funcionario_superior=fs.id_funcionario_superior
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fs.id_funcionario
 LEFT JOIN salarios.planilla_diferencia_salarial pds on pds.id_planilla_diferencia_salarial=dpdf.id_planilla_diferencia_salarial
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planilla_diferencia_salarial'
 LEFT JOIN salarios.funcionarios_categorias fc2 on fc2.id_funcionario=fs.id_funcionario and fc2.gestion=in_gestion and fc2.hasta isnull
 LEFT JOIN salarios.detalles_categorias dc2 on dc2.id_detalle_categoria=fc2.id_detalle_categoria
 LEFT JOIN salarios.categorias cat2 on cat2.id_categoria=dc2.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpdf.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat2.id_cargo)
WHERE
pds.id_administracion=in_id_administracion AND 
pds.gestion=in_gestion AND 
pds.id_mes=in_id_mes AND 
cat2.es_comisionado=true AND
pds.estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END

UNION
--PLANILLAS REMUNERACIÓN ADICIONAL/PERMANENTES
SELECT
fun.id_funcionario,
'RA' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dpra.monto as presupuestado,
dpra.monto as devengado,
(row_number() over())+800 as orden,
car.nombre_cargo as cargo
FROM  legajos.funcionarios fun
 LEFT JOIN salarios.detalles_planillas_ra dpra on dpra.id_funcionario=fun.id_funcionario
 LEFT JOIN salarios.planillas_ra pra on pra.id_planilla_ra=dpra.id_planilla_ra
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_ra'
 --LEFT JOIN salarios.detalles_planillas_salarios dps on dps.id_funcionario=fun.id_funcionario
 --LEFT JOIN salarios.planillas_salarios ps on ps.id_planilla_salario=dps.id_planilla_salario
 LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       --fc.id_funcionario IN (2439) AND
	       fc.gestion = in_gestion --AND
	       --fc.id_administracion = in_id_administracion --AND 
	       --(fc.hasta is null OR (9 BETWEEN extract(month from fc.desde) AND extract(month from fc.hasta)))
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
 ) dps ON (dps.id_funcionario = fun.id_funcionario)
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=dps.id_detalle_categoria
 --LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpra.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
cat.es_comisionado is false and
pra.id_administracion=in_id_administracion AND 
pra.gestion=in_gestion AND 
pra.id_mes=in_id_mes AND 
--ps.gestion=in_gestion AND 
--ps.id_mes=in_id_mes AND
pra.estado=1 AND
--ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
--AND fc.id_funcionario_categoria NOTNULL

UNION
--PLANILLAS REMUNERACIÓN ADICIONAL/COMISIONADOS
SELECT
fun.id_funcionario,
'RA' as concepto,
ocd.nombre_nivel1 as nivel,
dc2.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc2.id_detalle_categoria as id_detalle_categoria,
cat2.nombre_categoria as categoria,
dpra.monto as presupuestado,
dpra.monto as devengado,
(row_number() over())+800 as orden,
car.nombre_cargo as cargo
FROM  legajos.funcionarios fun
 LEFT JOIN salarios.detalles_planillas_ra dpra on dpra.id_funcionario=fun.id_funcionario
 LEFT JOIN salarios.planillas_ra pra on pra.id_planilla_ra=dpra.id_planilla_ra
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_ra'
 LEFT JOIN salarios.funcionarios_categorias fc2 on fc2.id_funcionario=dpra.id_funcionario and fc2.gestion=in_gestion and fc2.hasta isnull
 LEFT JOIN salarios.detalles_categorias dc2 on dc2.id_detalle_categoria=fc2.id_detalle_categoria
 LEFT JOIN salarios.categorias cat2 on cat2.id_categoria=dc2.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpra.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat2.id_cargo)
WHERE
pra.id_administracion=in_id_administracion AND 
pra.gestion=in_gestion AND 
pra.id_mes=in_id_mes AND 
cat2.es_comisionado=true AND
pra.estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END

UNION
--PLANILLAS REMUNERACIÓN EXTRAORDINARIA/PERMANENTES
SELECT
fun.id_funcionario,
'RE' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dpre.monto as presupuestado,
dpre.monto as devengado,
(row_number() over())+900 as orden,
car.nombre_cargo as cargo
FROM  legajos.funcionarios fun
 LEFT JOIN salarios.detalles_planillas_re dpre on dpre.id_funcionario=fun.id_funcionario
 LEFT JOIN salarios.planillas_re pre on pre.id_planilla_re=dpre.id_planilla_re
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_re'
 --LEFT JOIN salarios.detalles_planillas_salarios dps on dps.id_funcionario=fun.id_funcionario
 --LEFT JOIN salarios.planillas_salarios ps on ps.id_planilla_salario=dps.id_planilla_salario
 LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       --fc.id_funcionario IN (2439) AND
	       fc.gestion = in_gestion --AND
	       --fc.id_administracion = in_id_administracion --AND 
	       --(fc.hasta is null OR (9 BETWEEN extract(month from fc.desde) AND extract(month from fc.hasta)))
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
  ) dps ON (dps.id_funcionario = fun.id_funcionario)
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=dps.id_detalle_categoria
 --LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpre.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
cat.es_comisionado is false and
pre.id_administracion=in_id_administracion AND 
pre.gestion=in_gestion AND 
pre.id_mes=in_id_mes AND 
--ps.gestion=in_gestion AND 
--ps.id_mes=in_id_mes AND
pre.estado=1 AND
--ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
--AND fc.id_funcionario_categoria NOTNULL

UNION
--PLANILLAS REMUNERACIÓN EXTRAORDINARIA/COMISIONADOS
SELECT
fun.id_funcionario,
'RE' as concepto,
ocd.nombre_nivel1 as nivel,
dc2.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc2.id_detalle_categoria as id_detalle_categoria,
cat2.nombre_categoria as categoria,
dpre.monto as presupuestado,
dpre.monto as devengado,
(row_number() over())+900 as orden,
car.nombre_cargo as cargo
FROM  legajos.funcionarios fun
 LEFT JOIN salarios.detalles_planillas_re dpre on dpre.id_funcionario=fun.id_funcionario
 LEFT JOIN salarios.planillas_re pre on pre.id_planilla_re=dpre.id_planilla_re
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_re'
 LEFT JOIN salarios.funcionarios_categorias fc2 on fc2.id_funcionario=dpre.id_funcionario and fc2.gestion=in_gestion and fc2.hasta isnull
 LEFT JOIN salarios.detalles_categorias dc2 on dc2.id_detalle_categoria=fc2.id_detalle_categoria
 LEFT JOIN salarios.categorias cat2 on cat2.id_categoria=dc2.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpre.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat2.id_cargo)
WHERE
pre.id_administracion=in_id_administracion AND 
pre.gestion=in_gestion AND 
pre.id_mes=in_id_mes AND 
cat2.es_comisionado AND
pre.estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END

UNION
--PLANILLAS GRATIFICACION OCACIONAL/PERMANENTES
SELECT
fun.id_funcionario,
'GRAT. OCASIONAL' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dpgo.importe_gratificacion as presupuestado,
dpgo.importe_gratificacion as devengado,
(row_number() over())+1000 as orden,
car.nombre_cargo as cargo
FROM  legajos.funcionarios fun
 LEFT JOIN salarios.detalle_planilla_gratificacion_ocacional dpgo on dpgo.id_funcionario=fun.id_funcionario
 LEFT JOIN salarios.planilla_gratificacion_ocacional pgo on pgo.id_planilla_gratificacion_ocacional=dpgo.id_planilla_gratificacion_ocacional
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planilla_gratificacion_ocacional'
 --LEFT JOIN salarios.detalles_planillas_salarios dps on dps.id_funcionario=fun.id_funcionario
 --LEFT JOIN salarios.planillas_salarios ps on ps.id_planilla_salario=dps.id_planilla_salario
 LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       --fc.id_funcionario IN (2439) AND
	       fc.gestion = in_gestion --AND
	       --fc.id_administracion = in_id_administracion --AND 
	       --(fc.hasta is null OR (9 BETWEEN extract(month from fc.desde) AND extract(month from fc.hasta)))
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
 ) dps ON (dps.id_funcionario = fun.id_funcionario)
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=dps.id_detalle_categoria
 --LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpgo.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
cat.es_comisionado is false and
pgo.id_administracion=in_id_administracion ANd 
pgo.gestion=in_gestion ANd 
pgo.id_mes=in_id_mes AND 
--ps.gestion=in_gestion AND 
--ps.id_mes=in_id_mes AND
pgo.estado=1 AND
--ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
--AND fc.id_funcionario_categoria NOTNULL

UNION
--PLANILLAS GRATIFICACION OCACIONAL/COMISIONADOS
SELECT
fun.id_funcionario,
'GRAT. OCASIONAL' as concepto,
ocd.nombre_nivel1 as nivel,
dc2.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc2.id_detalle_categoria as id_detalle_categoria,
cat2.nombre_categoria as categoria,
dpgo.importe_gratificacion as presupuestado,
dpgo.importe_gratificacion as devengado,
(row_number() over())+1000 as orden,
car.nombre_cargo as cargo
FROM  legajos.funcionarios fun
 LEFT JOIN salarios.detalle_planilla_gratificacion_ocacional dpgo on dpgo.id_funcionario=fun.id_funcionario
 LEFT JOIN salarios.planilla_gratificacion_ocacional pgo on pgo.id_planilla_gratificacion_ocacional=dpgo.id_planilla_gratificacion_ocacional
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planilla_gratificacion_ocacional'
 LEFT JOIN salarios.funcionarios_categorias fc2 on fc2.id_funcionario=dpgo.id_funcionario and fc2.gestion=in_gestion and fc2.hasta isnull
 LEFT JOIN salarios.detalles_categorias dc2 on dc2.id_detalle_categoria=fc2.id_detalle_categoria
 LEFT JOIN salarios.categorias cat2 on cat2.id_categoria=dc2.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpgo.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat2.id_cargo)
WHERE
pgo.id_administracion=in_id_administracion AND 
pgo.gestion=in_gestion AND 
pgo.id_mes=in_id_mes AND 
cat2.es_comisionado=true AND
pgo.estado=in_id_mes AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END

UNION
--PLANILLAS SUBSIDIOS/PERMANENTES
SELECT
fun.id_funcionario,
'SUBSIDIO' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
dpsub.importe_monto as presupuestado,
dpsub.importe_monto as devengado,
(row_number() over())+1100 as orden,
car.nombre_cargo as cargo
FROM  salarios.funcionarios_subsidios fsub
 LEFT JOIN salarios.detalles_planillas_subsidios dpsub on dpsub.id_funcionario_subsidio=fsub.id_funcionario_subsidio
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fsub.id_funcionario
 LEFT JOIN salarios.planillas_subsidios psub on psub.id_planilla_subsidio=dpsub.id_planilla_subsidio
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_subsidios'
 --LEFT JOIN salarios.detalles_planillas_salarios dps on dps.id_funcionario=fun.id_funcionario
 --LEFT JOIN salarios.planillas_salarios ps on ps.id_planilla_salario=dps.id_planilla_salario
 LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       --fc.id_funcionario IN (2439) AND
	       fc.gestion = in_gestion --AND
	       --fc.id_administracion = in_id_administracion --AND 
	       --(fc.hasta is null OR (9 BETWEEN extract(month from fc.desde) AND extract(month from fc.hasta)))
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
 ) dps ON (dps.id_funcionario = fun.id_funcionario)
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=dps.id_detalle_categoria
 --LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpsub.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
cat.es_comisionado is false and
psub.id_administracion=in_id_administracion AND 
psub.gestion=in_gestion AND 
psub.id_mes=in_id_mes AND 
--ps.gestion=in_gestion AND 
--ps.id_mes=in_id_mes AND
psub.estado=1 AND
--ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
--AND fc.id_funcionario_categoria NOTNULL

UNION
--PLANILLAS SUBSIDIOS/COMISIONADOS
SELECT
fun.id_funcionario,
'SUBSIDIO' as concepto,
ocd.nombre_nivel1 as nivel,
dc2.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc2.id_detalle_categoria as id_detalle_categoria,
cat2.nombre_categoria as categoria,
dpsub.importe_monto as presupuestado,
dpsub.importe_monto as devengado,
(row_number() over())+1100 as orden,
car.nombre_cargo as cargo
FROM  salarios.funcionarios_subsidios fsub
 LEFT JOIN salarios.detalles_planillas_subsidios dpsub on dpsub.id_funcionario_subsidio=fsub.id_funcionario_subsidio
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=fsub.id_funcionario
 LEFT JOIN salarios.planillas_subsidios psub on psub.id_planilla_subsidio=dpsub.id_planilla_subsidio
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_subsidios'
 LEFT JOIN salarios.funcionarios_categorias fc2 on fc2.id_funcionario=fsub.id_funcionario and fc2.gestion=in_gestion and fc2.hasta isnull
 LEFT JOIN salarios.detalles_categorias dc2 on dc2.id_detalle_categoria=fc2.id_detalle_categoria
 LEFT JOIN salarios.categorias cat2 on cat2.id_categoria=dc2.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=dpsub.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat2.id_cargo)
WHERE
psub.id_administracion=in_id_administracion AND 
psub.gestion=in_gestion AND
psub.id_mes=in_id_mes AND 
cat2.es_comisionado=true AND
psub.estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END

UNION
--PLANILLAS OTRAS TRANSFERENCIAS CORRIENTES [849] / PERMANENTES
SELECT
fun.id_funcionario,
'OTRAS TRANSFERENCIAS CORRIENTES' as concepto,
ocd.nombre_nivel1 as nivel,
dc.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc.id_detalle_categoria as id_detalle_categoria,
cat.nombre_categoria as categoria,
potcd.importe_otra_transferencia_cte as presupuestado,
potcd.importe_otra_transferencia_cte as devengado,
(row_number() over())+1200 as orden,
car.nombre_cargo as cargo
FROM  salarios.planillas_otras_transferencias_ctes potc
 LEFT JOIN salarios.planillas_otras_transferencias_ctes_detalles potcd on potcd.id_planilla_otra_transferencia_cte=potc.id_planilla_otra_transferencia_cte
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=potcd.id_funcionario
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_otras_transferencias_ctes'
 --LEFT JOIN salarios.detalles_planillas_salarios dps on dps.id_funcionario=fun.id_funcionario
 --LEFT JOIN salarios.planillas_salarios ps on ps.id_planilla_salario=dps.id_planilla_salario
 LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       --fc.id_funcionario IN (2439) AND
	       fc.gestion = in_gestion --AND
	       --fc.id_administracion = in_id_administracion --AND 
	       --(fc.hasta is null OR (9 BETWEEN extract(month from fc.desde) AND extract(month from fc.hasta)))
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
 ) dps ON (dps.id_funcionario = fun.id_funcionario)
 LEFT JOIN salarios.detalles_categorias dc on dc.id_detalle_categoria=dps.id_detalle_categoria
 --LEFT JOIN salarios.funcionarios_categorias fc on fc.id_detalle_categoria=dc.id_detalle_categoria and fc.gestion=in_gestion and fc.hasta isnull
 LEFT JOIN salarios.categorias cat on cat.id_categoria=dc.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=potcd.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat.id_cargo)
WHERE
cat.es_comisionado is false and
potc.id_administracion=in_id_administracion AND 
potc.gestion=in_gestion AND 
potc.id_mes=in_id_mes AND 
--ps.gestion=in_gestion AND 
--ps.id_mes=in_id_mes AND
potc.estado=1 AND
--ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
--AND fc.id_funcionario_categoria NOTNULL

UNION
--PLANILLAS OTRAS TRANSFERENCIAS CORRIENTES [849] / COMISIONADOS
SELECT
fun.id_funcionario,
'OTRAS TRANSFERENCIAS CORRIENTES' as concepto,
ocd.nombre_nivel1 as nivel,
dc2.linea,
fun.cedula_funcionario as cedula,
fun.apellido_funcionario as apellido,
fun.nombre_funcionario as nombre,
tps.cod_objeto_gasto as objeto_gasto,
dc2.id_detalle_categoria as id_detalle_categoria,
cat2.nombre_categoria as categoria,
potcd.importe_otra_transferencia_cte as presupuestado,
potcd.importe_otra_transferencia_cte as devengado,
(row_number() over())+1200 as orden,
car.nombre_cargo as cargo
FROM  salarios.planillas_otras_transferencias_ctes potc
 LEFT JOIN salarios.planillas_otras_transferencias_ctes_detalles potcd on potcd.id_planilla_otra_transferencia_cte=potc.id_planilla_otra_transferencia_cte
 LEFT JOIN legajos.funcionarios fun on fun.id_funcionario=potcd.id_funcionario
 LEFT JOIN tesoreria.tipos_planillas_salarios tps on tps.nombre_tabla='salarios.planillas_otras_transferencias_ctes'
 LEFT JOIN salarios.funcionarios_categorias fc2 on fc2.id_funcionario=potcd.id_funcionario and fc2.gestion=in_gestion and fc2.hasta isnull
 LEFT JOIN salarios.detalles_categorias dc2 on dc2.id_detalle_categoria=fc2.id_detalle_categoria
 LEFT JOIN salarios.categorias cat2 on cat2.id_categoria=dc2.id_categoria
 LEFT JOIN legajos.oficinas_con_descripciones ocd on ocd.id_oficina=potcd.id_oficina
 LEFT JOIN salarios.cargos car ON (car.id_cargo = cat2.id_cargo)
WHERE
potc.id_administracion=in_id_administracion AND 
potc.gestion=in_gestion AND
potc.id_mes=in_id_mes AND 
cat2.es_comisionado=true AND
potc.estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      fun.id_funcionario>0
   ELSE 
      fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
) f_publica
GROUP BY f_publica.cedula,f_publica.concepto,f_publica.objeto_gasto
--having max(cedula)='2502153'
)

UNION

(
SELECT
   0 as id_funcionario, -- 1
   'VACANCIA' as concepto, -- 2
   b.nombre::text as nivel, -- 3
   dc.linea as linea, -- 4
   '999999999'::text as cedula, -- 5
   ''::text as apellido, -- 6
   'VACANCIA'::text as nombre, -- 7
   '111'::text as objeto_gasto, -- 8
   dc.id_detalle_categoria as id_detalle_categoria, --9
   c.nombre_categoria as categoria, --10
   cim.importe::int as presupuestado, -- 11
   0 as devengado, -- 12
   2000::int as orden, -- 13
   cag.nombre_cargo as cargo -- 14
FROM 
   salarios.planillas_salarios ps
   INNER JOIN salarios.detalle_planillas_vacantes  dpv ON dpv.id_planilla_salario=ps.id_planilla_salario AND dpv.id_administracion=in_id_administracion
   LEFT JOIN salarios.detalles_categorias           dc ON dc.id_detalle_categoria=dpv.id_detalle_categoria
   LEFT JOIN salarios.categorias                     c ON c.id_categoria=dc.id_categoria
   LEFT JOIN salarios.cargos                       cag ON cag.id_cargo=c.id_cargo
   LEFT JOIN salarios.categoria_importe_mensual    cim ON cim.id_categoria=c.id_categoria AND cim.id_mes=in_id_mes
   LEFT JOIN presupuesto.estructura_presupuestaria  ep ON ep.id_estructura_presupuestaria=dc.id_estructura_presupuestaria AND ep.id_administracion=1
   LEFT JOIN legajos.oficinas                        b ON ep.cod_programa= b.nivel1 AND b.nivel2 = 0 AND b.nivel3 = 0 AND b.nivel4 = 0 AND b.nivel5 = 0 AND b.gestion=in_gestion AND b.id_administracion=in_id_administracion
WHERE 
ps.id_administracion=in_id_administracion AND
ps.gestion=in_gestion AND
ps.id_mes=in_id_mes AND
ps.id_estado=1 AND
CASE
   WHEN 
      in_id_funcionario='0' 
   THEN 
      ps.id_planilla_salario>0
   ELSE 
      ps.id_planilla_salario<0
   END
) 
)sfp
ORDER BY sfp.cedula::integer,sfp.nivel,sfp.objeto_gasto,sfp.orden,sfp.linea::int;

END;
]]></definition>
</function>

<function name="sfp_informe_mensual_v2"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="integer"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="tipo">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_tipo" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar el reporte para la Secretaría Función Pública   
  * por administracion, mes, gestion y/o id_funcionario
  * Creado    : 2015-02-18 10:44:00
  * Modificado: 2015-02-25 14:23:00
  * Modificado: 2015-07-21 12:00:00
  * Modificado: 2017-03-31 13:24:40 (se incorpora los pagos por; excedente, recargo nocturno y bonificaciones)
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso
  *            in_tipo              tipo funcionario [0:todos 1:Permanente/Comisionado 2:Contratado] 
  *            in_id_mes            mes de proceso [1-12]
  *            in_gestion           ejercicio aplicado [2013-...] 
  * 	       in_id_funcionario    ['0':todos '1782,687,...':ids_funcionarios específicos]
  * Descripcion:  según S.I.M.E. Nº 8082/2015 "Objeto: Remisión se documento s/ formato 
  *               para la provisión de información de altas, bajas, traslados temporales y otros" 
  *               provisión de Informaciones en el uso de los recursos públicos sobre remuneraciones y otras 
  *               retribuciones asignadas al servidor público de la República del Paraguay"
  * ------------  
  */
RETURN QUERY

-- PERMANENTES/COMISIONADOS
-- ================================================================================================
-- [111] Sueldo
SELECT 
  dps.id_funcionario,
  1::int as orden,
  111::int as objeto_gasto,
  CASE
     WHEN max(dps.monto_devengado::numeric(12,0))>0
     THEN 'SUELDO'::text
     ELSE 'SIN GOCE DE SUELDO'::text 
     END as descripcion,
  CASE WHEN count(*)>1 THEN sum(dps.monto_devengado::numeric(12,0)) ELSE sum(dps.monto_presupuestado::numeric(12,0)) END as presupuestado,
  sum(dps.monto_devengado::numeric(12,0)-dps.monto_aporte::numeric(12,0)) as devengado,
  max(dps.id_oficina) as id_oficina,
  1::int as tipo
FROM 
  salarios.planillas_salarios ps
  LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario=ps.id_planilla_salario
WHERE 
  CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
  CASE 
     WHEN 1=in_id_administracion THEN ps.id_administracion IN (0,1)
     WHEN 2=in_id_administracion THEN ps.id_administracion IN (0,2)
     WHEN 3=in_id_administracion THEN ps.id_administracion IN (0,1,2)
  END AND
  ps.gestion= in_gestion AND
  ps.id_mes= in_id_mes AND
  ps.id_estado= 1 AND
  CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         dps.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
  dps.id_funcionario

UNION ALL

-- [113] Gastos de representación
SELECT
   fr.id_funcionario,
   2::int as orden,
   113::int as objeto_gasto,
   'GASTOS DE REPRESENTACIÓN'::text as descripcion,
   sum(pgrd.presupuestado_parcial::numeric(12,0)) as presupuestado,
   sum(pgrd.presupuestado_parcial::numeric(12,0)-pgrd.aporte::numeric(12,0)) as devengado,
   max(pgrd.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planilla_gasto_representacion pgr
   LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones           fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pgr.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pgr.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pgr.id_administracion IN (0,1,2)
   END AND
   pgr.gestion=in_gestion AND
   pgr.id_mes=in_id_mes AND
   pgr.estado=1 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fr.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fr.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fr.id_funcionario

UNION ALL

-- [123] Remuneración Extraordinaria (RE)
SELECT
   pred.id_funcionario,
   3::int as orden,
   123::int as objeto_gasto,
   'REMUNERACION EXTRAORDINARIA (RE)'::text as descripcion,
   sum(pred.monto::numeric(12,0)) as presupuestado,
   sum(pred.monto::numeric(12,0)-pred.aporte::numeric(12,0)) as devengado,
   max(pred.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_re pre
   LEFT JOIN salarios.detalles_planillas_re pred ON pred.id_planilla_re=pre.id_planilla_re
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pre.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pre.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pre.id_administracion IN (0,1,2)
   END AND
   pre.gestion=in_gestion AND
   pre.id_mes=in_id_mes AND
   pre.estado=1 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         pred.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         pred.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   pred.id_funcionario

UNION ALL

-- [123] Remuneración Adicional (RA)
SELECT
   prad.id_funcionario,
   4::int as orden,
   125::int as objeto_gasto,
   'REMUNERACION ADICIONAL (RA)'::text as descripcion,
   sum(prad.monto::numeric(12,0)) as presupuestado,
   sum(prad.monto::numeric(12,0)-prad.aporte::numeric(12,0)) as devengado,
   max(prad.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_ra pra
   LEFT JOIN salarios.detalles_planillas_ra prad ON prad.id_planilla_ra=pra.id_planilla_ra
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pra.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pra.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pra.id_administracion IN (0,1,2)
   END AND
   pra.gestion=in_gestion AND
   pra.id_mes=in_id_mes AND
   pra.estado=1 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         prad.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         prad.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   prad.id_funcionario
   
UNION ALL

-- [131] Subsidio Familiar
SELECT
   fs.id_funcionario,
   5::int as orden,
   131::int as objeto_gasto,
   'SUBSIDIO FAMILIAR'::text as descripcion,
   sum(dps.importe_monto::numeric(12,0)) as presupuestado,
   sum(dps.importe_monto::numeric(12,0)-dps.aporte::numeric(12,0)) as devengado,
   max(dps.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_subsidios ps
   LEFT JOIN salarios.detalles_planillas_subsidios dps ON dps.id_planilla_subsidio=ps.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios        fs ON fs.id_funcionario_subsidio=dps.id_funcionario_subsidio
   LEFT JOIN salarios.subsidios                      s ON s.id_subsidio=fs.id_subsidio
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN ps.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN ps.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN ps.id_administracion IN (0,1,2)
   END AND
   ps.gestion=in_gestion AND
   ps.id_mes=in_id_mes AND
   ps.estado=1 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fs.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fs.id_funcionario

UNION ALL

-- [133] Responsabilidad en el cargo
SELECT
   fb.id_funcionario,
   6::int as orden,
   133::int as objeto_gasto,
   'RESPONSABILIDAD EN EL CARGO'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as devengado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%RESPONSABILIDAD%' OR
	b.descripcion ilike '%ABOGADO FISCAL%'
   ) AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario

UNION ALL

-- [133] BONIFICACION A ORDENADOR DE GASTOS Y HABILITADOS PAGADOR 
SELECT
   fb.id_funcionario,
   6::int as orden,
   133::int as objeto_gasto,
   b.descripcion::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as devengado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%PAGADOR%'
   ) AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario,b.descripcion

UNION ALL

-- [133] Gestión Administrativa 20% S.P.
SELECT
   fb.id_funcionario,
   7::int as orden,
   133::int as objeto_gasto,
   'GESTION ADMINISTRATIVA 20% S.P.'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as presupuestado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%ADMINISTRATIVA 20%'
   ) AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario
   
UNION ALL

-- [133] Gestión Administrativa 40% (S.P.+G.R.)
SELECT
   fb.id_funcionario,
   8::int as orden,
   133::int as objeto_gasto,
   'GESTION ADMINISTRATIVA 40% (S.P.+G.R.)'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as presupuestado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%ADMINISTRATIVA 40%'
   ) AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario
   
UNION ALL

--[133] Gestión Administrativa Gs. 450.000
SELECT
   fb.id_funcionario,
   9::int as orden,
   133::int as objeto_gasto,
   'GESTION ADMINISTRATIVA GS. 450.000'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as presupuestado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%ADMINISTRATIVA - 450%'
   ) AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario

--AGREGADO 20150721
UNION ALL

--[133] Gestión Administrativa Gs. 500.000
SELECT
   fb.id_funcionario,
   9::int as orden,
   133::int as objeto_gasto,
   'GESTION ADMINISTRATIVA GS. 500.000'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as presupuestado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%ADMINISTRATIVA - 500%'
   ) AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario
--

UNION ALL

--[133] Gestión Administrativa Gs. 700.000
SELECT
   fb.id_funcionario,
   10::int as orden,
   133::int as objeto_gasto,
   'GESTION ADMINISTRATIVA GS. 700.000'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as presupuestado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   (
	b.descripcion ilike '%ADMINISTRATIVA - 700%'
   ) AND
   pb.estado=1 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario

UNION ALL

--[133] Gestión Presupuestaria 20% S.P.
SELECT
   fb.id_funcionario,
   11::int as orden,
   133::int as objeto_gasto,
   'GESTION PRESUPUESTARIA 20% S.P.'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as presupuestado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%PRESUPUESTARIA 20%'
   ) AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario

UNION ALL

--[133] Gestión Presupuestaria 40% (S.P.+G.R.)
SELECT
   fb.id_funcionario,
   12::int as orden,
   133::int as objeto_gasto,
   'GESTION PRESUPUESTARIA 40% (S.P.+G.R.)'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as presupuestado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   (
	b.descripcion ilike '%PRESUPUESTARIA 40%'
   ) AND
   pb.estado=1 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario
   
-- AGREGADO 20150721
UNION ALL

--[133] Gestión Presupuestaria Gs. 500.000
SELECT
   fb.id_funcionario,
   13::int as orden,
   133::int as objeto_gasto,
   'GESTION PRESUPUESTARIA GS. 500.000'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as presupuestado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%PRESUPUESTARIA - 500%'
   ) AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario

UNION ALL

--[133] Gestión Presupuestaria Gs. 550.000
SELECT
   fb.id_funcionario,
   13::int as orden,
   133::int as objeto_gasto,
   'GESTION PRESUPUESTARIA GS. 550.000'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as presupuestado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%PRESUPUESTARIA - 550%'
   ) AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario

UNION ALL  
 
--[133] Gestión Presupuestaria Gs. 700.000
SELECT
   fb.id_funcionario,
   14::int as orden,
   133::int as objeto_gasto,
   'GESTION PRESUPUESTARIA GS. 700.000'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as presupuestado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%PRESUPUESTARIA - 700%'
   ) AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario

UNION ALL

--[133] Insalubridad
SELECT
   fb.id_funcionario,
   15::int as orden,
   133::int as objeto_gasto,
   'INSALUBRIDAD'::text as descripcion,
   sum(dpb.monto_total::numeric(12,0)) as presupuestado,
   sum(dpb.monto_total::numeric(12,0)-dpb.aporte::numeric(12,0)) as presupuestado,
   max(dpb.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_id_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%INSALUBRIDAD%'
   ) AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fb.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fb.id_funcionario
          	            	   
UNION ALL

-- [133] Bonificación por Grado académico
SELECT
   fp.id_funcionario,
   16::int as orden,
   133::int as objeto_gasto,
   'BONIFICACION POR GRADO ACADEMICO'::text as descripcion,
   sum(dpp.importe_profesional::numeric(12,0)) as presupuestado,
   sum(dpp.importe_profesional::numeric(12,0)-dpp.importe_aporte::numeric(12,0)) as devengado,
   max(dpp.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planilla_profesionales pp
   LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales       fp ON fp.id_funcionario_profesional=dpp.id_funcionario_profesional
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pp.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pp.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pp.id_administracion IN (0,1,2)
   END AND
   pp.gestion=in_gestion AND
   pp.id_mes=in_id_mes AND
   pp.estado=1 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fp.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   fp.id_funcionario   

UNION ALL

-- [133] Bonificación por Antiguedad
SELECT
   dpa.id_funcionario,
   17::int as orden,
   133::int as objeto_gasto,
   'BONIFICACION POR ANTIGUEDAD'::text as descripcion,
   sum(dpa.importe_antiguedad::numeric(12,0)) as presupuestado,
   sum(dpa.importe_antiguedad::numeric(12,0)) as devengado,
   max(dpa.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_antiguedad pa
   LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pa.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pa.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pa.id_administracion IN (0,1,2)
   END AND
   pa.gestion=in_gestion AND
   pa.id_mes=in_id_mes AND
   pa.estado=1 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         dpa.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         dpa.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   dpa.id_funcionario

UNION ALL

-- [137] Gratificaciones por Servicios Especiales
SELECT
   dpge.id_funcionario,
   18::int as orden,
   137::int as objeto_gasto,
   'GRATIFICACIONES POR SERVICIOS ESPECIALES'::text as descripcion,
   sum(dpge.importe_gratificacion::numeric(12,0)) as presupuestado,
   sum(dpge.importe_gratificacion::numeric(12,0)-dpge.importe_aporte::numeric(12,0)) as presupuestado,
   max(dpge.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planilla_gratificacion_especial pge
   LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge ON dpge.id_planilla_gratificacion=pge.id_planilla_gratificacion
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pge.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pge.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pge.id_administracion IN (0,1,2)
   END AND
   pge.gestion=in_gestion AND
   pge.id_mes=in_id_mes AND
   pge.estado=1 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         dpge.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         dpge.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   dpge.id_funcionario

UNION ALL

-- [199] Otros Gastos del Personal
SELECT
   pdsd.id_funcionario,
   19::int as orden,
   199::int as objeto_gasto,
   'OTROS GASTOS DEL PERSONAL'::text as descripcion,
   sum(pdsd.importe_monto_diferencia::numeric(12,0)) as presupuestado,
   sum(pdsd.importe_monto_diferencia::numeric(12,0)-pdsd.importe_monto_aporte::numeric(12,0)) as devengado,
   max(pdsd.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planilla_diferencia_salarial pds
   LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pds.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pds.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pds.id_administracion IN (0,1,2)
   END AND
   pds.gestion=in_gestion AND
   pds.id_mes=in_id_mes AND
   pds.estado=1 AND
   pds.id_tipo_pagos_varios=2 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         pdsd.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         pdsd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   pdsd.id_funcionario

UNION ALL 
  
-- [199] Diferencia Salarial
SELECT
   pdsd.id_funcionario,
   20::int as orden,
   199::int as objeto_gasto,
   'DIFERENCIA SALARIAL'::text as descripcion,
   sum(pdsd.importe_monto_diferencia::numeric(12,0)) as presupuestado,
   sum(pdsd.importe_monto_diferencia::numeric(12,0)-pdsd.importe_monto_aporte::numeric(12,0)) as devengado,
   max(pdsd.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planilla_diferencia_salarial pds
   LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN pds.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pds.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pds.id_administracion IN (0,1,2)
   END AND
   pds.gestion=in_gestion AND
   pds.id_mes=in_id_mes AND
   pds.estado=1 AND
   pds.id_tipo_pagos_varios=1 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         pdsd.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         pdsd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   pdsd.id_funcionario

UNION ALL

-- [849] OTRAS TRANFERENCIAS CORRIENTES
SELECT
   potcd.id_funcionario,
   21::int as orden,
   849::int as objeto_gasto,
   'OTRAS TRANSFERENCIAS CORRIENTES'::text as descripcion,
   sum(potcd.importe_otra_transferencia_cte::numeric(12,0)) as presupuestado,
   sum(potcd.importe_otra_transferencia_cte::numeric(12,0)) as presupuestado,
   max(potcd.id_oficina) as id_oficina,
   1::int as tipo
FROM
   salarios.planillas_otras_transferencias_ctes potc
   LEFT JOIN salarios.planillas_otras_transferencias_ctes_detalles potcd ON potcd.id_planilla_otra_transferencia_cte=potc.id_planilla_otra_transferencia_cte
WHERE
   CASE WHEN 1=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN potc.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN potc.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN potc.id_administracion IN (0,1,2)
   END AND
   potc.gestion=in_gestion AND
   potc.id_mes=in_id_mes AND
   potc.estado=1 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         potcd.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         potcd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
   potcd.id_funcionario

UNION ALL

-- CONTRATADOS
-- ================================================================================================
-- [145] Honorarios Profesionales
SELECT 
   psd.id_funcionario,
   1::int as orden,
   CASE WHEN max(psd.objeto_gasto)=145 THEN 145 ELSE (CASE WHEN max(psd.objeto_gasto)=144 THEN 144 ELSE 141 END) END as objeto_gasto,
   CASE WHEN max(psd.objeto_gasto)=145 THEN 'HONORARIOS PROFESIONALES'::text ELSE (CASE WHEN max(psd.objeto_gasto)=144 THEN 'JORNALES'::text ELSE 'PERSONAL TECNICO'::text END) END as concepto,
   sum(psd.monto_presupuestado::numeric(12,0)) as presupuestado,
   sum(psd.monto_devengado::numeric(12,0)-psd.monto_iva::numeric(12,0)) as devengado,
   max(psd.id_oficina) as id_oficina,
   3::int as tipo
FROM 
   salarios_contratados.planillas_salarios ps
   LEFT JOIN salarios_contratados.planillas_salarios_detalles psd ON psd.id_planilla_salario=ps.id_planilla_salario
WHERE 
   CASE WHEN 2=in_tipo OR 0=in_tipo  THEN TRUE ELSE FALSE END AND
   CASE 
      WHEN 1=in_id_administracion THEN ps.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN ps.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN ps.id_administracion IN (0,1,2)
   END AND
   ps.gestion= in_gestion AND
   ps.id_mes= in_id_mes AND
   ps.id_estado= 1 AND
   --psd.objeto_gasto=145 AND
   CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         psd.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         psd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
  psd.id_funcionario

UNION ALL

-- Remuneración Extraordinaria (RE)
SELECT 
  pred.id_funcionario,
  2::int as orden,
  max(pred.objeto_gasto) as objeto_gasto,
  'REMUNERACION EXTRAORDINARIA (RE)'::text as concepto,
  sum(pred.monto::numeric(12,0)) as presupuestado,
  sum(pred.monto::numeric(12,0)-pred.monto_iva::numeric(12,0)) as devengado,
  max(pred.id_oficina) as id_oficina,
  3::int as tipo
FROM 
  salarios_contratados.planillas_re pre
  LEFT JOIN salarios_contratados.planillas_re_detalles pred ON pred.id_planilla_re=pre.id_planilla_re
WHERE
  CASE WHEN 2=in_tipo OR 0=in_tipo  THEN TRUE ELSE FALSE END AND
  CASE 
     WHEN 1=in_id_administracion THEN pre.id_administracion IN (0,1)
     WHEN 2=in_id_administracion THEN pre.id_administracion IN (0,2)
     WHEN 3=in_id_administracion THEN pre.id_administracion IN (0,1,2)
  END AND
  pre.gestion= in_gestion AND
  pre.id_mes= in_id_mes AND
  pre.estado= 1 AND
  CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         pred.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         pred.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
  pred.id_funcionario

UNION ALL

-- Remuneración Adicional (RA)
SELECT 
  prad.id_funcionario,
  3::int as orden,
  max(prad.objeto_gasto) as objeto_gasto,
  'REMUNERACION ADICIONAL (RA)'::text as concepto,
  sum(prad.monto::numeric(12,0)) as presupuestado,
  sum(prad.monto::numeric(12,0)-prad.monto_iva::numeric(12,0)) as devengado,
  max(prad.id_oficina) as id_oficina,
  3::int as tipo
FROM 
  salarios_contratados.planillas_ra pra
  LEFT JOIN salarios_contratados.planillas_ra_detalles prad ON prad.id_planilla_ra=pra.id_planilla_ra
WHERE
  CASE WHEN 2=in_tipo OR 0=in_tipo  THEN TRUE ELSE FALSE END AND
  CASE 
     WHEN 1=in_id_administracion THEN pra.id_administracion IN (0,1)
     WHEN 2=in_id_administracion THEN pra.id_administracion IN (0,2)
     WHEN 3=in_id_administracion THEN pra.id_administracion IN (0,1,2)
  END AND
  pra.gestion= in_gestion AND
  pra.id_mes= in_id_mes AND
  pra.estado= 1 AND
  CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         prad.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         prad.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
  prad.id_funcionario

UNION ALL

-- EXCEDENTE/RECARGO NOCTURNO (141,144,145)
SELECT 
  psd.id_funcionario,
  CASE WHEN ps.id_tipo_pago=1 THEN 4::int ELSE 5::int END as orden,
  max(psd.objeto_gasto) as objeto_gasto,
  CASE WHEN ps.id_tipo_pago=1 THEN 'EXCEDENTE'::text ELSE 'RECARGO NOCTURNO'::text END as descripcion,
  sum(psd.importe::numeric(12,0)) as presupuestado,
  sum(psd.importe::numeric(12,0)-psd.importe_iva::numeric(12,0)) as devengado,
  max(psd.id_oficina) as id_oficina,
  3::int as tipo
FROM 
  salarios_contratados.planillas_serenos ps
  LEFT JOIN salarios_contratados.planillas_serenos_detalles psd ON psd.id_planilla_sereno=ps.id_planilla_sereno
WHERE 
  CASE WHEN 2=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
  CASE 
     WHEN 1=in_id_administracion THEN ps.id_administracion IN (0,1)
     WHEN 2=in_id_administracion THEN ps.id_administracion IN (0,2)
     WHEN 3=in_id_administracion THEN ps.id_administracion IN (0,1,2)
  END AND
  ps.gestion= in_gestion AND
  ps.id_mes= in_id_mes AND
  ps.estado= 1 AND
  CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         psd.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         psd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
  ps.id_tipo_pago,psd.id_funcionario  

UNION ALL

-- BONIFICACIONES (141,144,145)
SELECT 
  pbd.id_funcionario,
  6::int as orden,
  max(pbd.objeto_gasto) as objeto_gasto,
  tb.descripcion as descripcion,
  sum(pbd.importe::numeric(12,0)) as presupuestado,
  sum(pbd.importe::numeric(12,0)-pbd.importe_iva::numeric(12,0)) as devengado,
  max(pbd.id_oficina) as id_oficina,
  3::int as tipo
FROM 
  salarios_contratados.planillas_bonificaciones pb
  LEFT JOIN salarios_contratados.planillas_bonificaciones_detalles pbd ON pbd.id_planilla_bonificacion=pb.id_planilla_bonificacion
  LEFT JOIN salarios_contratados.funcionarios_bonificaciones fb ON fb.id_funcionario_bonificacion=pbd.id_funcionario_bonificacion
  LEFT JOIN salarios_contratados.tipos_bonificaciones tb ON tb.id_tipo_bonificacion=fb.id_tipo_bonificacion
WHERE 
  CASE WHEN 2=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
  CASE 
     WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
     WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
     WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
  END AND
  pb.gestion= in_gestion AND
  pb.id_mes= in_id_mes AND
  pb.estado= 1 AND
  CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         pbd.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         pbd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
  tb.descripcion,pbd.id_funcionario

UNION ALL

-- [131] Subsidio Familiar (141,144,145)
SELECT 
  fs.id_funcionario,
  7::int as orden,
  max(psd.objeto_gasto) as objeto_gasto,
  'SUBSIDIO FAMILIAR'::text as descripcion,
  sum(psd.importe_subsidio::numeric(12,0)) as presupuestado,
  sum(psd.importe_subsidio::numeric(12,0)-psd.importe_iva::numeric(12,0)) as devengado,
  max(psd.id_oficina) as id_oficina,
  3::int as tipo
FROM 
  salarios_contratados.planillas_subsidios ps
  LEFT JOIN salarios_contratados.planillas_subsidios_detalles psd ON psd.id_planilla_subsidio=ps.id_planilla_subsidio
  LEFT JOIN salarios_contratados.funcionarios_subsidios        fs ON fs.id_funcionario_subsidio=psd.id_funcionario_subsidio
WHERE 
  CASE WHEN 2=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
  CASE 
     WHEN 1=in_id_administracion THEN ps.id_administracion IN (0,1)
     WHEN 2=in_id_administracion THEN ps.id_administracion IN (0,2)
     WHEN 3=in_id_administracion THEN ps.id_administracion IN (0,1,2)
  END AND
  ps.gestion= in_gestion AND
  ps.id_mes= in_id_mes AND
  ps.estado= 1 AND
  CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         fs.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
  fs.id_funcionario
  
UNION ALL

--[141,144,145] Gratificación Ocasional
SELECT 
  pgod.id_funcionario,
  8::int as orden,
  max(pgod.objeto_gasto) as objeto_gasto,
  'GRATIFICACION OCASIONAL'::text as descripcion,
  sum(pgod.importe_gratificacion::numeric(12,0)) as presupuestado,
  sum(pgod.importe_gratificacion::numeric(12,0)-pgod.importe_iva::numeric(12,0)) as devengado,
  max(pgod.id_oficina) as id_oficina,
  3::int as tipo
FROM 
  salarios_contratados.planillas_gratificaciones_ocasionales pgo
  LEFT JOIN salarios_contratados.planillas_gratificaciones_ocasionales_detalles pgod ON pgod.id_planilla_gratificacion_ocasional=pgo.id_planilla_gratificacion_ocasional
WHERE 
  CASE WHEN 2=in_tipo OR 0=in_tipo THEN TRUE ELSE FALSE END AND
  CASE 
     WHEN 1=in_id_administracion THEN pgo.id_administracion IN (0,1)
     WHEN 2=in_id_administracion THEN pgo.id_administracion IN (0,2)
     WHEN 3=in_id_administracion THEN pgo.id_administracion IN (0,1,2)
  END AND
  pgo.gestion= in_gestion AND
  pgo.id_mes= in_id_mes AND
  pgo.estado= 1 AND
  CASE
      WHEN 
         '0'=in_id_funcionario
      THEN
         pgod.id_funcionario IN(
            SELECT x.id_funcionario FROM salarios.obtener_ids_funcionarios_mes_gestion(
	       in_id_administracion,
	       in_tipo,
	       in_id_mes,
	       in_gestion
	    ) x
         )
      ELSE
         pgod.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
   END
GROUP BY
  pgod.id_funcionario

-- ================================================================================================  

;
END;
]]></definition>
</function>

<function name="sfp_informe_mensual_v2_exportar"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="anho">
		<type name="integer"/>
	</parameter>
	<parameter name="mes">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel_entidad">
		<type name="integer"/>
	</parameter>
	<parameter name="entidad">
		<type name="integer"/>
	</parameter>
	<parameter name="depende">
		<type name="integer"/>
	</parameter>
	<parameter name="linea">
		<type name="text"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="apellido_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="estado">
		<type name="text"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="integer"/>
	</parameter>
	<parameter name="ff">
		<type name="integer"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="presupuestado_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="movimiento">
		<type name="text"/>
	</parameter>
	<parameter name="lugar">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="funcion">
		<type name="text"/>
	</parameter>
	<parameter name="horario">
		<type name="text"/>
	</parameter>
	<parameter name="discapacidad">
		<type name="text"/>
	</parameter>
	<parameter name="tipo_discapacidad">
		<type name="text"/>
	</parameter>
	<parameter name="ingreso">
		<type name="integer"/>
	</parameter>
	<parameter name="tipo">
		<type name="integer"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_tipo" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_vacante" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar el reporte para EXPORTAR a la Secretaría Función Pública   
  * por administracion, mes, gestion y/o id_funcionario
  * Creado    : 2015-02-25 13:35:00
  * Modificado: 2015-03-18 09:58:00
  * Modificado: 2015-07-13 16:09:00
  * Modificado: 2015-07-15 15:54:56
  * Modificado: 2015-07-16 08:16:56  
  * Modificado: 2016-02-12 09:51:00 
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso
  *            in_tipo              tipo funcionario [0:todos 1:Permanente/Comisionado 2:Contratado] 
  *            in_id_mes            mes de proceso [1-12]
  *            in_gestion           ejercicio aplicado [2013-...] 
  *            in_gvacante          [0: todos 1:sin vacantes 2: solo vacantes] 
  * 	       in_id_funcionario    ['0':todos '1782,687,...':ids_funcionarios específicos]
  * Descripcion:  según S.I.M.E. Nº 8082/2015 "Objeto: Remisión se documento s/ formato 
  *               para la provisión de información de altas, bajas, traslados temporales y otros" 
  *               provisión de Informaciones en el uso de los recursos públicos sobre remuneraciones y otras 
  *               retribuciones asignadas al servidor público de la República del Paraguay"
  * ------------  
  */
RETURN QUERY
SELECT
   sfp.anho, -- 1
   sfp.mes, -- 2
   sfp.nivel_entidad, -- 3
   sfp.entidad, -- 4
   sfp.depende, -- 5
   sfp.linea, -- 6
   sfp.id_funcionario, -- 7
   sfp.cedula_funcionario, -- 8
   sfp.nombre_funcionario, -- 9
   sfp.apellido_funcionario, -- 10
   sfp.estado, -- 11
   sfp.objeto_gasto, -- 12
   sfp.ff, -- 13
   sfp.categoria, -- 14
   COALESCE(rem_total.presupuestado_total,0) as presupuestado_total,
   sfp.presupuestado, -- 15
   sfp.devengado, -- 16
   sfp.concepto, -- 17
   COALESCE(sfp.movimiento,''::text) as movimiento, -- 18
   sfp.lugar, -- 19
   sfp.cargo, -- 20
   sfp.funcion, -- 21
   COALESCE(sfp.horario,''::text), -- 22
   sfp.discapacidad, -- 23
   sfp.tipo_discapacidad, -- 24
   sfp.ingreso, -- 25
   sfp.tipo, -- 26
   sfp.orden -- 27
FROM (
(
SELECT
   in_gestion as anho, -- 1
   in_id_mes as mes, -- 2
   12 as nivel_entidad, -- 3
   6 as entidad, -- 4
   0 as depende, -- 5
   -- LINEA
   coalesce(dps.linea,''::text) as linea, -- 6
   -- ID
   f.id_funcionario, -- 7
   -- CEDULA
   f.cedula_funcionario::text, -- 8
   -- NOMBRES
   f.nombre_funcionario::text, -- 9
   -- APELLIDOS
   f.apellido_funcionario::text, -- 10
   -- ESTADO
   CASE 
      WHEN x.tipo=1 THEN CASE WHEN com_o.id_funcionario IS NULL THEN 'PERMANENTE'::text ELSE 'COMISIONADO'::text END
      WHEN x.tipo=3 THEN 'CONTRATADO'::text 
   END as estado, -- 11
   x.objeto_gasto, -- 12
   -- FUENTE FINANCIAMIENTO
   CASE
      WHEN x.tipo!=3 THEN (
      SELECT
         CASE
            WHEN x.id_oficina::text=ANY(('{'||'
					     2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,
                                             2180,2181,2182,2183,2184,2185,2186,2187,2249,2250,2251,2252,
                                             2253,2254,2255,2256,2257,2258,2259,2329,2330,2337,2498,2506,
                                             2507,2508,2511,
                                             3007,3008,3011,3014,3015,3016,
                                             2627, 2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,
                                             3640,3641,3642,3644,3645,3646,3647,3650,3651,
					     3669,3678,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,
					     3758,3759,3768,
					     4150,4151,4154,4155,4156,4160
                                             '||'}')::text[])
            THEN CASE WHEN x.objeto_gasto IN (111,113,131,137) THEN 10 ELSE 30 END
            ELSE 10
           END
   )
      WHEN x.tipo=3 THEN fc.ff 
   END as ff, -- 13
   --CATEGORIA
   (CASE
      WHEN x.tipo!=3 THEN dps.categoria
      WHEN x.tipo=3 THEN fc.categoria
   END)::text as categoria, -- 14
   -- PRESUPUESTADO
   x.presupuestado, -- 15
   -- DEVENGADO
   x.devengado, --16
   -- CONCEPTO
   x.concepto, --17
   -- MOVIMIENTO
   CASE
      WHEN extract(year from saa.fecha_inicio)=in_gestion AND extract(month from saa.fecha_inicio)=in_id_mes THEN 'A'::text
      WHEN f.estado_funcionario=false THEN 'B'::text
      WHEN saa.id_tipo_funcionario='COM' THEN 'TT'::text
      WHEN com_d.id_funcionario IS NOT NULL THEN 'TT'::text
   END as movimiento, -- 18
   -- LUGAR
   CASE 
      WHEN com_o.id_funcionario IS NOT NULL THEN com_o.entidad_origen ELSE (
         CASE WHEN com_d.id_funcionario IS NOT NULL THEN com_d.entidad_destino ELSE ''::text END
      )  
   END as lugar, -- 19
   -- CARGO
   (CASE
      WHEN x.tipo!=3 THEN dps.cargo
      WHEN x.tipo=3 THEN fc.cargo
   END)::text as cargo, -- 20
   -- FUNCION 
   (CASE
      WHEN x.tipo!=3 THEN dps.funcion
      WHEN x.tipo=3 THEN fc.funcion
   END)::text as funcion, -- 21
   -- HORARIO
   (CASE
      WHEN x.tipo!=3 THEN COALESCE(h.horario,hn.horario)
      WHEN x.tipo=3 THEN CASE WHEN fc.id_tipo_contrato=1 THEN COALESCE(h.horario,hn.horario) ELSE 'POR PRODUCTO'::text END
   END)::text as horario, -- 22
   -- DISCAPACIDAD
   'N'::text as discapacidad, -- 23
   -- TIPO
   ''::text as tipo_discapacidad, -- 24
   -- FECHA INGRESO 
   extract(year from saa.fecha_inicio)::int as ingreso, -- 25
   x.tipo, -- 26
   x.orden  -- 27
FROM 
   -- FUNCION QUE OBTIENE LOS MONTOS
   -- ==============================
   salarios.sfp_informe_mensual_v2(in_id_administracion,in_tipo,in_id_mes,in_gestion,in_id_funcionario) x
   -- ==============================
   LEFT JOIN legajos.funcionarios f ON f.id_funcionario=x.id_funcionario
   LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=x.id_funcionario
   LEFT JOIN (
      -- HORARIO ENTRADA-SALIDA
      SELECT 
	 fh.id_funcionario, 
	 max(to_char(h.hora_entrada,'HH24:mi') ||' A '||to_char(h.hora_salida,'HH24:mi')) as horario--,
      FROM 
	 control.funcionarios_horarios fh
	 LEFT JOIN control.horarios h ON h.id_horario=fh.id_horario
      WHERE
	 /*CASE 
	    WHEN '1'=in_id_administracion THEN fh.id_administracion IN (0,1)
	    WHEN '2'=in_id_administracion THEN fh.id_administracion IN (0,2)
	    WHEN '3'=in_id_administracion THEN fh.id_administracion IN (0,1,2)
	 END AND*/
	 (fh.activo AND fh.fecha_hasta IS NULL)
      GROUP BY
	 fh.id_funcionario
   ) h ON h.id_funcionario=x.id_funcionario
   LEFT JOIN (
      -- HORARIO NOCTURNO ENTRADA-SALIDA
      SELECT 
	 fhn.id_funcionario, 
	 'HORARIO NOCTURNO'::text as horario
      FROM 
	 control.funcionarios_horarios_nocturnos fhn
      WHERE
	 /*CASE 
	    WHEN '1'=in_id_administracion THEN fhn.id_administracion IN (0,1)
	    WHEN '2'=in_id_administracion THEN fhn.id_administracion IN (0,2)
	    WHEN '3'=in_id_administracion THEN fhn.id_administracion IN (0,1,2)
	 END AND*/
	 (fhn.activo AND fhn.fecha_hasta IS NULL)
      GROUP BY
	 fhn.id_funcionario
   ) hn ON hn.id_funcionario=x.id_funcionario
   LEFT JOIN (
      SELECT
         fc.id_tipo_contrato,
         fc.id_funcionario_contratado,
         fc.id_funcionario,
         fc.nro_contrato,
         fc.categoria,
         fc.cod_fuente_financiamiento as ff,
         fun.descripcion_funcion as cargo,
         o.nombre as funcion
      FROM
         salarios_contratados.funcionarios_contratos fc
         LEFT JOIN legajos.tipo_contrato tc ON tc.id_tipo_contrato=fc.id_tipo_contrato
         LEFT JOIN legajos.funcionarios_contratados fc2 ON fc2.id_funcionario_contratado =fc.id_funcionario_contratado
         LEFT JOIN legajos.funciones fun ON fun.id_funcion=fc2.id_funcion
         LEFT JOIN legajos.oficinas o ON o.id_oficina=fc.id_oficina
      WHERE
         /*CASE 
	    WHEN '1'=in_id_administracion THEN fc.id_administracion IN (0,1)
	    WHEN '2'=in_id_administracion THEN fc.id_administracion IN (0,2)
	    WHEN '3'=in_id_administracion THEN fc.id_administracion IN (0,1,2)
	 END AND*/
         fc.estado AND
         fc.gestion=in_gestion
   ) fc ON fc.id_funcionario=x.id_funcionario
   LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria,
	   dc.linea::text,
	   dc.id_categoria,
	   dc.vacante,
	   dc.id_estructura_presupuestaria,  
	   cat.nombre_categoria as categoria, 
	   car.nombre_cargo as cargo,
	   cat.es_comisionado,
	   ofi.nombre as funcion,
	   ofi.id_oficina
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       fc.gestion = in_gestion /*AND
	       CASE 
	          WHEN '1'=in_id_administracion THEN fc.id_administracion IN (0,1)
	          WHEN '2'=in_id_administracion THEN fc.id_administracion IN (0,2)
	          WHEN '3'=in_id_administracion THEN fc.id_administracion IN (0,1,2)
	       END*/
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias cat ON cat.id_categoria=dc.id_categoria
            LEFT JOIN salarios.cargos car ON car.id_cargo=cat.id_cargo
            LEFT JOIN legajos.oficinas ofi ON ofi.id_oficina=y.id_oficina
    ) dps ON dps.id_funcionario = x.id_funcionario
    LEFT JOIN (
	SELECT
	   f.id_funcionario,
	   e.descripcion_entidad::text as entidad_origen
	FROM 
	   legajos.datos_administrativos da
	   LEFT JOIN legajos.funcionarios_comisionados      fc ON da.id_dato_administrativo=fc.id_dato_administrativo
	   LEFT JOIN legajos.funcionarios                    f ON f.id_funcionario=da.id_funcionario
	   LEFT JOIN legajos.entidad                         e ON e.id_entidad=fc.id_entidad
	   LEFT JOIN legajos.funciones                     fun ON fun.id_funcion=fc.id_funcion
	   LEFT JOIN legajos.tipos_disposicion_dependencia tdd ON tdd.id_tipo_disposicion_dependencia=fc.id_tipo_disposicion_dependencia
	   LEFT JOIN (
	      SELECT
		 f.id_funcionario,
		 max(fc.fecha_desde) as fecha_inicio
	      FROM 
		 legajos.datos_administrativos da
		 LEFT JOIN legajos.funcionarios_comisionados fc ON da.id_dato_administrativo=fc.id_dato_administrativo
		 LEFT JOIN legajos.funcionarios               f ON f.id_funcionario=da.id_funcionario
	      WHERE 
		 da.tipo_funcionario='COM' AND
		 --fc.id_tipo_disposicion_dependencia=8
		 fc.id_tipo_disposicion_dependencia IN(8,130,131)
	      GROUP BY 
		 f.id_funcionario
	   ) fec ON fec.id_funcionario=f.id_funcionario
        WHERE
           da.tipo_funcionario='COM' AND
           --fc.id_tipo_disposicion_dependencia=8 AND
           fc.id_tipo_disposicion_dependencia IN(8,130,131) AND
	   CASE 
	      WHEN '1'=in_id_administracion THEN f.id_administracion IN (0,1)
	      WHEN '2'=in_id_administracion THEN f.id_administracion IN (0,2)
	      WHEN '3'=in_id_administracion THEN f.id_administracion IN (0,1,2)
	   END AND
	   (extract(year from fc.fecha_desde)=in_gestion OR extract(year from fc.fecha_hasta)=in_gestion) AND
	   (in_id_mes between extract(month from fc.fecha_desde) AND extract(month from fc.fecha_hasta))
    ) com_o ON com_o.id_funcionario=x.id_funcionario 
    LEFT JOIN (
	SELECT
	   fcmh.id_funcionario,
	   (fcmh.entidad_destino) as entidad_destino
	FROM
	(
	SELECT
	   f.id_funcionario,
	   datos_comi.descripcion_entidad::text as entidad_destino
	FROM 
	   legajos.funcionarios_mh_comisionados fmhc
	   LEFT JOIN legajos.funcionarios f ON f.id_funcionario=fmhc.id_funcionario
	   LEFT JOIN legajos.entidad      e ON e.id_entidad=fmhc.id_entidad
	   LEFT JOIN (
		SELECT
		d2.id_funcionario,
		d2.datos_aux[1] as entidad,
		(
		   SELECT
		      to_char(max(fmhc.fecha_desde),'dd/MM/YYYY') as fecha_desde
		   FROM 
		      legajos.funcionarios_mh_comisionados fmhc
		      LEFT JOIN legajos.funcionarios          f ON f.id_funcionario=fmhc.id_funcionario
		   WHERE 
		      fmhc.id_entidad=d2.datos_aux[1]::int AND
		      fmhc.id_tipo_disposicion_dependencia IN(8,130,131) AND
		      --fmhc.id_tipo_disposicion_dependencia=8 AND
		      f.id_funcionario=d2.id_funcionario
		) as fecha_inicio,
		to_char(d2.datos_aux[2]::date,'dd/MM/YYYY') as fecha_hasta,
		e.descripcion_entidad 
		FROM
		(
			SELECT
			   f2.id_funcionario,
			   (
				SELECT
				   ('{'||fmhc.id_entidad||','||
				   fmhc.fecha_hasta||'}'
				   )::text[] AS informacion
				FROM 
				 legajos.funcionarios_mh_comisionados fmhc
				 LEFT JOIN legajos.funcionarios          f ON f.id_funcionario=fmhc.id_funcionario
				WHERE 
				  f.id_funcionario IN (f2.id_funcionario) AND
				  --fmhc.id_tipo_disposicion_dependencia=8 AND
			          fmhc.id_tipo_disposicion_dependencia IN(8,130,131) AND
				  extract(year from fmhc.fecha_hasta)=in_gestion
				  ORDER BY fmhc.fecha_hasta desc,  fmhc.fecha_desde desc limit 1
			   ) datos_aux
			FROM
			   legajos.funcionarios f2
			   LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f2.id_funcionario
			WHERE
			   f2.estado_funcionario AND
			   CASE 
			      WHEN '1'=in_id_administracion THEN f2.id_administracion IN (0,1)
			      WHEN '2'=in_id_administracion THEN f2.id_administracion IN (0,2)
			      WHEN '3'=in_id_administracion THEN f2.id_administracion IN (0,1,2)
			   END AND
			   saa.id_tipo_funcionario='PER'
		) d2
		LEFT JOIN legajos.entidad e ON e.id_entidad=d2.datos_aux[1]::int
		WHERE
		  d2.datos_aux[1] IS NOT NULL
	   ) datos_comi ON datos_comi.id_funcionario=f.id_funcionario
	   -- CATEGORIA
	   LEFT JOIN (
		SELECT 
		   fc2.id_funcionario,
		   max(fc2.id_funcionario_categoria) as id_funcionario_categoria
		FROM 
		   salarios.funcionarios_categorias fc2
		WHERE 
		   fc2.gestion = in_gestion AND
		   /*CASE 
	              WHEN '1'=in_id_administracion THEN fc2.id_administracion IN (0,1)
	              WHEN '2'=in_id_administracion THEN fc2.id_administracion IN (0,2)
	              WHEN '3'=in_id_administracion THEN fc2.id_administracion IN (0,1,2)
	           END AND*/
	           (in_id_mes BETWEEN  extract(MONTH from fc2.desde) AND extract(MONTH from fc2.hasta-1) OR fc2.hasta is null) 
		GROUP BY
		   fc2.id_funcionario
	   ) fc ON fc.id_funcionario=fmhc.id_funcionario
	WHERE
	   --fmhc.id_tipo_disposicion_dependencia=8 AND
	   fmhc.id_tipo_disposicion_dependencia IN(8,130,131) AND
	   /*CASE 
	      WHEN '1'=in_id_administracion THEN f.id_administracion IN (0,1)
	      WHEN '2'=in_id_administracion THEN f.id_administracion IN (0,2)
	      WHEN '3'=in_id_administracion THEN f.id_administracion IN (0,1,2)
	   END AND*/
	   (extract(year from fmhc.fecha_desde)=in_gestion OR extract(year from fmhc.fecha_hasta)=in_gestion) AND
	   (in_id_mes between extract(month from fmhc.fecha_desde) AND extract(month from fmhc.fecha_hasta))
	) fcmh
    ) com_d ON com_d.id_funcionario=x.id_funcionario
WHERE
   CASE WHEN (1=in_vacante OR 0=in_vacante) THEN TRUE ELSE FALSE END
   )
UNION ALL
(
-- VACANCIAS
SELECT
   in_gestion as anho, -- 1
   in_id_mes as mes, -- 2
   12 as nivel_entidad, -- 3
   6 as entidad, -- 4
   0 as depende, -- 5
   dc.linea::text as linea, -- 6
   0 as id_funcionario, -- 7
   999999999::text as cedula_funcionario, -- 8
   'VACANTE'::text as nombre_funcionario, -- 9
   'VACANTE'::text as apellido_funcionario, -- 10
   'PERMANENTE'::text as estado, -- 11
   111 as objeto_gasto, -- 12
   10 as ff, -- 13
   c.nombre_categoria as categoria, -- 14
   cim.importe::numeric(12,0) as presupuestado, -- 15
   0 as devengado, -- 16
   ''::text as concepto, -- 17
   ''::text as movimiento, -- 18
   ''::text as lugar, -- 19
   cag.nombre_cargo as cargo, -- 20
   ''::text as funcion, -- 21
   ''::text as horario, -- 22
   ''::text as discapacidad, -- 23
   ''::text as tipo_discapacidad, -- 24
   0 as ingreso, -- 25
   4 as tipo, -- 26
   (99+row_number() over (ORDER BY cim.importe::int desc))::int  as orden -- 27
FROM 
   salarios.planillas_salarios ps
   INNER JOIN salarios.detalle_planillas_vacantes  dpv ON dpv.id_planilla_salario=ps.id_planilla_salario AND 
						    CASE 
							WHEN '1'=in_id_administracion THEN dpv.id_administracion IN (0,1)
							WHEN '2'=in_id_administracion THEN dpv.id_administracion IN (0,2)
							WHEN '3'=in_id_administracion THEN dpv.id_administracion IN (0,1,2)
						     END
   LEFT JOIN salarios.detalles_categorias           dc ON dc.id_detalle_categoria=dpv.id_detalle_categoria
   LEFT JOIN salarios.categorias                     c ON c.id_categoria=dc.id_categoria
   LEFT JOIN salarios.cargos                       cag ON cag.id_cargo=c.id_cargo
   LEFT JOIN salarios.categoria_importe_mensual    cim ON cim.id_categoria=c.id_categoria AND cim.id_mes=1
   LEFT JOIN presupuesto.estructura_presupuestaria  ep ON ep.id_estructura_presupuestaria=dc.id_estructura_presupuestaria AND 
						     CASE 
							WHEN '1'=in_id_administracion THEN ep.id_administracion IN (0,1)
							WHEN '2'=in_id_administracion THEN ep.id_administracion IN (0,2)
							WHEN '3'=in_id_administracion THEN ep.id_administracion IN (0,1,2)
						     END
   LEFT JOIN legajos.oficinas                        b ON ep.cod_programa= b.nivel1 AND b.nivel2 = 0 AND 
						     b.nivel3 = 0 AND 
						     b.nivel4 = 0 AND 
						     b.nivel5 = 0 AND 
						     b.gestion=in_gestion AND 
						     CASE 
							WHEN '1'=in_id_administracion THEN b.id_administracion IN (0,1)
							WHEN '2'=in_id_administracion THEN b.id_administracion IN (0,2)
							WHEN '3'=in_id_administracion THEN b.id_administracion IN (0,1,2)
						     END
WHERE 
   CASE 
      WHEN '1'=in_id_administracion THEN ps.id_administracion IN (0,1)
      WHEN '2'=in_id_administracion THEN ps.id_administracion IN (0,2)
      WHEN '3'=in_id_administracion THEN ps.id_administracion IN (0,1,2)
   END AND
   ps.gestion=in_gestion AND
   ps.id_mes=in_id_mes AND
   ps.id_estado=1 AND      
   CASE WHEN (2=in_vacante OR 0=in_vacante) THEN TRUE ELSE FALSE END
--   x.id_funcionario IN (1782,2182,902,481)--,2981,466,1305,2987)
--   saa.id_tipo_funcionario='PER'
)
) sfp
LEFT JOIN (
	SELECT
	   t.id_funcionario,
	   sum(t.presupuestado)::numeric(12,0) as presupuestado_total
	FROM
	   salarios.sfp_informe_mensual_v2(in_id_administracion,in_tipo,in_id_mes,in_gestion,in_id_funcionario) t
	GROUP BY 
	   t.id_funcionario
) rem_total ON rem_total.id_funcionario=sfp.id_funcionario
ORDER BY
   sfp.cedula_funcionario::int,
   sfp.orden
;
END;
]]></definition>
</function>

<function name="sfp_informe_mensual_v3_exportar"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="anho">
		<type name="integer"/>
	</parameter>
	<parameter name="mes">
		<type name="integer"/>
	</parameter>
	<parameter name="nivel_entidad">
		<type name="integer"/>
	</parameter>
	<parameter name="entidad">
		<type name="integer"/>
	</parameter>
	<parameter name="oee">
		<type name="integer"/>
	</parameter>
	<parameter name="linea">
		<type name="text"/>
	</parameter>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="apellido_funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="estado">
		<type name="text"/>
	</parameter>
	<parameter name="presupuestado_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="integer"/>
	</parameter>
	<parameter name="ff">
		<type name="integer"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="numeric"/>
	</parameter>
	<parameter name="devengado">
		<type name="numeric"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="movimiento">
		<type name="text"/>
	</parameter>
	<parameter name="lugar">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="funcion">
		<type name="text"/>
	</parameter>
	<parameter name="horario">
		<type name="text"/>
	</parameter>
	<parameter name="discapacidad">
		<type name="text"/>
	</parameter>
	<parameter name="tipo_discapacidad">
		<type name="text"/>
	</parameter>
	<parameter name="ingreso">
		<type name="integer"/>
	</parameter>
	<parameter name="oficina_sicca">
		<type name="integer"/>
	</parameter>
	<parameter name="profesion">
		<type name="text"/>
	</parameter>
	<parameter name="email">
		<type name="text"/>
	</parameter>
	<parameter name="fecha_administrativa">
		<type name="text"/>
	</parameter>
	<parameter name="motivo_movimiento">
		<type name="text"/>
	</parameter>
	<parameter name="tipo">
		<type name="integer"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_tipo" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_vacante" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar el reporte para EXPORTAR a la Secretaría Función Pública (TERCERA VERSION)   
  * por administracion, mes, gestion y/o id_funcionario
  * Creado    : 2017-04-03 11:23:30
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso
  *            in_tipo              tipo funcionario [0:todos 1:Permanente/Comisionado 2:Contratado] 
  *            in_id_mes            mes de proceso [1-12]
  *            in_gestion           ejercicio aplicado [2013-...] 
  *            in_gvacante          [0: todos 1:sin vacantes 2: solo vacantes] 
  * 	       in_id_funcionario    ['0':todos '1782,687,...':ids_funcionarios específicos]
  * Descripcion:  reporte mensual Ley 5.189/2014
  * ------------  
  */
RETURN QUERY
SELECT
   sfp.anho, -- 1
   sfp.mes, -- 2
   sfp.nivel_entidad, -- 3
   sfp.entidad, -- 4
   sfp.depende, -- 5
   sfp.linea, -- 6
   sfp.id_funcionario, 
   sfp.cedula_funcionario, -- 7
   sfp.nombre_funcionario, -- 8
   sfp.apellido_funcionario, -- 9
   sfp.estado, -- 10
   COALESCE(rem_total.presupuestado_total,0) as presupuestado_total, --11
   sfp.objeto_gasto, -- 12
   sfp.ff, -- 13
   sfp.categoria, -- 14
   sfp.presupuestado, -- 15
   sfp.devengado, -- 16
   sfp.concepto, -- 17
   COALESCE(sfp.movimiento,''::text) as movimiento, -- 18
   sfp.lugar, -- 19
   sfp.cargo, -- 20
   sfp.funcion, -- 21
   COALESCE(sfp.horario,''::text), -- 22
   vpeoe.discapacidad, -- 23
   vpeoe.tipo_discapacidad, -- 24
   sfp.ingreso, -- 25
   vpeoe.cod_sicca, --26
   vpeoe.profesion, --27
   COALESCE(
   vpeoe.correo_institucional,
   vpeoe.correo_particular
   )::text as email, --28
   vpeoe.fecha_inicio, --29
   ''::text as motivo_movimiento, --30
   sfp.tipo, 
   sfp.orden
FROM (
(
SELECT
   in_gestion as anho, -- 1
   in_id_mes as mes, -- 2
   12 as nivel_entidad, -- 3
   6 as entidad, -- 4
   0 as depende, -- 5
   -- LINEA
   coalesce(dps.linea,''::text) as linea, -- 6
   -- ID
   f.id_funcionario, -- 7
   -- CEDULA
   f.cedula_funcionario::text, -- 8
   -- NOMBRES
   f.nombre_funcionario::text, -- 9
   -- APELLIDOS
   f.apellido_funcionario::text, -- 10
   -- ESTADO
   CASE 
      WHEN x.tipo=1 THEN CASE WHEN com_o.id_funcionario IS NULL THEN 'PERMANENTE'::text ELSE 'COMISIONADO'::text END
      WHEN x.tipo=3 THEN 'CONTRATADO'::text 
   END as estado, -- 11
   x.objeto_gasto, -- 12
   -- FUENTE FINANCIAMIENTO
   CASE
      WHEN x.tipo!=3 THEN (
      SELECT
         CASE
            WHEN x.id_oficina::text=ANY(('{'||'
					     2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,
                                             2180,2181,2182,2183,2184,2185,2186,2187,2249,2250,2251,2252,
                                             2253,2254,2255,2256,2257,2258,2259,2329,2330,2337,2498,2506,
                                             2507,2508,2511,
                                             3007,3008,3011,3014,3015,3016,
                                             2627, 2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,
                                             3640,3641,3642,3644,3645,3646,3647,3650,3651,
					     3669,3678,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,
					     3758,3759,3768	
                                             '||'}')::text[])
            THEN CASE WHEN x.objeto_gasto IN (111,113,131,137) THEN 10 ELSE 30 END
            ELSE 10
           END
   )
      WHEN x.tipo=3 THEN fc.ff 
   END as ff, -- 13
   --CATEGORIA
   (CASE
      WHEN x.tipo!=3 THEN dps.categoria
      WHEN x.tipo=3 THEN fc.categoria
   END)::text as categoria, -- 14
   -- PRESUPUESTADO
   x.presupuestado, -- 15
   -- DEVENGADO
   x.devengado, --16
   -- CONCEPTO
   x.concepto, --17
   -- MOVIMIENTO
   CASE
      WHEN extract(year from saa.fecha_inicio)=in_gestion AND extract(month from saa.fecha_inicio)=in_id_mes THEN 'A'::text
      WHEN f.estado_funcionario=false THEN 'B'::text
      WHEN saa.id_tipo_funcionario='COM' THEN 'TT'::text
      WHEN com_d.id_funcionario IS NOT NULL THEN 'TT'::text
   END as movimiento, -- 18
   -- LUGAR
   CASE 
      WHEN com_o.id_funcionario IS NOT NULL THEN com_o.entidad_origen ELSE (
         CASE WHEN com_d.id_funcionario IS NOT NULL THEN com_d.entidad_destino ELSE ''::text END
      )  
   END as lugar, -- 19
   -- CARGO
   (CASE
      WHEN x.tipo!=3 THEN dps.cargo
      WHEN x.tipo=3 THEN fc.cargo
   END)::text as cargo, -- 20
   -- FUNCION 
   (CASE
      WHEN x.tipo!=3 THEN dps.funcion
      WHEN x.tipo=3 THEN fc.funcion
   END)::text as funcion, -- 21
   -- HORARIO
   (CASE
      WHEN x.tipo!=3 THEN COALESCE(h.horario,hn.horario)
      WHEN x.tipo=3 THEN CASE WHEN fc.id_tipo_contrato=1 THEN COALESCE(h.horario,hn.horario) ELSE 'POR PRODUCTO'::text END
   END)::text as horario, -- 22
   -- DISCAPACIDAD
   'N'::text as discapacidad, -- 23
   -- TIPO
   ''::text as tipo_discapacidad, -- 24
   -- FECHA INGRESO 
   extract(year from saa.fecha_inicio)::int as ingreso, -- 25
   x.tipo, -- 26
   x.orden  -- 27
FROM 
   -- FUNCION QUE OBTIENE LOS MONTOS
   -- ==============================
   salarios.sfp_informe_mensual_v2(in_id_administracion,in_tipo,in_id_mes,in_gestion,in_id_funcionario) x
   -- ==============================
   LEFT JOIN legajos.funcionarios f ON f.id_funcionario=x.id_funcionario
   LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=x.id_funcionario
   LEFT JOIN (
      -- HORARIO ENTRADA-SALIDA
      SELECT 
	 fh.id_funcionario, 
	 max(to_char(h.hora_entrada,'HH24:mi') ||' A '||to_char(h.hora_salida,'HH24:mi')) as horario--,
      FROM 
	 control.funcionarios_horarios fh
	 LEFT JOIN control.horarios h ON h.id_horario=fh.id_horario
      WHERE
	 /*CASE 
	    WHEN '1'=in_id_administracion THEN fh.id_administracion IN (0,1)
	    WHEN '2'=in_id_administracion THEN fh.id_administracion IN (0,2)
	    WHEN '3'=in_id_administracion THEN fh.id_administracion IN (0,1,2)
	 END AND*/
	 (fh.activo AND fh.fecha_hasta IS NULL)
      GROUP BY
	 fh.id_funcionario
   ) h ON h.id_funcionario=x.id_funcionario
   LEFT JOIN (
      -- HORARIO NOCTURNO ENTRADA-SALIDA
      SELECT 
	 fhn.id_funcionario, 
	 'HORARIO NOCTURNO'::text as horario
      FROM 
	 control.funcionarios_horarios_nocturnos fhn
      WHERE
	 /*CASE 
	    WHEN '1'=in_id_administracion THEN fhn.id_administracion IN (0,1)
	    WHEN '2'=in_id_administracion THEN fhn.id_administracion IN (0,2)
	    WHEN '3'=in_id_administracion THEN fhn.id_administracion IN (0,1,2)
	 END AND*/
	 (fhn.activo AND fhn.fecha_hasta IS NULL)
      GROUP BY
	 fhn.id_funcionario
   ) hn ON hn.id_funcionario=x.id_funcionario
   LEFT JOIN (
      SELECT
         fc.id_tipo_contrato,
         fc.id_funcionario_contratado,
         fc.id_funcionario,
         fc.nro_contrato,
         fc.categoria,
         fc.cod_fuente_financiamiento as ff,
         fun.descripcion_funcion as cargo,
         o.nombre as funcion
      FROM
         salarios_contratados.funcionarios_contratos fc
         LEFT JOIN legajos.tipo_contrato tc ON tc.id_tipo_contrato=fc.id_tipo_contrato
         LEFT JOIN legajos.funcionarios_contratados fc2 ON fc2.id_funcionario_contratado =fc.id_funcionario_contratado
         LEFT JOIN legajos.funciones fun ON fun.id_funcion=fc2.id_funcion
         LEFT JOIN legajos.oficinas o ON o.id_oficina=fc.id_oficina
      WHERE
         /*CASE 
	    WHEN '1'=in_id_administracion THEN fc.id_administracion IN (0,1)
	    WHEN '2'=in_id_administracion THEN fc.id_administracion IN (0,2)
	    WHEN '3'=in_id_administracion THEN fc.id_administracion IN (0,1,2)
	 END AND*/
         fc.estado AND
         fc.gestion=in_gestion
   ) fc ON fc.id_funcionario=x.id_funcionario
   LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria,
	   dc.linea::text,
	   dc.id_categoria,
	   dc.vacante,
	   dc.id_estructura_presupuestaria,  
	   cat.nombre_categoria as categoria, 
	   car.nombre_cargo as cargo,
	   cat.es_comisionado,
	   ofi.nombre as funcion,
	   ofi.id_oficina
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       fc.gestion = in_gestion /*AND
	       CASE 
	          WHEN '1'=in_id_administracion THEN fc.id_administracion IN (0,1)
	          WHEN '2'=in_id_administracion THEN fc.id_administracion IN (0,2)
	          WHEN '3'=in_id_administracion THEN fc.id_administracion IN (0,1,2)
	       END*/
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias dc ON dc.id_detalle_categoria=y.id_detalle_categoria
	    LEFT JOIN salarios.categorias cat ON cat.id_categoria=dc.id_categoria
            LEFT JOIN salarios.cargos car ON car.id_cargo=cat.id_cargo
            LEFT JOIN legajos.oficinas ofi ON ofi.id_oficina=y.id_oficina
    ) dps ON dps.id_funcionario = x.id_funcionario
    LEFT JOIN (
	SELECT
	   f.id_funcionario,
	   e.descripcion_entidad::text as entidad_origen
	FROM 
	   legajos.datos_administrativos da
	   LEFT JOIN legajos.funcionarios_comisionados      fc ON da.id_dato_administrativo=fc.id_dato_administrativo
	   LEFT JOIN legajos.funcionarios                    f ON f.id_funcionario=da.id_funcionario
	   LEFT JOIN legajos.entidad                         e ON e.id_entidad=fc.id_entidad
	   LEFT JOIN legajos.funciones                     fun ON fun.id_funcion=fc.id_funcion
	   LEFT JOIN legajos.tipos_disposicion_dependencia tdd ON tdd.id_tipo_disposicion_dependencia=fc.id_tipo_disposicion_dependencia
	   LEFT JOIN (
	      SELECT
		 f.id_funcionario,
		 max(fc.fecha_desde) as fecha_inicio
	      FROM 
		 legajos.datos_administrativos da
		 LEFT JOIN legajos.funcionarios_comisionados fc ON da.id_dato_administrativo=fc.id_dato_administrativo
		 LEFT JOIN legajos.funcionarios               f ON f.id_funcionario=da.id_funcionario
	      WHERE 
		 da.tipo_funcionario='COM' AND
		 --fc.id_tipo_disposicion_dependencia=8
		 fc.id_tipo_disposicion_dependencia IN(8,130,131)
	      GROUP BY 
		 f.id_funcionario
	   ) fec ON fec.id_funcionario=f.id_funcionario
        WHERE
           da.tipo_funcionario='COM' AND
           --fc.id_tipo_disposicion_dependencia=8 AND
           fc.id_tipo_disposicion_dependencia IN(8,130,131) AND
	   CASE 
	      WHEN '1'=in_id_administracion THEN f.id_administracion IN (0,1)
	      WHEN '2'=in_id_administracion THEN f.id_administracion IN (0,2)
	      WHEN '3'=in_id_administracion THEN f.id_administracion IN (0,1,2)
	   END AND
	   (extract(year from fc.fecha_desde)=in_gestion OR extract(year from fc.fecha_hasta)=in_gestion) AND
	   (in_id_mes between extract(month from fc.fecha_desde) AND extract(month from fc.fecha_hasta))
    ) com_o ON com_o.id_funcionario=x.id_funcionario 
    LEFT JOIN (
	SELECT
	   fcmh.id_funcionario,
	   (fcmh.entidad_destino) as entidad_destino
	FROM
	(
	SELECT
	   f.id_funcionario,
	   datos_comi.descripcion_entidad::text as entidad_destino
	FROM 
	   legajos.funcionarios_mh_comisionados fmhc
	   LEFT JOIN legajos.funcionarios f ON f.id_funcionario=fmhc.id_funcionario
	   LEFT JOIN legajos.entidad      e ON e.id_entidad=fmhc.id_entidad
	   LEFT JOIN (
		SELECT
		d2.id_funcionario,
		d2.datos_aux[1] as entidad,
		(
		   SELECT
		      to_char(max(fmhc.fecha_desde),'dd/MM/YYYY') as fecha_desde
		   FROM 
		      legajos.funcionarios_mh_comisionados fmhc
		      LEFT JOIN legajos.funcionarios          f ON f.id_funcionario=fmhc.id_funcionario
		   WHERE 
		      fmhc.id_entidad=d2.datos_aux[1]::int AND
		      fmhc.id_tipo_disposicion_dependencia IN(8,130,131) AND
		      --fmhc.id_tipo_disposicion_dependencia=8 AND
		      f.id_funcionario=d2.id_funcionario
		) as fecha_inicio,
		to_char(d2.datos_aux[2]::date,'dd/MM/YYYY') as fecha_hasta,
		e.descripcion_entidad 
		FROM
		(
			SELECT
			   f2.id_funcionario,
			   (
				SELECT
				   ('{'||fmhc.id_entidad||','||
				   fmhc.fecha_hasta||'}'
				   )::text[] AS informacion
				FROM 
				 legajos.funcionarios_mh_comisionados fmhc
				 LEFT JOIN legajos.funcionarios          f ON f.id_funcionario=fmhc.id_funcionario
				WHERE 
				  f.id_funcionario IN (f2.id_funcionario) AND
				  --fmhc.id_tipo_disposicion_dependencia=8 AND
			          fmhc.id_tipo_disposicion_dependencia IN(8,130,131) AND
				  extract(year from fmhc.fecha_hasta)=in_gestion
				  ORDER BY fmhc.fecha_hasta desc,  fmhc.fecha_desde desc limit 1
			   ) datos_aux
			FROM
			   legajos.funcionarios f2
			   LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f2.id_funcionario
			WHERE
			   f2.estado_funcionario AND
			   CASE 
			      WHEN '1'=in_id_administracion THEN f2.id_administracion IN (0,1)
			      WHEN '2'=in_id_administracion THEN f2.id_administracion IN (0,2)
			      WHEN '3'=in_id_administracion THEN f2.id_administracion IN (0,1,2)
			   END AND
			   saa.id_tipo_funcionario='PER'
		) d2
		LEFT JOIN legajos.entidad e ON e.id_entidad=d2.datos_aux[1]::int
		WHERE
		  d2.datos_aux[1] IS NOT NULL
	   ) datos_comi ON datos_comi.id_funcionario=f.id_funcionario
	   -- CATEGORIA
	   LEFT JOIN (
		SELECT 
		   fc2.id_funcionario,
		   max(fc2.id_funcionario_categoria) as id_funcionario_categoria
		FROM 
		   salarios.funcionarios_categorias fc2
		WHERE 
		   fc2.gestion = in_gestion AND
		   /*CASE 
	              WHEN '1'=in_id_administracion THEN fc2.id_administracion IN (0,1)
	              WHEN '2'=in_id_administracion THEN fc2.id_administracion IN (0,2)
	              WHEN '3'=in_id_administracion THEN fc2.id_administracion IN (0,1,2)
	           END AND*/
	           (in_id_mes BETWEEN  extract(MONTH from fc2.desde) AND extract(MONTH from fc2.hasta-1) OR fc2.hasta is null) 
		GROUP BY
		   fc2.id_funcionario
	   ) fc ON fc.id_funcionario=fmhc.id_funcionario
	WHERE
	   --fmhc.id_tipo_disposicion_dependencia=8 AND
	   fmhc.id_tipo_disposicion_dependencia IN(8,130,131) AND
	   /*CASE 
	      WHEN '1'=in_id_administracion THEN f.id_administracion IN (0,1)
	      WHEN '2'=in_id_administracion THEN f.id_administracion IN (0,2)
	      WHEN '3'=in_id_administracion THEN f.id_administracion IN (0,1,2)
	   END AND*/
	   (extract(year from fmhc.fecha_desde)=in_gestion OR extract(year from fmhc.fecha_hasta)=in_gestion) AND
	   (in_id_mes between extract(month from fmhc.fecha_desde) AND extract(month from fmhc.fecha_hasta))
	) fcmh
    ) com_d ON com_d.id_funcionario=x.id_funcionario
WHERE
   CASE WHEN (1=in_vacante OR 0=in_vacante) THEN TRUE ELSE FALSE END
   )
UNION ALL
(
-- VACANCIAS
SELECT
   in_gestion as anho, -- 1
   in_id_mes as mes, -- 2
   12 as nivel_entidad, -- 3
   6 as entidad, -- 4
   0 as depende, -- 5
   dc.linea::text as linea, -- 6
   0 as id_funcionario, -- 7
   999999999::text as cedula_funcionario, -- 8
   'VACANTE'::text as nombre_funcionario, -- 9
   'VACANTE'::text as apellido_funcionario, -- 10
   'PERMANENTE'::text as estado, -- 11
   111 as objeto_gasto, -- 12
   10 as ff, -- 13
   c.nombre_categoria as categoria, -- 14
   cim.importe::numeric(12,0) as presupuestado, -- 15
   0 as devengado, -- 16
   ''::text as concepto, -- 17
   ''::text as movimiento, -- 18
   ''::text as lugar, -- 19
   cag.nombre_cargo as cargo, -- 20
   ''::text as funcion, -- 21
   ''::text as horario, -- 22
   ''::text as discapacidad, -- 23
   ''::text as tipo_discapacidad, -- 24
   0 as ingreso, -- 25
   4 as tipo, -- 26
   (99+row_number() over (ORDER BY cim.importe::int desc))::int  as orden -- 27
FROM 
   salarios.planillas_salarios ps
   INNER JOIN salarios.detalle_planillas_vacantes  dpv ON dpv.id_planilla_salario=ps.id_planilla_salario AND 
						    CASE 
							WHEN '1'=in_id_administracion THEN dpv.id_administracion IN (0,1)
							WHEN '2'=in_id_administracion THEN dpv.id_administracion IN (0,2)
							WHEN '3'=in_id_administracion THEN dpv.id_administracion IN (0,1,2)
						     END
   LEFT JOIN salarios.detalles_categorias           dc ON dc.id_detalle_categoria=dpv.id_detalle_categoria
   LEFT JOIN salarios.categorias                     c ON c.id_categoria=dc.id_categoria
   LEFT JOIN salarios.cargos                       cag ON cag.id_cargo=c.id_cargo
   LEFT JOIN salarios.categoria_importe_mensual    cim ON cim.id_categoria=c.id_categoria AND cim.id_mes=1
   LEFT JOIN presupuesto.estructura_presupuestaria  ep ON ep.id_estructura_presupuestaria=dc.id_estructura_presupuestaria AND 
						     CASE 
							WHEN '1'=in_id_administracion THEN ep.id_administracion IN (0,1)
							WHEN '2'=in_id_administracion THEN ep.id_administracion IN (0,2)
							WHEN '3'=in_id_administracion THEN ep.id_administracion IN (0,1,2)
						     END
   LEFT JOIN legajos.oficinas                        b ON ep.cod_programa= b.nivel1 AND b.nivel2 = 0 AND 
						     b.nivel3 = 0 AND 
						     b.nivel4 = 0 AND 
						     b.nivel5 = 0 AND 
						     b.gestion=in_gestion AND 
						     CASE 
							WHEN '1'=in_id_administracion THEN b.id_administracion IN (0,1)
							WHEN '2'=in_id_administracion THEN b.id_administracion IN (0,2)
							WHEN '3'=in_id_administracion THEN b.id_administracion IN (0,1,2)
						     END
WHERE 
   CASE 
      WHEN '1'=in_id_administracion THEN ps.id_administracion IN (0,1)
      WHEN '2'=in_id_administracion THEN ps.id_administracion IN (0,2)
      WHEN '3'=in_id_administracion THEN ps.id_administracion IN (0,1,2)
   END AND
   ps.gestion=in_gestion AND
   ps.id_mes=in_id_mes AND
   ps.id_estado=1 AND      
   CASE WHEN (2=in_vacante OR 0=in_vacante) THEN TRUE ELSE FALSE END
--   x.id_funcionario IN (1782,2182,902,481)--,2981,466,1305,2987)
--   saa.id_tipo_funcionario='PER'
)
) sfp
LEFT JOIN (
	SELECT
	   t.id_funcionario,
	   sum(t.presupuestado)::numeric(12,0) as presupuestado_total
	FROM
	   salarios.sfp_informe_mensual_v2(in_id_administracion,in_tipo,in_id_mes,in_gestion,in_id_funcionario) t
	GROUP BY 
	   t.id_funcionario
) rem_total ON rem_total.id_funcionario=sfp.id_funcionario
LEFT JOIN legajos.vista_profesion_email_oficina_edificio vpeoe ON vpeoe.id_funcionario=sfp.id_funcionario 
ORDER BY
   sfp.cedula_funcionario::int,
   sfp.orden
;
END;
]]></definition>
</function>

<function name="total_remuneraciones_aporte_permanente"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="ene">
		<type name="numeric"/>
	</parameter>
	<parameter name="feb">
		<type name="numeric"/>
	</parameter>
	<parameter name="mar">
		<type name="numeric"/>
	</parameter>
	<parameter name="abr">
		<type name="numeric"/>
	</parameter>
	<parameter name="may">
		<type name="numeric"/>
	</parameter>
	<parameter name="jun">
		<type name="numeric"/>
	</parameter>
	<parameter name="jul">
		<type name="numeric"/>
	</parameter>
	<parameter name="ago">
		<type name="numeric"/>
	</parameter>
	<parameter name="sep">
		<type name="numeric"/>
	</parameter>
	<parameter name="oct">
		<type name="numeric"/>
	</parameter>
	<parameter name="nov">
		<type name="numeric"/>
	</parameter>
	<parameter name="dic">
		<type name="numeric"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="integer"/>
	</parameter>
	<parameter name="sub_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="aguinaldo">
		<type name="numeric"/>
	</parameter>
	<parameter name="total">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar los aportes realizados durante la gestión solicitada de los funcionarios permanentes/comisionados por mes y gestion
  * Creado    : 2014-10-23 10:19:00
  * Modificado: 2015-01-02 08:37:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administracion del proceso		
  *            in_gestion           ejercicio aplicado 
  * 	       in_id_funcionario    identifiacador de funcionarios separados por coma o ingresar '0' para todos los funcionarios	 
  * ------------  
  */
RETURN QUERY 
SELECT
*
FROM
(
-- SUELDO PRESUPUESTADO
SELECT
   *,
   (tot_sue.ene+tot_sue.feb+tot_sue.mar+tot_sue.abr+tot_sue.may+tot_sue.jun+tot_sue.jul+tot_sue.ago+tot_sue.sep+tot_sue.oct+tot_sue.nov+tot_sue.dic) as sub_total,
   0::numeric as aguinaldo,
   (tot_sue.ene+tot_sue.feb+tot_sue.mar+tot_sue.abr+tot_sue.may+tot_sue.jun+tot_sue.jul+tot_sue.ago+tot_sue.sep+tot_sue.oct+tot_sue.nov+tot_sue.dic) as total
FROM
(
SELECT 
   sueldo.id_funcionario,
   1::int as orden,
   'APORTE SUELDO'::text as concepto,
   -max(sueldo.ene) as ene,
   -max(sueldo.feb) as feb,
   -max(sueldo.mar) as mar,
   -max(sueldo.abr) as abr,
   -max(sueldo.may) as may,
   -max(sueldo.jun) as jun,
   -max(sueldo.jul) as jul,
   -max(sueldo.ago) as ago,
   -max(sueldo.sep) as sep,
   -max(sueldo.oct) as oct,
   -max(sueldo.nov) as nov,
   -max(sueldo.dic) as dic,
   111::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   dps.id_funcionario,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=1 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=2 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=3 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=4 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=5 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=6 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=7 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=8 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=9 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=10 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=11 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_total_aporte-dps.monto_multa) ELSE max(dps.monto_total_aporte-dps.monto_multa) END)::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=12 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario     
) sueldo
GROUP BY 
   sueldo.id_funcionario
) tot_sue

UNION

-- GASTO REPRESENTACION
SELECT
   *,
   (tot_gr.ene+tot_gr.feb+tot_gr.mar+tot_gr.abr+tot_gr.may+tot_gr.jun+tot_gr.jul+tot_gr.ago+tot_gr.sep+tot_gr.oct+tot_gr.nov+tot_gr.dic) as sub_total,
   0::numeric as aguinaldo,
   (tot_gr.ene+tot_gr.feb+tot_gr.mar+tot_gr.abr+tot_gr.may+tot_gr.jun+tot_gr.jul+tot_gr.ago+tot_gr.sep+tot_gr.oct+tot_gr.nov+tot_gr.dic) as total
FROM
(
SELECT 
   gr.id_funcionario,
   2::int as orden,
   'APORTE GASTO REPRESENTACION'::text as concepto,
   -max(gr.ene) as ene,
   -max(gr.feb) as feb,
   -max(gr.mar) as mar,
   -max(gr.abr) as abr,
   -max(gr.may) as may,
   -max(gr.jun) as jun,
   -max(gr.jul) as jul,
   -max(gr.ago) as ago,
   -max(gr.sep) as sep,
   -max(gr.oct) as oct,
   -max(gr.nov) as nov,
   -max(gr.dic) as dic,
   113::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   fs.id_funcionario,
   sum(pd.aporte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.aporte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle   pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.aporte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.aporte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.aporte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.aporte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.aporte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.aporte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.aporte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.aporte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.aporte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.aporte)::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario     
) gr
GROUP BY 
   gr.id_funcionario
) tot_gr

UNION
-- REMUNERACION EXTRAORDINARIA [RE]
SELECT
   *,
   (tot_re.ene+tot_re.feb+tot_re.mar+tot_re.abr+tot_re.may+tot_re.jun+tot_re.jul+tot_re.ago+tot_re.sep+tot_re.oct+tot_re.nov+tot_re.dic) as sub_total,
   0::numeric as aguinaldo,
   (tot_re.ene+tot_re.feb+tot_re.mar+tot_re.abr+tot_re.may+tot_re.jun+tot_re.jul+tot_re.ago+tot_re.sep+tot_re.oct+tot_re.nov+tot_re.dic) as total
FROM
(
SELECT 
   re.id_funcionario,
   3::int as orden,
   ('APORTE REM. EXT.')::text as concepto,
   -max(re.ene) as ene,
   -max(re.feb) as feb,
   -max(re.mar) as mar,
   -max(re.abr) as abr,
   -max(re.may) as may,
   -max(re.jun) as jun,
   -max(re.jul) as jul,
   -max(re.ago) as ago,
   -max(re.sep) as sep,
   -max(re.oct) as oct,
   -max(re.nov) as nov,
   -max(re.dic) as dic,
   123::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.aporte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.aporte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re   pd
   LEFT JOIN salarios.planillas_re  p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.aporte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.aporte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.aporte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.aporte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.aporte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.aporte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.aporte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.aporte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.aporte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.aporte)::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) re
GROUP BY 
   re.id_funcionario
) tot_re

UNION

-- REMUNERACION ADICIONAL [RA]
SELECT
   *,
   (tot_ra.ene+tot_ra.feb+tot_ra.mar+tot_ra.abr+tot_ra.may+tot_ra.jun+tot_ra.jul+tot_ra.ago+tot_ra.sep+tot_ra.oct+tot_ra.nov+tot_ra.dic) as sub_total,
   0::numeric as aguinaldo,
   (tot_ra.ene+tot_ra.feb+tot_ra.mar+tot_ra.abr+tot_ra.may+tot_ra.jun+tot_ra.jul+tot_ra.ago+tot_ra.sep+tot_ra.oct+tot_ra.nov+tot_ra.dic) as total
FROM
(
SELECT 
   ra.id_funcionario,
   4::int as orden,
   ('APORTE REM. ADI. (RA)')::text as concepto,
   -max(ra.ene) as ene,
   -max(ra.feb) as feb,
   -max(ra.mar) as mar,
   -max(ra.abr) as abr,
   -max(ra.may) as may,
   -max(ra.jun) as jun,
   -max(ra.jul) as jul,
   -max(ra.ago) as ago,
   -max(ra.sep) as sep,
   -max(ra.oct) as oct,
   -max(ra.nov) as nov,
   -max(ra.dic) as dic,
   125::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.aporte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.aporte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra   pd
   LEFT JOIN salarios.planillas_ra  p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.aporte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.aporte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.aporte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.aporte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.aporte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.aporte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.aporte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.aporte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.aporte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.aporte)::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) ra
GROUP BY 
   ra.id_funcionario
) tot_ra

UNION

-- SUBSIDIO FAMILIAR
SELECT
   *,
   (tot_subsidio.ene+tot_subsidio.feb+tot_subsidio.mar+tot_subsidio.abr+tot_subsidio.may+tot_subsidio.jun+tot_subsidio.jul+tot_subsidio.ago+tot_subsidio.sep+tot_subsidio.oct+tot_subsidio.nov+tot_subsidio.dic) as sub_total,
   0::numeric(12,0) as aguinaldo,
   (tot_subsidio.ene+tot_subsidio.feb+tot_subsidio.mar+tot_subsidio.abr+tot_subsidio.may+tot_subsidio.jun+tot_subsidio.jul+tot_subsidio.ago+tot_subsidio.sep+tot_subsidio.oct+tot_subsidio.nov+tot_subsidio.dic) as total
FROM
(
SELECT 
   sub.id_funcionario,
   5::int as orden,
   'APORTE SUBSIDIO FAMILIAR'::text as concepto,
   max(sub.ene) as ene,
   max(sub.feb) as feb,
   max(sub.mar) as mar,
   max(sub.abr) as abr,
   max(sub.may) as may,
   max(sub.jun) as jun,
   max(sub.jul) as jul,
   max(sub.ago) as ago,
   max(sub.sep) as sep,
   max(sub.oct) as oct,
   max(sub.nov) as nov,
   max(sub.dic) as dic,
   131::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   fs.id_funcionario,
   sum(pd.aporte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.aporte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios   pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.aporte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.aporte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.aporte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.aporte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.aporte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.aporte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.aporte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.aporte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.aporte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.aporte)::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario     
) sub
GROUP BY 
   sub.id_funcionario
) tot_subsidio

UNION
-- BONIFICACION Y GRATIFICACION
SELECT
   *,
   (tot_bonificacion.ene+tot_bonificacion.feb+tot_bonificacion.mar+tot_bonificacion.abr+tot_bonificacion.may+tot_bonificacion.jun+tot_bonificacion.jul+tot_bonificacion.ago+tot_bonificacion.sep+tot_bonificacion.oct+tot_bonificacion.nov+tot_bonificacion.dic) as sub_total,
   0::numeric as aguinaldo,
   (tot_bonificacion.ene+tot_bonificacion.feb+tot_bonificacion.mar+tot_bonificacion.abr+tot_bonificacion.may+tot_bonificacion.jun+tot_bonificacion.jul+tot_bonificacion.ago+tot_bonificacion.sep+tot_bonificacion.oct+tot_bonificacion.nov+tot_bonificacion.dic) as total
FROM
(
SELECT 
   bg.id_funcionario,
   6::int as orden,
   'APORTE BONIF. Y GRAT.'::text as concepto,
   -max(bg.ene) as ene,
   -max(bg.feb) as feb,
   -max(bg.mar) as mar,
   -max(bg.abr) as abr,
   -max(bg.may) as may,
   -max(bg.jun) as jun,
   -max(bg.jul) as jul,
   -max(bg.ago) as ago,
   -max(bg.sep) as sep,
   -max(bg.oct) as oct,
   -max(bg.nov) as nov,
   -max(bg.dic) as dic,
   133::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   fb.id_funcionario,
   sum(pd.aporte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.aporte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones   pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.aporte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.aporte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.aporte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.aporte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.aporte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.aporte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.aporte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.aporte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.aporte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto 
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.aporte)::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario     
) bg
GROUP BY 
   bg.id_funcionario
) tot_bonificacion

UNION

-- BONIFICACION POR GRADO ACADEMICO
SELECT
   *,
   (tot_bga.ene+tot_bga.feb+tot_bga.mar+tot_bga.abr+tot_bga.may+tot_bga.jun+tot_bga.jul+tot_bga.ago+tot_bga.sep+tot_bga.oct+tot_bga.nov+tot_bga.dic) as sub_total,
   0::numeric as aguinaldo,
   (tot_bga.ene+tot_bga.feb+tot_bga.mar+tot_bga.abr+tot_bga.may+tot_bga.jun+tot_bga.jul+tot_bga.ago+tot_bga.sep+tot_bga.oct+tot_bga.nov+tot_bga.dic) as total
FROM
(
SELECT 
   bga.id_funcionario,
   7::int as orden,
   'APORTE BONIF. GRADO ACAD.'::text as concepto,
   -max(bga.ene) as ene,
   -max(bga.feb) as feb,
   -max(bga.mar) as mar,
   -max(bga.abr) as abr,
   -max(bga.may) as may,
   -max(bga.jun) as jun,
   -max(bga.jul) as jul,
   -max(bga.ago) as ago,
   -max(bga.sep) as sep,
   -max(bga.oct) as oct,
   -max(bga.nov) as nov,
   -max(bga.dic) as dic,
   133::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   fp.id_funcionario,
   sum(pd.importe_aporte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_aporte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales   pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_aporte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_aporte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_aporte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_aporte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_aporte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_aporte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_aporte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_aporte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_aporte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_aporte)::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario     
) bga
GROUP BY 
   bga.id_funcionario
) tot_bga

UNION
-- BONIFICACION Y GRATIFICACION POR ANTIGUEDAD
SELECT
   *,
   (tot_ant.ene+tot_ant.feb+tot_ant.mar+tot_ant.abr+tot_ant.may+tot_ant.jun+tot_ant.jul+tot_ant.ago+tot_ant.sep+tot_ant.oct+tot_ant.nov+tot_ant.dic) as ant_total,
   0::numeric as aguinaldo,
   (tot_ant.ene+tot_ant.feb+tot_ant.mar+tot_ant.abr+tot_ant.may+tot_ant.jun+tot_ant.jul+tot_ant.ago+tot_ant.sep+tot_ant.oct+tot_ant.nov+tot_ant.dic) as total
FROM
(
SELECT 
   ant.id_funcionario,
   8::int as orden,
   'APORTE BONIF. Y GRAT. ANTIGUEDAD'::text as concepto,
   -max(ant.ene) as ene,
   -max(ant.feb) as feb,
   -max(ant.mar) as mar,
   -max(ant.abr) as abr,
   -max(ant.may) as may,
   -max(ant.jun) as jun,
   -max(ant.jul) as jul,
   -max(ant.ago) as ago,
   -max(ant.sep) as sep,
   -max(ant.oct) as oct,
   -max(ant.nov) as nov,
   -max(ant.dic) as dic,
   133::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.importe_aporte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_aporte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad   pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_aporte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_aporte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_aporte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_aporte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_aporte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_aporte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_aporte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_aporte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_aporte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_aporte)::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) ant
GROUP BY 
   ant.id_funcionario
) tot_ant

UNION

-- GRATIFICACION OCASIONAL
SELECT
   *,
   (tot_go.ene+tot_go.feb+tot_go.mar+tot_go.abr+tot_go.may+tot_go.jun+tot_go.jul+tot_go.ago+tot_go.sep+tot_go.oct+tot_go.nov+tot_go.dic) as sub_total,
   0::numeric as aguinaldo,
   (tot_go.ene+tot_go.feb+tot_go.mar+tot_go.abr+tot_go.may+tot_go.jun+tot_go.jul+tot_go.ago+tot_go.sep+tot_go.oct+tot_go.nov+tot_go.dic) as total
FROM
(
SELECT 
   go.id_funcionario,
   9::int as orden,
   'APORTE GRATIFICACION OCASIONAL'::text as concepto,
   -max(go.ene) as ene,
   -max(go.feb) as feb,
   -max(go.mar) as mar,
   -max(go.abr) as abr,
   -max(go.may) as may,
   -max(go.jun) as jun,
   -max(go.jul) as jul,
   -max(go.ago) as ago,
   -max(go.sep) as sep,
   -max(go.oct) as oct,
   -max(go.nov) as nov,
   -max(go.dic) as dic,
   133::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.importe_aporte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_aporte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional   pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_aporte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_aporte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_aporte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_aporte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_aporte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_aporte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_aporte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_aporte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_aporte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_aporte)::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) go
GROUP BY 
   go.id_funcionario
) tot_go

UNION

-- GRATIFICACION ESPECIAL
SELECT
   *,
   (tot_ge.ene+tot_ge.feb+tot_ge.mar+tot_ge.abr+tot_ge.may+tot_ge.jun+tot_ge.jul+tot_ge.ago+tot_ge.sep+tot_ge.oct+tot_ge.nov+tot_ge.dic) as sub_total,
   0::numeric as aguinaldo,
   (tot_ge.ene+tot_ge.feb+tot_ge.mar+tot_ge.abr+tot_ge.may+tot_ge.jun+tot_ge.jul+tot_ge.ago+tot_ge.sep+tot_ge.oct+tot_ge.nov+tot_ge.dic) as total
FROM
(
SELECT 
   ge.id_funcionario,
   10::int as orden,
   'APORTE GRATIFICACION ESPECIAL'::text as concepto,
   -max(ge.ene) as ene,
   -max(ge.feb) as feb,
   -max(ge.mar) as mar,
   -max(ge.abr) as abr,
   -max(ge.may) as may,
   -max(ge.jun) as jun,
   -max(ge.jul) as jul,
   -max(ge.ago) as ago,
   -max(ge.sep) as sep,
   -max(ge.oct) as oct,
   -max(ge.nov) as nov,
   -max(ge.dic) as dic,
   137::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.importe_aporte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_aporte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial   pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_aporte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_aporte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_aporte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_aporte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_aporte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_aporte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_aporte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_aporte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_aporte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_aporte)::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) ge
GROUP BY 
   ge.id_funcionario
) tot_ge

UNION

-- DIFERENCIA SALARIAL
SELECT
   *,
   (tot_ds.ene+tot_ds.feb+tot_ds.mar+tot_ds.abr+tot_ds.may+tot_ds.jun+tot_ds.jul+tot_ds.ago+tot_ds.sep+tot_ds.oct+tot_ds.nov+tot_ds.dic) as sub_total,
   0::numeric as aguinaldo,
   (tot_ds.ene+tot_ds.feb+tot_ds.mar+tot_ds.abr+tot_ds.may+tot_ds.jun+tot_ds.jul+tot_ds.ago+tot_ds.sep+tot_ds.oct+tot_ds.nov+tot_ds.dic) as total
FROM
(
SELECT 
   ds.id_funcionario,
   11::int as orden,
   'APORTE DIFERENCIA SALARIAL'::text as concepto,
   -max(ds.ene) as ene,
   -max(ds.feb) as feb,
   -max(ds.mar) as mar,
   -max(ds.abr) as abr,
   -max(ds.may) as may,
   -max(ds.jun) as jun,
   -max(ds.jul) as jul,
   -max(ds.ago) as ago,
   -max(ds.sep) as sep,
   -max(ds.oct) as oct,
   -max(ds.nov) as nov,
   -max(ds.dic) as dic,
   199::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.importe_monto_aporte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_monto_aporte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle   pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_monto_aporte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_monto_aporte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_monto_aporte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_monto_aporte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_monto_aporte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_monto_aporte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_monto_aporte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_monto_aporte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_monto_aporte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_monto_aporte)::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=12 AND
   p.gestion=in_gestion
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) ds
GROUP BY 
   ds.id_funcionario
) tot_ds

UNION

-- OTROS PAGOS
SELECT
   *,
   (tot_og.ene+tot_og.feb+tot_og.mar+tot_og.abr+tot_og.may+tot_og.jun+tot_og.jul+tot_og.ago+tot_og.sep+tot_og.oct+tot_og.nov+tot_og.dic) as sub_total,
   0::numeric as aguinaldo,
   (tot_og.ene+tot_og.feb+tot_og.mar+tot_og.abr+tot_og.may+tot_og.jun+tot_og.jul+tot_og.ago+tot_og.sep+tot_og.oct+tot_og.nov+tot_og.dic) as total
FROM
(
SELECT 
   og.id_funcionario,
   12::int as orden,
   'APORTE OTROS PAGOS'::text as concepto,
   -max(og.ene) as ene,
   -max(og.feb) as feb,
   -max(og.mar) as mar,
   -max(og.abr) as abr,
   -max(og.may) as may,
   -max(og.jun) as jun,
   -max(og.jul) as jul,
   -max(og.ago) as ago,
   -max(og.sep) as sep,
   -max(og.oct) as oct,
   -max(og.nov) as nov,
   -max(og.dic) as dic,
   199::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.importe_monto_aporte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_monto_aporte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle   pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_monto_aporte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_monto_aporte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_monto_aporte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_monto_aporte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_monto_aporte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_monto_aporte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_monto_aporte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_monto_aporte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_monto_aporte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_monto_aporte)::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=12 AND
   p.gestion=in_gestion
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) og
GROUP BY 
   og.id_funcionario
) tot_og

UNION

-- OTRA TRANSFERENCIAS CORRIENTES
SELECT
   *,
   (tot_otc.ene+tot_otc.feb+tot_otc.mar+tot_otc.abr+tot_otc.may+tot_otc.jun+tot_otc.jul+tot_otc.ago+tot_otc.sep+tot_otc.oct+tot_otc.nov+tot_otc.dic) as sub_total,
   0::numeric(12,0) as aguinaldo,
   (tot_otc.ene+tot_otc.feb+tot_otc.mar+tot_otc.abr+tot_otc.may+tot_otc.jun+tot_otc.jul+tot_otc.ago+tot_otc.sep+tot_otc.oct+tot_otc.nov+tot_otc.dic) as total
FROM
(
SELECT 
   otc.id_funcionario,
   13::int as orden,
   'APORTE OTRAS TRANSF. CTES.'::text as concepto,
   -max(otc.ene) as ene,
   -max(otc.feb) as feb,
   -max(otc.mar) as mar,
   -max(otc.abr) as abr,
   -max(otc.may) as may,
   -max(otc.jun) as jun,
   -max(otc.jul) as jul,
   -max(otc.ago) as ago,
   -max(otc.sep) as sep,
   -max(otc.oct) as oct,
   -max(otc.nov) as nov,
   -max(otc.dic) as dic,
   849::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles   pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) otc
GROUP BY 
   otc.id_funcionario
) tot_otc

) remuneracion;

END;
]]></definition>
</function>

<function name="total_remuneraciones_percibido_permanente"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="ene">
		<type name="numeric"/>
	</parameter>
	<parameter name="feb">
		<type name="numeric"/>
	</parameter>
	<parameter name="mar">
		<type name="numeric"/>
	</parameter>
	<parameter name="abr">
		<type name="numeric"/>
	</parameter>
	<parameter name="may">
		<type name="numeric"/>
	</parameter>
	<parameter name="jun">
		<type name="numeric"/>
	</parameter>
	<parameter name="jul">
		<type name="numeric"/>
	</parameter>
	<parameter name="ago">
		<type name="numeric"/>
	</parameter>
	<parameter name="sep">
		<type name="numeric"/>
	</parameter>
	<parameter name="oct">
		<type name="numeric"/>
	</parameter>
	<parameter name="nov">
		<type name="numeric"/>
	</parameter>
	<parameter name="dic">
		<type name="numeric"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="integer"/>
	</parameter>
	<parameter name="sub_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="aguinaldo">
		<type name="numeric"/>
	</parameter>
	<parameter name="total">
		<type name="numeric"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar los pagos realizados durante la gestión solicitada de los funcionarios permanentes/comisionados por mes y gestion
  * Creado    : 2014-10-23 07:40:00
  * Modificado: 2014-10-28 17:56:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administracion del proceso		
  *            in_gestion           ejercicio aplicado 
  * 	       in_id_funcionario    identifiacador de funcionarios separados por coma o ingresar '0' para todos los funcionarios	 
  * ------------  
  */
RETURN QUERY 
SELECT
*
FROM
(
-- SUELDO PRESUPUESTADO
SELECT
   *,
   (tot_sue.ene+tot_sue.feb+tot_sue.mar+tot_sue.abr+tot_sue.may+tot_sue.jun+tot_sue.jul+tot_sue.ago+tot_sue.sep+tot_sue.oct+tot_sue.nov+tot_sue.dic) as sub_total,
   ((tot_sue.ene+tot_sue.feb+tot_sue.mar+tot_sue.abr+tot_sue.may+tot_sue.jun+tot_sue.jul+tot_sue.ago+tot_sue.sep+tot_sue.oct+tot_sue.nov+tot_sue.dic)/12)::numeric(12,0) as aguinaldo,
   (tot_sue.ene+tot_sue.feb+tot_sue.mar+tot_sue.abr+tot_sue.may+tot_sue.jun+tot_sue.jul+tot_sue.ago+tot_sue.sep+tot_sue.oct+tot_sue.nov+tot_sue.dic)+
   ((tot_sue.ene+tot_sue.feb+tot_sue.mar+tot_sue.abr+tot_sue.may+tot_sue.jun+tot_sue.jul+tot_sue.ago+tot_sue.sep+tot_sue.oct+tot_sue.nov+tot_sue.dic)/12)::numeric(12,0) as total
FROM
(
SELECT 
   sueldo.id_funcionario,
   1::int as orden,
   'SUELDO DEVENGADO'::text as concepto,
   max(sueldo.ene) as ene,
   max(sueldo.feb) as feb,
   max(sueldo.mar) as mar,
   max(sueldo.abr) as abr,
   max(sueldo.may) as may,
   max(sueldo.jun) as jun,
   max(sueldo.jul) as jul,
   max(sueldo.ago) as ago,
   max(sueldo.sep) as sep,
   max(sueldo.oct) as oct,
   max(sueldo.nov) as nov,
   max(sueldo.dic) as dic,
   111::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   dps.id_funcionario,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=1 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=2 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=3 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=4 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=5 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=6 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=7 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=8 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=9 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=10 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=11 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   dps.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   (CASE WHEN count(*)>1 THEN sum(dps.monto_devengado) ELSE max(dps.monto_devengado) END)::numeric(12,0) as dic,
   111::int as objeto_gasto
FROM
   salarios.detalles_planillas_salarios dps
   LEFT JOIN salarios.planillas_salarios           ps ON ps.id_planilla_salario=dps.id_planilla_salario
WHERE
   ps.id_estado=1 AND
   ps.id_administracion=in_id_administracion AND
   ps.id_mes=12 AND
   ps.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN dps.id_funcionario>0 ELSE dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   dps.id_funcionario     
) sueldo
GROUP BY 
   sueldo.id_funcionario
) tot_sue

UNION

-- GASTO REPRESENTACION
SELECT
   *,
   (tot_gr.ene+tot_gr.feb+tot_gr.mar+tot_gr.abr+tot_gr.may+tot_gr.jun+tot_gr.jul+tot_gr.ago+tot_gr.sep+tot_gr.oct+tot_gr.nov+tot_gr.dic) as sub_total,
   ((tot_gr.ene+tot_gr.feb+tot_gr.mar+tot_gr.abr+tot_gr.may+tot_gr.jun+tot_gr.jul+tot_gr.ago+tot_gr.sep+tot_gr.oct+tot_gr.nov+tot_gr.dic)/12)::numeric(12,0) as aguinaldo,
   (tot_gr.ene+tot_gr.feb+tot_gr.mar+tot_gr.abr+tot_gr.may+tot_gr.jun+tot_gr.jul+tot_gr.ago+tot_gr.sep+tot_gr.oct+tot_gr.nov+tot_gr.dic)+
   ((tot_gr.ene+tot_gr.feb+tot_gr.mar+tot_gr.abr+tot_gr.may+tot_gr.jun+tot_gr.jul+tot_gr.ago+tot_gr.sep+tot_gr.oct+tot_gr.nov+tot_gr.dic)/12)::numeric(12,0) as total
FROM
(
SELECT 
   gr.id_funcionario,
   2::int as orden,
   'GASTO REPRESENTACION'::text as concepto,
   max(gr.ene) as ene,
   max(gr.feb) as feb,
   max(gr.mar) as mar,
   max(gr.abr) as abr,
   max(gr.may) as may,
   max(gr.jun) as jun,
   max(gr.jul) as jul,
   max(gr.ago) as ago,
   max(gr.sep) as sep,
   max(gr.oct) as oct,
   max(gr.nov) as nov,
   max(gr.dic) as dic,
   113::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   fs.id_funcionario,
   sum(pd.devengado_parcial)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.devengado_parcial)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle   pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.devengado_parcial)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.devengado_parcial)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.devengado_parcial)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.devengado_parcial)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.devengado_parcial)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.devengado_parcial)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.devengado_parcial)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.devengado_parcial)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.devengado_parcial)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.devengado_parcial)::numeric(12,0) as dic,
   113::int as objeto_gasto
FROM
   salarios.planilla_gasto_representacion_detalle pd
   LEFT JOIN salarios.planilla_gasto_representacion           p ON p.id_planilla_gasto_representacion=pd.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones          fs ON fs.id_funcionario_representacion=pd.id_funcionario_representacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario     
) gr
GROUP BY 
   gr.id_funcionario
) tot_gr

UNION
-- REMUNERACION EXTRAORDINARIA [RE]
SELECT
   *,
   (tot_re.ene+tot_re.feb+tot_re.mar+tot_re.abr+tot_re.may+tot_re.jun+tot_re.jul+tot_re.ago+tot_re.sep+tot_re.oct+tot_re.nov+tot_re.dic) as sub_total,
   ((tot_re.ene+tot_re.feb+tot_re.mar+tot_re.abr+tot_re.may+tot_re.jun+tot_re.jul+tot_re.ago+tot_re.sep+tot_re.oct+tot_re.nov+tot_re.dic)/12)::numeric(12,0) as aguinaldo,
   (tot_re.ene+tot_re.feb+tot_re.mar+tot_re.abr+tot_re.may+tot_re.jun+tot_re.jul+tot_re.ago+tot_re.sep+tot_re.oct+tot_re.nov+tot_re.dic)+
   ((tot_re.ene+tot_re.feb+tot_re.mar+tot_re.abr+tot_re.may+tot_re.jun+tot_re.jul+tot_re.ago+tot_re.sep+tot_re.oct+tot_re.nov+tot_re.dic)/12)::numeric(12,0) as total
FROM
(
SELECT 
   re.id_funcionario,
   3::int as orden,
   ('REM. EXT. (RE) [PROM. '||(sum(re.hs)/count(*))::numeric(12,1)||' HS.]')::text as concepto,
   max(re.ene) as ene,
   max(re.feb) as feb,
   max(re.mar) as mar,
   max(re.abr) as abr,
   max(re.may) as may,
   max(re.jun) as jun,
   max(re.jul) as jul,
   max(re.ago) as ago,
   max(re.sep) as sep,
   max(re.oct) as oct,
   max(re.nov) as nov,
   max(re.dic) as dic,
   123::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.monto)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.monto)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re   pd
   LEFT JOIN salarios.planillas_re  p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.monto)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.monto)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.monto)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.monto)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.monto)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.monto)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.monto)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.monto)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.monto)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.monto)::numeric(12,0) as dic,
   123::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_re pd
   LEFT JOIN salarios.planillas_re           p ON p.id_planilla_re=pd.id_planilla_re
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) re
GROUP BY 
   re.id_funcionario
) tot_re

UNION

-- REMUNERACION ADICIONAL [RA]
SELECT
   *,
   (tot_ra.ene+tot_ra.feb+tot_ra.mar+tot_ra.abr+tot_ra.may+tot_ra.jun+tot_ra.jul+tot_ra.ago+tot_ra.sep+tot_ra.oct+tot_ra.nov+tot_ra.dic) as sub_total,
   ((tot_ra.ene+tot_ra.feb+tot_ra.mar+tot_ra.abr+tot_ra.may+tot_ra.jun+tot_ra.jul+tot_ra.ago+tot_ra.sep+tot_ra.oct+tot_ra.nov+tot_ra.dic)/12)::numeric(12,0) as aguinaldo,
   (tot_ra.ene+tot_ra.feb+tot_ra.mar+tot_ra.abr+tot_ra.may+tot_ra.jun+tot_ra.jul+tot_ra.ago+tot_ra.sep+tot_ra.oct+tot_ra.nov+tot_ra.dic)+
   ((tot_ra.ene+tot_ra.feb+tot_ra.mar+tot_ra.abr+tot_ra.may+tot_ra.jun+tot_ra.jul+tot_ra.ago+tot_ra.sep+tot_ra.oct+tot_ra.nov+tot_ra.dic)/12)::numeric(12,0) as total
FROM
(
SELECT 
   ra.id_funcionario,
   4::int as orden,
   ('REM. ADI. (RA) [PROM. '||(sum(ra.hs)/count(*))::numeric(12,1)||' HS.]')::text as concepto,
   max(ra.ene) as ene,
   max(ra.feb) as feb,
   max(ra.mar) as mar,
   max(ra.abr) as abr,
   max(ra.may) as may,
   max(ra.jun) as jun,
   max(ra.jul) as jul,
   max(ra.ago) as ago,
   max(ra.sep) as sep,
   max(ra.oct) as oct,
   max(ra.nov) as nov,
   max(ra.dic) as dic,
   125::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.monto)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.monto)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra   pd
   LEFT JOIN salarios.planillas_ra  p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.monto)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.monto)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.monto)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.monto)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.monto)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.monto)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.monto)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.monto)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.monto)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.monto)::numeric(12,0) as dic,
   125::int as objeto_gasto,
   sum(pd.cantidad_horas)::numeric(12,0) as hs
FROM
   salarios.detalles_planillas_ra pd
   LEFT JOIN salarios.planillas_ra           p ON p.id_planilla_ra=pd.id_planilla_ra
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) ra
GROUP BY 
   ra.id_funcionario
) tot_ra

UNION

-- SUBSIDIO FAMILIAR
SELECT
   *,
   (tot_subsidio.ene+tot_subsidio.feb+tot_subsidio.mar+tot_subsidio.abr+tot_subsidio.may+tot_subsidio.jun+tot_subsidio.jul+tot_subsidio.ago+tot_subsidio.sep+tot_subsidio.oct+tot_subsidio.nov+tot_subsidio.dic) as sub_total,
   0::numeric(12,0) as aguinaldo,
   (tot_subsidio.ene+tot_subsidio.feb+tot_subsidio.mar+tot_subsidio.abr+tot_subsidio.may+tot_subsidio.jun+tot_subsidio.jul+tot_subsidio.ago+tot_subsidio.sep+tot_subsidio.oct+tot_subsidio.nov+tot_subsidio.dic) as total
FROM
(
SELECT 
   sub.id_funcionario,
   5::int as orden,
   'SUBSIDIO FAMILIAR'::text as concepto,
   max(sub.ene) as ene,
   max(sub.feb) as feb,
   max(sub.mar) as mar,
   max(sub.abr) as abr,
   max(sub.may) as may,
   max(sub.jun) as jun,
   max(sub.jul) as jul,
   max(sub.ago) as ago,
   max(sub.sep) as sep,
   max(sub.oct) as oct,
   max(sub.nov) as nov,
   max(sub.dic) as dic,
   131::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   fs.id_funcionario,
   sum(pd.importe_monto)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_monto)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios   pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_monto)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_monto)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_monto)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_monto)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_monto)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_monto)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_monto)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_monto)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_monto)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   fs.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_monto)::numeric(12,0) as dic,
   131::int as objeto_gasto
FROM
   salarios.detalles_planillas_subsidios pd
   LEFT JOIN salarios.planillas_subsidios           p ON p.id_planilla_subsidio=pd.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios       fs ON fs.id_funcionario_subsidio=pd.id_funcionario_subsidio
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fs.id_funcionario>0 ELSE fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fs.id_funcionario     
) sub
GROUP BY 
   sub.id_funcionario
) tot_subsidio

UNION
-- BONIFICACION Y GRATIFICACION
SELECT
   *,
   (tot_bonificacion.ene+tot_bonificacion.feb+tot_bonificacion.mar+tot_bonificacion.abr+tot_bonificacion.may+tot_bonificacion.jun+tot_bonificacion.jul+tot_bonificacion.ago+tot_bonificacion.sep+tot_bonificacion.oct+tot_bonificacion.nov+tot_bonificacion.dic) as sub_total,
   ((tot_bonificacion.ene+tot_bonificacion.feb+tot_bonificacion.mar+tot_bonificacion.abr+tot_bonificacion.may+tot_bonificacion.jun+tot_bonificacion.jul+tot_bonificacion.ago+tot_bonificacion.sep+tot_bonificacion.oct+tot_bonificacion.nov+tot_bonificacion.dic)/12)::numeric(12,0) as aguinaldo,
   (tot_bonificacion.ene+tot_bonificacion.feb+tot_bonificacion.mar+tot_bonificacion.abr+tot_bonificacion.may+tot_bonificacion.jun+tot_bonificacion.jul+tot_bonificacion.ago+tot_bonificacion.sep+tot_bonificacion.oct+tot_bonificacion.nov+tot_bonificacion.dic)+
   ((tot_bonificacion.ene+tot_bonificacion.feb+tot_bonificacion.mar+tot_bonificacion.abr+tot_bonificacion.may+tot_bonificacion.jun+tot_bonificacion.jul+tot_bonificacion.ago+tot_bonificacion.sep+tot_bonificacion.oct+tot_bonificacion.nov+tot_bonificacion.dic)/12)::numeric(12,0) as total
FROM
(
SELECT 
   bg.id_funcionario,
   6::int as orden,
   'BONIF. Y GRAT.'::text as concepto,
   max(bg.ene) as ene,
   max(bg.feb) as feb,
   max(bg.mar) as mar,
   max(bg.abr) as abr,
   max(bg.may) as may,
   max(bg.jun) as jun,
   max(bg.jul) as jul,
   max(bg.ago) as ago,
   max(bg.sep) as sep,
   max(bg.oct) as oct,
   max(bg.nov) as nov,
   max(bg.dic) as dic,
   133::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   fb.id_funcionario,
   sum(pd.monto_total)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.monto_total)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones   pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.monto_total)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.monto_total)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.monto_total)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.monto_total)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.monto_total)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.monto_total)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.monto_total)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.monto_total)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.monto_total)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   fb.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.monto_total)::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalles_planillas_bonificaciones pd
   LEFT JOIN salarios.planillas_bonificaciones           p ON p.id_planilla_bonificacion=pd.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones       fb ON fb.id_funcionario_bonificacion=pd.id_funcionario_bonificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fb.id_funcionario>0 ELSE fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fb.id_funcionario     
) bg
GROUP BY 
   bg.id_funcionario
) tot_bonificacion

UNION

-- BONIFICACION POR GRADO ACADEMICO
SELECT
   *,
   (tot_bga.ene+tot_bga.feb+tot_bga.mar+tot_bga.abr+tot_bga.may+tot_bga.jun+tot_bga.jul+tot_bga.ago+tot_bga.sep+tot_bga.oct+tot_bga.nov+tot_bga.dic) as sub_total,
   ((tot_bga.ene+tot_bga.feb+tot_bga.mar+tot_bga.abr+tot_bga.may+tot_bga.jun+tot_bga.jul+tot_bga.ago+tot_bga.sep+tot_bga.oct+tot_bga.nov+tot_bga.dic)/12)::numeric(12,0) as aguinaldo,
   (tot_bga.ene+tot_bga.feb+tot_bga.mar+tot_bga.abr+tot_bga.may+tot_bga.jun+tot_bga.jul+tot_bga.ago+tot_bga.sep+tot_bga.oct+tot_bga.nov+tot_bga.dic)+
   ((tot_bga.ene+tot_bga.feb+tot_bga.mar+tot_bga.abr+tot_bga.may+tot_bga.jun+tot_bga.jul+tot_bga.ago+tot_bga.sep+tot_bga.oct+tot_bga.nov+tot_bga.dic)/12)::numeric(12,0) as total
FROM
(
SELECT 
   bga.id_funcionario,
   7::int as orden,
   'BONIF. GRADO ACAD.'::text as concepto,
   max(bga.ene) as ene,
   max(bga.feb) as feb,
   max(bga.mar) as mar,
   max(bga.abr) as abr,
   max(bga.may) as may,
   max(bga.jun) as jun,
   max(bga.jul) as jul,
   max(bga.ago) as ago,
   max(bga.sep) as sep,
   max(bga.oct) as oct,
   max(bga.nov) as nov,
   max(bga.dic) as dic,
   133::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   fp.id_funcionario,
   sum(pd.importe_profesional)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_profesional)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales   pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_profesional)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_profesional)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_profesional)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_profesional)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_profesional)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_profesional)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_profesional)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_profesional)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_profesional)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   fp.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_profesional)::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planillas_profesionales pd
   LEFT JOIN salarios.planilla_profesionales           p ON p.id_planilla_profesional=pd.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales      fp ON fp.id_funcionario_profesional=pd.id_funcionario_profesional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN fp.id_funcionario>0 ELSE fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   fp.id_funcionario     
) bga
GROUP BY 
   bga.id_funcionario
) tot_bga

UNION
-- BONIFICACION Y GRATIFICACION POR ANTIGUEDAD
SELECT
   *,
   (tot_ant.ene+tot_ant.feb+tot_ant.mar+tot_ant.abr+tot_ant.may+tot_ant.jun+tot_ant.jul+tot_ant.ago+tot_ant.sep+tot_ant.oct+tot_ant.nov+tot_ant.dic) as ant_total,
   ((tot_ant.ene+tot_ant.feb+tot_ant.mar+tot_ant.abr+tot_ant.may+tot_ant.jun+tot_ant.jul+tot_ant.ago+tot_ant.sep+tot_ant.oct+tot_ant.nov+tot_ant.dic)/12)::numeric(12,0) as aguinaldo,
   (tot_ant.ene+tot_ant.feb+tot_ant.mar+tot_ant.abr+tot_ant.may+tot_ant.jun+tot_ant.jul+tot_ant.ago+tot_ant.sep+tot_ant.oct+tot_ant.nov+tot_ant.dic)+
   ((tot_ant.ene+tot_ant.feb+tot_ant.mar+tot_ant.abr+tot_ant.may+tot_ant.jun+tot_ant.jul+tot_ant.ago+tot_ant.sep+tot_ant.oct+tot_ant.nov+tot_ant.dic)/12)::numeric(12,0) as total
FROM
(
SELECT 
   ant.id_funcionario,
   8::int as orden,
   'BONIF. Y GRAT. ANTIGUEDAD'::text as concepto,
   max(ant.ene) as ene,
   max(ant.feb) as feb,
   max(ant.mar) as mar,
   max(ant.abr) as abr,
   max(ant.may) as may,
   max(ant.jun) as jun,
   max(ant.jul) as jul,
   max(ant.ago) as ago,
   max(ant.sep) as sep,
   max(ant.oct) as oct,
   max(ant.nov) as nov,
   max(ant.dic) as dic,
   133::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.importe_antiguedad)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_antiguedad)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad   pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_antiguedad)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_antiguedad)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_antiguedad)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_antiguedad)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_antiguedad)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_antiguedad)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_antiguedad)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_antiguedad)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_antiguedad)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_antiguedad)::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_antiguedad pd
   LEFT JOIN salarios.planillas_antiguedad           p ON p.id_planilla_antiguedad=pd.id_planilla_antiguedad
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) ant
GROUP BY 
   ant.id_funcionario
) tot_ant

UNION

-- GRATIFICACION OCASIONAL
SELECT
   *,
   (tot_go.ene+tot_go.feb+tot_go.mar+tot_go.abr+tot_go.may+tot_go.jun+tot_go.jul+tot_go.ago+tot_go.sep+tot_go.oct+tot_go.nov+tot_go.dic) as sub_total,
   ((tot_go.ene+tot_go.feb+tot_go.mar+tot_go.abr+tot_go.may+tot_go.jun+tot_go.jul+tot_go.ago+tot_go.sep+tot_go.oct+tot_go.nov+tot_go.dic)/12)::numeric(12,0) as aguinaldo,
   (tot_go.ene+tot_go.feb+tot_go.mar+tot_go.abr+tot_go.may+tot_go.jun+tot_go.jul+tot_go.ago+tot_go.sep+tot_go.oct+tot_go.nov+tot_go.dic)+
   ((tot_go.ene+tot_go.feb+tot_go.mar+tot_go.abr+tot_go.may+tot_go.jun+tot_go.jul+tot_go.ago+tot_go.sep+tot_go.oct+tot_go.nov+tot_go.dic)/12)::numeric(12,0) as total
FROM
(
SELECT 
   go.id_funcionario,
   9::int as orden,
   'GRATIFICACION OCASIONAL'::text as concepto,
   max(go.ene) as ene,
   max(go.feb) as feb,
   max(go.mar) as mar,
   max(go.abr) as abr,
   max(go.may) as may,
   max(go.jun) as jun,
   max(go.jul) as jul,
   max(go.ago) as ago,
   max(go.sep) as sep,
   max(go.oct) as oct,
   max(go.nov) as nov,
   max(go.dic) as dic,
   133::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.importe_gratificacion)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_gratificacion)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional   pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_gratificacion)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_gratificacion)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_gratificacion)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_gratificacion)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_gratificacion)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_gratificacion)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_gratificacion)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_gratificacion)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_gratificacion)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_gratificacion)::numeric(12,0) as dic,
   133::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_ocacional pd
   LEFT JOIN salarios.planilla_gratificacion_ocacional           p ON p.id_planilla_gratificacion_ocacional=pd.id_planilla_gratificacion_ocacional
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) go
GROUP BY 
   go.id_funcionario
) tot_go

UNION

-- GRATIFICACION ESPECIAL
SELECT
   *,
   (tot_ge.ene+tot_ge.feb+tot_ge.mar+tot_ge.abr+tot_ge.may+tot_ge.jun+tot_ge.jul+tot_ge.ago+tot_ge.sep+tot_ge.oct+tot_ge.nov+tot_ge.dic) as sub_total,
   ((tot_ge.ene+tot_ge.feb+tot_ge.mar+tot_ge.abr+tot_ge.may+tot_ge.jun+tot_ge.jul+tot_ge.ago+tot_ge.sep+tot_ge.oct+tot_ge.nov+tot_ge.dic)/12)::numeric(12,0) as aguinaldo,
   (tot_ge.ene+tot_ge.feb+tot_ge.mar+tot_ge.abr+tot_ge.may+tot_ge.jun+tot_ge.jul+tot_ge.ago+tot_ge.sep+tot_ge.oct+tot_ge.nov+tot_ge.dic)+
   ((tot_ge.ene+tot_ge.feb+tot_ge.mar+tot_ge.abr+tot_ge.may+tot_ge.jun+tot_ge.jul+tot_ge.ago+tot_ge.sep+tot_ge.oct+tot_ge.nov+tot_ge.dic)/12)::numeric(12,0) as total
FROM
(
SELECT 
   ge.id_funcionario,
   10::int as orden,
   'GRATIFICACION ESPECIAL'::text as concepto,
   max(ge.ene) as ene,
   max(ge.feb) as feb,
   max(ge.mar) as mar,
   max(ge.abr) as abr,
   max(ge.may) as may,
   max(ge.jun) as jun,
   max(ge.jul) as jul,
   max(ge.ago) as ago,
   max(ge.sep) as sep,
   max(ge.oct) as oct,
   max(ge.nov) as nov,
   max(ge.dic) as dic,
   137::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.importe_gratificacion)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_gratificacion)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial   pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_gratificacion)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_gratificacion)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_gratificacion)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_gratificacion)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_gratificacion)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_gratificacion)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_gratificacion)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_gratificacion)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_gratificacion)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_gratificacion)::numeric(12,0) as dic,
   137::int as objeto_gasto
FROM
   salarios.detalle_planilla_gratificacion_especial pd
   LEFT JOIN salarios.planilla_gratificacion_especial           p ON p.id_planilla_gratificacion=pd.id_planilla_gratificacion
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) ge
GROUP BY 
   ge.id_funcionario
) tot_ge

UNION

-- DIFERENCIA SALARIAL
SELECT
   *,
   (tot_ds.ene+tot_ds.feb+tot_ds.mar+tot_ds.abr+tot_ds.may+tot_ds.jun+tot_ds.jul+tot_ds.ago+tot_ds.sep+tot_ds.oct+tot_ds.nov+tot_ds.dic) as sub_total,
   ((tot_ds.ene+tot_ds.feb+tot_ds.mar+tot_ds.abr+tot_ds.may+tot_ds.jun+tot_ds.jul+tot_ds.ago+tot_ds.sep+tot_ds.oct+tot_ds.nov+tot_ds.dic)/12)::numeric(12,0) as aguinaldo,
   (tot_ds.ene+tot_ds.feb+tot_ds.mar+tot_ds.abr+tot_ds.may+tot_ds.jun+tot_ds.jul+tot_ds.ago+tot_ds.sep+tot_ds.oct+tot_ds.nov+tot_ds.dic)+
   ((tot_ds.ene+tot_ds.feb+tot_ds.mar+tot_ds.abr+tot_ds.may+tot_ds.jun+tot_ds.jul+tot_ds.ago+tot_ds.sep+tot_ds.oct+tot_ds.nov+tot_ds.dic)/12)::numeric(12,0) as total
FROM
(
SELECT 
   ds.id_funcionario,
   11::int as orden,
   'DIFERENCIA SALARIAL'::text as concepto,
   max(ds.ene) as ene,
   max(ds.feb) as feb,
   max(ds.mar) as mar,
   max(ds.abr) as abr,
   max(ds.may) as may,
   max(ds.jun) as jun,
   max(ds.jul) as jul,
   max(ds.ago) as ago,
   max(ds.sep) as sep,
   max(ds.oct) as oct,
   max(ds.nov) as nov,
   max(ds.dic) as dic,
   199::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle   pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=1 AND
   p.id_mes=12 AND
   p.gestion=in_gestion
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) ds
GROUP BY 
   ds.id_funcionario
) tot_ds

UNION

-- OTROS PAGOS
SELECT
   *,
   (tot_og.ene+tot_og.feb+tot_og.mar+tot_og.abr+tot_og.may+tot_og.jun+tot_og.jul+tot_og.ago+tot_og.sep+tot_og.oct+tot_og.nov+tot_og.dic) as sub_total,
   ((tot_og.ene+tot_og.feb+tot_og.mar+tot_og.abr+tot_og.may+tot_og.jun+tot_og.jul+tot_og.ago+tot_og.sep+tot_og.oct+tot_og.nov+tot_og.dic)/12)::numeric(12,0) as aguinaldo,
   (tot_og.ene+tot_og.feb+tot_og.mar+tot_og.abr+tot_og.may+tot_og.jun+tot_og.jul+tot_og.ago+tot_og.sep+tot_og.oct+tot_og.nov+tot_og.dic)+
   ((tot_og.ene+tot_og.feb+tot_og.mar+tot_og.abr+tot_og.may+tot_og.jun+tot_og.jul+tot_og.ago+tot_og.sep+tot_og.oct+tot_og.nov+tot_og.dic)/12)::numeric(12,0) as total
FROM
(
SELECT 
   og.id_funcionario,
   12::int as orden,
   'OTROS PAGOS'::text as concepto,
   max(og.ene) as ene,
   max(og.feb) as feb,
   max(og.mar) as mar,
   max(og.abr) as abr,
   max(og.may) as may,
   max(og.jun) as jun,
   max(og.jul) as jul,
   max(og.ago) as ago,
   max(og.sep) as sep,
   max(og.oct) as oct,
   max(og.nov) as nov,
   max(og.dic) as dic,
   199::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle   pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_monto_diferencia)::numeric(12,0) as dic,
   199::int as objeto_gasto
FROM
   salarios.planilla_diferencia_salarial_detalle pd
   LEFT JOIN salarios.planilla_diferencia_salarial           p ON p.id_planilla_diferencia_salarial=pd.id_planilla_diferencia_salarial
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_tipo_pagos_varios=2 AND
   p.id_mes=12 AND
   p.gestion=in_gestion
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) og
GROUP BY 
   og.id_funcionario
) tot_og

UNION

-- OTRA TRANSFERENCIAS CORRIENTES
SELECT
   *,
   (tot_otc.ene+tot_otc.feb+tot_otc.mar+tot_otc.abr+tot_otc.may+tot_otc.jun+tot_otc.jul+tot_otc.ago+tot_otc.sep+tot_otc.oct+tot_otc.nov+tot_otc.dic) as sub_total,
   0::numeric(12,0) as aguinaldo,
   (tot_otc.ene+tot_otc.feb+tot_otc.mar+tot_otc.abr+tot_otc.may+tot_otc.jun+tot_otc.jul+tot_otc.ago+tot_otc.sep+tot_otc.oct+tot_otc.nov+tot_otc.dic) as total
FROM
(
SELECT 
   otc.id_funcionario,
   13::int as orden,
   'OTRAS TRANSF. CTES.'::text as concepto,
   max(otc.ene) as ene,
   max(otc.feb) as feb,
   max(otc.mar) as mar,
   max(otc.abr) as abr,
   max(otc.may) as may,
   max(otc.jun) as jun,
   max(otc.jul) as jul,
   max(otc.ago) as ago,
   max(otc.sep) as sep,
   max(otc.oct) as oct,
   max(otc.nov) as nov,
   max(otc.dic) as dic,
   849::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles   pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.importe_otra_transferencia_cte)::numeric(12,0) as dic,
   849::int as objeto_gasto
FROM
   salarios.planillas_otras_transferencias_ctes_detalles pd
   LEFT JOIN salarios.planillas_otras_transferencias_ctes           p ON p.id_planilla_otra_transferencia_cte=pd.id_planilla_otra_transferencia_cte
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) otc
GROUP BY 
   otc.id_funcionario
) tot_otc

UNION

-- OTROS DESCUENTOS
SELECT
   *,
   (tot_des.ene+tot_des.feb+tot_des.mar+tot_des.abr+tot_des.may+tot_des.jun+tot_des.jul+tot_des.ago+tot_des.sep+tot_des.oct+tot_des.nov+tot_des.dic) as sub_total,
   0::numeric(12,0) as aguinaldo,
   (tot_des.ene+tot_des.feb+tot_des.mar+tot_des.abr+tot_des.may+tot_des.jun+tot_des.jul+tot_des.ago+tot_des.sep+tot_des.oct+tot_des.nov+tot_des.dic) as total
FROM
(
SELECT 
   des.id_funcionario,
   55::int as orden,
   'OTROS DESCUENTOS '::text as concepto,
   -max(des.ene) as ene,
   -max(des.feb) as feb,
   -max(des.mar) as mar,
   -max(des.abr) as abr,
   -max(des.may) as may,
   -max(des.jun) as jun,
   -max(des.jul) as jul,
   -max(des.ago) as ago,
   -max(des.sep) as sep,
   -max(des.oct) as oct,
   -max(des.nov) as nov,
   -max(des.dic) as dic,
   0::int as objeto_gasto
FROM
(
-- ENERO
SELECT
   pd.id_funcionario,
   sum(pd.monto_descuento)::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,  
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=1 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- FEBRERO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   sum(pd.monto_descuento)::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos   pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=2 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MARZO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   sum(pd.monto_descuento)::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=3 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- ABRIL
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   sum(pd.monto_descuento)::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=4 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- MAYO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   sum(pd.monto_descuento)::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=5 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JUNIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   sum(pd.monto_descuento)::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=6 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- JULIO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   sum(pd.monto_descuento)::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=7 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- AGOSTO
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   sum(pd.monto_descuento)::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=8 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- SEPTIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   sum(pd.monto_descuento)::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=9 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- OCTUBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   sum(pd.monto_descuento)::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=10 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario 
-----     
UNION
-----   
-- NOVIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   sum(pd.monto_descuento)::numeric(12,0) as nov,
   0::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=11 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario
-----     
UNION
-----   
-- DICIEMBRE
SELECT
   pd.id_funcionario,
   0::numeric(12,0) as ene,
   0::numeric(12,0) as feb,
   0::numeric(12,0) as mar,
   0::numeric(12,0) as abr,
   0::numeric(12,0) as may,
   0::numeric(12,0) as jun,
   0::numeric(12,0) as jul,
   0::numeric(12,0) as ago,
   0::numeric(12,0) as sep,
   0::numeric(12,0) as oct,
   0::numeric(12,0) as nov,
   sum(pd.monto_descuento)::numeric(12,0) as dic,
   0::int as objeto_gasto
FROM
   salarios.detalles_planillas_descuentos pd
   LEFT JOIN salarios.planillas_descuentos           p ON p.id_planilla_descuento=pd.id_planilla_descuento
WHERE
   p.estado=1 AND
   p.id_administracion=in_id_administracion AND
   p.id_mes=12 AND
   p.gestion=in_gestion 
   AND CASE WHEN in_id_funcionario='0' THEN pd.id_funcionario>0 ELSE pd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END
GROUP BY 
   pd.id_funcionario     
) des
GROUP BY 
   des.id_funcionario
) tot_des

) remuneracion;

END;
]]></definition>
</function>

<function name="total_remuneraciones_resumen_permanente"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="funcionario">
		<type name="text"/>
	</parameter>
	<parameter name="fecha_nac">
		<type name="text"/>
	</parameter>
	<parameter name="edad">
		<type name="text"/>
	</parameter>
	<parameter name="decreto_nomb">
		<type name="text"/>
	</parameter>
	<parameter name="fecha_nomb">
		<type name="text"/>
	</parameter>
	<parameter name="antiguedad">
		<type name="text"/>
	</parameter>
	<parameter name="categoria">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="sueldo_mensual">
		<type name="integer"/>
	</parameter>
	<parameter name="concepto">
		<type name="text"/>
	</parameter>
	<parameter name="ene">
		<type name="numeric"/>
	</parameter>
	<parameter name="feb">
		<type name="numeric"/>
	</parameter>
	<parameter name="mar">
		<type name="numeric"/>
	</parameter>
	<parameter name="abr">
		<type name="numeric"/>
	</parameter>
	<parameter name="may">
		<type name="numeric"/>
	</parameter>
	<parameter name="jun">
		<type name="numeric"/>
	</parameter>
	<parameter name="jul">
		<type name="numeric"/>
	</parameter>
	<parameter name="ago">
		<type name="numeric"/>
	</parameter>
	<parameter name="sep">
		<type name="numeric"/>
	</parameter>
	<parameter name="oct">
		<type name="numeric"/>
	</parameter>
	<parameter name="nov">
		<type name="numeric"/>
	</parameter>
	<parameter name="dic">
		<type name="numeric"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="integer"/>
	</parameter>
	<parameter name="sub_total">
		<type name="numeric"/>
	</parameter>
	<parameter name="aguinaldo">
		<type name="numeric"/>
	</parameter>
	<parameter name="total">
		<type name="numeric"/>
	</parameter>
	<parameter name="n1_nombre">
		<type name="text"/>
	</parameter>
	<parameter name="n2_nombre">
		<type name="text"/>
	</parameter>
	<parameter name="n3_nombre">
		<type name="text"/>
	</parameter>
	<parameter name="n4_nombre">
		<type name="text"/>
	</parameter>
	<parameter name="n5_nombre">
		<type name="text"/>
	</parameter>
	<parameter name="n1">
		<type name="integer"/>
	</parameter>
	<parameter name="n2">
		<type name="integer"/>
	</parameter>
	<parameter name="n3">
		<type name="integer"/>
	</parameter>
	<parameter name="n4">
		<type name="integer"/>
	</parameter>
	<parameter name="n5">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar resumen de liquidaciones durante la gestión solicitada de los funcionarios permanentes/comisionados por mes y gestion
  * Creado    : 2014-10-23 10:19:00
  * Modificado: 2014-12-12 08:21:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administracion del proceso		
  *            in_gestion           ejercicio aplicado 
  * 	       in_id_funcionario    identifiacador de funcionarios separados por coma o ingresar '0' para todos los funcionarios	 
  * ------------  
  */
RETURN QUERY 
SELECT
   f.id_funcionario,
   liq.orden,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')::text) as cedula,
   f.ape_nom_funcionario::text,
   to_char(f.fecha_nac_funcionario,'dd/MM/YYYY')::text as fecha_nac,
   (extract(year from(age(now()::date,f.fecha_nac_funcionario)))|| 
           case when extract(year from(age(now()::date,f.fecha_nac_funcionario))) <= 1 
                then ' AÑO ' else ' AÑOS ' end
             || extract(month from(age(now()::date,f.fecha_nac_funcionario))) 
             || case when extract(month from(age(now()::date,f.fecha_nac_funcionario))) <= 1 
                      then ' MES ' else ' MESES ' end 
             || extract(day from(age(now()::date,f.fecha_nac_funcionario))) 
             || case when extract(day from(age(now()::date,f.fecha_nac_funcionario))) <= 1 then ' DIA' else ' DIAS' end)::text AS edad,
   
   /*(SELECT
             v.nro_disposicion
             FROM legajos.datos_administrativos da  
             LEFT JOIN legajos.funcionarios b ON b.id_funcionario = da.id_funcionario 
             LEFT JOIN legajos.vista_funcionarios_historial_administrativo v ON v.id_dato_administrativo = da.id_dato_administrativo
             WHERE da.id_funcionario = f.id_funcionario::integer and v.fecha_disposicion = to_char(sa.fecha_inicio,'DD/MM/YYYY'))::text AS decreto_nomb,*/
             decreto.nro_disposicion::text as decreto_nomb,
   (case when sa.fecha_inicio is not null then to_char(sa.fecha_inicio::timestamp with time zone, 'DD/MM/YYYY'::text) else '- - -' end)::text  AS fecha_nomb,--fecha_nomb
   funcion_antiguedad_en_texto(funcion_calcular_antiguedad(f.id_funcionario,now()::date))::text as antiguedad,
   dps.nombre_categoria::text,--categoria
   dps.nombre_cargo::text,--cargo
   dps.importe,--sueldo_mensual
   liq.concepto,
   liq.ene,liq.feb,liq.mar,liq.abr,
   liq.may,liq.jun,liq.jul,liq.ago,
   liq.sep,liq.oct,liq.nov,liq.dic,
   liq.objeto_gasto,
   liq.sub_total,
   liq.aguinaldo,
   liq.total,
   ofi.nombre_nivel1::text,
   ofi.nombre_nivel2::text,
   ofi.nombre_nivel3::text,
   ofi.nombre_nivel4::text,
   ofi.nombre_nivel5::text,
   ofi.nivel1,
   ofi.nivel2,
   ofi.nivel3,
   ofi.nivel4,
   ofi.nivel5
FROM 
   legajos.funcionarios f
   LEFT JOIN (
	SELECT
	   *
	FROM
	   (
	   (--CONCEPTOS PAGOS
	   SELECT 
	      *
	   FROM
	      salarios.total_remuneraciones_percibido_permanente(in_id_administracion,in_gestion,'0')
	   UNION
	   SELECT
	   suma_totales.id_funcionario::int as id_funcionario,40::int as orden,'SUMA DE TOTALES'::text as concepto,
	   CASE WHEN sum(suma_totales.ene)<0 THEN 0 ELSE sum(suma_totales.ene) END as ene,
	   CASE WHEN sum(suma_totales.feb)<0 THEN 0 ELSE sum(suma_totales.feb) END as feb,
	   CASE WHEN sum(suma_totales.mar)<0 THEN 0 ELSE sum(suma_totales.mar) END as mar,
	   CASE WHEN sum(suma_totales.abr)<0 THEN 0 ELSE sum(suma_totales.abr) END as abr,
	   CASE WHEN sum(suma_totales.may)<0 THEN 0 ELSE sum(suma_totales.may) END as may,
	   CASE WHEN sum(suma_totales.jun)<0 THEN 0 ELSE sum(suma_totales.jun) END as jun,
	   CASE WHEN sum(suma_totales.jul)<0 THEN 0 ELSE sum(suma_totales.jul) END as jul,
	   CASE WHEN sum(suma_totales.ago)<0 THEN 0 ELSE sum(suma_totales.ago) END as ago,
	   CASE WHEN sum(suma_totales.sep)<0 THEN 0 ELSE sum(suma_totales.sep) END as sep,
	   CASE WHEN sum(suma_totales.oct)<0 THEN 0 ELSE sum(suma_totales.oct) END as oct,
	   CASE WHEN sum(suma_totales.nov)<0 THEN 0 ELSE sum(suma_totales.nov) END as nov,
	   CASE WHEN sum(suma_totales.dic)<0 THEN 0 ELSE sum(suma_totales.dic) END as dic,
	   0::int as objeto_gasto,
	   CASE WHEN sum(suma_totales.sub_total)<0 THEN 0 ELSE sum(suma_totales.sub_total) END as sub_total,
	   CASE WHEN sum(suma_totales.aguinaldo)<0 THEN 0 ELSE sum(suma_totales.aguinaldo) END as aguinaldo,
	   CASE WHEN sum(suma_totales.total)<0 THEN 0 ELSE sum(suma_totales.total) END as total
	FROM
	   (--TOTAL SUMAS PAGOS
	   SELECT 
	      *
	   FROM
	      salarios.total_remuneraciones_percibido_permanente(in_id_administracion,in_gestion,'0') st
	   WHERE st.orden>0 AND st.orden<40
	      ) suma_totales
	GROUP BY 
	   suma_totales.id_funcionario
	   UNION
	   --CONCEPTOS APORTES
	   SELECT 
	      ca.id_funcionario::int as id_funcionario,50::int as orden,'APORTE JUBILATORIO'::text as concepto,
	      sum(ca.ene) as ene,sum(ca.feb) as feb,sum(ca.mar) as mar,sum(ca.abr) as abr,
	      sum(ca.may) as may,sum(ca.jun) as jun,sum(ca.jul) as jul,sum(ca.ago) as ago,
	      sum(ca.sep) as sep,sum(ca.oct) as oct,sum(ca.nov) as nov,sum(ca.dic) as dic,
	      0::int as objeto_gasto,
	      sum(ca.sub_total) as sub_total,
	      0 as aguinaldo,
	      sum(ca.total) as total
	   FROM
	      salarios.total_remuneraciones_aporte_permanente(in_id_administracion,in_gestion,'0') ca
	   GROUP BY
	      ca.id_funcionario)
	   UNION
	   --TOTAL RED BANCARIA
	   (
	   SELECT
	   resumen.id_funcionario::int as id_funcionario,60::int as orden,'TOTAL VIA RED BANCARIA'::text as concepto,
	      CASE WHEN sum(resumen.ene)<0 THEN 0 ELSE sum(resumen.ene) END as ene,
	      CASE WHEN sum(resumen.feb)<0 THEN 0 ELSE sum(resumen.feb) END as feb,
	      CASE WHEN sum(resumen.mar)<0 THEN 0 ELSE sum(resumen.mar) END as mar,
	      CASE WHEN sum(resumen.abr)<0 THEN 0 ELSE sum(resumen.abr) END as abr,
	      CASE WHEN sum(resumen.may)<0 THEN 0 ELSE sum(resumen.may) END as may,
	      CASE WHEN sum(resumen.jun)<0 THEN 0 ELSE sum(resumen.jun) END as jun,
	      CASE WHEN sum(resumen.jul)<0 THEN 0 ELSE sum(resumen.jul) END as jul,
	      CASE WHEN sum(resumen.ago)<0 THEN 0 ELSE sum(resumen.ago) END as ago,
	      CASE WHEN sum(resumen.sep)<0 THEN 0 ELSE sum(resumen.sep) END as sep,
	      CASE WHEN sum(resumen.oct)<0 THEN 0 ELSE sum(resumen.oct) END as oct,
	      CASE WHEN sum(resumen.nov)<0 THEN 0 ELSE sum(resumen.nov) END as nov,
	      CASE WHEN sum(resumen.dic)<0 THEN 0 ELSE sum(resumen.dic) END as dic,
	      0::int as objeto_gasto,
	      CASE WHEN sum(resumen.sub_total)<0 THEN 0 ELSE sum(resumen.sub_total) END as sub_total,
	      CASE WHEN sum(resumen.aguinaldo)<0 THEN 0 ELSE sum(resumen.aguinaldo) END as aguinaldo,
	      CASE WHEN sum(resumen.total)<0 THEN 0 ELSE sum(resumen.total) END as total
	FROM
	   (
	   (--CONCEPTOS PAGOS
	   SELECT 
	      *
	   FROM
	      salarios.total_remuneraciones_percibido_permanente(in_id_administracion,in_gestion,'0')
	   UNION
	   --CONCEPTOS APORTES
	   SELECT 
	      ca2.id_funcionario::int as id_funcionario,50::int as orden,'APORTE JUBILATORIO'::text as concepto,
	      sum(ca2.ene) as ene,sum(ca2.feb) as feb,sum(ca2.mar) as mar,sum(ca2.abr) as abr,
	      sum(ca2.may) as may,sum(ca2.jun) as jun,sum(ca2.jul) as jul,sum(ca2.ago) as ago,
	      sum(ca2.sep) as sep,sum(ca2.oct) as oct,sum(ca2.nov) as nov,sum(ca2.dic) as dic,
	      0::int as objeto_gasto,
	      sum(ca2.sub_total) as sub_total,
	      0 as aguinaldo,
	      sum(ca2.total) as total
	   FROM
	      salarios.total_remuneraciones_aporte_permanente(in_id_administracion,in_gestion,'0') ca2
	   GROUP BY
	      ca2.id_funcionario)
	  ) resumen
	GROUP BY
	resumen.id_funcionario
	   )
	) resumen
	WHERE
	CASE WHEN in_id_funcionario='0' THEN resumen.id_funcionario>0 ELSE resumen.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END 
	--id_funcionario IN(466)
   ) liq ON liq.id_funcionario=f.id_funcionario
   LEFT JOIN (
	SELECT 
	   x.id_funcionario,
	   x.id_funcionario_categoria,
	   y.id_detalle_categoria,
	   cat.nombre_categoria,
	   car.nombre_cargo,
	   cim.importe
	FROM 
	   (SELECT 
	       max (fc.id_funcionario_categoria) as id_funcionario_categoria,
	       fc.id_funcionario
	    FROM salarios.funcionarios_categorias fc
	    WHERE 
	       fc.gestion = in_gestion 
	       --AND fc.id_administracion = 1
	    GROUP BY
	      fc.id_funcionario) x
	    LEFT JOIN salarios.funcionarios_categorias y ON (y.id_funcionario_categoria = x.id_funcionario_categoria)
	    LEFT JOIN salarios.detalles_categorias    dc ON dc.id_detalle_categoria=y.id_detalle_categoria
            LEFT JOIN salarios.categorias            cat ON cat.id_categoria=dc.id_categoria
            LEFT JOIN salarios.cargos                car ON (car.id_cargo = cat.id_cargo)
            LEFT JOIN (
               SELECT
                  cim.id_categoria,
                  max(cim.id_mes) AS id_mes, 
                  max(cim.importe)::int AS importe
               FROM
                  salarios.categoria_importe_mensual cim 
               --WHERE 
               --   cim.id_administracion IN(0,1)
               GROUP BY
                  cim.id_categoria
            )                                       cim  ON (cim.id_categoria = dc.id_categoria)
 ) dps ON (dps.id_funcionario = f.id_funcionario)
 LEFT JOIN legajos.situacion_administrativa_actual sa ON sa.id_funcionario = f.id_funcionario
 /*LEFT JOIN (
	SELECT
	o1.id_oficina,
	CASE WHEN o2.nombre=o1.nombre THEN ' ' ELSE o2.nombre END as n1,
	CASE WHEN o3.nombre=o2.nombre THEN ' ' ELSE o3.nombre END as n2,
	CASE WHEN o4.nombre=o3.nombre THEN ' ' ELSE o4.nombre END as n3,
	CASE WHEN o5.nombre=o4.nombre THEN ' ' ELSE o5.nombre END as n4,
	CASE WHEN o1.nombre=o5.nombre THEN ' ' ELSE o1.nombre END as n5,
	o1.nivel1,
	o1.nivel2,
	o1.nivel3,
	o1.nivel4,
	o1.nivel5
	FROM
	legajos.oficinas o1
	LEFT JOIN (
	   SELECT 
	      nivel1,
	      max(nombre) as nombre
	   FROM
	      legajos.oficinas
	   WHERE
	      nivel2=0 AND nivel3=0 AND nivel4=0 AND nivel5=0 
	   GROUP BY nivel1
	) o2 ON o2.nivel1=o1.nivel1
	LEFT JOIN (
	   SELECT 
	      nivel1,
	      nivel2,
	      max(nombre) as nombre
	   FROM
	      legajos.oficinas
	   WHERE
	      nivel3=0 AND nivel4=0 AND nivel5=0
	   GROUP BY nivel1,nivel2
	) o3 ON o3.nivel1=o1.nivel1 AND o3.nivel2=o1.nivel2
	LEFT JOIN (
	   SELECT 
	      nivel1,
	      nivel2,
	      nivel3,
	      max(nombre) as nombre
	   FROM
	      legajos.oficinas
	   WHERE
	      nivel4=0 AND nivel5=0
	   GROUP BY nivel1,nivel2,nivel3
	) o4 ON o4.nivel1=o1.nivel1 AND o4.nivel2=o1.nivel2 AND o4.nivel3=o1.nivel3
	LEFT JOIN (
	   SELECT 
	      nivel1,
	      nivel2,
	      nivel3,
	      nivel4,
	      max(nombre) as nombre
	   FROM
	      legajos.oficinas
	   WHERE
	      nivel5=0
	   GROUP BY nivel1,nivel2,nivel3,nivel4
	) o5 ON o5.nivel1=o1.nivel1 AND o5.nivel2=o1.nivel2 AND o5.nivel3=o1.nivel3 AND o5.nivel4=o1.nivel4
   ) ofi ON ofi.id_oficina=sa.id_oficina_presta*/
   LEFT JOIN legajos.oficinas_con_descripciones ofi ON ofi.id_oficina=sa.id_oficina_presta
 LEFT JOIN 
 (
    SELECT
     v.id_funcionario,
     max(v.nro_disposicion) as nro_disposicion
     FROM legajos.vista_carrera_administrativa v
     WHERE v.detalle ilike '%NOMBRAMIENTO%'
     GROUP BY
     v.id_funcionario
 ) decreto ON decreto.id_funcionario=f.id_funcionario
WHERE
   CASE WHEN in_id_funcionario='0' THEN f.id_funcionario>0 ELSE f.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[]) END 
   --AND   f.estado_funcionario
ORDER BY 
   1,2;

END;
]]></definition>
</function>

<function name="vacantes_categoria_cantidad"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<comment><![CDATA[ Autor: Lic. Guillermo Galeano Fernández Fecha: 2012-05-03 Motivo: Datos utilizados en el reporte de la Planilla de Salarios. Cambio realizados: dalcaraz: se agrego el parametro id_planilla_salario para el filtro de registros ]]></comment>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_estructura_presupuestaria">
		<type name="integer"/>
	</parameter>
	<parameter name="linea">
		<type name="integer"/>
	</parameter>
	<parameter name="id_categoria">
		<type name="integer"/>
	</parameter>
	<parameter name="cantidad">
		<type name="bigint"/>
	</parameter>
	</return-type>
	<parameter name="in_gestion" in="true">
		<type name="numeric"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
SELECT 
	b.id_estructura_presupuestaria, 
        b.linea,
	b.id_categoria,         
	count(*) as cantidad        
  FROM salarios.detalle_planillas_vacantes a
  LEFT JOIN salarios.detalles_categorias b
	ON b.id_detalle_categoria = a.id_detalle_categoria
  LEFT JOIN salarios.categorias c
	ON c.id_categoria = b.id_categoria
  LEFT JOIN presupuesto.estructura_presupuestaria d
	ON b.id_estructura_presupuestaria = d.id_estructura_presupuestaria
  WHERE a.id_planilla_salario = in_id_planilla_salario AND
        b.id_estructura_presupuestaria in (Select b.id_estructura_presupuestaria from presupuesto.estructura_presupuestaria b where b.gestion=IN_GESTION)
  group by 
  	b.id_estructura_presupuestaria, 
	b.id_categoria, 
        b.linea
  order by b.id_estructura_presupuestaria, 
        b.linea,
	b.id_categoria      
;

END;
]]></definition>
</function>

<function name="vacantes_categoria_cantidad"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_estructura_presupuestaria">
		<type name="integer"/>
	</parameter>
	<parameter name="linea">
		<type name="integer"/>
	</parameter>
	<parameter name="id_categoria">
		<type name="integer"/>
	</parameter>
	<parameter name="cantidad">
		<type name="bigint"/>
	</parameter>
	</return-type>
	<parameter name="in_gestion" in="true">
		<type name="numeric"/>
	</parameter>
	<parameter name="in_id_planilla_salario" in="true">
		<type name="integer"/>
	</parameter>
	<definition><![CDATA[
BEGIN

RETURN QUERY 
SELECT 
	b.id_estructura_presupuestaria, 
        b.linea,
	b.id_categoria,         
	count(*) as cantidad        
  FROM salarios.detalle_planillas_vacantes a
  LEFT JOIN salarios.detalles_categorias b
	ON b.id_detalle_categoria = a.id_detalle_categoria
  LEFT JOIN salarios.categorias c
	ON c.id_categoria = b.id_categoria
  LEFT JOIN presupuesto.estructura_presupuestaria d
	ON b.id_estructura_presupuestaria = d.id_estructura_presupuestaria
  WHERE a.id_planilla_salario = in_id_planilla_salario AND
        b.id_estructura_presupuestaria in (Select b.id_estructura_presupuestaria from presupuesto.estructura_presupuestaria b where b.gestion=IN_GESTION)
  group by 
  	b.id_estructura_presupuestaria, 
	b.id_categoria, 
        b.linea
  order by b.id_estructura_presupuestaria, 
        b.linea,
	b.id_categoria      
;

END;
]]></definition>
</function>

<function name="web_sfp_comisionados_destino_pagos_detalles"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="nombres">
		<type name="text"/>
	</parameter>
	<parameter name="apellidos">
		<type name="text"/>
	</parameter>
	<parameter name="estado">
		<type name="text"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="integer"/>
	</parameter>
	<parameter name="fuente">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="bigint"/>
	</parameter>
	<parameter name="entidad">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="fecha_inicio">
		<type name="text"/>
	</parameter>
	<parameter name="fecha_finalizacion">
		<type name="text"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="tipo_funcionario">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado detallado de las liquidaciones de los funcionarios comisionados/destino 
  * por administracion, mes, gestion y/o id_funcionario
  * Creado    : 2014-07-16 19:00:00
  * Modificado: 2015-03-18 12:15:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado 
  * 	       in_id_funcionario    '0':todos '466,481,...':ids_funcionarios específicos
  * Descripcion:  para la WEB con datos solicitados por la LEY 5.189/2014 "Que establece la obligatoriedad de la 
  *               provisión de Informaciones en el uso de los recursos públicos sobre remuneraciones y otras 
  *               retribuciones asignadas al servidor público de la República del Paraguay"
  * ------------  
  */
RETURN QUERY
-- [111] Sueldo
-- [113] Gastos de representación
-- [131] Subsidio Familiar
-- [133] Responsabilidad en el cargo
-- [133] Bonificación por Grado académico
-- [133] Bonificación por Antiguedad
-- [137] Gratificaciones por Servicios Especiales
-- [199] Otros Gastos del Personal
-- [232] Viáticos y movilidad --> TESORERIA  
SELECT
   fcmh.id,
   max(fcmh.cedula)::text as cedula,
   max(fcmh.nombres)::text as nombres,
   max(fcmh.apellidos)::text as apellidos,
   'Permanente'::text as estado,
   max(fcmh.objeto_gasto) as objeto_gasto,
   max(fcmh.fuente) as fuente,
   max(fcmh.presupuestado) as presupuestado,
   max(fcmh.entidad_destino) as entidad,
   max(fcmh.cargo) as cargo,
   max(fcmh.fecha_inicio) as fecha_inicio,
   max(fcmh.fecha_finalizacion) as fecha_finalizacion,
   max(fcmh.id_oficina) as id_oficina,
   1 as orden,
   1 as tipo_funcionario
FROM
(
SELECT
   f.id_funcionario as id,
   id_funcionario_mh_comisionado,
   fmhc.fecha_disposicion,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as cedula,
   trim(initcap(f.nombre_funcionario)) as nombres,
   trim(initcap(f.apellido_funcionario)) as apellidos,
   m.objeto_gasto as objeto_gasto,
   10 as fuente,
   m.presupuestado as presupuestado,
   datos_comi.descripcion_entidad::text as entidad_destino,
   --fun.descripcion_funcion as cargo,
   car.nombre_cargo::text as cargo,
   datos_comi.fecha_inicio as fecha_inicio,
   datos_comi.fecha_hasta as fecha_finalizacion,
   m.id_oficina
FROM 
   legajos.funcionarios_mh_comisionados fmhc
   LEFT JOIN legajos.funcionarios f ON f.id_funcionario=fmhc.id_funcionario
   LEFT JOIN legajos.entidad      e ON e.id_entidad=fmhc.id_entidad
   LEFT JOIN legajos.funciones  fun ON fun.id_funcion=fmhc.id_funcion
   LEFT JOIN legajos.tipos_disposicion_dependencia tdd ON tdd.id_tipo_disposicion_dependencia=fmhc.id_tipo_disposicion_dependencia
   LEFT JOIN (
      SELECT * FROM 
      salarios.web_sfp_permanentes_pagos(in_id_administracion,in_id_mes,in_gestion,in_id_funcionario) pagos 
      WHERE pagos.objeto_gasto=111
   ) m ON m.id_funcionario=f.id_funcionario
   LEFT JOIN (
	SELECT
	d2.id_funcionario,
	d2.datos_aux[1] as entidad,
	(
	   SELECT
	      to_char(max(fmhc.fecha_desde),'dd/MM/YYYY') as fecha_desde
	   FROM 
	      legajos.funcionarios_mh_comisionados fmhc
	      LEFT JOIN legajos.funcionarios          f ON f.id_funcionario=fmhc.id_funcionario
	   WHERE 
	      fmhc.id_entidad=d2.datos_aux[1]::int AND
	      fmhc.id_tipo_disposicion_dependencia=8 AND
	      f.id_funcionario=d2.id_funcionario
	   --GROUP BY
	      --fmhc.id_entidad
	) as fecha_inicio,
	to_char(d2.datos_aux[2]::date,'dd/MM/YYYY') as fecha_hasta,
	e.descripcion_entidad 
	FROM
	(
		SELECT
		   f2.id_funcionario,
		   (
			SELECT
			   ('{'||fmhc.id_entidad||','||
			   fmhc.fecha_hasta||'}'
			   )::text[] AS informacion
			FROM 
			 legajos.funcionarios_mh_comisionados fmhc
			 LEFT JOIN legajos.funcionarios          f ON f.id_funcionario=fmhc.id_funcionario
			WHERE 
			  f.id_funcionario IN (f2.id_funcionario) AND
			  fmhc.id_tipo_disposicion_dependencia=8 AND
			  extract(year from fmhc.fecha_hasta)=in_gestion
			--ORDER BY fmhc.fecha_hasta desc limit 1
			  ORDER BY fmhc.fecha_hasta desc,  fmhc.fecha_desde desc limit 1
		   ) datos_aux
		FROM
		   legajos.funcionarios f2
		   LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f2.id_funcionario
		WHERE
		   f2.estado_funcionario AND
		   CASE 
		      WHEN '1'=in_id_administracion THEN f2.id_administracion IN (0,1)
		      WHEN '2'=in_id_administracion THEN f2.id_administracion IN (0,2)
		      WHEN '3'=in_id_administracion THEN f2.id_administracion IN (0,1,2)
		   END AND
		   saa.id_tipo_funcionario='PER' --AND
	) d2
	LEFT JOIN legajos.entidad e ON e.id_entidad=d2.datos_aux[1]::int
	WHERE
	  d2.datos_aux[1] IS NOT NULL
   ) datos_comi ON datos_comi.id_funcionario=f.id_funcionario
   -- CATEGORIA
   LEFT JOIN (
	SELECT 
	   fc2.id_funcionario,
	   max(fc2.id_funcionario_categoria) as id_funcionario_categoria
	FROM 
	   salarios.funcionarios_categorias fc2
	WHERE 
	   fc2.gestion = in_gestion 
	   AND fc2.id_administracion IN(0,1,2)
	   AND (in_id_mes BETWEEN  extract(MONTH from fc2.desde) AND extract(MONTH from fc2.hasta-1) OR fc2.hasta is null) 
	GROUP BY
	   fc2.id_funcionario
   ) fc ON fc.id_funcionario=fmhc.id_funcionario
   LEFT JOIN salarios.funcionarios_categorias   fc3 ON (fc3.id_funcionario_categoria = fc.id_funcionario_categoria)
   LEFT JOIN salarios.detalles_categorias        dc ON (dc.id_detalle_categoria = fc3.id_detalle_categoria)
   LEFT JOIN salarios.categorias                  c ON (c.id_categoria = dc.id_categoria) AND c.gastos_de_representacion is false
   LEFT JOIN salarios.cargos                    car ON (car.id_cargo = c.id_cargo)
WHERE
   fmhc.id_tipo_disposicion_dependencia=8 AND
   CASE 
      WHEN '1'=in_id_administracion THEN f.id_administracion IN (0,1)
      WHEN '2'=in_id_administracion THEN f.id_administracion IN (0,2)
      WHEN '3'=in_id_administracion THEN f.id_administracion IN (0,1,2)
   END AND
   -- extract(year from fmhc.fecha_disposicion)=in_gestion AND
   (extract(year from fmhc.fecha_desde)=in_gestion OR extract(year from fmhc.fecha_hasta)=in_gestion) AND
   (in_id_mes between extract(month from fmhc.fecha_desde) AND extract(month from fmhc.fecha_hasta)) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fmhc.id_funcionario>0
	ELSE
	   fmhc.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
   AND m.presupuestado>0
) fcmh
GROUP BY
  fcmh.id
;

END;
]]></definition>
</function>

<function name="web_sfp_comisionados_origen_pagos_detalles"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="nombres">
		<type name="text"/>
	</parameter>
	<parameter name="apellidos">
		<type name="text"/>
	</parameter>
	<parameter name="estado">
		<type name="text"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="integer"/>
	</parameter>
	<parameter name="fuente">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="bigint"/>
	</parameter>
	<parameter name="entidad">
		<type name="text"/>
	</parameter>
	<parameter name="cargo">
		<type name="text"/>
	</parameter>
	<parameter name="fecha_inicio">
		<type name="text"/>
	</parameter>
	<parameter name="fecha_finalizacion">
		<type name="text"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="tipo_funcionario">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado detallado de las liquidaciones de los funcionarios comisionados/origen (EXTERNOS)
  * por administracion, mes, gestion y/o id_funcionario
  * Creado    : 2014-07-16 19:19:00
  * Modificado: 2015-04-23 14:16:00
  * Modificado: 2016-02-12 17:13:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado 
  * 	       in_id_funcionario    '0':todos '466,481,...':ids_funcionarios específicos
  * Descripcion:  para la WEB con datos solicitados por la LEY 5.189/2014 "Que establece la obligatoriedad de la 
  *               provisión de Informaciones en el uso de los recursos públicos sobre remuneraciones y otras 
  *               retribuciones asignadas al servidor público de la República del Paraguay"
  * ------------  
  */
RETURN QUERY
-- [111] Sueldo
-- [113] Gastos de representación
-- [131] Subsidio Familiar
-- [133] Responsabilidad en el cargo
-- [133] Bonificación por Grado académico
-- [133] Bonificación por Antiguedad
-- [137] Gratificaciones por Servicios Especiales
-- [199] Otros Gastos del Personal
-- [232] Viáticos y movilidad --> TESORERIA  
SELECT
   f.id_funcionario as id,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.')) as cedula,
   trim(initcap(f.nombre_funcionario)) as nombres,
   trim(initcap(f.apellido_funcionario)) as apellidos,
   'Comisionado'::text as estado,
   m.objeto_gasto as objeto_gasto,
   (
      SELECT
         CASE
            WHEN m.id_oficina::text=ANY(('{'||'
					     2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,
                                             2180,2181,2182,2183,2184,2185,2186,2187,2249,2250,2251,2252,
                                             2253,2254,2255,2256,2257,2258,2259,2329,2330,2337,2498,2506,
                                             2507,2508,2511,
                                             3007,3008,3011,3014,3015,3016,
                                             2627, 2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,
                                             3640,3641,3642,3644,3645,3646,3647,3650,3651,
					     3669,3678,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,
					     3758,3759,3768
                                             '||'}')::text[])
            THEN CASE WHEN m.objeto_gasto IN (111,113,131,137) THEN 10 ELSE 30 END
            ELSE 10
           END
   ) as fuente,
   m.presupuestado as presupuestado,
   e.descripcion_entidad::text as entidad,
   datos_aux.cargo::text as cargo,
   to_char(fec.fecha_inicio,'dd/MM/YYYY') as fecha_inicio,
   datos_aux.fecha_hasta as fecha_finalizacion,
   m.id_oficina,
   m.orden,
   2 as tipo_funcionario
FROM 
   legajos.datos_administrativos da
   LEFT JOIN legajos.funcionarios_comisionados      fc ON da.id_dato_administrativo=fc.id_dato_administrativo
   LEFT JOIN legajos.funcionarios                    f ON f.id_funcionario=da.id_funcionario
   LEFT JOIN legajos.entidad                         e ON e.id_entidad=fc.id_entidad
   LEFT JOIN legajos.funciones                     fun ON fun.id_funcion=fc.id_funcion
   LEFT JOIN legajos.tipos_disposicion_dependencia tdd ON tdd.id_tipo_disposicion_dependencia=fc.id_tipo_disposicion_dependencia
   LEFT JOIN (
      SELECT * FROM salarios.web_sfp_permanentes_pagos(in_id_administracion, in_id_mes, in_gestion, in_id_funcionario)
   ) m ON m.id_funcionario=f.id_funcionario
   LEFT JOIN (
      SELECT
         f.id_funcionario,
         --fc.id_entidad,
         max(fc.fecha_desde) as fecha_inicio
      FROM 
	 legajos.datos_administrativos da
         LEFT JOIN legajos.funcionarios_comisionados fc ON da.id_dato_administrativo=fc.id_dato_administrativo
         LEFT JOIN legajos.funcionarios               f ON f.id_funcionario=da.id_funcionario
      WHERE 
         da.tipo_funcionario='COM' AND
         fc.id_tipo_disposicion_dependencia IN(8,130,131)
      GROUP BY 
         f.id_funcionario
   ) fec ON fec.id_funcionario=f.id_funcionario-- AND fec.id_entidad=fc.id_entidad
   LEFT JOIN (
	SELECT
	   dato_comi[1]::int as id_funcionario,
	   dato_comi[2] as cargo,
	   dato_comi[3] as fecha_hasta
	FROM
	   (
	      SELECT
	      (
		 SELECT
		    ('{'||da.id_funcionario||','||fun.descripcion_funcion||','||to_char(fc.fecha_hasta,'dd/MM/YYYY')||'}')::text[] as datos
		 FROM 
		    legajos.datos_administrativos da
		    LEFT JOIN legajos.funcionarios_comisionados  fc ON da.id_dato_administrativo=fc.id_dato_administrativo
		    LEFT JOIN legajos.funcionarios                f ON f.id_funcionario=da.id_funcionario
		    LEFT JOIN legajos.funciones                 fun ON fun.id_funcion = fc.id_funcion
		 WHERE 
		    da.tipo_funcionario='COM' AND
		    fc.id_tipo_disposicion_dependencia IN(8,130,131) AND
	            extract(year from fc.fecha_hasta)=in_gestion AND
		    f.id_funcionario=f2.id_funcionario
		 ORDER BY
		    fc.fecha_desde desc
		 limit 1
	      ) as dato_comi
	      FROM 
                 legajos.funcionarios  f2
                 LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f2.id_funcionario
              WHERE
                 f2.estado_funcionario AND
                 saa.id_tipo_funcionario IN ('COM') AND
		 CASE 
		    WHEN '1'=in_id_administracion THEN f2.id_administracion IN (0,1)
		    WHEN '2'=in_id_administracion THEN f2.id_administracion IN (0,2)
		    WHEN '3'=in_id_administracion THEN f2.id_administracion IN (0,1,2)
		 END
                 --AND f2.id_funcionario IN(1766)
          ) comi
          WHERE 
             dato_comi[1] IS NOT NULL
   ) datos_aux ON datos_aux.id_funcionario=f.id_funcionario
WHERE
   da.tipo_funcionario='COM' AND
   fc.id_tipo_disposicion_dependencia IN(8,130,131) AND
   CASE 
      WHEN '1'=in_id_administracion THEN f.id_administracion IN (0,1)
      WHEN '2'=in_id_administracion THEN f.id_administracion IN (0,2)
      WHEN '3'=in_id_administracion THEN f.id_administracion IN (0,1,2)
   END AND
   (extract(year from fc.fecha_desde)=in_gestion OR extract(year from fc.fecha_hasta)=in_gestion) AND
   (in_id_mes between extract(month from fc.fecha_desde) AND extract(month from fc.fecha_hasta)) AND 
   m.presupuestado>0
;

END;
]]></definition>
</function>

<function name="web_sfp_permanentes_pagos"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id_funcionario">
		<type name="integer"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="integer"/>
	</parameter>
	<parameter name="descripcion">
		<type name="text"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="bigint"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado por objeto de gasto de las liquidaciones de los funcionarios permanentes 
  * por administracion, mes, gestion y/o id_funcionario
  * Creado    : 2014-07-11 08:51:00
  * Modificado: 2015-02-19 15:26:00
  * Modificado: 2015-07-21 11:14:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado 
  * 	       in_id_funcionario    '0':todos '466,481,...':ids_funcionarios específicos
  * Descripcion:  para la WEB con datos solicitados por la LEY 5.189/2014 "Que establece la obligatoriedad de la 
  *               provisión de Informaciones en el uso de los recursos públicos sobre remuneraciones y otras 
  *               retribuciones asignadas al servidor público de la República del Paraguay"
  * ------------  
  */
RETURN QUERY
-- [111] Sueldo
SELECT 
  dps.id_funcionario,
  1::int as orden,
  111::int as objeto_gasto,
  CASE
     WHEN max(dps.monto_devengado::int)>0
     THEN 'Sueldo'::text
     ELSE 'Sin Goce de Sueldo'::text 
     END as descripcion,
  CASE WHEN count(*)>1 THEN sum(dps.monto_devengado::int) ELSE sum(dps.monto_presupuestado::int) END as presupuestado,
  max(dps.id_oficina) as id_oficina
FROM 
  salarios.planillas_salarios ps
  LEFT JOIN salarios.detalles_planillas_salarios dps ON dps.id_planilla_salario=ps.id_planilla_salario
WHERE 
  CASE 
     WHEN 1=in_id_administracion THEN ps.id_administracion IN (0,1)
     WHEN 2=in_id_administracion THEN ps.id_administracion IN (0,2)
     WHEN 3=in_id_administracion THEN ps.id_administracion IN (0,1,2)
  END AND
  ps.gestion= in_gestion AND
  ps.id_mes= in_mes AND
  ps.id_estado= 1 AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   dps.id_funcionario>0
	ELSE
	   dps.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
  dps.id_funcionario
UNION ALL
-- [113] Gastos de representación
SELECT
   fr.id_funcionario,
   2::int as orden,
   113::int as objeto_gasto,
   'Gastos de representación'::text as descripcion,
   sum(pgrd.presupuestado_parcial::int) as presupuestado,
   max(pgrd.id_oficina) as id_oficina
FROM
   salarios.planilla_gasto_representacion pgr
   LEFT JOIN salarios.planilla_gasto_representacion_detalle pgrd ON pgrd.id_planilla_gasto_representacion=pgr.id_planilla_gasto_representacion
   LEFT JOIN salarios.funcionarios_representaciones           fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pgr.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pgr.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pgr.id_administracion IN (0,1,2)
   END AND
   pgr.gestion=in_gestion AND
   pgr.id_mes=in_mes AND
   pgr.estado=1 AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fr.id_funcionario>0
	ELSE
	   fr.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fr.id_funcionario
UNION ALL
-- [123] Remuneración Extraordinaria (RE)
SELECT
   pred.id_funcionario,
   3::int as orden,
   123::int as objeto_gasto,
   'Remuneración Extraordinaria (RE)'::text as descripcion,
   sum(pred.monto::int) as presupuestado,
   max(pred.id_oficina) as id_oficina
FROM
   salarios.planillas_re pre
   LEFT JOIN salarios.detalles_planillas_re pred ON pred.id_planilla_re=pre.id_planilla_re
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pre.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pre.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pre.id_administracion IN (0,1,2)
   END AND
   pre.gestion=in_gestion AND
   pre.id_mes=in_mes AND
   pre.estado=1 AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   pred.id_funcionario>0
	ELSE
	   pred.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   pred.id_funcionario
UNION ALL
-- [123] Remuneración Adicional (RA)
SELECT
   prad.id_funcionario,
   4::int as orden,
   125::int as objeto_gasto,
   'Remuneración Adicional (RA)'::text as descripcion,
   sum(prad.monto::int) as presupuestado,
   max(prad.id_oficina) as id_oficina
FROM
   salarios.planillas_ra pra
   LEFT JOIN salarios.detalles_planillas_ra prad ON prad.id_planilla_ra=pra.id_planilla_ra
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pra.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pra.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pra.id_administracion IN (0,1,2)
   END AND
   pra.gestion=in_gestion AND
   pra.id_mes=in_mes AND
   pra.estado=1 AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   prad.id_funcionario>0
	ELSE
	   prad.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   prad.id_funcionario
UNION ALL
-- [131] Subsidio Familiar
SELECT
   fs.id_funcionario,
   5::int as orden,
   131::int as objeto_gasto,
   'Subsidio Familiar'::text as descripcion,
   sum(dps.importe_monto::int) as presupuestado,
   max(dps.id_oficina) as id_oficina
FROM
   salarios.planillas_subsidios ps
   LEFT JOIN salarios.detalles_planillas_subsidios dps ON dps.id_planilla_subsidio=ps.id_planilla_subsidio
   LEFT JOIN salarios.funcionarios_subsidios        fs ON fs.id_funcionario_subsidio=dps.id_funcionario_subsidio
   LEFT JOIN salarios.subsidios                      s ON s.id_subsidio=fs.id_subsidio
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN ps.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN ps.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN ps.id_administracion IN (0,1,2)
   END AND
   ps.gestion=in_gestion AND
   ps.id_mes=in_mes AND
   ps.estado=1 AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fs.id_funcionario>0
	ELSE
	   fs.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fs.id_funcionario
UNION ALL
-- [133] Responsabilidad en el cargo
SELECT
   fb.id_funcionario,
   6::int as orden,
   133::int as objeto_gasto,
   'Responsabilidad en el cargo'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%RESPONSABILIDAD%' OR
	b.descripcion ilike '%ABOGADO FISCAL%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario
UNION ALL
-- [133] Gestión Administrativa 20% S.P.
SELECT
   fb.id_funcionario,
   7::int as orden,
   133::int as objeto_gasto,
   'Gestión Administrativa 20% S.P.'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%ADMINISTRATIVA 20%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario
UNION ALL
-- [133] Gestión Administrativa 40% (S.P.+G.R.)
SELECT
   fb.id_funcionario,
   8::int as orden,
   133::int as objeto_gasto,
   'Gestión Administrativa 40% (S.P.+G.R.)'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%ADMINISTRATIVA 40%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario
UNION ALL
--[133] Gestión Administrativa Gs. 450.000
SELECT
   fb.id_funcionario,
   9::int as orden,
   133::int as objeto_gasto,
   'Gestión Administrativa Gs. 450.000'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%ADMINISTRATIVA - 450%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario
UNION ALL
--[133] Gestión Administrativa Gs. 700.000
SELECT
   fb.id_funcionario,
   10::int as orden,
   133::int as objeto_gasto,
   'Gestión Administrativa Gs. 700.000'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%ADMINISTRATIVA - 700%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario
UNION ALL
--[133] Gestión Presupuestaria 20% S.P.
SELECT
   fb.id_funcionario,
   11::int as orden,
   133::int as objeto_gasto,
   'Gestión Presupuestaria 20% S.P.'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%PRESUPUESTARIA 20%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario
UNION ALL
--[133] Gestión Presupuestaria 40% (S.P.+G.R.)
SELECT
   fb.id_funcionario,
   12::int as orden,
   133::int as objeto_gasto,
   'Gestión Presupuestaria 40% (S.P.+G.R.)'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%PRESUPUESTARIA 40%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario
UNION ALL
--[133] Gestión Presupuestaria Gs. 550.000
SELECT
   fb.id_funcionario,
   13::int as orden,
   133::int as objeto_gasto,
   'Gestión Presupuestaria Gs. 550.000'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%PRESUPUESTARIA - 550%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario
UNION ALL   
--[133] Gestión Presupuestaria Gs. 700.000
SELECT
   fb.id_funcionario,
   14::int as orden,
   133::int as objeto_gasto,
   'Gestión Presupuestaria Gs. 700.000'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%PRESUPUESTARIA - 700%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario
   
-- AGREGADO 20150721
UNION ALL
--[133] Gestión Presupuestaria Gs. 500.000 -> a partir del 2015
SELECT
   fb.id_funcionario,
   13::int as orden,
   133::int as objeto_gasto,
   'Gestión Presupuestaria Gs. 500.000'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%PRESUPUESTARIA - 500%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario

UNION ALL
--[133] Gestión Administrativa Gs. 500.000
SELECT
   fb.id_funcionario,
   9::int as orden,
   133::int as objeto_gasto,
   'Gestión Administrativa Gs. 500.000'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%ADMINISTRATIVA - 500%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario
--
   
UNION ALL   
--[133] Insalubridad
SELECT
   fb.id_funcionario,
   15::int as orden,
   133::int as objeto_gasto,
   'Insalubridad'::text as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%INSALUBRIDAD%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario       	            	   
UNION ALL
-- [133] Bonificación por Grado académico
SELECT
   fp.id_funcionario,
   16::int as orden,
   133::int as objeto_gasto,
   'Bonificación por Grado académico'::text as descripcion,
   sum(dpp.importe_profesional::int) as presupuestado,
   max(dpp.id_oficina) as id_oficina
FROM
   salarios.planilla_profesionales pp
   LEFT JOIN salarios.detalle_planillas_profesionales dpp ON dpp.id_planilla_profesional=pp.id_planilla_profesional
   LEFT JOIN salarios.funcionarios_profesionales       fp ON fp.id_funcionario_profesional=dpp.id_funcionario_profesional
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pp.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pp.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pp.id_administracion IN (0,1,2)
   END AND
   pp.gestion=in_gestion AND
   pp.id_mes=in_mes AND
   pp.estado=1 AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fp.id_funcionario>0
	ELSE
	   fp.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fp.id_funcionario   
UNION ALL
-- [133] Bonificación por Antiguedad
SELECT
   dpa.id_funcionario,
   17::int as orden,
   133::int as objeto_gasto,
   'Bonificación por Antiguedad'::text as descripcion,
   sum(dpa.importe_antiguedad::int) as presupuestado,
   max(dpa.id_oficina) as id_oficina
FROM
   salarios.planillas_antiguedad pa
   LEFT JOIN salarios.detalle_planilla_antiguedad dpa ON dpa.id_planilla_antiguedad=pa.id_planilla_antiguedad
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pa.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pa.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pa.id_administracion IN (0,1,2)
   END AND
   pa.gestion=in_gestion AND
   pa.id_mes=in_mes AND
   pa.estado=1 AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   dpa.id_funcionario>0
	ELSE
	   dpa.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   dpa.id_funcionario
UNION ALL   
--[133] ORDENADOR DE GASTOS Y/O HABILITADO PAGADOR
SELECT
   fb.id_funcionario,
   6::int as orden,
   133::int as objeto_gasto,
   max(b.descripcion::text) as descripcion,
   sum(dpb.monto_total::int) as presupuestado,
   max(dpb.id_oficina) as id_oficina
FROM
   salarios.planillas_bonificaciones pb
   LEFT JOIN salarios.detalles_planillas_bonificaciones dpb ON dpb.id_planilla_bonificacion=pb.id_planilla_bonificacion
   LEFT JOIN salarios.funcionarios_bonificaciones        fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
   INNER JOIN salarios.bonificaciones                     b ON b.id_bonificacion=fb.id_bonificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pb.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pb.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pb.id_administracion IN (0,1,2)
   END AND
   pb.gestion=in_gestion AND
   pb.id_mes=in_mes AND
   pb.estado=1 AND
   (
	b.descripcion ilike '%PAGADOR%'
   ) AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   fb.id_funcionario>0
	ELSE
	   fb.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   fb.id_funcionario
UNION ALL
-- [137] Gratificaciones por Servicios Especiales
SELECT
   dpge.id_funcionario,
   18::int as orden,
   137::int as objeto_gasto,
   'Gratificaciones por Servicios Especiales'::text as descripcion,
   sum(dpge.importe_gratificacion::int) as presupuestado,
   max(dpge.id_oficina) as id_oficina
FROM
   salarios.planilla_gratificacion_especial pge
   LEFT JOIN salarios.detalle_planilla_gratificacion_especial dpge ON dpge.id_planilla_gratificacion=pge.id_planilla_gratificacion
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pge.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pge.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pge.id_administracion IN (0,1,2)
   END AND
   pge.gestion=in_gestion AND
   pge.id_mes=in_mes AND
   pge.estado=1 AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   dpge.id_funcionario>0
	ELSE
	   dpge.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   dpge.id_funcionario
UNION ALL
-- [199] Otros Gastos del Personal
SELECT
   pdsd.id_funcionario,
   19::int as orden,
   199::int as objeto_gasto,
   'Otros Gastos del Personal'::text as descripcion,
   sum(pdsd.importe_monto_diferencia::int) as presupuestado,
   max(pdsd.id_oficina) as id_oficina
FROM
   salarios.planilla_diferencia_salarial pds
   LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pds.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pds.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pds.id_administracion IN (0,1,2)
   END AND
   pds.gestion=in_gestion AND
   pds.id_mes=in_mes AND
   pds.estado=1 AND
   pds.id_tipo_pagos_varios=2 AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   pdsd.id_funcionario>0
	ELSE
	   pdsd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   pdsd.id_funcionario
UNION ALL   
-- [199] Diferencia Salarial
SELECT
   pdsd.id_funcionario,
   20::int as orden,
   199::int as objeto_gasto,
   'Diferencia Salarial'::text as descripcion,
   sum(pdsd.importe_monto_diferencia::int) as presupuestado,
   max(pdsd.id_oficina) as id_oficina
FROM
   salarios.planilla_diferencia_salarial pds
   LEFT JOIN salarios.planilla_diferencia_salarial_detalle pdsd ON pdsd.id_planilla_diferencia_salarial=pds.id_planilla_diferencia_salarial
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN pds.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN pds.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN pds.id_administracion IN (0,1,2)
   END AND
   pds.gestion=in_gestion AND
   pds.id_mes=in_mes AND
   pds.estado=1 AND
   pds.id_tipo_pagos_varios=1 AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   pdsd.id_funcionario>0
	ELSE
	   pdsd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   pdsd.id_funcionario
UNION ALL
-- [849] OTRAS TRANFERENCIAS CORRIENTES
SELECT
   potcd.id_funcionario,
   21::int as orden,
   849::int as objeto_gasto,
   'Otras Transferencias Corrientes'::text as descripcion,
   sum(potcd.importe_otra_transferencia_cte::int) as presupuestado,
   max(potcd.id_oficina) as id_oficina
FROM
   salarios.planillas_otras_transferencias_ctes potc
   LEFT JOIN salarios.planillas_otras_transferencias_ctes_detalles potcd ON potcd.id_planilla_otra_transferencia_cte=potc.id_planilla_otra_transferencia_cte
WHERE
   CASE 
      WHEN 1=in_id_administracion THEN potc.id_administracion IN (0,1)
      WHEN 2=in_id_administracion THEN potc.id_administracion IN (0,2)
      WHEN 3=in_id_administracion THEN potc.id_administracion IN (0,1,2)
   END AND
   potc.gestion=in_gestion AND
   potc.id_mes=in_mes AND
   potc.estado=1 AND
   (
     CASE
	WHEN 
	   '0'=in_id_funcionario
	THEN
	   potcd.id_funcionario>0
	ELSE
	   potcd.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
     END  
   )
GROUP BY
   potcd.id_funcionario;
END;
]]></definition>
</function>

<function name="web_sfp_permanentes_pagos_detalles"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="nombres">
		<type name="text"/>
	</parameter>
	<parameter name="apellidos">
		<type name="text"/>
	</parameter>
	<parameter name="estado">
		<type name="text"/>
	</parameter>
	<parameter name="total_remunerado">
		<type name="bigint"/>
	</parameter>
	<parameter name="objeto_gasto">
		<type name="integer"/>
	</parameter>
	<parameter name="fuente">
		<type name="integer"/>
	</parameter>
	<parameter name="presupuestado">
		<type name="bigint"/>
	</parameter>
	<parameter name="descripcion">
		<type name="text"/>
	</parameter>
	<parameter name="nombre_cargo">
		<type name="text"/>
	</parameter>
	<parameter name="anho_ingreso">
		<type name="integer"/>
	</parameter>
	<parameter name="id_administracion">
		<type name="integer"/>
	</parameter>
	<parameter name="tipo">
		<type name="text"/>
	</parameter>
	<parameter name="orden">
		<type name="integer"/>
	</parameter>
	<parameter name="n1">
		<type name="integer"/>
	</parameter>
	<parameter name="n2">
		<type name="integer"/>
	</parameter>
	<parameter name="n3">
		<type name="integer"/>
	</parameter>
	<parameter name="n4">
		<type name="integer"/>
	</parameter>
	<parameter name="n5">
		<type name="integer"/>
	</parameter>
	<parameter name="id_oficina">
		<type name="integer"/>
	</parameter>
	<parameter name="tipo_funcionario">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_mes" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado detallado de las liquidaciones de los funcionarios permanentes 
  * por administracion, mes, gestion y/o id_funcionario
  * Creado    : 2014-07-11 14:35:00
  * Modificado: 2015-02-20 10:33:00
  * Modificado: 2016-02-12 17:09:00
  * Autor: Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros:
  *            in_id_administracion administración del proceso		
  *            in_id_mes            mes de proceso
  *            in_gestion           ejercicio aplicado 
  * 	       in_id_funcionario    '0':todos '466,481,...':ids_funcionarios específicos
  * Descripcion:  para la WEB con datos solicitados por la LEY 5.189/2014 "Que establece la obligatoriedad de la 
  *               provisión de Informaciones en el uso de los recursos públicos sobre remuneraciones y otras 
  *               retribuciones asignadas al servidor público de la República del Paraguay"
  * ------------  
  */
RETURN QUERY
-- [111] Sueldo
-- [113] Gastos de representación
-- [131] Subsidio Familiar
-- [133] Responsabilidad en el cargo
-- [133] Bonificación por Grado académico
-- [133] Bonificación por Antiguedad
-- [137] Gratificaciones por Servicios Especiales
-- [199] Otros Gastos del Personal
-- [232] Viáticos y movilidad --> TESORERIA  
SELECT 
   f.id_funcionario as id,
   trim(replace(to_char(f.cedula_funcionario::int,'999,999,999'),',','.'))::text as cedula,
   initcap(f.nombre_funcionario::text) as nombres,
   initcap(f.apellido_funcionario::text) as apellidos,
   'Permanente'::text as estado,
   consolidado.total::bigint as total_remunerado,
   concepto.objeto_gasto,
   (
      SELECT
         CASE
            WHEN concepto.id_oficina::text=ANY(('{'||'
					     2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,
                                             2180,2181,2182,2183,2184,2185,2186,2187,2249,2250,2251,2252,
                                             2253,2254,2255,2256,2257,2258,2259,2329,2330,2337,2498,2506,
                                             2507,2508,2511,
                                             3007,3008,3011,3014,3015,3016,
                                             2627, 2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,
                                             3640,3641,3642,3644,3645,3646,3647,3650,3651,
					     3669,3678,3748,3749,3750,3751,3752,3753,3754,3755,3756,3757,
					     3758,3759,3768
                                             '||'}')::text[])
            THEN CASE WHEN concepto.objeto_gasto IN (111,113,131,137) THEN 10 ELSE 30 END
            ELSE 10
           END
   ) as fuente,
   concepto.presupuestado,
   concepto.descripcion::text,
   (car.nombre_cargo::text) cargo,
   extract(year from saa.fecha_inicio)::int as anho_ingreso,
   f.id_administracion,
   saa.id_tipo_funcionario::text as tipo,
   concepto.orden,
   o.nivel1,
   o.nivel2,
   o.nivel3,
   o.nivel4,
   o.nivel5,
   concepto.id_oficina,
   1::integer as tipo_funcionario
FROM
   legajos.funcionarios f
   LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=f.id_funcionario
   LEFT JOIN (
      SELECT 
         l.id_funcionario,
	 l.orden,
	 l.objeto_gasto,
	 l.descripcion,
	 l.presupuestado,
	 l.id_oficina
      FROM
         salarios.web_sfp_permanentes_pagos(in_id_administracion,in_id_mes,in_gestion,in_id_funcionario) l
   ) concepto ON concepto.id_funcionario=f.id_funcionario
   LEFT JOIN (
      SELECT 
         totales.id_funcionario,
         sum(totales.presupuestado) as total 
      FROM
         (
            SELECT
               s.id_funcionario,
               s.presupuestado
            FROM
               salarios.web_sfp_permanentes_pagos(in_id_administracion,in_id_mes,in_gestion,in_id_funcionario) s
          ) totales
      GROUP BY
         totales.id_funcionario   
   ) consolidado ON consolidado.id_funcionario=f.id_funcionario
   -- CATEGORIA
   LEFT JOIN (
	SELECT 
	   fc2.id_funcionario,
	   max(fc2.id_funcionario_categoria) as id_funcionario_categoria
	FROM 
	   salarios.funcionarios_categorias fc2
	WHERE 
	   fc2.gestion = in_gestion 
	   AND fc2.id_administracion IN(0,1,2)
	   AND (in_id_mes BETWEEN  extract(MONTH from fc2.desde) AND extract(MONTH from fc2.hasta-1) OR fc2.hasta is null) 
	GROUP BY
	   fc2.id_funcionario
   ) fc ON fc.id_funcionario=f.id_funcionario
   LEFT JOIN salarios.funcionarios_categorias   fc3 ON (fc3.id_funcionario_categoria = fc.id_funcionario_categoria)
   LEFT JOIN salarios.detalles_categorias        dc ON (dc.id_detalle_categoria = fc3.id_detalle_categoria)
   LEFT JOIN salarios.categorias                  c ON (c.id_categoria = dc.id_categoria) AND c.gastos_de_representacion is false
   LEFT JOIN salarios.cargos                    car ON (car.id_cargo = c.id_cargo)
   LEFT JOIN legajos.oficinas_con_descripciones   o ON (o.id_oficina=fc3.id_oficina)
WHERE
   CASE 
      WHEN '1'=in_id_administracion THEN f.id_administracion IN (0,1)
      WHEN '2'=in_id_administracion THEN f.id_administracion IN (0,2)
      WHEN '3'=in_id_administracion THEN f.id_administracion IN (0,1,2)
   END AND
   saa.id_tipo_funcionario IN('PER')
   AND concepto.orden>0
   --f.estado_funcionario AND
   --AND concepto.id_oficina is not null
   --AND f.id_administracion IN(0,1)
   --AND f.id_funcionario IN(223,466,218,299,1432)
   --AND ff.f_f>0
;

END;
]]></definition>
</function>

<function name="web_sfp_resumen_anual"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="100"
		row-amount="1000">
	<schema name="salarios"/>
	<role name="postgres"/>
	<language name="plpgsql" sql-disabled="true"/>
	<return-type>
	<parameter name="id">
		<type name="integer"/>
	</parameter>
	<parameter name="cedula">
		<type name="text"/>
	</parameter>
	<parameter name="nombres">
		<type name="text"/>
	</parameter>
	<parameter name="apellidos">
		<type name="text"/>
	</parameter>
	<parameter name="c1">
		<type name="numeric"/>
	</parameter>
	<parameter name="c2">
		<type name="numeric"/>
	</parameter>
	<parameter name="c3">
		<type name="numeric"/>
	</parameter>
	<parameter name="c4">
		<type name="numeric"/>
	</parameter>
	<parameter name="c5">
		<type name="numeric"/>
	</parameter>
	<parameter name="c6">
		<type name="numeric"/>
	</parameter>
	<parameter name="c7">
		<type name="numeric"/>
	</parameter>
	<parameter name="c8">
		<type name="numeric"/>
	</parameter>
	<parameter name="rte">
		<type name="numeric"/>
	</parameter>
	<parameter name="estado">
		<type name="text"/>
	</parameter>
	<parameter name="a_ingreso">
		<type name="integer"/>
	</parameter>
	</return-type>
	<parameter name="in_id_administracion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_gestion" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_tipo_funcionario" in="true">
		<type name="integer"/>
	</parameter>
	<parameter name="in_id_funcionario" in="true">
		<type name="text"/>
	</parameter>
	<definition><![CDATA[
BEGIN
/*
  * Funcion para generar un listado personalizado de resumen del ejercicio de permanentes/comisionados/contratdos   
  * del Ministerio según Ley Nº 5.189/in_gestion Art 7º por administracion, mes, gestion y/o id_funcionario
  * Creado     : 2015-01-15 13:15:00
  * Modificado : 2015-01-29 16:30:00
  * Autor      : Lic. Gustavo Eloy Alcaraz Bogado
  * Parametros :
  *              in_id_administracion administración del proceso (1:DA, 2:SET, 3: AMBAS)		
  *              in_gestion           ejercicio aplicado         Ej.: 2014
  *              in_tipo_funcionario  tipo funcionario           (1:Permanente, 2:Comisionado, 3:Permanente y Comisionado, 
  *                                                               4:Contratado, 5:Permanente y Contratado, 6: Comisionado y Contratado
  *                                                               7:Todos)
  * 	         in_id_funcionario    funcionario/s              Ej.:'0':todos, '466,481,...':ids_funcionarios específicos
  * Descripcion:  
  *              para la WEB con datos solicitados por la LEY 5.189/in_gestion "Que establece la obligatoriedad de la 
  *              provisión de Informaciones en el uso de los recursos públicos sobre remuneraciones y otras 
  *              retribuciones asignadas al servidor público de la República del Paraguay" Art. 7º
  * ------------  
  */
RETURN QUERY
-- SELECT-SQL RESUMEN DEL EJERCICIO LEY No. 5.189/in_gestion
SELECT
   total.id_funcionario::integer,
   trim(total.cedula_funcionario::text),
   trim(total.nombre_funcionario::text),
   REPLACE(trim(total.apellido_funcionario::text),CHR(10),''),
   (total.c1-COALESCE(rv.sueldo,0)) as c1, -- 111+114
   (total.c2-COALESCE(rv.gasto_representacion,0)) as c2, -- 113+114
   (total.c3-COALESCE(rv.re,0)) as c3, -- 123_125+114
   (total.c4-(COALESCE(rv.bonif_gratificacion,0)+COALESCE(rv.grado_academico,0)+COALESCE(rv.antiguedad,0))) as c4, -- 131_139+114
   (total.c5-COALESCE(rv.diferencia_salarial,0)) as c5, -- 199+114
   total.c6, -- 845
   total.c7, -- 849
   total.c8, -- 141_144_145+114
   ((total.c1+total.c2+total.c3+total.c4+total.c5+total.c6+total.c7+total.c8)-(
    COALESCE(rv.sueldo,0)+
    COALESCE(rv.gasto_representacion,0)+
    COALESCE(rv.re,0)+
    COALESCE(rv.bonif_gratificacion,0)+
    COALESCE(rv.grado_academico,0)+
    COALESCE(rv.antiguedad,0)+
    COALESCE(rv.diferencia_salarial,0)
   )) as rte,
   total.estado::text,
   total.a_ingreso::integer
FROM
   (
	SELECT
	   rea.id_funcionario,
	   rea.nombre_funcionario,
	   rea.apellido_funcionario,
	   rea.cedula_funcionario,
	   (rea.trb_c1_111+rea.trb_c1a_111) as c1, -- 111+114
	   (rea.trb_c2_113+rea.trb_c2a_113) as c2, -- 113+114
	   (rea.trt_c3_123_125+rea.trt_c3a_123_125) as c3, -- 123_125+114
	   (
	      rea.tac_c4_0_131+
	      rea.tac_c4_1_133+rea.tac_c4a_1_133+
	      rea.tac_c4_2_133+rea.tac_c4a_2_133+
	      rea.tac_c4_3_133+rea.tac_c4a_3_133+
	      rea.tac_c4_4_133+rea.tac_c4a_4_133+
	      rea.tac_c4_5_137+rea.tac_c4a_5_137
	   ) as c4, --131_139+114
	   (rea.ogp_c5_199+rea.ogp_c5a_199) as c5, -- 199+114
	   (rea.prv_c6_845) as c6, -- 845
	   (rea.otc_c7_849) as c7, -- 849
	   (
	      rea.c_c8_1_141_144_145+rea.c_c8a_1_141_144_145+
	      rea.c_c8_2_141_144_145+rea.c_c8a_2_141_144_145+
	      rea.c_c8_3_141_144_145+rea.c_c8a_3_141_144_145+
	      rea.c_c8_4_141_144_145+rea.c_c8a_4_141_144_145+
	      rea.c_c8_5_141_144_145 
	   ) as c8, -- 141_144_145+114
	    
	   rea.estado,
	   rea.ai as a_ingreso
	FROM (
		SELECT
		   fun.id_funcionario,
		   fun.nombre_funcionario,
		   fun.apellido_funcionario,
		   fun.cedula_funcionario,
		   
		   --PERMANENTES/COMISIONADOS
		   -- COLUMNA 1
		   COALESCE(c1.c1,0)  as trb_c1_111,-- SUELDO [111]
		   COALESCE((c1.c1/12)::numeric(12,0),0) as trb_c1a_111,-- SUELDO AGUINALDO [114]
		   -- COALESCE(c1a.ma,0) as trb_c1a_111,-- SUELDO AGUINALDO [114]
		   -- COLUMNA 2
		   COALESCE(c2.c2,0)  as trb_c2_113,-- GASTO REPRESENTACION [113]
		   COALESCE((c2.c2/12)::numeric(12,0),0) as trb_c2a_113,-- GASTO DE REPRESENTACION AGUINALDO [113]
		   -- COALESCE(c2a.ma,0) as trb_c2a_113,-- GASTO DE REPRESENTACION AGUINALDO [113]
		   -- COLUMNA 3
		   (COALESCE(c3_1.c3_1,0)+COALESCE(c3_2.c3_2,0))::numeric(12,0) as trt_c3_123_125,-- RE + RA [123-125]
		   (COALESCE((c3_1.c3_1/12)::numeric(12,0),0)+COALESCE(c3a_2.ma,0))::numeric(12,0)   as trt_c3a_123_125,-- RE + RA AGUINALDO [123-125]
		   -- (COALESCE(c3a_1.ma,0)+COALESCE(c3a_2.ma,0))::numeric(12,0)   as trt_c3a_123_125,-- RE + RA AGUINALDO [123-125]
		   -- COLUMNA 4
		   COALESCE(c4_0.c4_0,0) as tac_c4_0_131,-- SUBSIDIO FAMILIAR [131]
		   COALESCE(c4_1.c4_1,0) as tac_c4_1_133,-- GRATIF. Y BONF. [133]
		   COALESCE((c4_1.c4_1/12)::numeric(12,0),0)  as tac_c4a_1_133,-- GRATIF. Y BONF. AGUINALDO [133]
		   -- COALESCE(c4a_1.ma,0)  as tac_c4a_1_133,-- GRATIF. Y BONF. AGUINALDO [133]
		   COALESCE(c4_2.c4_2,0) as tac_c4_2_133,-- GRATIF. Y BONF. PROFESIONAL [133]
		   COALESCE((c4_2.c4_2/12)::numeric(12,0),0)  as tac_c4a_2_133,-- GRATIF. Y BONF. PROFESIONAL AGUINALDO [133] 
		   -- COALESCE(c4a_2.ma,0)  as tac_c4a_2_133,-- GRATIF. Y BONF. PROFESIONAL AGUINALDO [133]   
		   COALESCE(c4_3.c4_3,0) as tac_c4_3_133,-- GRATIF. Y BONF. ANTIGUEDAD [133]
		   COALESCE((c4_3.c4_3/12)::numeric(12,0),0)  as tac_c4a_3_133,-- GRATIF. Y BONF. ANTIGUEDAD AGUINALDO [133] 
		   -- COALESCE(c4a_3.ma,0)  as tac_c4a_3_133,-- GRATIF. Y BONF. ANTIGUEDAD AGUINALDO [133] 
		   COALESCE(c4_4.c4_4,0) as tac_c4_4_133,-- BONIFICACIONES Y GRATIFICACIONES OCASIONAL [133]
		   COALESCE(c4a_4.ma,0)  as tac_c4a_4_133,-- AGUINALDO BONIFICACIONES Y GRATIFICACIONES OCASIONAL [133] 
		   COALESCE(c4_5.c4_5,0) as tac_c4_5_137,-- GRATIF. SERVICIOS ESPECIALES [137] 
		   COALESCE((c4_5.c4_5/12)::numeric(12,0),0)  as tac_c4a_5_137,-- AGUINALDO GRATIF. SERVICIOS ESPECIALES [137]
		   -- COALESCE(c4a_5.ma,0)  as tac_c4a_5_137,-- AGUINALDO GRATIF. SERVICIOS ESPECIALES [137] 
		   -- COLUMNA 5
		   COALESCE(c5.c5,0)  as ogp_c5_199,-- OTROS GASTOS DEL PERSONAL  [199]
		   COALESCE((c5.c5/12)::numeric(12,0),0) as ogp_c5a_199,-- AGUINALDO OTROS GASTOS DEL PERSONAL  [199] 
		   -- COALESCE(c5a.ma,0) as ogp_c5a_199,-- AGUINALDO OTROS GASTOS DEL PERSONAL  [199] 
		   -- COLUMNA 6
		   COALESCE(c6.c6,0) as prv_c6_845,-- PROGRAMA DE RETIRO VOLUNTARIO [845]
		   -- COLUMNA 7
		   COALESCE(c7.c7,0) as otc_c7_849,-- OTRAS TRANSFERENCIAS CORRIENTES [849]
		   --CONTRATADOS
		   -- COLUMNA 8
		   COALESCE(c8_1.c8_1,0) as c_c8_1_141_144_145,-- SUELDO CONTRATADOS [141_144_145]
		   COALESCE(c8a_1.ma,0)  as c_c8a_1_141_144_145,-- SUELDO AGUINALDO CONTRATADOS [141_144_145] 
		   COALESCE(c8_2.c8_2,0) as c_c8_2_141_144_145,-- REMUNERACION EXTRAORDINARIA CONTRATADOS [141_144_145]
		   COALESCE(c8a_2.ma,0)  as c_c8a_2_141_144_145,-- REMUNERACION EXTRAORDINARIA AGUINALDO CONTRATADOS [141_144_145] 
		   COALESCE(c8_3.c8_3,0) as c_c8_3_141_144_145,-- REMUNERACION ADICIONAL CONTRATADOS [141_144_145]
		   COALESCE(c8a_3.ma,0)  as c_c8a_3_141_144_145,-- REMUNERACION ADICIONAL AGUINALDO CONTRATADOS [141_144_145] 
		   COALESCE(c8_4.c8_4,0) as c_c8_4_141_144_145,-- GRATIFICACION OCASIONAL CONTRATADOS [141_144_145]
		   COALESCE(c8a_4.ma,0)  as c_c8a_4_141_144_145,-- GRATIFICACION OCASIONAL AGUINALDO CONTRATADOS [141_144_145] 
                   COALESCE(c8_5.c8_5,0) as c_c8_5_141_144_145,-- SUBSIDIO FAMILIAR CONTRATADOS [141_144_145]
		   
		   EXTRACT(year FROM saa.fecha_inicio)::integer as ai,
		   CASE WHEN saa.id_tipo_funcionario='PER' THEN 'Permanente' ELSE (CASE WHEN saa.id_tipo_funcionario='COM' THEN 'Comisionado' ELSE 'Contratado' END) END as estado
		FROM
		   legajos.funcionarios fun
		   LEFT JOIN legajos.situacion_administrativa_actual saa ON saa.id_funcionario=fun.id_funcionario
		   -- PERMANENTES
		   LEFT JOIN (
		      -- AGUINALDO SUELDOS[114]
			SELECT
			   fa.id_funcionario,
			   (sum(pda.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios.planillas_detalles_aguinaldos pda
			   LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
			   LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=1
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c1a ON c1a.id_funcionario=fun.id_funcionario
		   LEFT JOIN (
			-- SALARIOS [111]
			SELECT
			   dps.id_funcionario,
			   sum(dps.monto_devengado)::NUMERIC(12,0) c1
			FROM
			   salarios.detalles_planillas_salarios dps
			   LEFT JOIN salarios.planillas_salarios ps ON ps.id_planilla_salario=dps.id_planilla_salario
			WHERE
			   ps.gestion=in_gestion AND
			   ps.id_estado=1
			GROUP BY
			   dps.id_funcionario
		   ) c1 ON c1.id_funcionario=fun.id_funcionario
		   
		   LEFT JOIN (
		      -- AGUINALDO GASTO DE REPRESENTACION[113]
			SELECT
			   fa.id_funcionario,
			   (sum(pda.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios.planillas_detalles_aguinaldos pda
			   LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
			   LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=2
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c2a ON c2a.id_funcionario=fun.id_funcionario
		   LEFT JOIN (
			-- GASTO DE REPRESENTACION [113]
			SELECT
			  fr.id_funcionario,
			  sum(pgrd.devengado_parcial)::numeric(12,0) as c2
			FROM
			   salarios.planilla_gasto_representacion_detalle pgrd
			   LEFT JOIN salarios.funcionarios_representaciones  fr ON fr.id_funcionario_representacion=pgrd.id_funcionario_representacion
			   LEFT JOIN salarios.planilla_gasto_representacion pgr ON pgr.id_planilla_gasto_representacion=pgrd.id_planilla_gasto_representacion
			WHERE
			   pgr.gestion=in_gestion
			GROUP BY
			   fr.id_funcionario   
		   ) c2 ON c2.id_funcionario=fun.id_funcionario
		   
		   LEFT JOIN (
		      -- AGUINALDO REMUNERACION EXTRAOIRDINARIO [123]
			SELECT
			   fa.id_funcionario,
			   (sum(pda.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios.planillas_detalles_aguinaldos pda
			   LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
			   LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=9
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c3a_1 ON c3a_1.id_funcionario=fun.id_funcionario
		   LEFT JOIN (
		      -- REMUNERACION EXTRAORDINARIA [123]
			SELECT
			   dpre.id_funcionario,
			   sum(dpre.monto)::numeric(12,0) as c3_1
			FROM
			   salarios.detalles_planillas_re dpre
			   LEFT JOIN salarios.planillas_re pre ON pre.id_planilla_re=dpre.id_planilla_re
			WHERE
			   pre.gestion=in_gestion AND
			   pre.estado=1
			GROUP BY
			   dpre.id_funcionario
		   ) c3_1 ON c3_1.id_funcionario=fun.id_funcionario
		   
		   LEFT JOIN (
		      -- AGUINALDO REMUNERACION ADICIONAL [123]
			SELECT
			   fa.id_funcionario,
			   (sum(pda.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios.planillas_detalles_aguinaldos pda
			   LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
			   LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=10 
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c3a_2 ON c3a_2.id_funcionario=fun.id_funcionario   
		   LEFT JOIN (
			-- REMUNERACION ADICIONAL [125]
			SELECT
			   dpra.id_funcionario,
			   sum(dpra.monto)::numeric(12,0) as c3_2
			FROM
			   salarios.detalles_planillas_ra dpra
			   LEFT JOIN salarios.planillas_ra pra ON pra.id_planilla_ra=dpra.id_planilla_ra
			WHERE
			   pra.gestion=in_gestion AND
			   pra.estado=1
			GROUP BY
			   dpra.id_funcionario
		   ) c3_2 ON c3_2.id_funcionario=fun.id_funcionario
  
		   LEFT JOIN (
			-- SUBSIDIO FAMILIAR [131]
			SELECT
			   fs.id_funcionario,
			   --max(b.descripcion) as descripcion,
			   sum(dps.importe_monto)::numeric(12,0) as c4_0
			FROM
			   salarios.detalles_planillas_subsidios dps
			   LEFT JOIN salarios.planillas_subsidios    ps ON ps.id_planilla_subsidio=dps.id_planilla_subsidio
			   LEFT JOIN salarios.funcionarios_subsidios fs ON fs.id_funcionario_subsidio=dps.id_funcionario_subsidio
			WHERE
			   ps.gestion=in_gestion AND
			   ps.estado=1
			GROUP BY
			   fs.id_funcionario
		   ) c4_0 ON c4_0.id_funcionario=fun.id_funcionario
		   
		   LEFT JOIN (
		      -- AGUINALDO BONIFICACIONES Y GRATIFICACIONES [133]
			SELECT
			   fa.id_funcionario,
			   (sum(pda.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios.planillas_detalles_aguinaldos pda
			   LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
			   LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=3
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c4a_1 ON c4a_1.id_funcionario=fun.id_funcionario    
		   LEFT JOIN (
			-- BONIFICACIONES Y GRATIFICACIONES [133]
			SELECT
			   fb.id_funcionario,
			   --max(b.descripcion) as descripcion,
			   sum(dpb.monto_total)::numeric(12,0) as c4_1
			FROM
			   salarios.detalles_planillas_bonificaciones dpb
			   LEFT JOIN salarios.planillas_bonificaciones    pb ON pb.id_planilla_bonificacion=dpb.id_planilla_bonificacion
			   LEFT JOIN salarios.funcionarios_bonificaciones fb ON fb.id_funcionario_bonificacion=dpb.id_funcionario_bonificacion
			   LEFT JOIN salarios.bonificaciones b ON b.id_bonificacion=fb.id_bonificacion
			WHERE
			   pb.gestion=in_gestion AND
			   pb.estado=1
			GROUP BY
			   fb.id_funcionario
		   ) c4_1 ON c4_1.id_funcionario=fun.id_funcionario
		   
		   LEFT JOIN (
		      -- AGUINALDO BONIFICACIONES Y GRATIFICACIONES PROFESIONAL [133]
			SELECT
			   fa.id_funcionario,
			   (sum(pda.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios.planillas_detalles_aguinaldos pda
			   LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
			   LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=4
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c4a_2 ON c4a_2.id_funcionario=fun.id_funcionario   
		   LEFT JOIN (
		      -- BONIFICACIONES Y GRATIFICACIONES PROFESIONAL [133]
			SELECT
			  fp.id_funcionario,
			  sum(dpp.importe_profesional)::numeric(12,0) as c4_2
			FROM
			   salarios.detalle_planillas_profesionales dpp
			   LEFT JOIN salarios.planilla_profesionales    pp ON pp.id_planilla_profesional=dpp.id_planilla_profesional
			   LEFT JOIN salarios.funcionarios_profesionales fp ON fp.id_funcionario_profesional=dpp.id_funcionario_profesional
			WHERE
			   pp.gestion=in_gestion AND
			   pp.estado=1
			GROUP BY
			   fp.id_funcionario
		   ) c4_2 ON c4_2.id_funcionario=fun.id_funcionario
		   
		   LEFT JOIN (
		      -- AGUINALDO BONIFICACIONES Y GRATIFICACIONES ANTIGUEDAD [133]
			SELECT
			   fa.id_funcionario,
			   (sum(pda.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios.planillas_detalles_aguinaldos pda
			   LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
			   LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=5
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c4a_3 ON c4a_3.id_funcionario=fun.id_funcionario    
		   LEFT JOIN (
			-- BONIFICACIONES Y GRATIFICACIONES ANTIGUEDAD [133]
			SELECT
			   dpa.id_funcionario,
			   sum(dpa.importe_antiguedad)::numeric(12,0) as c4_3
			FROM
			   salarios.detalle_planilla_antiguedad dpa
			   LEFT JOIN salarios.planillas_antiguedad pa ON pa.id_planilla_antiguedad=dpa.id_planilla_antiguedad
			WHERE
			   pa.gestion=in_gestion AND
			   pa.estado=1
			GROUP BY
			   dpa.id_funcionario   
		   ) c4_3 ON c4_3.id_funcionario=fun.id_funcionario
		   
		   LEFT JOIN (
		      -- AGUINALDO BONIFICACIONES Y GRATIFICACIONES OCASIONAL [133]
			SELECT
			   fa.id_funcionario,
			   (sum(pda.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios.planillas_detalles_aguinaldos pda
			   LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
			   LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=8
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c4a_4 ON c4a_4.id_funcionario=fun.id_funcionario 
		   LEFT JOIN (
			-- BONIFICACIONES Y GRATIFICACIONES OCASIONAL [133]
			SELECT
			   dpgo.id_funcionario,
			   sum(dpgo.importe_gratificacion)::numeric(12,0) as c4_4
			FROM
			   salarios.detalle_planilla_gratificacion_ocacional dpgo
			   LEFT JOIN salarios.planilla_gratificacion_ocacional pgo ON pgo.id_planilla_gratificacion_ocacional=dpgo.id_planilla_gratificacion_ocacional
			WHERE
			   pgo.gestion=in_gestion AND
			   pgo.estado=1
			GROUP BY
			   dpgo.id_funcionario   
		   ) c4_4 ON c4_4.id_funcionario=fun.id_funcionario

		   LEFT JOIN (
		      --AGUINALDO GRATIFICACIONES SERVICIOS ESPECIALES [137]
			SELECT
			   fa.id_funcionario,
			   (sum(pda.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios.planillas_detalles_aguinaldos pda
			   LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
			   LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=7
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c4a_5 ON c4a_5.id_funcionario=fun.id_funcionario    
		   LEFT JOIN (
			-- GRATIFICACIONES SERVICIOS ESPECIALES [137]
			SELECT
			   dpge.id_funcionario,
			   sum(dpge.importe_gratificacion)::numeric(12,0) as c4_5
			FROM
			   salarios.detalle_planilla_gratificacion_especial dpge
			   LEFT JOIN salarios.planilla_gratificacion_especial pge ON pge.id_planilla_gratificacion=dpge.id_planilla_gratificacion
			WHERE
			   pge.gestion=in_gestion AND
			   pge.estado=1 
			GROUP BY
			   dpge.id_funcionario
		   ) c4_5 ON c4_5.id_funcionario=fun.id_funcionario

		   LEFT JOIN (
		      --AGUINALDO OTROS PAGOS DEL PERSONAL [199]
			SELECT
			   fa.id_funcionario,
			   (sum(pda.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios.planillas_detalles_aguinaldos pda
			   LEFT JOIN salarios.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pda.id_planilla_aguinaldo
			   LEFT JOIN salarios.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pda.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=6
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c5a ON c5a.id_funcionario=fun.id_funcionario    
		   LEFT JOIN (
			-- OTROS PAGOS DEL PERSONAL [199]
			SELECT
			   COALESCE(fs.id_funcionario,pdsd.id_funcionario) as id_funcionario,
			   sum(pdsd.importe_monto_diferencia)::numeric(12,0) as c5
			FROM
			   salarios.planilla_diferencia_salarial_detalle pdsd
			   LEFT JOIN salarios.planilla_diferencia_salarial pds ON pds.id_planilla_diferencia_salarial=pdsd.id_planilla_diferencia_salarial
			   LEFT JOIN salarios.funcionarios_superiores fs ON fs.id_funcionario_superior=pdsd.id_funcionario_superior
			WHERE
			   pds.gestion=in_gestion AND
			   pds.estado=1 
			GROUP BY
			   COALESCE(fs.id_funcionario,pdsd.id_funcionario)
		   ) c5 ON c5.id_funcionario=fun.id_funcionario
		   
		   LEFT JOIN (
			-- PROGRAMA RETIRO VOLUNTARIO [845]
			SELECT
			   rvpd.id_funcionario,
			   sum(rvpd.item_c_monto_pre_aviso+rvpd.item_d_monto_indemnizacion+item_e_monto_vacaciones+item_f_monto_aguinaldo)::numeric(12,0) as c6
			FROM
			   salarios.retiros_voluntarios_planillas_detalles rvpd
			   LEFT JOIN salarios.retiros_voluntarios_planillas rvp ON rvp.id_retiro_voluntario_planilla=rvpd.id_retiro_voluntario_planilla
			WHERE
			   rvp.gestion_retiro=in_gestion 
			GROUP BY
			   rvpd.id_funcionario   
		   ) c6 ON c6.id_funcionario=fun.id_funcionario
		   LEFT JOIN (
			-- OTRAS TRANSFERENCIAS CORRIENTES [849]
			SELECT
			   potcd.id_funcionario,
			   sum(potcd.importe_otra_transferencia_cte)::numeric(12,0) as c7
			FROM
			   salarios.planillas_otras_transferencias_ctes_detalles potcd
			   LEFT JOIN salarios.planillas_otras_transferencias_ctes potc ON potc.id_planilla_otra_transferencia_cte=potcd.id_planilla_otra_transferencia_cte
			WHERE
			   potc.gestion=in_gestion AND
			   potc.estado=1
			GROUP BY
			   potcd.id_funcionario
		   ) c7 ON c7.id_funcionario=fun.id_funcionario
		   
		   -- CONTRATADOS
		   LEFT JOIN (
		      -- AGUINALDO SUELDO CONTRATADOS [141_144_145]
			SELECT
			   fa.id_funcionario,
			   (sum(pad.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios_contratados.planillas_aguinaldos_detalles pad
			   LEFT JOIN salarios_contratados.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pad.id_planilla_aguinaldo
			   LEFT JOIN salarios_contratados.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pad.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=1
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c8a_1 ON c8a_1.id_funcionario=fun.id_funcionario   
		   LEFT JOIN (
			-- SUELDO CONTRATADOS [141-144-145]
			SELECT
			   psd.id_funcionario,
			   sum(psd.monto_devengado+psd.monto_multa)::numeric(12,0) as c8_1
			FROM
			   salarios_contratados.planillas_salarios_detalles psd
			   LEFT JOIN salarios_contratados.planillas_salarios ps ON ps.id_planilla_salario=psd.id_planilla_salario
			WHERE
			   ps.gestion=in_gestion AND
			   ps.id_estado=1
			GROUP BY
			   psd.id_funcionario
		   ) c8_1 ON c8_1.id_funcionario=fun.id_funcionario
		   
		   LEFT JOIN (
		      -- AGUINALDO REMUNERACION EXTRAORDINARIA CONTRATADOS [141_144_145]
			SELECT
			   fa.id_funcionario,
			   (sum(pad.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios_contratados.planillas_aguinaldos_detalles pad
			   LEFT JOIN salarios_contratados.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pad.id_planilla_aguinaldo
			   LEFT JOIN salarios_contratados.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pad.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=2
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c8a_2 ON c8a_2.id_funcionario=fun.id_funcionario 
		   LEFT JOIN (
			-- REMUNERACION EXTRAORDINARIA CONTRATADOS [141-144-145]
			SELECT
			   pred.id_funcionario,
			   sum(pred.monto)::numeric(12,0) as c8_2
			FROM
			   salarios_contratados.planillas_re_detalles pred
			   LEFT JOIN salarios_contratados.planillas_re pre ON pre.id_planilla_re=pred.id_planilla_re
			WHERE
			   pre.gestion=in_gestion AND
			   pre.estado=1
			GROUP BY
			   pred.id_funcionario
		   ) c8_2 ON c8_2.id_funcionario=fun.id_funcionario
		   
		   LEFT JOIN (
		      -- AGUINALDO REMUNERACION ADICIONAL CONTRATADOS [141_144_145]
			SELECT
			   fa.id_funcionario,
			   (sum(pad.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios_contratados.planillas_aguinaldos_detalles pad
			   LEFT JOIN salarios_contratados.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pad.id_planilla_aguinaldo
			   LEFT JOIN salarios_contratados.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pad.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=3
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c8a_3 ON c8a_3.id_funcionario=fun.id_funcionario 
		   LEFT JOIN (
			-- REMUNERACION ADICIONAL CONTRATADOS [141-144-145]
			SELECT
			   prad.id_funcionario,
			   sum(prad.monto)::numeric(12,0) as c8_3
			FROM
			   salarios_contratados.planillas_ra_detalles prad
			   LEFT JOIN salarios_contratados.planillas_ra pra ON pra.id_planilla_ra=prad.id_planilla_ra
			WHERE
			   pra.gestion=in_gestion AND
			   pra.estado=1
			GROUP BY
			   prad.id_funcionario
		   ) c8_3 ON c8_3.id_funcionario=fun.id_funcionario
		   
		   LEFT JOIN (
		      -- AGUINALDO GRATIFICACION OCASIONAL CONTRATADOS [141_144_145]
			SELECT
			   fa.id_funcionario,
			   (sum(pad.monto)::numeric(12,0)/12)::numeric(12,0) as ma
			FROM
			   salarios_contratados.planillas_aguinaldos_detalles pad
			   LEFT JOIN salarios_contratados.planillas_aguinaldos pa ON pa.id_planilla_aguinaldo=pad.id_planilla_aguinaldo
			   LEFT JOIN salarios_contratados.funcionarios_aguinaldos fa ON fa.id_funcionario_aguinaldo=pad.id_funcionario_aguinaldo
			WHERE
			   pa.gestion=in_gestion AND
			   pa.id_tipo_aguinaldo=4
			GROUP BY 
			   pa.id_tipo_aguinaldo,fa.id_funcionario
		   ) c8a_4 ON c8a_4.id_funcionario=fun.id_funcionario    
		   LEFT JOIN (
			-- GRATIFICACION OCASIONAL CONTRATADOS [141-144-145]
			SELECT
			   pgod.id_funcionario,
			   sum(pgod.importe_gratificacion)::numeric(12,0) as c8_4
			FROM
			   salarios_contratados.planillas_gratificaciones_ocasionales_detalles pgod
			   LEFT JOIN salarios_contratados.planillas_gratificaciones_ocasionales pgo ON pgo.id_planilla_gratificacion_ocasional=pgod.id_planilla_gratificacion_ocasional
			WHERE
			   pgo.gestion=in_gestion AND
			   pgo.estado=1
			GROUP BY
			   pgod.id_funcionario      
		   ) c8_4 ON c8_4.id_funcionario=fun.id_funcionario

		   LEFT JOIN (
			-- SUBSIDIO FAMILIAR CONTRATADOS [141-144-145]
			SELECT
			   fs.id_funcionario,
			   sum(psd.importe_subsidio)::numeric(12,0) as c8_5
			FROM
			   salarios_contratados.planillas_subsidios_detalles psd
			   LEFT JOIN salarios_contratados.planillas_subsidios ps ON ps.id_planilla_subsidio=psd.id_planilla_subsidio
			   LEFT JOIN salarios_contratados.funcionarios_subsidios fs ON fs.id_funcionario_subsidio=psd.id_funcionario_subsidio
			WHERE
			   ps.gestion=in_gestion AND
			   ps.estado=1
			GROUP BY
			   fs.id_funcionario      
		   ) c8_5 ON c8_5.id_funcionario=fun.id_funcionario		   
		   
		WHERE
		   CASE 
		      WHEN 1=in_id_administracion THEN fun.id_administracion IN (0,1) --in_id_administracion
		      WHEN 2=in_id_administracion THEN fun.id_administracion IN (0,2)
		      WHEN 3=in_id_administracion THEN fun.id_administracion IN (0,1,2)
	           END AND
		   saa.id_funcionario IS NOT NULL  AND
		   CASE 
		      WHEN 1=in_tipo_funcionario THEN saa.id_tipo_funcionario IN('PER') --in_tipo_funcionario
		      WHEN 2=in_tipo_funcionario THEN saa.id_tipo_funcionario IN('COM')
		      WHEN 3=in_tipo_funcionario THEN saa.id_tipo_funcionario IN('PER','COM')
		      WHEN 4=in_tipo_funcionario THEN saa.id_tipo_funcionario IN('CON')
		      WHEN 5=in_tipo_funcionario THEN saa.id_tipo_funcionario IN('PER','CON')
		      WHEN 6=in_tipo_funcionario THEN saa.id_tipo_funcionario IN('COM','CON')
		      WHEN 7=in_tipo_funcionario THEN saa.id_tipo_funcionario IN('PER','COM','CON')
	           END AND
		   CASE
		      WHEN '0'=in_id_funcionario THEN fun.id_funcionario>0 ELSE --in_id_funcionario
			   fun.id_funcionario::text=ANY(('{'||in_id_funcionario||'}')::text[])
		   END
	) rea
   ) total
   LEFT JOIN (
	SELECT 
	   rvpd.id_funcionario,
	   (sum(rvpdr.importe)/12)::numeric(12,0) as sueldo,-- sueldo [111]
	   (sum(rvpdr.diferencia_salarial)/12)::numeric(12,0) as diferencia_salarial, -- diferencia salarial [199] 
	   (sum(rvpdr.gasto_representacion)/12)::numeric(12,0) as gasto_representacion, -- gasto_representacion [113]
	   (sum(rvpdr.remuneracion_extraordinaria)/12)::numeric(12,0) as re,-- re [123]
	   (sum(rvpdr.bonificacion_gratificacion)/12)::numeric(12,0) as bonif_gratificacion , -- bonificacion [133]
	   (sum(rvpdr.grado_academico)/12)::numeric(12,0) as grado_academico, -- grado academico [133]
	   (sum(rvpdr.antiguedad)/12)::numeric(12,0) as antiguedad, -- antiguedad [133]
	   (sum(rvpdr.total)/12)::numeric(12,0) as total
	FROM 
	   salarios.retiros_voluntarios_planillas_detalles_remuneraciones rvpdr
	   LEFT JOIN salarios.retiros_voluntarios_planillas_detalles rvpd ON rvpd.id_retiro_voluntario_planilla_detalle=rvpdr.id_retiro_voluntario_planilla_detalle
	WHERE
	   rvpdr.gestion=in_gestion AND --false AND
	   rvpd.item_f_aguinaldo
	GROUP BY
	   rvpd.id_funcionario
   ) rv ON rv.id_funcionario=total.id_funcionario
ORDER BY
   total.cedula_funcionario::int desc;
END;
]]></definition>
</function>

<table name="aso_temporales">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="50"/>
	<column name="id_aso_temporal" not-null="true" default-value="nextval('aso_temporales_id_aso_temporal_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="cedula">
		<type name="character varying" length="12"/>
	</column>
	<column name="importe">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="id_tipo_descuento" not-null="true">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="aso_temporales_pkey" type="pk-constr" table="salarios.aso_temporales">
		<columns names="id_aso_temporal" ref-type="src-columns"/>
	</constraint>
</table>

<table name="autorizaciones">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1720" y="50"/>
	<column name="id_autorizacion" not-null="true" default-value="nextval('autorizaciones_id_autorizacion_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_tipo_descuento" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="documento">
		<type name="bytea"/>
	</column>
	<column name="desde">
		<type name="date"/>
	</column>
	<column name="hasta">
		<type name="date"/>
	</column>
	<column name="estado" not-null="true" default-value="true">
		<type name="boolean"/>
		<comment><![CDATA[Este campo se refiere a la vigencia: true = vigente, false = no vigente, al ser true el campo hasta(date) debe ser null.-]]></comment>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="autorizaciones_pkey" type="pk-constr" table="salarios.autorizaciones">
		<columns names="id_autorizacion" ref-type="src-columns"/>
	</constraint>
</table>

<table name="bancos">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2112" y="50"/>
	<column name="id_bancos" not-null="true" default-value="nextval('bancos_id_bancos_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="ban_descripcion">
		<type name="character varying" length="50"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="bancos_pkey" type="pk-constr" table="salarios.bancos">
		<columns names="id_bancos" ref-type="src-columns"/>
	</constraint>
</table>

<table name="bonificaciones">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2499" y="50"/>
	<column name="id_bonificacion" not-null="true" default-value="nextval('bonificaciones_id_bonificacion_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="descripcion">
		<type name="character varying" length="80"/>
	</column>
	<column name="monto" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="porcentaje" default-value="0">
		<type name="numeric" length="5" precision="2"/>
	</column>
	<column name="fecha_desde">
		<type name="date"/>
	</column>
	<column name="fecha_hasta">
		<type name="date"/>
	</column>
	<column name="gasto_representacion" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="porcentual" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="estado" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="bonificaciones_pkey" type="pk-constr" table="salarios.bonificaciones">
		<columns names="id_bonificacion" ref-type="src-columns"/>
	</constraint>
</table>

<table name="cargos">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2916" y="50"/>
	<column name="id_cargo" not-null="true" default-value="nextval('cargos_id_cargo_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="nombre_cargo">
		<type name="character varying" length="40"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="cargos_pkey" type="pk-constr" table="salarios.cargos">
		<columns names="id_cargo" ref-type="src-columns"/>
	</constraint>
</table>

<table name="categorias">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="347.4"/>
	<column name="id_categoria" not-null="true" default-value="nextval('categorias_id_categoria_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_cargo" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="nombre_categoria">
		<type name="character varying" length="4"/>
	</column>
	<column name="superior" not-null="true" default-value="false">
		<type name="boolean"/>
		<comment><![CDATA[Esta bandera identifica si esta categoria es de nivel superior: ministro, viceministro, directores, coordinares y jefes de dpto.-]]></comment>
	</column>
	<column name="gastos_de_representacion" not-null="true" default-value="false">
		<type name="boolean"/>
		<comment><![CDATA[Bandera utilizada para indicar si esta categoria es una perteneciente a Gastos de Representacion.-]]></comment>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="es_comisionado" not-null="true" default-value="false">
		<type name="boolean"/>
		<comment><![CDATA[Bandera utilizada para indicar si esta categoria es de un comisionado de otra Entidad.-]]></comment>
	</column>
	<column name="abreviatura_entidad" not-null="true" default-value="'MH'::character varying">
		<type name="character varying" length="10"/>
		<comment><![CDATA[Para identificar a que entidad pertenece la categoria.-]]></comment>
	</column>
	<constraint name="categorias_pkey" type="pk-constr" table="salarios.categorias">
		<columns names="id_categoria" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalles_categorias">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1771" y="347.4"/>
	<column name="id_detalle_categoria" not-null="true" default-value="nextval('detalles_categorias_id_detalle_categoria_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_estructura_presupuestaria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_categoria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="linea">
		<type name="integer"/>
	</column>
	<column name="observacion">
		<type name="text"/>
	</column>
	<column name="vacante" default-value="true">
		<type name="boolean"/>
		<comment><![CDATA[TRUE -> ES VACANTE
FALSE -> NO ES VACANTE
NULL -> ES BAJA]]></comment>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="detalles_categorias_pkey" type="pk-constr" table="salarios.detalles_categorias">
		<columns names="id_detalle_categoria" ref-type="src-columns"/>
	</constraint>
</table>

<view name="cargo_categoria">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="2992" y="5228.4"/>
	<reference>
		<expression><![CDATA[ SELECT dc.id_detalle_categoria,
    (((cat.nombre_categoria)::text || ' '::text) || (car.nombre_cargo)::text) AS categoria,
    dc.id_estructura_presupuestaria,
    cat.gestion,
    dc.id_administracion,
    cat.es_comisionado,
    dc.vacante
   FROM ((salarios.detalles_categorias dc
     LEFT JOIN salarios.categorias cat ON ((cat.id_categoria = dc.id_categoria)))
     LEFT JOIN salarios.cargos car ON ((car.id_cargo = cat.id_cargo)))
  WHERE (cat.gastos_de_representacion IS FALSE);]]></expression>
	</reference>
</view>

<view name="categoria_cantidad_anexo_personal">
	<schema name="salarios"/>
	<role name="postgres"/>
	<comment><![CDATA[Autor: Lic. Guillermo Galeano Fernández Fecha: 2011-05-19 Motivo: Select utilizado en el reporte que refleja el Anexo del Personal de la ley del Presupuesto General de La Nacion Paraguaya.]]></comment>
	<position x="1328" y="5511.8"/>
	<reference>
		<expression><![CDATA[ SELECT a.id_estructura_presupuestaria,
    a.linea,
    a.id_categoria,
    count(*) AS cantidad
   FROM (salarios.detalles_categorias a
     LEFT JOIN salarios.categorias b ON ((b.id_categoria = a.id_categoria)))
  WHERE (b.es_comisionado = false)
  GROUP BY a.id_estructura_presupuestaria, a.id_categoria, a.linea
  ORDER BY a.id_estructura_presupuestaria, a.linea, a.id_categoria;]]></expression>
	</reference>
</view>

<table name="categoria_importe_mensual">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2232" y="347.4"/>
	<column name="id_importe_categoria_mensual" not-null="true" default-value="nextval('categoria_importe_mensual_id_importe_categoria_mensual_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_categoria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="importe">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_anterior" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="observacion">
		<type name="text"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="categoria_importe_mensual_pkey" type="pk-constr" table="salarios.categoria_importe_mensual">
		<columns names="id_importe_categoria_mensual" ref-type="src-columns"/>
	</constraint>
</table>

<view name="categoria_con_importes_para_anexo_del_personal">
	<schema name="salarios"/>
	<role name="postgres"/>
	<comment><![CDATA[ Autor: Lic. Guillermo Galeano Fernández Fecha: 2011-05-19 Motivo: Vista con la sumatoria de importes de una categoria para el primer y segundo semestre y un total anual de una categoria para el reporte de Anexo del Personal.- |Modificaciones| Fecha: 2011-01-24 Por: José Cabrera Cambio: Se agrego la columna id_administracion para realizar el filtrado.- ]]></comment>
	<position x="1692.6" y="5511.8"/>
	<reference>
		<expression><![CDATA[ SELECT z.id_administracion,
    z.id_categoria,
    z.gestion,
    z.id_cargo,
    z.nombre_categoria,
    ( SELECT avg(a.importe) AS avg
           FROM salarios.categoria_importe_mensual a
          WHERE ((a.id_categoria = z.id_categoria) AND (a.id_mes >= 1) AND (a.id_mes <= 5))) AS importe_promedio_primer_semestre,
    ( SELECT avg(a.importe) AS avg
           FROM salarios.categoria_importe_mensual a
          WHERE ((a.id_categoria = z.id_categoria) AND (a.id_mes >= 6) AND (a.id_mes <= 12))) AS importe_promedio_segundo_semestre,
    ( SELECT sum(a.importe) AS sum
           FROM salarios.categoria_importe_mensual a
          WHERE (a.id_categoria = z.id_categoria)) AS importe_anual_de_esta_categoria
   FROM salarios.categorias z;]]></expression>
	</reference>
</view>

<table name="categorias_reservados">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2716" y="347.4"/>
	<column name="id_categoria_reservado" not-null="true" default-value="nextval('categorias_reservados_id_categoria_reservado_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_detalle_categoria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="observacion">
		<type name="text"/>
	</column>
	<column name="activo" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="fecha_reserva">
		<type name="date"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="categorias_reservados_pkey" type="pk-constr" table="salarios.categorias_reservados">
		<columns names="id_categoria_reservado" ref-type="src-columns"/>
	</constraint>
</table>

<table name="demandante">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="3152" y="347.4"/>
	<column name="id_demandante" not-null="true" default-value="nextval('demandante_id_demandante_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="dem_descripcion">
		<type name="character varying" length="200"/>
	</column>
	<column name="dem_documento">
		<type name="character varying" length="10"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="demandante_dem_descripcion_dem_documento_key" type="uq-constr" table="salarios.demandante">
		<columns names="dem_descripcion,dem_documento" ref-type="src-columns"/>
	</constraint>
	<constraint name="demandante_pkey" type="pk-constr" table="salarios.demandante">
		<columns names="id_demandante" ref-type="src-columns"/>
	</constraint>
</table>

<table name="descuentos_aso">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="630.8"/>
	<column name="id_descuento_aso" not-null="true" default-value="nextval('descuentos_aso_id_descuento_aso_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_tipo_descuento" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="monto">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="ejecutado" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="estado" not-null="true" default-value="0">
		<type name="integer"/>
		<comment><![CDATA[0 = Creado, 1 = Procesado, 2 = Anulado]]></comment>
	</column>
	<constraint name="descuentos_aso_id_administracion_id_mes_gestion_id_funcionario_" type="uq-constr" table="salarios.descuentos_aso">
		<columns names="id_administracion,id_mes,gestion,id_funcionario,id_tipo_descuento" ref-type="src-columns"/>
	</constraint>
	<constraint name="descuentos_aso_pkey" type="pk-constr" table="salarios.descuentos_aso">
		<columns names="id_descuento_aso" ref-type="src-columns"/>
	</constraint>
</table>

<table name="descuentos_judiciales">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1744" y="630.8"/>
	<column name="id_descuento_judicial" not-null="true" default-value="nextval('descuentos_judiciales_id_descuento_judicial_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_judicial" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_tipo_descuento" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="monto">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="ejecutado">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="estado" not-null="true" default-value="0">
		<type name="integer"/>
		<comment><![CDATA[0 = Creado, 1 = Procesado, 2 = Anulado]]></comment>
	</column>
	<constraint name="descuentos_judiciales_pkey" type="pk-constr" table="salarios.descuentos_judiciales">
		<columns names="id_descuento_judicial" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalle_planilla_antiguedad">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2166" y="630.8"/>
	<column name="id_detalle_planilla_antiguedad" not-null="true" default-value="nextval('detalle_planilla_antiguedad_id_detalle_planilla_antiguedad_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_planilla_antiguedad" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias_trabajados" default-value="30">
		<type name="integer"/>
	</column>
	<column name="importe_antiguedad" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_aporte" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="detalle_planilla_antiguedad_pkey" type="pk-constr" table="salarios.detalle_planilla_antiguedad">
		<columns names="id_detalle_planilla_antiguedad" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalle_planilla_gratificacion_especial">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2648" y="630.8"/>
	<column name="id_detalle_planilla_gratificacion" not-null="true" default-value="nextval('detalle_planilla_gratificacio_id_detalle_planilla_gratifica_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_planilla_gratificacion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias_trabajados" default-value="0">
		<type name="integer"/>
	</column>
	<column name="importe_gratificacion" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="importe_aporte" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<constraint name="detalle_planilla_gratificacion_especial_pkey" type="pk-constr" table="salarios.detalle_planilla_gratificacion_especial">
		<columns names="id_detalle_planilla_gratificacion" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalle_planilla_gratificacion_ocacional">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="3137" y="630.8"/>
	<column name="id_detalle_planilla_gratificacion_ocacional" not-null="true" default-value="nextval('detalle_planilla_gratificacio_id_detalle_planilla_gratific_seq1'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_planilla_gratificacion_ocacional" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="porcentaje_aporte">
		<type name="numeric" length="5" precision="2"/>
	</column>
	<column name="importe_gratificacion" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_aporte" default-value="0">
		<type name="numeric" length="11" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="detalle_planilla_gratificacion_ocacional_pkey" type="pk-constr" table="salarios.detalle_planilla_gratificacion_ocacional">
		<columns names="id_detalle_planilla_gratificacion_ocacional" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalle_planillas_profesionales">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="928.2"/>
	<column name="id_detalle_planilla_profesional" not-null="true" default-value="nextval('detalle_planillas_profesional_id_detalle_planilla_profesion_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_planilla_profesional" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_profesional" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias_trabajados" default-value="0">
		<type name="integer"/>
	</column>
	<column name="importe_profesional" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_aporte" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="detalle_planillas_profesionales_pkey" type="pk-constr" table="salarios.detalle_planillas_profesionales">
		<columns names="id_detalle_planilla_profesional" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalle_planillas_vacantes">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1808" y="928.2"/>
	<column name="id_detalle_planilla_vacante" not-null="true" default-value="nextval('detalle_planillas_vacantes_id_detalle_planilla_vacante_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_detalle_categoria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="importe">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="id_planilla_salario" not-null="true">
		<type name="integer"/>
	</column>
	<constraint name="detalle_planillas_vacantes_pkey" type="pk-constr" table="salarios.detalle_planillas_vacantes">
		<columns names="id_detalle_planilla_vacante" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalle_situacion_personal">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2266" y="928.2"/>
	<column name="id_detalle_situacion_personal" not-null="true" default-value="nextval('detalle_situacion_personal_id_detalle_situacion_personal_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_situacion_personal" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias_trabajados">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="detalle_situacion_personal_pkey" type="pk-constr" table="salarios.detalle_situacion_personal">
		<columns names="id_detalle_situacion_personal" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalles_multas_aplicadas">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2741" y="928.2"/>
	<column name="id_detalle_multa_aplicada" not-null="true" default-value="nextval('detalles_multas_aplicadas_id_detalle_multa_aplicada_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="usu_alta" not-null="true">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta" not-null="true">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="id_multas_aplicadas" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_detalle_multa_solicitada" not-null="true">
		<type name="integer"/>
	</column>
	<column name="importe_solicitado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_aplicado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_diferencia" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<constraint name="detalles_multas_aplicadas_pkey" type="pk-constr" table="salarios.detalles_multas_aplicadas">
		<columns names="id_detalle_multa_aplicada" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalles_multas_solicitadas">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="3193" y="928.2"/>
	<column name="id_detalle_multa_solicitada" not-null="true" default-value="nextval('detalles_multas_solicitadas_id_detalle_multa_solicitada_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_multa_solicitada" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="monto_multa">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="cantidad_dias" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="importe_diario" not-null="true" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<constraint name="detalles_multas_solicitadas_pkey" type="pk-constr" table="salarios.detalles_multas_solicitadas">
		<columns names="id_detalle_multa_solicitada" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalles_planillas_bonificaciones">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="1197.6"/>
	<column name="id_detalle_planilla_bonificacion" not-null="true" default-value="nextval('detalles_planillas_bonificaci_id_detalle_planilla_bonificac_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_planilla_bonificacion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_bonificacion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="importe_monto">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_porcentaje">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_gasto_representacion">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="aporte">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="monto_total">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="detalles_planillas_bonificaciones_pkey" type="pk-constr" table="salarios.detalles_planillas_bonificaciones">
		<columns names="id_detalle_planilla_bonificacion" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalles_planillas_descuentos">
	<schema name="salarios"/>
	<role name="mcaniza"/>
	<position x="1813" y="1197.6"/>
	<column name="id_detalles_planilla_descuento" not-null="true" default-value="nextval('detalles_planillas_descuentos_id_detalles_planilla_descuent_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_planilla_descuento" not-null="true">
		<type name="integer"/>
	</column>
	<column name="monto_descuento" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="monto_solicitado" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="id_descuento_judicial">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="id_descuento_aso">
		<type name="integer"/>
	</column>
	<constraint name="detalles_planillas_descuentos_pkey" type="pk-constr" table="salarios.detalles_planillas_descuentos">
		<columns names="id_detalles_planilla_descuento" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalles_planillas_ra">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<position x="2294" y="1197.6"/>
	<column name="id_detalle_planilla_ra" not-null="true" default-value="nextval('detalles_planillas_ra_id_detalle_planilla_ra_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_planilla_ra" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_aplicada_hora_detalle">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="monto">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="porcentaje_aporte">
		<type name="numeric" length="5" precision="2"/>
	</column>
	<column name="aporte">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="cantidad_horas" default-value="0">
		<type name="numeric" length="8" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="detalles_planillas_ra_pkey" type="pk-constr" table="salarios.detalles_planillas_ra">
		<columns names="id_detalle_planilla_ra" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalles_planillas_re">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<position x="2727" y="1197.6"/>
	<column name="id_detalle_planilla_re" not-null="true" default-value="nextval('detalles_planillas_re_id_detalle_planilla_re_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_planilla_re" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_aplicada_hora_detalle">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="monto">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="porcentaje_aporte">
		<type name="numeric" length="5" precision="2"/>
	</column>
	<column name="aporte">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="cantidad_horas" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="detalles_planillas_re_pkey" type="pk-constr" table="salarios.detalles_planillas_re">
		<columns names="id_detalle_planilla_re" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalles_planillas_salarios">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="3160" y="1197.6"/>
	<column name="id_detalle_planilla_salario" not-null="true" default-value="nextval('detalles_planillas_salarios_id_detalle_planilla_salario_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_planilla_salario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias_trabajados" default-value="0">
		<type name="integer"/>
	</column>
	<column name="monto_presupuestado" not-null="true" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="monto_devengado" not-null="true" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="monto_aporte" not-null="true" default-value="0">
		<type name="numeric" length="12" precision="2"/>
		<comment><![CDATA[Es el importe correspondiente a jubilación calculado en base al devengado.-]]></comment>
	</column>
	<column name="monto_multa" not-null="true" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="monto_total_aporte">
		<type name="numeric" length="12" precision="2"/>
		<comment><![CDATA[Es el total que va la caja fiscal = (presupuestado - devengado) + jubilación + multas.-]]></comment>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="importe_liquido_sin_descuentos_varios" not-null="true" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_descuentos_varios_solicitado" not-null="true" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_descuentos_varios_aplicado" not-null="true" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_descuentos_varios_diferencia" not-null="true" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_liquido_con_descuentos_varios" not-null="true" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="id_detalle_categoria">
		<type name="integer"/>
	</column>
	<column name="horas_no_compensadas">
		<type name="integer"/>
	</column>
	<column name="monto_horas_no_compensadas">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<constraint name="detalles_planillas_salarios_pkey" type="pk-constr" table="salarios.detalles_planillas_salarios">
		<columns names="id_detalle_planilla_salario" ref-type="src-columns"/>
	</constraint>
</table>

<table name="detalles_planillas_subsidios">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="1621"/>
	<column name="id_detalle_planilla_subsidio" not-null="true" default-value="nextval('detalles_planillas_subsidios_id_detalle_planilla_subsidio_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_planilla_subsidio" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_subsidio" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="cantidad">
		<type name="integer"/>
	</column>
	<column name="importe_monto">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="aporte">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="detalles_planillas_subsidios_pkey" type="pk-constr" table="salarios.detalles_planillas_subsidios">
		<columns names="id_detalle_planilla_subsidio" ref-type="src-columns"/>
	</constraint>
</table>

<table name="firmantes_salarios">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="1789" y="1621"/>
	<column name="id_firmante_salario" not-null="true" default-value="nextval('firmantes_salarios_id_firmante_salario_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="nombre_firmante">
		<type name="character varying" length="80"/>
	</column>
	<column name="cargo_firmante">
		<type name="character varying" length="80"/>
	</column>
	<column name="estado" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="posicion">
		<type name="character varying"/>
	</column>
	<column name="vig_desde" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="vig_hasta">
		<type name="timestamp"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="firmantes_salarios_pkey" type="pk-constr" table="salarios.firmantes_salarios">
		<columns names="id_firmante_salario" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_aguinaldos">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="2196" y="1621"/>
	<column name="id_funcionario_aguinaldo" not-null="true" default-value="nextval('funcionarios_aguinaldos_id_funcionario_aguinaldo_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_tipo_aguinaldo" not-null="true">
		<type name="integer"/>
	</column>
	<column name="monto" not-null="true">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="id_detalle_planilla" not-null="true">
		<type name="integer"/>
	</column>
	<column name="estado" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_aguinaldos_pkey" type="pk-constr" table="salarios.funcionarios_aguinaldos">
		<columns names="id_funcionario_aguinaldo" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_antiguedades">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2640" y="1621"/>
	<column name="id_funcionario_antiguedad" not-null="true" default-value="nextval('funcionarios_antiguedades_id_funcionario_antiguedad_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias_trabajados" default-value="30">
		<type name="integer"/>
	</column>
	<column name="antiguedad" default-value="0">
		<type name="double precision"/>
	</column>
	<column name="ultimo_mes" default-value="1">
		<type name="integer"/>
	</column>
	<column name="activo" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_antiguedades_pkey" type="pk-constr" table="salarios.funcionarios_antiguedades">
		<columns names="id_funcionario_antiguedad" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_bonificaciones">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<position x="3095" y="1621"/>
	<column name="id_funcionario_bonificacion" not-null="true" default-value="nextval('funcionarios_bonificaciones_id_funcionario_bonificacion_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_bonificacion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="cantidad_dias" default-value="30">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="estado" default-value="true">
		<type name="boolean"/>
	</column>
	<constraint name="funcionarios_bonificaciones_id_bonificacion_id_funcionario__key" type="uq-constr" table="salarios.funcionarios_bonificaciones">
		<columns names="id_bonificacion,id_funcionario,id_oficina,gestion,id_mes,cantidad_dias" ref-type="src-columns"/>
	</constraint>
	<constraint name="funcionarios_bonificaciones_pkey" type="pk-constr" table="salarios.funcionarios_bonificaciones">
		<columns names="id_funcionario_bonificacion" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_categorias">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="1918.4"/>
	<column name="id_funcionario_categoria" not-null="true" default-value="nextval('funcionarios_categorias_id_funcionario_categoria_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_detalle_categoria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina_presta" not-null="true">
		<type name="integer"/>
	</column>
	<column name="desde">
		<type name="date"/>
	</column>
	<column name="hasta">
		<type name="date"/>
	</column>
	<column name="estado" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<constraint name="funcionarios_categorias_pkey" type="pk-constr" table="salarios.funcionarios_categorias">
		<columns names="id_funcionario_categoria" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_gratificaciones_ocasionales">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="1770" y="1918.4"/>
	<column name="id_funcionario_gratificacion_ocasional" not-null="true" default-value="nextval('funcionarios_gratificaciones__id_funcionario_gratificacion_seq2'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="cedula" not-null="true">
		<type name="character varying" length="15"/>
	</column>
	<column name="monto" not-null="true">
		<type name="numeric" length="15" precision="3"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_gratificaciones_ocasionales_pkey" type="pk-constr" table="salarios.funcionarios_gratificaciones_ocasionales">
		<columns names="id_funcionario_gratificacion_ocasional" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_gratificaciones_especiales">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2301" y="1918.4"/>
	<column name="id_funcionario_gratificacion_especial" not-null="true" default-value="nextval('funcionarios_gratificaciones__id_funcionario_gratificacion_seq1'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias_trabajados" default-value="30">
		<type name="integer"/>
	</column>
	<column name="activo" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_gratificaciones_especiales_pkey" type="pk-constr" table="salarios.funcionarios_gratificaciones_especiales">
		<columns names="id_funcionario_gratificacion_especial" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_importes">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="2824" y="1918.4"/>
	<column name="id_funcionario_importe" not-null="true" default-value="nextval('funcionarios_importes_id_funcionario_importe_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="nombre_categoria">
		<type name="character varying" length="4"/>
	</column>
	<column name="importe">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_importes_id_funcionario_key" type="uq-constr" table="salarios.funcionarios_importes">
		<columns names="id_funcionario" ref-type="src-columns"/>
	</constraint>
	<constraint name="funcionarios_importes_pkey" type="pk-constr" table="salarios.funcionarios_importes">
		<columns names="id_funcionario_importe" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_nombrados">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="3275" y="1918.4"/>
	<column name="id_funcionario_nombrado" not-null="true" default-value="nextval('funcionarios_nombrados_id_funcionario_nombrado_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="activo">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_nombrados_pkey" type="pk-constr" table="salarios.funcionarios_nombrados">
		<columns names="id_funcionario_nombrado" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_profesionales">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="2215.8"/>
	<column name="id_funcionario_profesional" not-null="true" default-value="nextval('funcionarios_profesionales_id_funcionario_profesional_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="documento">
		<type name="bytea"/>
	</column>
	<column name="fecha_desde">
		<type name="date"/>
	</column>
	<column name="activo" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias_trabajados" default-value="30">
		<type name="integer"/>
	</column>
	<constraint name="funcionarios_profesionales_pkey" type="pk-constr" table="salarios.funcionarios_profesionales">
		<columns names="id_funcionario_profesional" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_recategorizacion">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1781" y="2215.8"/>
	<column name="id_funcionario_recategorizacion" not-null="true" default-value="nextval('funcionarios_recategorizacion_id_funcionario_recategorizac_seq1'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_categoria_new" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_categoria_old" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="activo" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_recategorizacion_pkey" type="pk-constr" table="salarios.funcionarios_recategorizacion">
		<columns names="id_funcionario_recategorizacion" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_recategorizacion_ascenso">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2271" y="2215.8"/>
	<column name="id_funcionario_recategorizacion_ascenso" not-null="true" default-value="nextval('funcionarios_recategorizacion_id_funcionario_recategorizaci_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_categoria_new" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_categoria_old" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias_trabajados_new">
		<type name="integer"/>
	</column>
	<column name="dias_trabajados_old">
		<type name="integer"/>
	</column>
	<column name="activo" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_recategorizacion_ascenso_pkey" type="pk-constr" table="salarios.funcionarios_recategorizacion_ascenso">
		<columns names="id_funcionario_recategorizacion_ascenso" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_representaciones">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2820" y="2215.8"/>
	<column name="id_funcionario_representacion" not-null="true" default-value="nextval('funcionarios_representaciones_id_funcionario_representacion_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_detalle_categoria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="desde">
		<type name="date"/>
	</column>
	<column name="hasta">
		<type name="date"/>
	</column>
	<column name="decreto_nro_alta">
		<type name="character varying" length="12"/>
	</column>
	<column name="documento_alta">
		<type name="bytea"/>
	</column>
	<column name="decreto_nro_baja">
		<type name="character varying" length="12"/>
	</column>
	<column name="documento_baja">
		<type name="bytea"/>
	</column>
	<column name="estado" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_representaciones_pkey" type="pk-constr" table="salarios.funcionarios_representaciones">
		<columns names="id_funcionario_representacion" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_representaciones_cambios">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="3298" y="2215.8"/>
	<column name="id_funcionarios_representaciones_cambios" not-null="true" default-value="nextval('funcionarios_representaciones_id_funcionarios_representacio_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_representacion_saliente" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_representacion_entrante" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_detalle_categoria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias_saliente">
		<type name="integer"/>
	</column>
	<column name="dias_entrante">
		<type name="integer"/>
	</column>
	<column name="activo" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_representaciones_cambios_pkey" type="pk-constr" table="salarios.funcionarios_representaciones_cambios">
		<columns names="id_funcionarios_representaciones_cambios" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_sinaportes">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="2541.2"/>
	<column name="id_funcionario_sinaporte" not-null="true" default-value="nextval('funcionarios_sinaportes_id_funcionario_sinaporte_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="estado" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="desde">
		<type name="date"/>
	</column>
	<column name="hasta">
		<type name="date"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_sinaportes_pkey" type="pk-constr" table="salarios.funcionarios_sinaportes">
		<columns names="id_funcionario_sinaporte" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_subsidios">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1769" y="2541.2"/>
	<column name="id_funcionario_subsidio" not-null="true" default-value="nextval('funcionarios_subsidios_id_funcionario_subsidio_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_subsidio" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="cantidad">
		<type name="integer"/>
	</column>
	<column name="estado" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_subsidios_pkey" type="pk-constr" table="salarios.funcionarios_subsidios">
		<columns names="id_funcionario_subsidio" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_superiores">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2203" y="2541.2"/>
	<column name="id_funcionario_superior" not-null="true" default-value="nextval('funcionarios_superiores_id_funcionario_superior_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_categoria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="desde">
		<type name="date"/>
	</column>
	<column name="hasta">
		<type name="date"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<constraint name="funcionarios_superiores_pkey" type="pk-constr" table="salarios.funcionarios_superiores">
		<columns names="id_funcionario_superior" ref-type="src-columns"/>
	</constraint>
</table>

<table name="funcionarios_superiores_dias_trabajados">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2636" y="2541.2"/>
	<column name="id_funcionario_superior_dia_trabajado" not-null="true" default-value="nextval('funcionarios_superiores_dias__id_funcionario_superior_dia_t_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_superior" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_mes">
		<type name="integer"/>
	</column>
	<column name="gestion">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="dias_trabajados">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="funcionarios_superiores_dias_trabajados_pkey" type="pk-constr" table="salarios.funcionarios_superiores_dias_trabajados">
		<columns names="id_funcionario_superior_dia_trabajado" ref-type="src-columns"/>
	</constraint>
</table>

<table name="horas_no_compensadas">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="3168" y="2541.2"/>
	<column name="id_hora_no_compensada" not-null="true" default-value="nextval('horas_no_compensadas_id_hora_no_compensada_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="horas" not-null="true">
		<type name="integer"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_detalle_planilla_salario">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="horas_no_compensadas_pkey" type="pk-constr" table="salarios.horas_no_compensadas">
		<columns names="id_hora_no_compensada" ref-type="src-columns"/>
	</constraint>
</table>

<table name="judiciales">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="2824.6"/>
	<column name="id_judicial" not-null="true" default-value="nextval('judiciales_id_judicial_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_tipo_descuento" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_juzgado" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_demandante" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_bancos" not-null="true">
		<type name="integer"/>
	</column>
	<column name="fecha">
		<type name="date"/>
	</column>
	<column name="monto_justicia">
		<type name="numeric" length="12" precision="2"/>
		<comment><![CDATA[se refieren a los gastos de justicia.-]]></comment>
	</column>
	<column name="monto_juicio">
		<type name="numeric" length="12" precision="2"/>
		<comment><![CDATA[El importe total a abonar por el funcionario mas los gastos de justicia.-]]></comment>
	</column>
	<column name="porcentaje_descontar">
		<type name="numeric" length="5" precision="2"/>
	</column>
	<column name="monto_descuento_mensual">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="monto_saldo">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="nro_cuenta">
		<type name="character varying" length="15"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="juez">
		<type name="character varying" length="80"/>
	</column>
	<column name="actuario">
		<type name="character varying" length="80"/>
	</column>
	<column name="observacion">
		<type name="text"/>
	</column>
	<constraint name="judiciales_pkey" type="pk-constr" table="salarios.judiciales">
		<columns names="id_judicial" ref-type="src-columns"/>
	</constraint>
</table>

<table name="juzgado">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1779" y="2824.6"/>
	<column name="id_juzgado" not-null="true" default-value="nextval('juzgado_id_juzgado_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_departamento" not-null="true">
		<type name="integer"/>
	</column>
	<column name="juz_descripcion">
		<type name="character varying" length="150"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="juzgado_pkey" type="pk-constr" table="salarios.juzgado">
		<columns names="id_juzgado" ref-type="src-columns"/>
	</constraint>
</table>

<table name="multas_aplicadas">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2174" y="2824.6"/>
	<column name="id_administracion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="fecha" not-null="true">
		<type name="date"/>
	</column>
	<column name="estado" not-null="true" default-value="0">
		<type name="integer"/>
		<comment><![CDATA[0 = Creado, 1 = Procesado, 2 = Anulado]]></comment>
	</column>
	<column name="usu_alta" not-null="true">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta" not-null="true">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="id_multas_aplicadas" not-null="true" default-value="nextval('multas_aplicadas_id_multas_aplicadas_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_planilla_salario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_multa_solicitada">
		<type name="integer"/>
	</column>
	<column name="total_solicitado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="total_aplicado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="total_diferencia" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<constraint name="multas_aplicadas_pkey" type="pk-constr" table="salarios.multas_aplicadas">
		<columns names="id_multas_aplicadas" ref-type="src-columns"/>
	</constraint>
</table>

<table name="multas_solicitadas">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2587" y="2824.6"/>
	<column name="id_multa_solicitada" not-null="true" default-value="nextval('multas_solicitadas_id_multa_solicitada_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_multa_resolucion">
		<type name="integer"/>
		<comment><![CDATA[Esta relación se completa al utilizar un registro de la resolucion de multa en la pagina MultaSolicitadaDetalleHome.jsp]]></comment>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="fecha">
		<type name="date"/>
	</column>
	<column name="total_multa">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="estado">
		<type name="integer"/>
		<comment><![CDATA[0 = Creado, 1 = Procesado, 2 = Anulado]]></comment>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="multas_solicitadas_pkey" type="pk-constr" table="salarios.multas_solicitadas">
		<columns names="id_multa_solicitada" ref-type="src-columns"/>
	</constraint>
</table>

<view name="oficinas_con_descripciones_estructura">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<comment><![CDATA[Para que esta vista devuelva datos correctos, los registros deberán ser de la misma administracion y gestion!.]]></comment>
	<position x="2156.2" y="5511.8"/>
	<reference>
		<expression><![CDATA[ SELECT a.id_administracion,
    a.id_oficina,
    a.id_edificio,
    a.nombre,
    a.nivel1,
    a.nivel2,
    a.nivel3,
    a.nivel4,
    a.nivel5,
    a.estado,
    b.nombre AS nombre_nivel1,
    c.nombre AS nombre_nivel2,
    d.nombre AS nombre_nivel3,
    e.nombre AS nombre_nivel4,
    f.nombre AS nombre_nivel5,
    g.id_estructura_presupuestaria,
    g.gestion,
    g.cod_tipo,
    g.cod_programa,
    g.cod_subprograma,
    g.cod_objeto_gasto,
    g.cod_fuente_financiamiento,
    g.cod_departamento,
    g.cod_proyecto,
    g.cod_organismo_financiador,
    g.descripcion_estructura_presupuestaria,
    g.descripcion_tipo,
    g.descripcion_programa,
    g.descripcion_subprograma,
    g.descripcion_objeto_gasto,
    g.descripcion_fuente_financiamiento,
    g.descripcion_alcance,
    g.descripcion_proyecto,
    g.descripcion_organismo_financiador,
    g.descripcion_programa_abreviatura,
    g.descripcion_programa_estado,
    g.descripcion_estructura
   FROM ((((((legajos.oficinas a
     LEFT JOIN legajos.oficinas b ON (((a.nivel1 = b.nivel1) AND (b.nivel2 = 0) AND (b.nivel3 = 0) AND (b.nivel4 = 0) AND (b.nivel5 = 0) AND (a.gestion = b.gestion) AND (a.id_administracion = b.id_administracion))))
     LEFT JOIN legajos.oficinas c ON (((a.nivel1 = c.nivel1) AND (a.nivel2 = c.nivel2) AND (c.nivel3 = 0) AND (c.nivel4 = 0) AND (c.nivel5 = 0) AND (a.gestion = c.gestion) AND (a.id_administracion = b.id_administracion))))
     LEFT JOIN legajos.oficinas d ON (((a.nivel1 = d.nivel1) AND (a.nivel2 = d.nivel2) AND (a.nivel3 = d.nivel3) AND (d.nivel4 = 0) AND (d.nivel5 = 0) AND (a.gestion = d.gestion) AND (a.id_administracion = b.id_administracion))))
     LEFT JOIN legajos.oficinas e ON (((a.nivel1 = e.nivel1) AND (a.nivel2 = e.nivel2) AND (a.nivel3 = e.nivel3) AND (a.nivel4 = e.nivel4) AND (e.nivel5 = 0) AND (a.gestion = e.gestion) AND (a.id_administracion = b.id_administracion))))
     LEFT JOIN legajos.oficinas f ON (((a.nivel1 = f.nivel1) AND (a.nivel2 = f.nivel2) AND (a.nivel3 = f.nivel3) AND (a.nivel4 = f.nivel4) AND (a.nivel5 = f.nivel5) AND (a.gestion = f.gestion) AND (a.id_administracion = b.id_administracion))))
     LEFT JOIN presupuesto.estructura_presupuestaria_con_descripciones g ON ((a.id_estructura_presupuestaria = g.id_estructura_presupuestaria)))
  WHERE (a.nivel1 > 0);]]></expression>
	</reference>
</view>

<table name="parametros_calculo_re_ra">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<position x="2995" y="2824.6"/>
	<column name="id_parametro_calculo_re_ra" not-null="true" default-value="nextval('parametros_calculo_re_ra_id_parametro_calculo_re_ra_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="constante_1" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="constante_2" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="constante_3" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="fecha_desde" default-value="now()">
		<type name="date"/>
	</column>
	<column name="fecha_hasta">
		<type name="date"/>
	</column>
	<column name="formula">
		<type name="character varying" length="100"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="parametros_calculo_re_ra_pkey" type="pk-constr" table="salarios.parametros_calculo_re_ra">
		<columns names="id_parametro_calculo_re_ra" ref-type="src-columns"/>
	</constraint>
</table>

<table name="pedido_fondo_aguinaldo">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="1328" y="3234"/>
	<column name="id_pedido_fondo_aguinaldo" not-null="true" default-value="nextval('pedido_fondo_aguinaldo_id_pedido_fondo_aguinaldo_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_tipo_aguinaldo" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_planilla_aguinaldo" not-null="true">
		<type name="integer"/>
	</column>
	<column name="importe_total_solicitado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_total_aplicado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="cantidad_total_solicitado" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="cantidad_total_aplicado" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="estado" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta" not-null="true" default-value="'--'::character varying">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="pedido_fondo_aguinaldo_pkey" type="pk-constr" table="salarios.pedido_fondo_aguinaldo">
		<columns names="id_pedido_fondo_aguinaldo" ref-type="src-columns"/>
	</constraint>
</table>

<table name="pedido_fondo_aguinaldo_detalle">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="1788" y="3234"/>
	<column name="id_pedido_fondo_aguinaldo_detalle" not-null="true" default-value="nextval('pedido_fondo_aguinaldo_detall_id_pedido_fondo_aguinaldo_det_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_pedido_fondo_aguinaldo" not-null="true">
		<type name="integer"/>
	</column>
	<column name="cantidad_solicitado" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="cantidad_aplicado" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="importe_solicitado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_aplicado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_tope" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="usu_alta" not-null="true" default-value="'--'::character varying">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="pedido_fondo_aguinaldo_detalle_pkey" type="pk-constr" table="salarios.pedido_fondo_aguinaldo_detalle">
		<columns names="id_pedido_fondo_aguinaldo_detalle" ref-type="src-columns"/>
	</constraint>
</table>

<table name="pedidos_fondos">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2301" y="3234"/>
	<column name="id_pedido_fondo" not-null="true" default-value="nextval('pedidos_fondos_id_pedido_fondo_seq1'::regclass)">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_tipo_planilla" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_planilla" not-null="true">
		<type name="integer"/>
	</column>
	<column name="importe_total_solicitado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_total_aplicado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_total_aporte_solicitado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_total_aporte_aplicado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="cantidad_total_solicitado" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="cantidad_total_aplicado" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="estado" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta" not-null="true" default-value="'--'::character varying">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="id_administracion">
		<type name="integer"/>
	</column>
	<constraint name="pedidos_fondos_pkey" type="pk-constr" table="salarios.pedidos_fondos">
		<columns names="id_pedido_fondo" ref-type="src-columns"/>
	</constraint>
</table>

<table name="pedidos_fondos_detalles">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2776" y="3234"/>
	<column name="id_pedido_fondo_detalle" not-null="true" default-value="nextval('pedidos_fondos_detalles_id_pedido_fondo_detalle_seq1'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_estructura_presupuestaria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_pedido_fondo" not-null="true">
		<type name="integer"/>
	</column>
	<column name="cantidad_solicitado" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="cantidad_aplicado" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="importe_solicitado_devengado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_solicitado_aporte" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_aplicado_devengado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_aplicado_aporte" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_tope_devengado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="importe_tope_aporte" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="usu_alta" not-null="true" default-value="'--'::character varying">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="pedidos_fondos_detalles_pkey" type="pk-constr" table="salarios.pedidos_fondos_detalles">
		<columns names="id_pedido_fondo_detalle" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planilla_aguinaldo">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="3244" y="3234"/>
	<column name="id_planilla_aguinaldo" not-null="true" default-value="nextval('planilla_aguinaldo_id_planilla_aguinaldo_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="monto">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="objeto">
		<type name="character varying" length="50"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planilla_aguinaldo_pkey" type="pk-constr" table="salarios.planilla_aguinaldo">
		<columns names="id_planilla_aguinaldo" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planilla_diferencia_salarial">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="3573.4"/>
	<column name="id_planilla_diferencia_salarial" not-null="true" default-value="nextval('planilla_diferencia_salarial_id_planilla_diferencia_salaria_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="fecha">
		<type name="date"/>
	</column>
	<column name="monto_aporte" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="monto_categoria" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="monto_cargo" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="monto_diferencia" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="id_tipo_pagos_varios" not-null="true" default-value="1">
		<type name="integer"/>
		<comment><![CDATA[Valores posibles (al 2012-08-29) 1 = diferencia salarial, 2 = otros conceptos.]]></comment>
	</column>
	<constraint name="planilla_diferencia_salarial_pkey" type="pk-constr" table="salarios.planilla_diferencia_salarial">
		<columns names="id_planilla_diferencia_salarial" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planilla_diferencia_salarial_detalle">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1803" y="3573.4"/>
	<column name="id_planilla_diferencia_salarial_detalle" not-null="true" default-value="nextval('planilla_diferencia_salarial__id_planilla_diferencia_salari_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_planilla_diferencia_salarial" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_superior">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="importe_monto_aporte">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_monto_categoria">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_monto_cargo">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="importe_monto_diferencia">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="id_funcionario">
		<type name="integer"/>
	</column>
	<constraint name="planilla_diferencia_salarial_detalle_pkey" type="pk-constr" table="salarios.planilla_diferencia_salarial_detalle">
		<columns names="id_planilla_diferencia_salarial_detalle" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planilla_gasto_representacion">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2330" y="3573.4"/>
	<column name="id_planilla_gasto_representacion" not-null="true" default-value="nextval('planilla_gasto_representacion_id_planilla_gasto_representac_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="fecha">
		<type name="date"/>
	</column>
	<column name="total_presupuestado" default-value="0">
		<type name="numeric" length="12" precision="1"/>
	</column>
	<column name="total_devengado" default-value="0">
		<type name="numeric" length="12" precision="1"/>
	</column>
	<column name="total_aporte" default-value="0">
		<type name="numeric" length="12" precision="1"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planilla_gasto_representacion_pkey" type="pk-constr" table="salarios.planilla_gasto_representacion">
		<columns names="id_planilla_gasto_representacion" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planilla_gasto_representacion_detalle">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2826" y="3573.4"/>
	<column name="id_planilla_gasto_representacion_detalle" not-null="true" default-value="nextval('planilla_gasto_representacion_id_planilla_gasto_representa_seq1'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_planilla_gasto_representacion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_representacion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias">
		<type name="integer"/>
	</column>
	<column name="presupuestado_parcial">
		<type name="numeric" length="12" precision="1"/>
	</column>
	<column name="devengado_parcial">
		<type name="numeric" length="12" precision="1"/>
	</column>
	<column name="aporte">
		<type name="numeric" length="12" precision="1"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planilla_gasto_representacion_detalle_pkey" type="pk-constr" table="salarios.planilla_gasto_representacion_detalle">
		<columns names="id_planilla_gasto_representacion_detalle" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planilla_gasto_representacion_vacantes">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="3375" y="3573.4"/>
	<column name="id_planilla_gasto_representacion_vacante" not-null="true" default-value="nextval('planilla_gasto_representacion_id_planilla_gasto_representa_seq2'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_planilla_gasto_representacion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_detalle_categoria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="importe">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planilla_gasto_representacion_vacantes_pkey" type="pk-constr" table="salarios.planilla_gasto_representacion_vacantes">
		<columns names="id_planilla_gasto_representacion_vacante" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planilla_gratificacion_especial">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="3884.8"/>
	<column name="id_planilla_gratificacion" not-null="true" default-value="nextval('planilla_gratificacion_especial_id_planilla_gratificacion_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="fecha" default-value="now()">
		<type name="date"/>
	</column>
	<column name="gratificacion_monto_total" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
		<comment><![CDATA[0=creado, 1=procesado, 2=anulado]]></comment>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planilla_gratificacion_especial_pkey" type="pk-constr" table="salarios.planilla_gratificacion_especial">
		<columns names="id_planilla_gratificacion" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planilla_gratificacion_ocacional">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1765" y="3884.8"/>
	<column name="id_planilla_gratificacion_ocacional" not-null="true" default-value="nextval('planilla_gratificacion_ocacio_id_planilla_gratificacion_oca_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="fecha" default-value="now()">
		<type name="date"/>
	</column>
	<column name="monto_total" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="monto_aporte" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planilla_gratificacion_ocacional_pkey" type="pk-constr" table="salarios.planilla_gratificacion_ocacional">
		<columns names="id_planilla_gratificacion_ocacional" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planilla_profesionales">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2270" y="3884.8"/>
	<column name="id_planilla_profesional" not-null="true" default-value="nextval('planilla_profesionales_id_planilla_profesional_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_parametro" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="profesional_monto_total" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="monto_total_aporte" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="fecha" default-value="now()">
		<type name="date"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planilla_profesionales_pkey" type="pk-constr" table="salarios.planilla_profesionales">
		<columns names="id_planilla_profesional" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_aguinaldos">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="2700" y="3884.8"/>
	<column name="id_planilla_aguinaldo" not-null="true" default-value="nextval('planillas_aguinaldos_id_planilla_aguinaldo_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_tipo_aguinaldo" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="monto_total" not-null="true" default-value="0">
		<type name="numeric" length="20" precision="2"/>
	</column>
	<column name="estado" not-null="true">
		<type name="integer"/>
	</column>
	<column name="item" not-null="true">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planillas_aguinaldos_pkey" type="pk-constr" table="salarios.planillas_aguinaldos">
		<columns names="id_planilla_aguinaldo" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_antiguedad">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="3118" y="3884.8"/>
	<column name="id_planilla_antiguedad" not-null="true" default-value="nextval('planillas_antiguedad_id_planilla_antiguedad_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="fecha" default-value="now()">
		<type name="date"/>
	</column>
	<column name="antiguedad_monto_total" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="monto_total_aporte" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
		<comment><![CDATA[0=creado, 1=procesado, 2=anulado]]></comment>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planillas_antiguedad_pkey" type="pk-constr" table="salarios.planillas_antiguedad">
		<columns names="id_planilla_antiguedad" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_bonificaciones">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="4168.2"/>
	<column name="id_planilla_bonificacion" not-null="true" default-value="nextval('planillas_bonificaciones_id_planilla_bonificacion_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_parametro" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="fecha">
		<type name="date"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="total_bonificaciones" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="total_aporte" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planillas_bonificaciones_pkey" type="pk-constr" table="salarios.planillas_bonificaciones">
		<columns names="id_planilla_bonificacion" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_descuentos">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1760" y="4168.2"/>
	<column name="id_planilla_descuento" not-null="true" default-value="nextval('planillas_descuentos_id_planilla_descuento_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_parametro" not-null="true">
		<type name="integer"/>
	</column>
	<column name="fecha">
		<type name="date"/>
	</column>
	<column name="total_descuento" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
		<comment><![CDATA[0 = Creado, 1 = Procesado, 2 = Anulado, 3 = Posee por lo menos un detalle.-]]></comment>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="total_importe_solicitado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
		<comment><![CDATA[Esta columna almacena la sumatoria de los importes unitarios solicitados para descuento.-]]></comment>
	</column>
	<column name="id_planilla_salario">
		<type name="integer"/>
	</column>
	<constraint name="planillas_descuentos_pkey" type="pk-constr" table="salarios.planillas_descuentos">
		<columns names="id_planilla_descuento" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_detalles_aguinaldos">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="2187" y="4168.2"/>
	<column name="id_planilla_detalle_aguinaldo" not-null="true" default-value="nextval('planillas_detalles_aguinaldos_id_planilla_detalle_aguinaldo_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_planilla_aguinaldo" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario_aguinaldo" not-null="true">
		<type name="integer"/>
	</column>
	<column name="monto" not-null="true">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="estado" not-null="true">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planillas_detalles_aguinaldos_pkey" type="pk-constr" table="salarios.planillas_detalles_aguinaldos">
		<columns names="id_planilla_detalle_aguinaldo" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_otras_transferencias_ctes_detalles">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="2658" y="4168.2"/>
	<column name="id_planilla_otra_transferencia_cte_detalle" not-null="true" default-value="nextval('planillas_otras_transferencia_id_planilla_otra_transferenc_seq1'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_planilla_otra_transferencia_cte" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="importe_otra_transferencia_cte">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planillas_otras_transferencias_ctes_detalles_pkey" type="pk-constr" table="salarios.planillas_otras_transferencias_ctes_detalles">
		<columns names="id_planilla_otra_transferencia_cte_detalle" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_otras_transferencias_ctes">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="3213" y="4168.2"/>
	<column name="id_planilla_otra_transferencia_cte" not-null="true" default-value="nextval('planillas_otras_transferencia_id_planilla_otra_transferenci_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="fecha" default-value="now()">
		<type name="date"/>
	</column>
	<column name="monto_total_otra_transferencia_cte" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="disposicion">
		<type name="character varying" length="120"/>
	</column>
	<constraint name="planillas_otras_transferencias_ctes_pkey" type="pk-constr" table="salarios.planillas_otras_transferencias_ctes">
		<columns names="id_planilla_otra_transferencia_cte" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_ra">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<position x="1328" y="4465.6"/>
	<column name="id_planilla_ra" not-null="true" default-value="nextval('planillas_ra_id_planilla_ra_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_parametro_calculo_re_ra" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_parametro" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="fecha">
		<type name="date"/>
	</column>
	<column name="total_aporte" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="item" default-value="0">
		<type name="integer"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="total_ra" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<constraint name="planillas_ra_pkey" type="pk-constr" table="salarios.planillas_ra">
		<columns names="id_planilla_ra" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_re">
	<schema name="salarios"/>
	<role name="jcabrera"/>
	<position x="1778" y="4465.6"/>
	<column name="id_planilla_re" not-null="true" default-value="nextval('planillas_re_id_planilla_re_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_parametro_calculo_re_ra" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_parametro" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="fecha">
		<type name="date"/>
	</column>
	<column name="total_re" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="total_aporte" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="item" default-value="0">
		<type name="integer"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planillas_re_pkey" type="pk-constr" table="salarios.planillas_re">
		<columns names="id_planilla_re" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_salarios">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2228" y="4465.6"/>
	<column name="id_planilla_salario" not-null="true" default-value="nextval('planillas_salarios_id_planilla_salario_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_parametro" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="item">
		<type name="integer"/>
	</column>
	<column name="fecha" default-value="now()">
		<type name="date"/>
	</column>
	<column name="total_presupuestado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="total_devengado" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="total_aporte" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="total_multa" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="id_estado" not-null="true" default-value="0">
		<type name="integer"/>
		<comment><![CDATA[0=creado, 1=procesado, 2=anulado]]></comment>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="total_monto_aporte" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<constraint name="planillas_salarios_pkey" type="pk-constr" table="salarios.planillas_salarios">
		<columns names="id_planilla_salario" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_salarios_estado">
	<schema name="salarios"/>
	<role name="postgres"/>
	<comment><![CDATA[Esta tabla almacena los distintos estados posibles que puede tomar la planilla de salarios.-]]></comment>
	<position x="2636" y="4465.6"/>
	<column name="id_estado" not-null="true" default-value="nextval('planillas_salarios_estado_id_estado_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="descripcion" not-null="true">
		<type name="character varying" length="100"/>
		<comment><![CDATA[Nombre del estado de una planilla de salarios.-]]></comment>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="planillas_salarios_estado_pkey" type="pk-constr" table="salarios.planillas_salarios_estado">
		<columns names="id_estado" ref-type="src-columns"/>
	</constraint>
</table>

<table name="planillas_subsidios">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="3031" y="4465.6"/>
	<column name="id_planilla_subsidio" not-null="true" default-value="nextval('planillas_subsidios_id_planilla_subsidio_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_parametro" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="fecha" default-value="now()">
		<type name="date"/>
	</column>
	<column name="total_subsidio" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="total_aporte" default-value="0">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
		<comment><![CDATA[0=creado, 1=procesado, 2=anulado]]></comment>
	</column>
	<constraint name="planillas_subsidios_pkey" type="pk-constr" table="salarios.planillas_subsidios">
		<columns names="id_planilla_subsidio" ref-type="src-columns"/>
	</constraint>
</table>

<table name="retiros_voluntarios_planillas">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="4805"/>
	<column name="id_retiro_voluntario_planilla" not-null="true" default-value="nextval('retiros_voluntarios_planillas_id_retiro_voluntario_planilla_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="decreto_resumen" not-null="true">
		<type name="text"/>
	</column>
	<column name="decreto_fecha" not-null="true">
		<type name="date"/>
	</column>
	<column name="secuencia" not-null="true">
		<type name="integer"/>
	</column>
	<column name="dias_calculo_diario" not-null="true" default-value="30">
		<type name="integer"/>
	</column>
	<column name="dias_retiro" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_mes_retiro" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion_retiro" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="total_haberes" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="total_descuentos" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="id_estado" not-null="true" default-value="0">
		<type name="integer"/>
		<comment><![CDATA[0=creado, 1=procesado, 2=anulado]]></comment>
	</column>
	<column name="fecha_estado">
		<type name="date"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="retiros_voluntarios_planillas_pkey" type="pk-constr" table="salarios.retiros_voluntarios_planillas">
		<columns names="id_retiro_voluntario_planilla" ref-type="src-columns"/>
	</constraint>
</table>

<table name="retiros_voluntarios_planillas_detalles">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1792" y="4805"/>
	<column name="id_retiro_voluntario_planilla_detalle" not-null="true" default-value="nextval('retiros_voluntarios_planillas_id_retiro_voluntario_planill_seq1'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_retiro_voluntario_planilla" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_detalle_planilla_salario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="nro_disposicion" not-null="true">
		<type name="character varying" length="30"/>
	</column>
	<column name="fecha_disposicion" not-null="true">
		<type name="date"/>
	</column>
	<column name="item_a_antiguedad_real" not-null="true">
		<type name="integer"/>
	</column>
	<column name="item_a_monto_antiguedad" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="item_b_monto_mensual" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="item_b_monto_diario" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="item_c_dias_pre_aviso" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="item_c_monto_pre_aviso" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="item_d_dias_indemnizacion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="item_d_monto_indemnizacion" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="item_e_dias_gestion1_vacacion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="item_e_dias_gestion2_vacacion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="item_e_monto_vacaciones" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="item_f_aguinaldo" not-null="true">
		<type name="boolean"/>
	</column>
	<column name="item_f_monto_aguinaldo" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="retiros_voluntarios_planillas_detalles_pkey" type="pk-constr" table="salarios.retiros_voluntarios_planillas_detalles">
		<columns names="id_retiro_voluntario_planilla_detalle" ref-type="src-columns"/>
	</constraint>
</table>

<table name="retiros_voluntarios_planillas_detalles_descuentos">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2309" y="4805"/>
	<column name="id_retiro_voluntario_planilla_detalle_descuento" not-null="true" default-value="nextval('retiros_voluntarios_planillas_id_retiro_voluntario_planill_seq3'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_retiro_voluntario_planilla_detalle" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_tipo_descuento" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_judicial">
		<type name="integer"/>
	</column>
	<column name="monto_descuento">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="pdf">
		<type name="bytea"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="retiros_voluntarios_planillas_detalles_descuentos_pkey" type="pk-constr" table="salarios.retiros_voluntarios_planillas_detalles_descuentos">
		<columns names="id_retiro_voluntario_planilla_detalle_descuento" ref-type="src-columns"/>
	</constraint>
</table>

<table name="retiros_voluntarios_planillas_detalles_remuneraciones">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2901" y="4805"/>
	<column name="id_retiro_voluntario_planilla_detalle_remuneracion" not-null="true" default-value="nextval('retiros_voluntarios_planillas_id_retiro_voluntario_planill_seq2'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_retiro_voluntario_planilla_detalle" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="seis_meses" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="categoria" not-null="true">
		<type name="character varying" length="4"/>
	</column>
	<column name="importe" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="diferencia_salarial" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="gasto_representacion" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="remuneracion_extraordinaria" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="bonificacion_gratificacion" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="grado_academico" not-null="true">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="antiguedad" not-null="true">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="total" not-null="true" default-value="0">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="retiros_voluntarios_planillas_detalles_remuneraciones_pkey" type="pk-constr" table="salarios.retiros_voluntarios_planillas_detalles_remuneraciones">
		<columns names="id_retiro_voluntario_planilla_detalle_remuneracion" ref-type="src-columns"/>
	</constraint>
</table>

<table name="situacion_personal">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="3516" y="4805"/>
	<column name="id_situacion_personal" not-null="true" default-value="nextval('situacion_personal_id_situacion_personal_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="fecha">
		<type name="date"/>
	</column>
	<column name="nro_documento">
		<type name="character varying" length="10"/>
	</column>
	<column name="documento">
		<type name="bytea"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="situacion_personal_pkey" type="pk-constr" table="salarios.situacion_personal">
		<columns names="id_situacion_personal" ref-type="src-columns"/>
	</constraint>
</table>

<table name="subsidios">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1328" y="5228.4"/>
	<column name="id_subsidio" not-null="true" default-value="nextval('subsidios_id_subsidio_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true">
		<type name="integer"/>
	</column>
	<column name="descripcion" default-value="0">
		<type name="character varying" length="40"/>
	</column>
	<column name="importe">
		<type name="numeric" length="15" precision="2"/>
	</column>
	<column name="activo" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="subsidios_pkey" type="pk-constr" table="salarios.subsidios">
		<columns names="id_subsidio" ref-type="src-columns"/>
	</constraint>
</table>

<table name="tipos_aguinaldos">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="1715" y="5228.4"/>
	<column name="id_tipo_aguinaldo" not-null="true" default-value="nextval('tipos_aguinaldos_id_tipo_aguinaldo_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="descripcion">
		<type name="character varying" length="80"/>
	</column>
	<column name="origen_detalle_tabla">
		<type name="character varying" length="100"/>
	</column>
	<column name="origen_detalle_id">
		<type name="character varying" length="80"/>
	</column>
	<column name="origen_cabecera_tabla">
		<type name="character varying" length="100"/>
	</column>
	<column name="origen_cabecera_id">
		<type name="character varying" length="80"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="tipos_aguinaldos_pkey" type="pk-constr" table="salarios.tipos_aguinaldos">
		<columns names="id_tipo_aguinaldo" ref-type="src-columns"/>
	</constraint>
</table>

<table name="tipos_descuentos">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2145" y="5228.4"/>
	<column name="id_tipo_descuento" not-null="true" default-value="nextval('tipos_descuentos_id_tipo_descuento_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="descripcion">
		<type name="text"/>
	</column>
	<column name="abreviatura">
		<type name="character varying" length="20"/>
	</column>
	<column name="aso" default-value="false">
		<type name="boolean"/>
		<comment><![CDATA[Este campo permite identificar si este registro pertenece a descuentos varios, cuando el valor esta en TRUE o si es un descuento judicial (cobro de guaranies o prestación alimentaria) cuando el valor esta en FALSE.-]]></comment>
	</column>
	<column name="orden">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="tipos_descuentos_pkey" type="pk-constr" table="salarios.tipos_descuentos">
		<columns names="id_tipo_descuento" ref-type="src-columns"/>
	</constraint>
</table>

<table name="tipos_planillas">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2544" y="5228.4"/>
	<column name="id_tipo_planilla" not-null="true" default-value="nextval('tipos_planillas_id_tipo_planilla_seq1'::regclass)">
		<type name="integer"/>
	</column>
	<column name="nombre_tabla" not-null="true">
		<type name="character varying" length="80"/>
	</column>
	<column name="nombre_id_planilla" not-null="true">
		<type name="character varying" length="80"/>
	</column>
	<column name="nombre_tabla_detalle" not-null="true">
		<type name="character varying" length="80"/>
	</column>
	<column name="nombre_id_detalle_planilla" not-null="true">
		<type name="character varying" length="80"/>
	</column>
	<column name="nombre_campo_importe" not-null="true">
		<type name="character varying" length="80"/>
	</column>
	<column name="nombre_campo_aporte" not-null="true">
		<type name="character varying" length="80"/>
	</column>
	<column name="nombre_id_campo_estructura" not-null="true">
		<type name="character varying" length="80"/>
	</column>
	<column name="descripcion_tipo" not-null="true">
		<type name="character varying" length="80"/>
	</column>
	<column name="usu_alta" not-null="true" default-value="'--'::character varying">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" not-null="true" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
	<constraint name="tipos_planillas_pkey" type="pk-constr" table="salarios.tipos_planillas">
		<columns names="id_tipo_planilla" ref-type="src-columns"/>
	</constraint>
</table>

<view name="vista_judicial">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2537.8" y="5511.8"/>
	<reference>
		<expression><![CDATA[ SELECT j.id_judicial,
    j.id_tipo_descuento,
    f.id_funcionario,
    f.cedula_funcionario,
    f.ape_nom_funcionario,
    (((d.dem_documento)::text || ' - '::text) || (d.dem_descripcion)::text) AS demandante,
    j.fecha,
    j.nro_cuenta,
    j.monto_juicio,
        CASE
            WHEN ((td.abreviatura)::text = 'DJPA'::text) THEN (j.monto_descuento_mensual + j.monto_descuento_mensual)
            WHEN ((td.abreviatura)::text = 'DJCG'::text) THEN j.monto_descuento_mensual
            ELSE NULL::numeric
        END AS descuento,
    j.monto_saldo
   FROM (((salarios.judiciales j
     JOIN legajos.funcionarios f ON ((j.id_funcionario = f.id_funcionario)))
     JOIN salarios.demandante d ON ((d.id_demandante = j.id_demandante)))
     JOIN salarios.tipos_descuentos td ON ((j.id_tipo_descuento = td.id_tipo_descuento)))
  WHERE (j.id_judicial > 0);]]></expression>
	</reference>
</view>

<view name="vista_multas_solicitadas">
	<schema name="salarios"/>
	<role name="dalcaraz"/>
	<position x="2755.4" y="5511.8"/>
	<reference>
		<expression><![CDATA[ SELECT a.id_multa_resolucion,
    a.id_funcionario,
    a.cant_dias_resolucion AS cantidad_dias,
    b.ape_nom_funcionario AS funcionario,
    b.cedula_funcionario AS cedula
   FROM (control.detalle_multas_resolucion a
     LEFT JOIN legajos.funcionarios b ON ((a.id_funcionario = b.id_funcionario)))
  WHERE (a.anulado IS FALSE);]]></expression>
	</reference>
</view>

<view name="vista_pagos_realizados_permanentes">
	<schema name="salarios"/>
	<role name="postgres"/>
	<comment><![CDATA[Muestra los objetos de gastos, concepto de pago, esquemas/tablas involucradas (cabecera/detalle/secundaria)]]></comment>
	<position x="1328" y="5599.2"/>
	<reference>
		<expression><![CDATA[ SELECT 111 AS objeto_gasto,
    'SALARIOS'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planillas_salarios'::text AS tabla_cabecera,
    'id_planilla_salario'::text AS id_tabla_cabecera,
    'detalles_planillas_salarios'::text AS tabla_detalle,
    'id_detalle_planilla_salario'::text AS id_tabla_detalle,
    'legajos.funcionarios'::text AS tabla_secundaria,
    'id_funcionario'::text AS id_tabla_secundaria,
    1 AS aguinaldo
UNION ALL
 SELECT 113 AS objeto_gasto,
    'GASTO REPRESENTACION'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planilla_gasto_representacion'::text AS tabla_cabecera,
    'id_planilla_gasto_representacion'::text AS id_tabla_cabecera,
    'planilla_gasto_representacion_detalle'::text AS tabla_detalle,
    'id_planilla_gasto_representacion_detalle'::text AS id_tabla_detalle,
    'salarios.funcionarios_representaciones'::text AS tabla_secundaria,
    'id_funcionario_representacion'::text AS id_tabla_secundaria,
    1 AS aguinaldo
UNION ALL
 SELECT 123 AS objeto_gasto,
    'REMUNERACION EXTRAORDINARIA (RE)'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planillas_re'::text AS tabla_cabecera,
    'id_planilla_re'::text AS id_tabla_cabecera,
    'detalles_planillas_re'::text AS tabla_detalle,
    'id_detalle_planilla_re'::text AS id_tabla_detalle,
    'legajos.funcionarios'::text AS tabla_secundaria,
    'id_funcionario'::text AS id_tabla_secundaria,
    1 AS aguinaldo
UNION ALL
 SELECT 125 AS objeto_gasto,
    'REMUNERACION ADICIONAL (RA)'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planillas_ra'::text AS tabla_cabecera,
    'id_planilla_ra'::text AS id_tabla_cabecera,
    'detalles_planillas_ra'::text AS tabla_detalle,
    'id_detalle_planilla_re'::text AS id_tabla_detalle,
    'legajos.funcionarios'::text AS tabla_secundaria,
    'id_funcionario'::text AS id_tabla_secundaria,
    1 AS aguinaldo
UNION ALL
 SELECT 131 AS objeto_gasto,
    btrim(a.descripcion) AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planillas_subsidios'::text AS tabla_cabecera,
    'id_planilla_subsidio'::text AS id_tabla_cabecera,
    'detalles_planillas_subsidios'::text AS tabla_detalle,
    'id_detalle_planilla_subsidio'::text AS id_tabla_detalle,
    'salarios.funcionarios_subsidios'::text AS tabla_secundaria,
    'id_funcionario_subsidio'::text AS id_tabla_secundaria,
    0 AS aguinaldo
   FROM ( SELECT DISTINCT btrim((b.descripcion)::text) AS descripcion
           FROM ((salarios.detalles_planillas_subsidios dps
             LEFT JOIN salarios.funcionarios_subsidios fs ON ((fs.id_funcionario_subsidio = dps.id_funcionario_subsidio)))
             LEFT JOIN salarios.subsidios b ON ((b.id_subsidio = fs.id_subsidio)))
          ORDER BY (btrim((b.descripcion)::text))) a
UNION ALL
 SELECT 133 AS objeto_gasto,
    'GRADO ACADEMICO'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planillas_profesionales'::text AS tabla_cabecera,
    'id_planilla_profesional'::text AS id_tabla_cabecera,
    'detalle_planillas_profesionales'::text AS tabla_detalle,
    'id_detalle_planilla_profesional'::text AS id_tabla_detalle,
    'salarios.funcionarios_profesionales'::text AS tabla_secundaria,
    'id_funcionario_profesional'::text AS id_tabla_secundaria,
    1 AS aguinaldo
UNION ALL
 SELECT 133 AS objeto_gasto,
    'ANTIGUEDAD'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planillas_antiguedad'::text AS tabla_cabecera,
    'id_planilla_antiguedad'::text AS id_tabla_cabecera,
    'detalle_planilla_antiguedad'::text AS tabla_detalle,
    'id_detalle_planilla_antiguedad'::text AS id_tabla_detalle,
    'salarios.funcionarios_antiguedades'::text AS tabla_secundaria,
    'id_funcionario_antiguedad'::text AS id_tabla_secundaria,
    1 AS aguinaldo
UNION ALL
 SELECT 133 AS objeto_gasto,
    'OCASIONAL'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planilla_gratificacion_ocacional'::text AS tabla_cabecera,
    'id_planilla_gratificacion_ocacional'::text AS id_tabla_cabecera,
    'detalle_planilla_gratificacion_ocacional'::text AS tabla_detalle,
    'id_detalle_planilla_gratificacion_ocacional'::text AS id_tabla_detalle,
    'legajos.funcionarios'::text AS tabla_secundaria,
    'id_funcionario'::text AS id_tabla_secundaria,
    1 AS aguinaldo
UNION ALL
 SELECT 133 AS objeto_gasto,
    btrim(a.descripcion) AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planillas_bonificaciones'::text AS tabla_cabecera,
    'id_planilla_bonificacion'::text AS id_tabla_cabecera,
    'detalles_planillas_bonificaciones'::text AS tabla_detalle,
    'id_detalle_planilla_bonificacion'::text AS id_tabla_detalle,
    'salarios.funcionarios_bonificaciones'::text AS tabla_secundaria,
    'id_funcionario_bonificacion'::text AS id_tabla_secundaria,
    1 AS aguinaldo
   FROM ( SELECT DISTINCT btrim((b.descripcion)::text) AS descripcion
           FROM ((salarios.detalles_planillas_bonificaciones dpb
             LEFT JOIN salarios.funcionarios_bonificaciones fb ON ((fb.id_funcionario_bonificacion = dpb.id_funcionario_bonificacion)))
             LEFT JOIN salarios.bonificaciones b ON ((b.id_bonificacion = fb.id_bonificacion)))
          ORDER BY (btrim((b.descripcion)::text))) a
UNION ALL
 SELECT 137 AS objeto_gasto,
    'GRATIFICACION SERVICIOS ESPECIALES'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planilla_gratificacion_especial'::text AS tabla_cabecera,
    'id_planilla_gratificacion'::text AS id_tabla_cabecera,
    'detalle_planilla_gratificacion_especial'::text AS tabla_detalle,
    'id_detalle_planilla_gratificacion'::text AS id_tabla_detalle,
    'legajos.funcionarios'::text AS tabla_secundaria,
    'id_funcionario'::text AS id_tabla_secundaria,
    1 AS aguinaldo
UNION ALL
 SELECT 199 AS objeto_gasto,
    'DIFERENCIA SALARIAL'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planilla_diferencia_salarial'::text AS tabla_cabecera,
    'id_planilla_diferencia_salarial'::text AS id_tabla_cabecera,
    'planilla_diferencia_salarial_detalle'::text AS tabla_detalle,
    'id_planilla_diferencia_salarial_detalle'::text AS id_tabla_detalle,
    'salarios.funcionarios_superiores'::text AS tabla_secundaria,
    'id_funcionario_superior'::text AS id_tabla_secundaria,
    0 AS aguinaldo
UNION ALL
 SELECT 199 AS objeto_gasto,
    'OTROS GASTOS DEL PERSONAL'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planilla_diferencia_salarial'::text AS tabla_cabecera,
    'id_planilla_diferencia_salarial'::text AS id_tabla_cabecera,
    'planilla_diferencia_salarial_detalle'::text AS tabla_detalle,
    'id_planilla_diferencia_salarial_detalle'::text AS id_tabla_detalle,
    'legajos.funcionarios'::text AS tabla_secundaria,
    'id_funcionario'::text AS id_tabla_secundaria,
    1 AS aguinaldo
UNION ALL
 SELECT 845 AS objeto_gasto,
    'PROGRAMA RETIRO VOLUNTARIO'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'retiros_voluntarios_planillas'::text AS tabla_cabecera,
    'id_retiro_voluntario_planilla'::text AS id_tabla_cabecera,
    'retiros_voluntarios_planillas_detalles'::text AS tabla_detalle,
    'id_retiro_voluntario_planilla_detalle'::text AS id_tabla_detalle,
    'legajos.funcionarios'::text AS tabla_secundaria,
    'id_funcionario'::text AS id_tabla_secundaria,
    0 AS aguinaldo
UNION ALL
 SELECT 849 AS objeto_gasto,
    'OTRAS TRANSFERENCIAS CTES.'::text AS concepto,
    1 AS tipo,
    'salarios'::text AS esquema,
    'planillas_otras_transferencias_ctes'::text AS tabla_cabecera,
    'id_planilla_otra_transferencia_cte'::text AS id_tabla_cabecera,
    'planillas_otras_transferencias_ctes_detalles'::text AS tabla_detalle,
    'id_planilla_otra_transferencia_cte_detalle'::text AS id_tabla_detalle,
    'legajos.funcionarios'::text AS tabla_secundaria,
    'id_funcionario'::text AS id_tabla_secundaria,
    0 AS aguinaldo;]]></expression>
	</reference>
</view>

<view name="vista_planilla_antiguedad_detalle_checkbox">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="1704.6" y="5599.2"/>
	<reference>
		<expression><![CDATA[ SELECT DISTINCT f.id_funcionario,
    f.cedula_funcionario,
    f.ape_nom_funcionario,
    o1.id_oficina,
    o.nivel1,
    o1.nombre AS nombre_oficina,
    fp.fecha_inicio_cargo AS fecha_ingreso,
    ( SELECT date_part('Year'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)) AS date_part) AS antiguedad_anho,
    ((((( SELECT (((date_part('Year'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)))::text || ' '::text) || 'año(s) '::text)) || ' '::text) || ( SELECT (((date_part('Month'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)))::text || ' '::text) || 'mes(es) '::text))) || ' '::text) || ( SELECT (((date_part('Day'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)))::text || ' '::text) || ' dia(s) '::text))) AS antiguedad,
        CASE
            WHEN ((( SELECT date_part('Year'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)) AS date_part) >= (10)::double precision) AND (( SELECT date_part('Year'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)) AS date_part) <= (15)::double precision)) THEN ( SELECT parametros.antig_10_15
               FROM parametros
              WHERE (parametros.estado IS TRUE))
            WHEN ((( SELECT date_part('Year'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)) AS date_part) >= (16)::double precision) AND (( SELECT date_part('Year'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)) AS date_part) <= (20)::double precision)) THEN ( SELECT parametros.antig_16_20
               FROM parametros
              WHERE (parametros.estado IS TRUE))
            WHEN ((( SELECT date_part('Year'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)) AS date_part) >= (21)::double precision) AND (( SELECT date_part('Year'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)) AS date_part) <= (25)::double precision)) THEN ( SELECT parametros.antig_21_25
               FROM parametros
              WHERE (parametros.estado IS TRUE))
            WHEN ((( SELECT date_part('Year'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)) AS date_part) >= (26)::double precision) AND (( SELECT date_part('Year'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)) AS date_part) <= (30)::double precision)) THEN ( SELECT parametros.antig_26_30
               FROM parametros
              WHERE (parametros.estado IS TRUE))
            WHEN (( SELECT date_part('Year'::text, age(now(), (fp.fecha_inicio_cargo)::timestamp with time zone)) AS date_part) >= (31)::double precision) THEN ( SELECT parametros.antig_31
               FROM parametros
              WHERE (parametros.estado IS TRUE))
            ELSE NULL::numeric
        END AS importe_antiguedad
   FROM ((((((((legajos.funcionarios f
     JOIN legajos.datos_administrativos da ON ((da.id_funcionario = f.id_funcionario)))
     JOIN legajos.funcionarios_permanentes fp ON ((fp.id_dato_administrativo = da.id_dato_administrativo)))
     JOIN salarios.funcionarios_categorias fc ON (((fc.id_funcionario = f.id_funcionario) AND fc.estado)))
     JOIN salarios.detalles_categorias dc ON ((fc.id_detalle_categoria = dc.id_detalle_categoria)))
     JOIN presupuesto.estructura_presupuestaria ep ON ((dc.id_estructura_presupuestaria = ep.id_estructura_presupuestaria)))
     JOIN legajos.oficinas o ON ((ep.id_estructura_presupuestaria = o.id_estructura_presupuestaria)))
     JOIN legajos.oficinas op ON ((op.id_oficina = fc.id_oficina_presta)))
     JOIN legajos.oficinas o1 ON (((op.nivel1 = o1.nivel1) AND (op.nivel2 = o1.nivel2) AND (o1.nivel3 = 0) AND (o1.nivel4 = 0) AND (o1.nivel5 = 0))))
  WHERE ((f.id_funcionario > 0) AND (o.nivel1 = 1))
  ORDER BY f.id_funcionario;]]></expression>
	</reference>
</view>

<view name="vista_recategorizacion_funcionarios">
	<schema name="salarios"/>
	<role name="postgres"/>
	<position x="2122.2" y="5599.2"/>
	<reference>
		<expression><![CDATA[ SELECT f.id_administracion,
    f.cedula_funcionario,
    f.ape_nom_funcionario,
    c.gestion,
    im.id_mes,
    fc.id_funcionario,
    t.id_funcionario_categoria_new,
    (((c.nombre_categoria)::text || ' - '::text) || (ca.nombre_cargo)::text) AS categoria_new,
    im.importe AS importe_new,
    im.importe_anterior AS importe_anterior_new,
    t.id_funcionario_categoria_old,
    (((c2.nombre_categoria)::text || ' - '::text) || (ca2.nombre_cargo)::text) AS categoria_old,
    im2.importe AS importe_old,
    im2.importe_anterior AS importe_anterior_old
   FROM (((((((((((( SELECT a.id_funcionario_categoria AS id_funcionario_categoria_new,
            ( SELECT fc2_1.id_funcionario_categoria
                   FROM salarios.funcionarios_categorias fc2_1
                  WHERE (((fc2_1.hasta = a.desde) OR
                        CASE
                            WHEN ((fc2_1.gestion = (a.gestion - (1)::numeric)) AND (fc2_1.hasta IS NULL)) THEN true
                            ELSE false
                        END) AND (fc2_1.id_funcionario = a.id_funcionario))
                  ORDER BY fc2_1.desde DESC
                 LIMIT 1) AS id_funcionario_categoria_old
           FROM salarios.funcionarios_categorias a
          WHERE ((a.id_funcionario_categoria > 0) AND (a.estado IS TRUE))) t
     JOIN salarios.funcionarios_categorias fc ON ((t.id_funcionario_categoria_new = fc.id_funcionario_categoria)))
     JOIN legajos.funcionarios f ON ((f.id_funcionario = fc.id_funcionario)))
     JOIN salarios.detalles_categorias dc ON ((dc.id_detalle_categoria = fc.id_detalle_categoria)))
     JOIN salarios.categorias c ON ((c.id_categoria = dc.id_categoria)))
     JOIN salarios.cargos ca ON ((ca.id_cargo = c.id_cargo)))
     JOIN salarios.categoria_importe_mensual im ON ((c.id_categoria = im.id_categoria)))
     JOIN salarios.funcionarios_categorias fc2 ON ((t.id_funcionario_categoria_old = fc2.id_funcionario_categoria)))
     JOIN salarios.detalles_categorias dc2 ON ((dc2.id_detalle_categoria = fc2.id_detalle_categoria)))
     JOIN salarios.categorias c2 ON ((c2.id_categoria = dc2.id_categoria)))
     JOIN salarios.cargos ca2 ON ((ca2.id_cargo = c2.id_cargo)))
     JOIN salarios.categoria_importe_mensual im2 ON (((c2.id_categoria = im2.id_categoria) AND (im.id_mes = im2.id_mes) AND ((im2.id_mes)::double precision = date_part('month'::text, fc.desde)))))
  WHERE (NOT (t.id_funcionario_categoria_old IS NULL));]]></expression>
	</reference>
</view>

<index name="aso_temporales_id_administracion_gestion_id_mes_cedula_id_t_idx" table="salarios.aso_temporales"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
	<comment><![CDATA[Este indice permite bloquear la insercion de dos descuentos iguales en el mismo mes, gestion y administracion para un usuario en un mismo concepto.-]]></comment>
		<idxelement use-sorting="false">
			<column name="id_administracion"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="gestion"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="id_mes"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="cedula"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="id_tipo_descuento"/>
		</idxelement>
</index>

<index name="autorizaciones_id_funcionario_id_tipo_descuento_idx" table="salarios.autorizaciones"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
	<comment><![CDATA[Este índice restringe a que exista solamente UNA autorización válida para un funcionario para un concepto de descuento.-]]></comment>
		<idxelement use-sorting="false">
			<column name="id_funcionario"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="id_tipo_descuento"/>
		</idxelement>
	<predicate><![CDATA[estado IS TRUE]]></predicate>
</index>

<index name="cargos_unicos" table="salarios.cargos"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
	<comment><![CDATA[Este índice evita duplicados con la misma descripcion.-]]></comment>
		<idxelement use-sorting="false">
			<expression><![CDATA[upper((nombre_cargo)::text)]]></expression>
		</idxelement>
</index>

<index name="categoria_importe_mensual_unico" table="salarios.categoria_importe_mensual"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="id_mes"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="id_categoria"/>
		</idxelement>
</index>

<index name="categoria_unica_en_gestion" table="salarios.categorias"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
	<comment><![CDATA[Este índice evita duplicados con la misma gestion, nombre de la cetegoria y el cargo.-]]></comment>
		<idxelement use-sorting="false">
			<column name="gestion"/>
		</idxelement>
		<idxelement use-sorting="false">
			<expression><![CDATA[upper((nombre_categoria)::text)]]></expression>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="id_cargo"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="es_comisionado"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="abreviatura_entidad"/>
		</idxelement>
</index>

<index name="demandante_dem_descripcion_idx" table="salarios.demandante"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="dem_descripcion"/>
		</idxelement>
</index>

<index name="descuentos_judiciales_gestion_id_mes_id_judicial_idx" table="salarios.descuentos_judiciales"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="gestion"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="id_mes"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="id_judicial"/>
		</idxelement>
</index>

<index name="idx_indice_categoria_unica_de_funcionario_en_gestion_activa" table="salarios.funcionarios_categorias"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="id_funcionario"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="gestion"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="estado"/>
		</idxelement>
	<predicate><![CDATA[estado IS TRUE]]></predicate>
</index>

<index name="idx_unico_planillas_dtos_id_tipo_descuento_estado_0" table="salarios.planillas_descuentos"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="id_administracion"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="gestion"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="id_mes"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="estado"/>
		</idxelement>
	<predicate><![CDATA[estado = 0]]></predicate>
</index>

<index name="idx_unico_plla_salario_en_multas_aplicadas" table="salarios.multas_aplicadas"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="id_administracion"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="gestion"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="id_mes"/>
		</idxelement>
		<idxelement use-sorting="false">
			<column name="id_planilla_salario"/>
		</idxelement>
</index>

<index name="juz_descripcion" table="salarios.juzgado"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="juz_descripcion"/>
		</idxelement>
</index>

<index name="unique_multas_solicitadas_id_multa_resolucion" table="salarios.multas_solicitadas"
	 concurrent="false" unique="true" fast-update="false" buffering="false"
	 index-type="btree" factor="90">
		<idxelement use-sorting="false">
			<column name="id_multa_resolucion"/>
		</idxelement>
</index>

<trigger name="actualiza_estado_firmantes" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="salarios.firmantes_salarios">
		<function signature="salarios.actualiza_estado_firmantes()"/>
</trigger>

<trigger name="actualiza_importe_multas_aplicadas" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.detalles_multas_aplicadas">
		<function signature="salarios.actualiza_importes_multas_aplicadas()"/>
</trigger>

<trigger name="actualiza_importe_multas_solicitadas" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.detalles_multas_solicitadas">
		<function signature="salarios.actualiza_importe_multas_solicitadas()"/>
</trigger>

<trigger name="actualiza_montos_aguinaldos" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.planillas_detalles_aguinaldos">
		<function signature="salarios.planillas_aguinaldos_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_antiguedad" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.detalle_planilla_antiguedad">
		<function signature="salarios.planilla_antiguedad_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_bonificaciones" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.detalles_planillas_bonificaciones">
		<function signature="salarios.planilla_bonificaciones_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_diferencia_salarial" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.planilla_diferencia_salarial_detalle">
		<function signature="salarios.planilla_diferencia_salarial_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_gasto_representacioon" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.planilla_gasto_representacion_detalle">
		<function signature="salarios.planilla_gasto_representacion_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_gratificacion_especial" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.detalle_planilla_gratificacion_especial">
		<function signature="salarios.planilla_gratificacion_especial_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_gratificacion_ocasional" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.detalle_planilla_gratificacion_ocacional">
		<function signature="salarios.planilla_gratificacion_ocasional_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_otras_transferencias_ctes" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.planillas_otras_transferencias_ctes_detalles">
		<function signature="salarios.planillas_otras_transferencias_ctes_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_pedido_fondo" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.pedidos_fondos_detalles">
		<function signature="salarios.pedido_fondo_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_pedido_fondo_aguinaldo" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.pedido_fondo_aguinaldo_detalle">
		<function signature="salarios.pedido_fondo_aguinaldo_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_profesional" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.detalle_planillas_profesionales">
		<function signature="salarios.planilla_profesional_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_ra" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.detalles_planillas_ra">
		<function signature="salarios.planilla_ra_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_re" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.detalles_planillas_re">
		<function signature="salarios.planilla_re_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_retiros_voluntarios_planillas" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.retiros_voluntarios_planillas_detalles">
		<function signature="salarios.retiros_voluntarios_planillas_actualiza_haberes()"/>
</trigger>

<trigger name="actualiza_montos_retiros_voluntarios_planillas2" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.retiros_voluntarios_planillas_detalles_descuentos">
		<function signature="salarios.retiros_voluntarios_planillas_actualiza_descuentos()"/>
</trigger>

<trigger name="actualiza_montos_subsidios" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.detalles_planillas_subsidios">
		<function signature="salarios.planillas_subsidios_actualiza_montos()"/>
</trigger>

<trigger name="actualiza_montos_totales" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.detalles_planillas_salarios">
		<function signature="salarios.planilla_salarios_actualiza_montos_totales()"/>
</trigger>

<trigger name="actualiza_oficina_presta_servicio" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="true" trunc-event="false"
	 table="salarios.funcionarios_categorias">
		<function signature="salarios.actualiza_oficina_presta()"/>
</trigger>

<trigger name="actualiza_vacancia" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.funcionarios_representaciones">
		<function signature="salarios.actualiza_vacancia()"/>
</trigger>

<trigger name="actualiza_vacante_categoria" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="false" upd-event="false" trunc-event="false"
	 table="salarios.funcionarios_categorias">
		<function signature="salarios.actualiza_vacante_categoria()"/>
</trigger>

<trigger name="anular_planilla_salario" firing-type="AFTER" per-line="true" constraint="false"
	 ins-event="false" del-event="false" upd-event="true" trunc-event="false"
	 table="salarios.planillas_salarios">
	<condition><![CDATA[(new.id_estado = 2)]]></condition>
		<function signature="salarios.anular_planilla_salario()"/>
</trigger>

<trigger name="trigger_descuentos_aso_con_autorizacion" firing-type="BEFORE" per-line="true" constraint="false"
	 ins-event="true" del-event="true" upd-event="true" trunc-event="false"
	 table="salarios.descuentos_aso">
		<function signature="salarios.descuentos_aso_con_autorizacion()"/>
</trigger>

<table name="gestiones">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="50" y="50"/>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="activo" not-null="true" default-value="false">
		<type name="boolean"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
</table>

<schema name="seguridad" rect-visible="true" fill-color="#12c188">
	<role name="postgres"/>
</schema>

<table name="administracion">
	<schema name="seguridad"/>
	<role name="postgres"/>
	<position x="3951" y="50"/>
	<column name="id_administracion" not-null="true" default-value="nextval('administracion_id_administracion_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="nombre" not-null="true">
		<type name="character varying" length="255"/>
	</column>
	<column name="usu_alta" not-null="true">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
</table>

<table name="meses">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="422" y="50"/>
	<column name="id_mes" not-null="true" default-value="nextval('meses_id_mes_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="mes_descripcion">
		<type name="character varying" length="20"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
</table>

<schema name="legajos" rect-visible="true" fill-color="#663f56">
	<role name="postgres"/>
</schema>

<table name="funcionarios">
	<schema name="legajos"/>
	<role name="postgres"/>
	<position x="50" y="5692.6"/>
	<column name="id_funcionario" not-null="true" default-value="nextval('funcionarios_id_funcionario_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="cedula_funcionario">
		<type name="character varying" length="15"/>
	</column>
	<column name="nombre_funcionario">
		<type name="character varying" length="80"/>
	</column>
	<column name="apellido_funcionario">
		<type name="character varying" length="80"/>
	</column>
	<column name="ape_nom_funcionario">
		<type name="character varying" length="100"/>
	</column>
	<column name="fecha_nac_funcionario">
		<type name="date"/>
	</column>
	<column name="estado_funcionario" default-value="true">
		<type name="boolean"/>
	</column>
	<column name="foto">
		<type name="bytea"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
</table>

<table name="oficinas">
	<schema name="legajos"/>
	<role name="postgres"/>
	<position x="462" y="5692.6"/>
	<column name="id_oficina" not-null="true" default-value="nextval('oficinas_id_oficina_seq1'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_estructura_presupuestaria" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="id_edificio">
		<type name="integer"/>
	</column>
	<column name="nombre">
		<type name="character varying" length="255"/>
	</column>
	<column name="nivel1">
		<type name="integer"/>
	</column>
	<column name="nivel2">
		<type name="integer"/>
	</column>
	<column name="nivel3">
		<type name="integer"/>
	</column>
	<column name="nivel4">
		<type name="integer"/>
	</column>
	<column name="nivel5">
		<type name="integer"/>
	</column>
	<column name="estado">
		<type name="boolean"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
</table>

<schema name="presupuesto" rect-visible="true" fill-color="#29727f">
	<role name="postgres"/>
</schema>

<table name="estructura_presupuestaria">
	<schema name="presupuesto"/>
	<role name="postgres"/>
	<position x="1316" y="5692.6"/>
	<column name="id_estructura_presupuestaria" not-null="true" default-value="nextval('estructura_presupuestaria_id_estructura_presupuestaria_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="cod_departamento" not-null="true">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="cod_tipo" not-null="true">
		<type name="numeric" precision="0"/>
	</column>
	<column name="cod_programa" not-null="true">
		<type name="numeric" length="3" precision="0"/>
	</column>
	<column name="cod_subprograma">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="cod_proyecto" not-null="true">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="cod_objeto_gasto" not-null="true">
		<type name="numeric" length="3" precision="0"/>
	</column>
	<column name="cod_fuente_financiamiento" not-null="true">
		<type name="numeric" length="2" precision="0"/>
	</column>
	<column name="cod_organismo_financiador" not-null="true">
		<type name="numeric" length="3" precision="0"/>
	</column>
	<column name="descripcion_estructura_presupuestaria">
		<type name="text"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
</table>

<schema name="control" rect-visible="true" fill-color="#33cf4d">
	<role name="postgres"/>
</schema>

<table name="aplicadas_horas_detalle">
	<schema name="control"/>
	<role name="caquino"/>
	<position x="1839" y="5692.6"/>
	<column name="id_aplicada_hora_detalle" not-null="true" default-value="nextval('aplicadas_horas_detalle_id_aplicada_hora_detalle_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_aplicada_hora" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_pedido_hora_detalle" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_funcionario" not-null="true">
		<type name="integer"/>
	</column>
	<column name="id_oficina" not-null="true">
		<type name="integer"/>
	</column>
	<column name="horas_re">
		<type name="numeric" length="5" precision="2"/>
	</column>
	<column name="horas_ra">
		<type name="numeric" length="5" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
</table>

<table name="departamentos">
	<schema name="legajos"/>
	<role name="postgres"/>
	<position x="916" y="5692.6"/>
	<column name="id_departamento" not-null="true" default-value="nextval('departamentos_id_departamento_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_pais" not-null="true">
		<type name="integer"/>
	</column>
	<column name="depar_descripcion">
		<type name="character varying" length="100"/>
	</column>
	<column name="usu_alta">
		<type name="character varying"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying"/>
	</column>
	<column name="fec_modi" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
</table>

<table name="multas_resolucion">
	<schema name="control"/>
	<role name="postgres"/>
	<position x="2257" y="5692.6"/>
	<column name="id_multa_resolucion" not-null="true" default-value="nextval('multas_resolucion_id_multa_resolucion_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="id_mes" not-null="true">
		<type name="integer"/>
	</column>
	<column name="gestion" not-null="true">
		<type name="numeric" length="4" precision="0"/>
	</column>
	<column name="resolucion_nro" default-value="0">
		<type name="integer"/>
	</column>
	<column name="fecha_resolucion">
		<type name="date"/>
	</column>
	<column name="documento">
		<type name="bytea"/>
	</column>
	<column name="fecha_inicio">
		<type name="date"/>
	</column>
	<column name="fecha_fin">
		<type name="date"/>
	</column>
	<column name="estado" default-value="0">
		<type name="integer"/>
		<comment><![CDATA[0 = creado, 1 = controlado, 2 = finiquitado, 3 = anulado]]></comment>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
</table>

<table name="parametros">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="794" y="50"/>
	<column name="id_parametro" not-null="true" default-value="nextval('parametros_id_parametro_seq'::regclass)">
		<type name="integer"/>
	</column>
	<column name="id_administracion" not-null="true" default-value="0">
		<type name="integer"/>
	</column>
	<column name="aporte_jubilatorio">
		<type name="numeric" length="5" precision="2"/>
	</column>
	<column name="bonif_escolar">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="bonif_matrimonio">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="bonif_nacimiento">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="grado_academico">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="antig_10_15">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="antig_16_20">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="antig_21_25">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="antig_26_30">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="antig_31">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="responsabilidad">
		<type name="numeric" length="5" precision="2"/>
	</column>
	<column name="gestion_admin">
		<type name="numeric" length="5" precision="2"/>
	</column>
	<column name="cajero">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="gestion_pres1">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="gestion_pres2">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="insalubridad">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="pago_especial">
		<type name="numeric" length="12" precision="2"/>
	</column>
	<column name="re">
		<type name="integer"/>
	</column>
	<column name="ra">
		<type name="integer"/>
	</column>
	<column name="estado">
		<type name="boolean"/>
	</column>
	<column name="desde">
		<type name="date"/>
	</column>
	<column name="hasta">
		<type name="date"/>
	</column>
	<column name="re_contratados">
		<type name="integer"/>
	</column>
	<column name="ra_contratados">
		<type name="integer"/>
	</column>
	<column name="hora_entrada">
		<type name="timestamp"/>
	</column>
	<column name="hora_salida">
		<type name="timestamp"/>
	</column>
	<column name="hora_re">
		<type name="integer"/>
	</column>
	<column name="hora_ra">
		<type name="integer"/>
	</column>
	<column name="cantidad_dias_pa_hallar_importe_diario">
		<type name="integer"/>
	</column>
	<column name="cant_horas_pa_hallar_importe_por_hora">
		<type name="integer"/>
	</column>
	<column name="max_cant_dias_en_multas_aplicadas">
		<type name="integer"/>
	</column>
	<column name="institucion">
		<type name="character varying" length="255"/>
	</column>
	<column name="crh_coordinador_nombre">
		<type name="character varying" length="255"/>
	</column>
	<column name="crh_coordinador_cargo">
		<type name="character varying" length="255"/>
	</column>
	<column name="crh_salarios_jefe_nombre">
		<type name="character varying" length="255"/>
	</column>
	<column name="crh_salarios_jefe_cargo">
		<type name="character varying" length="255"/>
	</column>
	<column name="vacac_01_05">
		<type name="integer"/>
	</column>
	<column name="vacac_06_10">
		<type name="integer"/>
	</column>
	<column name="vacac_11">
		<type name="integer"/>
	</column>
	<column name="aporte_jubilatorio_nombramiento">
		<type name="numeric" length="5" precision="2"/>
	</column>
	<column name="usu_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_alta" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="usu_modi">
		<type name="character varying" length="30"/>
	</column>
	<column name="fec_modi" default-value="now()">
		<type name="timestamp"/>
	</column>
	<column name="ip_alta">
		<type name="character varying" length="30"/>
	</column>
	<column name="ip_modi">
		<type name="character varying" length="30"/>
	</column>
</table>

<constraint name="aso_temporales_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.aso_temporales">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="aso_temporales_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.aso_temporales">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="aso_temporales_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.aso_temporales">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="aso_temporales_id_tipo_descuento_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.tipos_descuentos" table="salarios.aso_temporales">
	<columns names="id_tipo_descuento" ref-type="src-columns"/>
	<columns names="id_tipo_descuento" ref-type="dst-columns"/>
</constraint>

<constraint name="autorizaciones_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.autorizaciones">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="autorizaciones_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.autorizaciones">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="autorizaciones_id_tipo_descuento_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.tipos_descuentos" table="salarios.autorizaciones">
	<columns names="id_tipo_descuento" ref-type="src-columns"/>
	<columns names="id_tipo_descuento" ref-type="dst-columns"/>
</constraint>

<constraint name="bancos_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.bancos">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="bonificaciones_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.bonificaciones">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="cargos_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.cargos">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="categorias_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.categorias">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="categorias_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.categorias">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="categorias_id_cargo_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.cargos" table="salarios.categorias">
	<columns names="id_cargo" ref-type="src-columns"/>
	<columns names="id_cargo" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_categorias_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalles_categorias">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_categorias_id_categoria_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.categorias" table="salarios.detalles_categorias">
	<columns names="id_categoria" ref-type="src-columns"/>
	<columns names="id_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_categorias_id_estructura_presupuestaria_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="presupuesto.estructura_presupuestaria" table="salarios.detalles_categorias">
	<columns names="id_estructura_presupuestaria" ref-type="src-columns"/>
	<columns names="id_estructura_presupuestaria" ref-type="dst-columns"/>
</constraint>

<constraint name="categoria_importe_mensual_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.categoria_importe_mensual">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="categoria_importe_mensual_id_categoria_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.categorias" table="salarios.categoria_importe_mensual">
	<columns names="id_categoria" ref-type="src-columns"/>
	<columns names="id_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="categoria_importe_mensual_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.categoria_importe_mensual">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="categorias_reservados_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.categorias_reservados">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="categorias_reservados_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.categorias_reservados">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="categorias_reservados_id_detalle_categoria_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.detalles_categorias" table="salarios.categorias_reservados">
	<columns names="id_detalle_categoria" ref-type="src-columns"/>
	<columns names="id_detalle_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="categorias_reservados_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.categorias_reservados">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="demandante_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.demandante">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="descuentos_aso_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.descuentos_aso">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="descuentos_aso_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.descuentos_aso">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="descuentos_aso_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.descuentos_aso">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="descuentos_aso_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.descuentos_aso">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="descuentos_aso_id_tipo_descuento_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.tipos_descuentos" table="salarios.descuentos_aso">
	<columns names="id_tipo_descuento" ref-type="src-columns"/>
	<columns names="id_tipo_descuento" ref-type="dst-columns"/>
</constraint>

<constraint name="descuentos_judiciales_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.descuentos_judiciales">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="descuentos_judiciales_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.descuentos_judiciales">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="descuentos_judiciales_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.descuentos_judiciales">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="descuentos_judiciales_id_judicial_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.judiciales" table="salarios.descuentos_judiciales">
	<columns names="id_judicial" ref-type="src-columns"/>
	<columns names="id_judicial" ref-type="dst-columns"/>
</constraint>

<constraint name="descuentos_judiciales_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.descuentos_judiciales">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="descuentos_judiciales_id_tipo_descuento_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.tipos_descuentos" table="salarios.descuentos_judiciales">
	<columns names="id_tipo_descuento" ref-type="src-columns"/>
	<columns names="id_tipo_descuento" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planilla_antiguedad_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalle_planilla_antiguedad">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planilla_antiguedad_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.detalle_planilla_antiguedad">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planilla_antiguedad_id_planilla_antiguedad_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_antiguedad" table="salarios.detalle_planilla_antiguedad">
	<columns names="id_planilla_antiguedad" ref-type="src-columns"/>
	<columns names="id_planilla_antiguedad" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planilla_gratificacion_e_id_planilla_gratificacion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planilla_gratificacion_especial" table="salarios.detalle_planilla_gratificacion_especial">
	<columns names="id_planilla_gratificacion" ref-type="src-columns"/>
	<columns names="id_planilla_gratificacion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planilla_gratificacion_especial_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalle_planilla_gratificacion_especial">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planilla_gratificacion_especial_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.detalle_planilla_gratificacion_especial">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planilla_gratificacio_id_planilla_gratificacion_oc_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planilla_gratificacion_ocacional" table="salarios.detalle_planilla_gratificacion_ocacional">
	<columns names="id_planilla_gratificacion_ocacional" ref-type="src-columns"/>
	<columns names="id_planilla_gratificacion_ocacional" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planilla_gratificacion_ocacional_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalle_planilla_gratificacion_ocacional">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planilla_gratificacion_ocacional_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.detalle_planilla_gratificacion_ocacional">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planilla_gratificacion_ocacional_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.detalle_planilla_gratificacion_ocacional">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planillas_profesionales_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalle_planillas_profesionales">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planillas_profesionales_id_funcionario_profesional_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_profesionales" table="salarios.detalle_planillas_profesionales">
	<columns names="id_funcionario_profesional" ref-type="src-columns"/>
	<columns names="id_funcionario_profesional" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planillas_profesionales_id_planilla_profesional_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planilla_profesionales" table="salarios.detalle_planillas_profesionales">
	<columns names="id_planilla_profesional" ref-type="src-columns"/>
	<columns names="id_planilla_profesional" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planillas_vacantes_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalle_planillas_vacantes">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planillas_vacantes_id_detalle_categoria_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.detalles_categorias" table="salarios.detalle_planillas_vacantes">
	<columns names="id_detalle_categoria" ref-type="src-columns"/>
	<columns names="id_detalle_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_planillas_vacantes_id_planilla_salario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_salarios" table="salarios.detalle_planillas_vacantes">
	<columns names="id_planilla_salario" ref-type="src-columns"/>
	<columns names="id_planilla_salario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_situacion_personal_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalle_situacion_personal">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_situacion_personal_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.detalle_situacion_personal">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalle_situacion_personal_id_situacion_personal_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.situacion_personal" table="salarios.detalle_situacion_personal">
	<columns names="id_situacion_personal" ref-type="src-columns"/>
	<columns names="id_situacion_personal" ref-type="dst-columns"/>
</constraint>

<constraint name="salarios_detalles_multas_aplicadas_fkindex1_id_multas_aplicadas" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.multas_aplicadas" table="salarios.detalles_multas_aplicadas">
	<columns names="id_multas_aplicadas" ref-type="src-columns"/>
	<columns names="id_multas_aplicadas" ref-type="dst-columns"/>
</constraint>

<constraint name="salarios_detalles_multas_aplicadas_fkindex2_id_administracion" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalles_multas_aplicadas">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="salarios_detalles_multas_aplicadas_fkindex3_id_detalle_multa_so" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.detalles_multas_solicitadas" table="salarios.detalles_multas_aplicadas">
	<columns names="id_detalle_multa_solicitada" ref-type="src-columns"/>
	<columns names="id_detalle_multa_solicitada" ref-type="dst-columns"/>
</constraint>

<constraint name="salarios_detalles_multas_aplicadas_fkindex4_id_funcionario" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.detalles_multas_aplicadas">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_multas_solicitadas_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalles_multas_solicitadas">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_multas_solicitadas_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.detalles_multas_solicitadas">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_multas_solicitadas_id_multa_solicitada_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.multas_solicitadas" table="salarios.detalles_multas_solicitadas">
	<columns names="id_multa_solicitada" ref-type="src-columns"/>
	<columns names="id_multa_solicitada" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_bonificacio_id_funcionario_bonificacion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_bonificaciones" table="salarios.detalles_planillas_bonificaciones">
	<columns names="id_funcionario_bonificacion" ref-type="src-columns"/>
	<columns names="id_funcionario_bonificacion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_bonificaciones_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalles_planillas_bonificaciones">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_bonificaciones_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.detalles_planillas_bonificaciones">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_bonificaciones_id_planilla_bonificacion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_bonificaciones" table="salarios.detalles_planillas_bonificaciones">
	<columns names="id_planilla_bonificacion" ref-type="src-columns"/>
	<columns names="id_planilla_bonificacion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_descuentos_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalles_planillas_descuentos">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_descuentos_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.detalles_planillas_descuentos">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_descuentos_id_planilla_descuento_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_descuentos" table="salarios.detalles_planillas_descuentos">
	<columns names="id_planilla_descuento" ref-type="src-columns"/>
	<columns names="id_planilla_descuento" ref-type="dst-columns"/>
</constraint>

<constraint name="fk_descuentos_aso_id_descuento_aso" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.descuentos_aso" table="salarios.detalles_planillas_descuentos">
	<columns names="id_descuento_aso" ref-type="src-columns"/>
	<columns names="id_descuento_aso" ref-type="dst-columns"/>
</constraint>

<constraint name="fk_descuentos_aso_id_descuento_judicial" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.descuentos_judiciales" table="salarios.detalles_planillas_descuentos">
	<columns names="id_descuento_judicial" ref-type="src-columns"/>
	<columns names="id_descuento_judicial" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_ra_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalles_planillas_ra">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_ra_id_aplicada_hora_detalle_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="control.aplicadas_horas_detalle" table="salarios.detalles_planillas_ra">
	<columns names="id_aplicada_hora_detalle" ref-type="src-columns"/>
	<columns names="id_aplicada_hora_detalle" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_ra_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.detalles_planillas_ra">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_ra_id_planilla_ra_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_ra" table="salarios.detalles_planillas_ra">
	<columns names="id_planilla_ra" ref-type="src-columns"/>
	<columns names="id_planilla_ra" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_re_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalles_planillas_re">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_re_id_aplicada_hora_detalle_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="control.aplicadas_horas_detalle" table="salarios.detalles_planillas_re">
	<columns names="id_aplicada_hora_detalle" ref-type="src-columns"/>
	<columns names="id_aplicada_hora_detalle" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_re_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.detalles_planillas_re">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_re_id_planilla_re_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_re" table="salarios.detalles_planillas_re">
	<columns names="id_planilla_re" ref-type="src-columns"/>
	<columns names="id_planilla_re" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_salarios_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalles_planillas_salarios">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_salarios_id_administracion_fkey1" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalles_planillas_salarios">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_salarios_id_detalle_categoria_fkey" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.detalles_categorias" table="salarios.detalles_planillas_salarios">
	<columns names="id_detalle_categoria" ref-type="src-columns"/>
	<columns names="id_detalle_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_salarios_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.detalles_planillas_salarios">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_salarios_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.detalles_planillas_salarios">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_salarios_id_planilla_salario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_salarios" table="salarios.detalles_planillas_salarios">
	<columns names="id_planilla_salario" ref-type="src-columns"/>
	<columns names="id_planilla_salario" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_subsidios_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.detalles_planillas_subsidios">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_subsidios_id_funcionario_subsidio_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_subsidios" table="salarios.detalles_planillas_subsidios">
	<columns names="id_funcionario_subsidio" ref-type="src-columns"/>
	<columns names="id_funcionario_subsidio" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_subsidios_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.detalles_planillas_subsidios">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="detalles_planillas_subsidios_id_planilla_subsidio_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_subsidios" table="salarios.detalles_planillas_subsidios">
	<columns names="id_planilla_subsidio" ref-type="src-columns"/>
	<columns names="id_planilla_subsidio" ref-type="dst-columns"/>
</constraint>

<constraint name="firmantes_salarios_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.firmantes_salarios">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_aguinaldos_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_aguinaldos">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_antiguedades_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_antiguedades">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_antiguedades_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_antiguedades">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_antiguedades_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.funcionarios_antiguedades">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_bonificaciones_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.funcionarios_bonificaciones">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_bonificaciones_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_bonificaciones">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_bonificaciones_id_bonificacion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.bonificaciones" table="salarios.funcionarios_bonificaciones">
	<columns names="id_bonificacion" ref-type="src-columns"/>
	<columns names="id_bonificacion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_bonificaciones_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_bonificaciones">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_bonificaciones_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.funcionarios_bonificaciones">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_bonificaciones_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.funcionarios_bonificaciones">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_categorias_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.funcionarios_categorias">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_categorias_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_categorias">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_categorias_id_detalle_categoria_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.detalles_categorias" table="salarios.funcionarios_categorias">
	<columns names="id_detalle_categoria" ref-type="src-columns"/>
	<columns names="id_detalle_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_categorias_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_categorias">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_gratificaciones_ocasionales_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.funcionarios_gratificaciones_ocasionales">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_gratificaciones_ocasionales_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_gratificaciones_ocasionales">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_gratificaciones_ocasionales_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.funcionarios_gratificaciones_ocasionales">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_gratificaciones_ocasionales_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.funcionarios_gratificaciones_ocasionales">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_gratificaciones_especiales_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_gratificaciones_especiales">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_gratificaciones_especiales_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_gratificaciones_especiales">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_gratificaciones_especiales_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.funcionarios_gratificaciones_especiales">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_importes_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_importes">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_importes_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_importes">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_nombrados_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.funcionarios_nombrados">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_nombrados_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_nombrados">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_nombrados_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_nombrados">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_nombrados_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.funcionarios_nombrados">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_profesionales_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_profesionales">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_profesionales_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_profesionales">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_profesionales_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.funcionarios_profesionales">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacio_id_funcionario_categoria_new_fkey1" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_categorias" table="salarios.funcionarios_recategorizacion">
	<columns names="id_funcionario_categoria_new" ref-type="src-columns"/>
	<columns names="id_funcionario_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacio_id_funcionario_categoria_old_fkey1" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_categorias" table="salarios.funcionarios_recategorizacion">
	<columns names="id_funcionario_categoria_old" ref-type="src-columns"/>
	<columns names="id_funcionario_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacion_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.funcionarios_recategorizacion">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacion_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_recategorizacion">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacion_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_recategorizacion">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacion_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.funcionarios_recategorizacion">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacion_ascenso_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.funcionarios_recategorizacion_ascenso">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacion_ascenso_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_recategorizacion_ascenso">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacion_ascenso_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_recategorizacion_ascenso">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacion_ascenso_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.funcionarios_recategorizacion_ascenso">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacion_id_funcionario_categoria_new_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_categorias" table="salarios.funcionarios_recategorizacion_ascenso">
	<columns names="id_funcionario_categoria_new" ref-type="src-columns"/>
	<columns names="id_funcionario_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_recategorizacion_id_funcionario_categoria_old_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_categorias" table="salarios.funcionarios_recategorizacion_ascenso">
	<columns names="id_funcionario_categoria_old" ref-type="src-columns"/>
	<columns names="id_funcionario_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_representaciones_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_representaciones">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_representaciones_id_detalle_categoria_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.detalles_categorias" table="salarios.funcionarios_representaciones">
	<columns names="id_detalle_categoria" ref-type="src-columns"/>
	<columns names="id_detalle_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_representaciones_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_representaciones">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_representaciones_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.funcionarios_representaciones">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_representacione_id_funcionario_representacio_fkey1" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_representaciones" table="salarios.funcionarios_representaciones_cambios">
	<columns names="id_funcionario_representacion_entrante" ref-type="src-columns"/>
	<columns names="id_funcionario_representacion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_representaciones_cambios_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.funcionarios_representaciones_cambios">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_representaciones_cambios_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_representaciones_cambios">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_representaciones_cambios_id_detalle_categoria_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.detalles_categorias" table="salarios.funcionarios_representaciones_cambios">
	<columns names="id_detalle_categoria" ref-type="src-columns"/>
	<columns names="id_detalle_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_representaciones_cambios_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.funcionarios_representaciones_cambios">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_representaciones_id_funcionario_representacio_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_representaciones" table="salarios.funcionarios_representaciones_cambios">
	<columns names="id_funcionario_representacion_saliente" ref-type="src-columns"/>
	<columns names="id_funcionario_representacion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_sinaportes_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_sinaportes">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_sinaportes_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_sinaportes">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_subsidios_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.funcionarios_subsidios">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_subsidios_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_subsidios">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_subsidios_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_subsidios">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_subsidios_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.funcionarios_subsidios">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_superiores_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.funcionarios_superiores">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_superiores_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.funcionarios_superiores">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_superiores_id_categoria_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.categorias" table="salarios.funcionarios_superiores">
	<columns names="id_categoria" ref-type="src-columns"/>
	<columns names="id_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_superiores_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.funcionarios_superiores">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_superiores_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.funcionarios_superiores">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_superiores_dias_traba_id_funcionario_superior_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_superiores" table="salarios.funcionarios_superiores_dias_trabajados">
	<columns names="id_funcionario_superior" ref-type="src-columns"/>
	<columns names="id_funcionario_superior" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_superiores_dias_trabajados_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.funcionarios_superiores_dias_trabajados">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="funcionarios_superiores_dias_trabajados_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.funcionarios_superiores_dias_trabajados">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="horas_no_compensadas_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.horas_no_compensadas">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="horas_no_compensadas_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.horas_no_compensadas">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="judiciales_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.judiciales">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="judiciales_id_bancos_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.bancos" table="salarios.judiciales">
	<columns names="id_bancos" ref-type="src-columns"/>
	<columns names="id_bancos" ref-type="dst-columns"/>
</constraint>

<constraint name="judiciales_id_demandante_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.demandante" table="salarios.judiciales">
	<columns names="id_demandante" ref-type="src-columns"/>
	<columns names="id_demandante" ref-type="dst-columns"/>
</constraint>

<constraint name="judiciales_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.judiciales">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="judiciales_id_juzgado_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.juzgado" table="salarios.judiciales">
	<columns names="id_juzgado" ref-type="src-columns"/>
	<columns names="id_juzgado" ref-type="dst-columns"/>
</constraint>

<constraint name="judiciales_id_tipo_descuento_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.tipos_descuentos" table="salarios.judiciales">
	<columns names="id_tipo_descuento" ref-type="src-columns"/>
	<columns names="id_tipo_descuento" ref-type="dst-columns"/>
</constraint>

<constraint name="juzgado_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.juzgado">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="juzgado_id_departamento_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.departamentos" table="salarios.juzgado">
	<columns names="id_departamento" ref-type="src-columns"/>
	<columns names="id_departamento" ref-type="dst-columns"/>
</constraint>

<constraint name="salarios_multas_aplicadas_fkindex1_gestion" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.multas_aplicadas">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="salarios_multas_aplicadas_fkindex2_id_mes" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.multas_aplicadas">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="salarios_multas_aplicadas_fkindex3_id_administracion" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.multas_aplicadas">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="salarios_multas_aplicadas_fkindex4_id_multa_solicitada" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.multas_solicitadas" table="salarios.multas_aplicadas">
	<columns names="id_multa_solicitada" ref-type="src-columns"/>
	<columns names="id_multa_solicitada" ref-type="dst-columns"/>
</constraint>

<constraint name="salarios_multas_aplicadas_fkindex5_id_planilla_salario" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_salarios" table="salarios.multas_aplicadas">
	<columns names="id_planilla_salario" ref-type="src-columns"/>
	<columns names="id_planilla_salario" ref-type="dst-columns"/>
</constraint>

<constraint name="multas_solicitadas_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.multas_solicitadas">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="multas_solicitadas_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.multas_solicitadas">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="multas_solicitadas_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.multas_solicitadas">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="multas_solicitadas_id_multa_resolucion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="control.multas_resolucion" table="salarios.multas_solicitadas">
	<columns names="id_multa_resolucion" ref-type="src-columns"/>
	<columns names="id_multa_resolucion" ref-type="dst-columns"/>
</constraint>

<constraint name="pedido_fondo_aguinaldo_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.pedido_fondo_aguinaldo">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="pedido_fondo_aguinaldo_id_planilla_aguinaldo_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_aguinaldos" table="salarios.pedido_fondo_aguinaldo">
	<columns names="id_planilla_aguinaldo" ref-type="src-columns"/>
	<columns names="id_planilla_aguinaldo" ref-type="dst-columns"/>
</constraint>

<constraint name="pedido_fondo_aguinaldo_id_tipo_aguinaldo_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.tipos_aguinaldos" table="salarios.pedido_fondo_aguinaldo">
	<columns names="id_tipo_aguinaldo" ref-type="src-columns"/>
	<columns names="id_tipo_aguinaldo" ref-type="dst-columns"/>
</constraint>

<constraint name="pedido_fondo_aguinaldo_detalle_id_pedido_fondo_aguinaldo_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.pedido_fondo_aguinaldo" table="salarios.pedido_fondo_aguinaldo_detalle">
	<columns names="id_pedido_fondo_aguinaldo" ref-type="src-columns"/>
	<columns names="id_pedido_fondo_aguinaldo" ref-type="dst-columns"/>
</constraint>

<constraint name="pedido_fondo_aguinaldo_detalle_id_planilla_aguinaldo_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.pedido_fondo_aguinaldo_detalle">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="pedidos_fondos_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.pedidos_fondos">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="pedidos_fondos_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.pedidos_fondos">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="pedidos_fondos_id_tipo_planilla_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.tipos_planillas" table="salarios.pedidos_fondos">
	<columns names="id_tipo_planilla" ref-type="src-columns"/>
	<columns names="id_tipo_planilla" ref-type="dst-columns"/>
</constraint>

<constraint name="pedidos_fondos_detalles_id_estructura_presupuestaria_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.pedidos_fondos_detalles">
	<columns names="id_estructura_presupuestaria" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="pedidos_fondos_detalles_id_pedido_fondo_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.pedidos_fondos" table="salarios.pedidos_fondos_detalles">
	<columns names="id_pedido_fondo" ref-type="src-columns"/>
	<columns names="id_pedido_fondo" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_aguinaldo_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planilla_aguinaldo">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_aguinaldo_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planilla_aguinaldo">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_aguinaldo_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.planilla_aguinaldo">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_aguinaldo_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planilla_aguinaldo">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_diferencia_salarial_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planilla_diferencia_salarial">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_diferencia_salarial_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planilla_diferencia_salarial">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_diferencia_salarial_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planilla_diferencia_salarial">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_diferencia_salarial__id_planilla_diferencia_salar_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planilla_diferencia_salarial" table="salarios.planilla_diferencia_salarial_detalle">
	<columns names="id_planilla_diferencia_salarial" ref-type="src-columns"/>
	<columns names="id_planilla_diferencia_salarial" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_diferencia_salarial_detal_id_funcionario_superior_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_superiores" table="salarios.planilla_diferencia_salarial_detalle">
	<columns names="id_funcionario_superior" ref-type="src-columns"/>
	<columns names="id_funcionario_superior" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_diferencia_salarial_detalle_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planilla_diferencia_salarial_detalle">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_diferencia_salarial_detalle_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.planilla_diferencia_salarial_detalle">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_diferencia_salarial_detalle_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.planilla_diferencia_salarial_detalle">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gasto_representacion_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planilla_gasto_representacion">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gasto_representacion_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planilla_gasto_representacion">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gasto_representacion_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planilla_gasto_representacion">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gasto_representacion_detalle_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planilla_gasto_representacion_detalle">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gasto_representacion_detalle_id_oficina_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.oficinas" table="salarios.planilla_gasto_representacion_detalle">
	<columns names="id_oficina" ref-type="src-columns"/>
	<columns names="id_oficina" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gasto_representacion_id_funcionario_representacio_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.funcionarios_representaciones" table="salarios.planilla_gasto_representacion_detalle">
	<columns names="id_funcionario_representacion" ref-type="src-columns"/>
	<columns names="id_funcionario_representacion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gasto_representacion_id_planilla_gasto_representa_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planilla_gasto_representacion" table="salarios.planilla_gasto_representacion_detalle">
	<columns names="id_planilla_gasto_representacion" ref-type="src-columns"/>
	<columns names="id_planilla_gasto_representacion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gasto_representacion_vacantes_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planilla_gasto_representacion_vacantes">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gasto_representacion_vacantes_id_detalle_categoria_fke" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.detalles_categorias" table="salarios.planilla_gasto_representacion_vacantes">
	<columns names="id_detalle_categoria" ref-type="src-columns"/>
	<columns names="id_detalle_categoria" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gasto_representacion_vacantes_id_planilla_gasto_repres" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planilla_gasto_representacion" table="salarios.planilla_gasto_representacion_vacantes">
	<columns names="id_planilla_gasto_representacion" ref-type="src-columns"/>
	<columns names="id_planilla_gasto_representacion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gratificacion_especial_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planilla_gratificacion_especial">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gratificacion_especial_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planilla_gratificacion_especial">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gratificacion_especial_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planilla_gratificacion_especial">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gratificacion_ocacional_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planilla_gratificacion_ocacional">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gratificacion_ocacional_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planilla_gratificacion_ocacional">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_gratificacion_ocacional_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planilla_gratificacion_ocacional">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_profesionales_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planilla_profesionales">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_profesionales_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planilla_profesionales">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planilla_profesionales_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planilla_profesionales">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_aguinaldos_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_aguinaldos">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_antiguedad_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planillas_antiguedad">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_antiguedad_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_antiguedad">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_antiguedad_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planillas_antiguedad">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_bonificaciones_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planillas_bonificaciones">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_bonificaciones_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_bonificaciones">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_bonificaciones_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planillas_bonificaciones">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="fk_salarios_planillas_salarios_id_planilla_salario" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_salarios" table="salarios.planillas_descuentos">
	<columns names="id_planilla_salario" ref-type="src-columns"/>
	<columns names="id_planilla_salario" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_descuentos_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planillas_descuentos">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_descuentos_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_descuentos">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_descuentos_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planillas_descuentos">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_descuentos_id_parametro_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.parametros" table="salarios.planillas_descuentos">
	<columns names="id_parametro" ref-type="src-columns"/>
	<columns names="id_parametro" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_detalles_aguinaldos_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_detalles_aguinaldos">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_detalles_aguinaldos_id_planilla_aguinaldo_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_aguinaldos" table="salarios.planillas_detalles_aguinaldos">
	<columns names="id_planilla_aguinaldo" ref-type="src-columns"/>
	<columns names="id_planilla_aguinaldo" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_otras_transferencias_ctes_detalles_id_planilla_otra_t" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_otras_transferencias_ctes" table="salarios.planillas_otras_transferencias_ctes_detalles">
	<columns names="id_planilla_otra_transferencia_cte" ref-type="src-columns"/>
	<columns names="id_planilla_otra_transferencia_cte" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_otras_transferencias_ctes_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_otras_transferencias_ctes_detalles">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_otras_transferencias_ctes_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_otras_transferencias_ctes">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_ra_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planillas_ra">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_ra_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_ra">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_ra_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planillas_ra">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_ra_id_parametro_calculo_re_ra_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.parametros_calculo_re_ra" table="salarios.planillas_ra">
	<columns names="id_parametro_calculo_re_ra" ref-type="src-columns"/>
	<columns names="id_parametro_calculo_re_ra" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_re_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planillas_re">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_re_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_re">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_re_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planillas_re">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_re_id_parametro_calculo_re_ra_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.parametros_calculo_re_ra" table="salarios.planillas_re">
	<columns names="id_parametro_calculo_re_ra" ref-type="src-columns"/>
	<columns names="id_parametro_calculo_re_ra" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_salarios_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planillas_salarios">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_salarios_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_salarios">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_salarios_id_estado_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.planillas_salarios_estado" table="salarios.planillas_salarios">
	<columns names="id_estado" ref-type="src-columns"/>
	<columns names="id_estado" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_salarios_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planillas_salarios">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_salarios_id_mes_fkey1" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planillas_salarios">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_salarios_id_parametro_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.parametros" table="salarios.planillas_salarios">
	<columns names="id_parametro" ref-type="src-columns"/>
	<columns names="id_parametro" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_salarios_estado_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_salarios_estado">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_subsidios_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.planillas_subsidios">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_subsidios_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.planillas_subsidios">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_subsidios_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.planillas_subsidios">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="planillas_subsidios_id_parametro_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.parametros" table="salarios.planillas_subsidios">
	<columns names="id_parametro" ref-type="src-columns"/>
	<columns names="id_parametro" ref-type="dst-columns"/>
</constraint>

<constraint name="retiros_voluntarios_planillas_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.retiros_voluntarios_planillas">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="retiros_voluntarios_planillas_detalles_id_detalle_planilla_sala" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.detalles_planillas_salarios" table="salarios.retiros_voluntarios_planillas_detalles">
	<columns names="id_detalle_planilla_salario" ref-type="src-columns"/>
	<columns names="id_detalle_planilla_salario" ref-type="dst-columns"/>
</constraint>

<constraint name="retiros_voluntarios_planillas_detalles_id_funcionario_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="legajos.funcionarios" table="salarios.retiros_voluntarios_planillas_detalles">
	<columns names="id_funcionario" ref-type="src-columns"/>
	<columns names="id_funcionario" ref-type="dst-columns"/>
</constraint>

<constraint name="retiros_voluntarios_planillas_detalles_id_retiro_voluntario_pla" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.retiros_voluntarios_planillas" table="salarios.retiros_voluntarios_planillas_detalles">
	<columns names="id_retiro_voluntario_planilla" ref-type="src-columns"/>
	<columns names="id_retiro_voluntario_planilla" ref-type="dst-columns"/>
</constraint>

<constraint name="retiros_voluntarios_planillas_detalles_descuentos_id_retiro_vol" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.retiros_voluntarios_planillas_detalles" table="salarios.retiros_voluntarios_planillas_detalles_descuentos">
	<columns names="id_retiro_voluntario_planilla_detalle" ref-type="src-columns"/>
	<columns names="id_retiro_voluntario_planilla_detalle" ref-type="dst-columns"/>
</constraint>

<constraint name="retiros_voluntarios_planillas_detalles_descuentos_id_tipo_descu" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.tipos_descuentos" table="salarios.retiros_voluntarios_planillas_detalles_descuentos">
	<columns names="id_tipo_descuento" ref-type="src-columns"/>
	<columns names="id_tipo_descuento" ref-type="dst-columns"/>
</constraint>

<constraint name="retiros_voluntarios_planillas_detalles_remuneraciones_id_retiro" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="salarios.retiros_voluntarios_planillas_detalles" table="salarios.retiros_voluntarios_planillas_detalles_remuneraciones">
	<columns names="id_retiro_voluntario_planilla_detalle" ref-type="src-columns"/>
	<columns names="id_retiro_voluntario_planilla_detalle" ref-type="dst-columns"/>
</constraint>

<constraint name="situacion_personal_gestion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.gestiones" table="salarios.situacion_personal">
	<columns names="gestion" ref-type="src-columns"/>
	<columns names="gestion" ref-type="dst-columns"/>
</constraint>

<constraint name="situacion_personal_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.situacion_personal">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="situacion_personal_id_mes_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="public.meses" table="salarios.situacion_personal">
	<columns names="id_mes" ref-type="src-columns"/>
	<columns names="id_mes" ref-type="dst-columns"/>
</constraint>

<constraint name="subsidios_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.subsidios">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="tipos_aguinaldos_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.tipos_aguinaldos">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<constraint name="tipos_descuentos_id_administracion_fkey" type="fk-constr" comparison-type="MATCH SIMPLE"
	 upd-action="RESTRICT" del-action="RESTRICT" ref-table="seguridad.administracion" table="salarios.tipos_descuentos">
	<columns names="id_administracion" ref-type="src-columns"/>
	<columns names="id_administracion" ref-type="dst-columns"/>
</constraint>

<relationship name="rel_aso_temporales_gestiones" type="relfk"
	 custom-color="#0edec8"
	 src-table="salarios.aso_temporales"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_aso_temporales_administracion" type="relfk"
	 custom-color="#b5e38e"
	 src-table="salarios.aso_temporales"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_aso_temporales_meses" type="relfk"
	 custom-color="#85c5b6"
	 src-table="salarios.aso_temporales"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_aso_temporales_tipos_descuentos" type="relfk"
	 custom-color="#04e735"
	 src-table="salarios.aso_temporales"
	 dst-table="salarios.tipos_descuentos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_autorizaciones_administracion" type="relfk"
	 custom-color="#e8ac44"
	 src-table="salarios.autorizaciones"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_autorizaciones_funcionarios" type="relfk"
	 custom-color="#ce0ac8"
	 src-table="salarios.autorizaciones"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_autorizaciones_tipos_descuentos" type="relfk"
	 custom-color="#593a27"
	 src-table="salarios.autorizaciones"
	 dst-table="salarios.tipos_descuentos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_bancos_administracion" type="relfk"
	 custom-color="#c96790"
	 src-table="salarios.bancos"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_bonificaciones_administracion" type="relfk"
	 custom-color="#0fab05"
	 src-table="salarios.bonificaciones"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_cargos_administracion" type="relfk"
	 custom-color="#d4a922"
	 src-table="salarios.cargos"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_categorias_gestiones" type="relfk"
	 custom-color="#b89fee"
	 src-table="salarios.categorias"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_categorias_administracion" type="relfk"
	 custom-color="#bd2dc0"
	 src-table="salarios.categorias"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_categorias_cargos" type="relfk"
	 custom-color="#aa8f82"
	 src-table="salarios.categorias"
	 dst-table="salarios.cargos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_categorias_administracion" type="relfk"
	 custom-color="#6e85ca"
	 src-table="salarios.detalles_categorias"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_categorias_categorias" type="relfk"
	 custom-color="#e9499f"
	 src-table="salarios.detalles_categorias"
	 dst-table="salarios.categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_categorias_estructura_presupuestaria" type="relfk"
	 custom-color="#2db518"
	 src-table="salarios.detalles_categorias"
	 dst-table="presupuesto.estructura_presupuestaria"
	 src-required="false" dst-required="false"/>

<relationship name="rel_categoria_importe_mensual_administracion" type="relfk"
	 custom-color="#04bae6"
	 src-table="salarios.categoria_importe_mensual"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_categoria_importe_mensual_categorias" type="relfk"
	 custom-color="#65525a"
	 src-table="salarios.categoria_importe_mensual"
	 dst-table="salarios.categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_categoria_importe_mensual_meses" type="relfk"
	 custom-color="#0d9fd7"
	 src-table="salarios.categoria_importe_mensual"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_categorias_reservados_gestiones" type="relfk"
	 custom-color="#c5abda"
	 src-table="salarios.categorias_reservados"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_categorias_reservados_administracion" type="relfk"
	 custom-color="#c1e4fb"
	 src-table="salarios.categorias_reservados"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_categorias_reservados_detalles_categorias" type="relfk"
	 custom-color="#d02c21"
	 src-table="salarios.categorias_reservados"
	 dst-table="salarios.detalles_categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_categorias_reservados_meses" type="relfk"
	 custom-color="#28c3c6"
	 src-table="salarios.categorias_reservados"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_demandante_administracion" type="relfk"
	 custom-color="#fd5098"
	 src-table="salarios.demandante"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_descuentos_aso_gestiones" type="relfk"
	 custom-color="#95ff04"
	 src-table="salarios.descuentos_aso"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_descuentos_aso_administracion" type="relfk"
	 custom-color="#af0638"
	 src-table="salarios.descuentos_aso"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_descuentos_aso_funcionarios" type="relfk"
	 custom-color="#ef35ee"
	 src-table="salarios.descuentos_aso"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_descuentos_aso_meses" type="relfk"
	 custom-color="#47c72f"
	 src-table="salarios.descuentos_aso"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_descuentos_aso_tipos_descuentos" type="relfk"
	 custom-color="#08ee83"
	 src-table="salarios.descuentos_aso"
	 dst-table="salarios.tipos_descuentos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_descuentos_judiciales_gestiones" type="relfk"
	 custom-color="#61c355"
	 src-table="salarios.descuentos_judiciales"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_descuentos_judiciales_administracion" type="relfk"
	 custom-color="#988342"
	 src-table="salarios.descuentos_judiciales"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_descuentos_judiciales_funcionarios" type="relfk"
	 custom-color="#4e8734"
	 src-table="salarios.descuentos_judiciales"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_descuentos_judiciales_judiciales" type="relfk"
	 custom-color="#aa99f7"
	 src-table="salarios.descuentos_judiciales"
	 dst-table="salarios.judiciales"
	 src-required="false" dst-required="false"/>

<relationship name="rel_descuentos_judiciales_meses" type="relfk"
	 custom-color="#58911b"
	 src-table="salarios.descuentos_judiciales"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_descuentos_judiciales_tipos_descuentos" type="relfk"
	 custom-color="#7b0782"
	 src-table="salarios.descuentos_judiciales"
	 dst-table="salarios.tipos_descuentos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planilla_antiguedad_administracion" type="relfk"
	 custom-color="#e3a4d0"
	 src-table="salarios.detalle_planilla_antiguedad"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planilla_antiguedad_funcionarios" type="relfk"
	 custom-color="#aaeb11"
	 src-table="salarios.detalle_planilla_antiguedad"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planilla_antiguedad_planillas_antiguedad" type="relfk"
	 custom-color="#610da4"
	 src-table="salarios.detalle_planilla_antiguedad"
	 dst-table="salarios.planillas_antiguedad"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planilla_gratificacion_especial_planilla_gratificac" type="relfk"
	 custom-color="#9e64dd"
	 src-table="salarios.detalle_planilla_gratificacion_especial"
	 dst-table="salarios.planilla_gratificacion_especial"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planilla_gratificacion_especial_administracion" type="relfk"
	 custom-color="#902903"
	 src-table="salarios.detalle_planilla_gratificacion_especial"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planilla_gratificacion_especial_funcionarios" type="relfk"
	 custom-color="#95201c"
	 src-table="salarios.detalle_planilla_gratificacion_especial"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planilla_gratificacion_ocacional_planilla_gratifica" type="relfk"
	 custom-color="#d1f77a"
	 src-table="salarios.detalle_planilla_gratificacion_ocacional"
	 dst-table="salarios.planilla_gratificacion_ocacional"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planilla_gratificacion_ocacional_administracion" type="relfk"
	 custom-color="#fcacbe"
	 src-table="salarios.detalle_planilla_gratificacion_ocacional"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planilla_gratificacion_ocacional_funcionarios" type="relfk"
	 custom-color="#dcadc1"
	 src-table="salarios.detalle_planilla_gratificacion_ocacional"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planilla_gratificacion_ocacional_oficinas" type="relfk"
	 custom-color="#24e79c"
	 src-table="salarios.detalle_planilla_gratificacion_ocacional"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planillas_profesionales_administracion" type="relfk"
	 custom-color="#f7f549"
	 src-table="salarios.detalle_planillas_profesionales"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planillas_profesionales_funcionarios_profesionales" type="relfk"
	 custom-color="#7326c6"
	 src-table="salarios.detalle_planillas_profesionales"
	 dst-table="salarios.funcionarios_profesionales"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planillas_profesionales_planilla_profesionales" type="relfk"
	 custom-color="#971361"
	 src-table="salarios.detalle_planillas_profesionales"
	 dst-table="salarios.planilla_profesionales"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planillas_vacantes_administracion" type="relfk"
	 custom-color="#ed2de0"
	 src-table="salarios.detalle_planillas_vacantes"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planillas_vacantes_detalles_categorias" type="relfk"
	 custom-color="#07cc3a"
	 src-table="salarios.detalle_planillas_vacantes"
	 dst-table="salarios.detalles_categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_planillas_vacantes_planillas_salarios" type="relfk"
	 custom-color="#ecb82f"
	 src-table="salarios.detalle_planillas_vacantes"
	 dst-table="salarios.planillas_salarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_situacion_personal_administracion" type="relfk"
	 custom-color="#8a052b"
	 src-table="salarios.detalle_situacion_personal"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_situacion_personal_funcionarios" type="relfk"
	 custom-color="#058c41"
	 src-table="salarios.detalle_situacion_personal"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalle_situacion_personal_situacion_personal" type="relfk"
	 custom-color="#92aa4b"
	 src-table="salarios.detalle_situacion_personal"
	 dst-table="salarios.situacion_personal"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_multas_aplicadas_multas_aplicadas" type="relfk"
	 custom-color="#58841c"
	 src-table="salarios.detalles_multas_aplicadas"
	 dst-table="salarios.multas_aplicadas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_multas_aplicadas_administracion" type="relfk"
	 custom-color="#aa3a0e"
	 src-table="salarios.detalles_multas_aplicadas"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_multas_aplicadas_detalles_multas_solicitadas" type="relfk"
	 custom-color="#364a42"
	 src-table="salarios.detalles_multas_aplicadas"
	 dst-table="salarios.detalles_multas_solicitadas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_multas_aplicadas_funcionarios" type="relfk"
	 custom-color="#fa9c51"
	 src-table="salarios.detalles_multas_aplicadas"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_multas_solicitadas_administracion" type="relfk"
	 custom-color="#d63513"
	 src-table="salarios.detalles_multas_solicitadas"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_multas_solicitadas_funcionarios" type="relfk"
	 custom-color="#b042ae"
	 src-table="salarios.detalles_multas_solicitadas"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_multas_solicitadas_multas_solicitadas" type="relfk"
	 custom-color="#1bef06"
	 src-table="salarios.detalles_multas_solicitadas"
	 dst-table="salarios.multas_solicitadas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_bonificaciones_funcionarios_bonificacion" type="relfk"
	 custom-color="#0cadff"
	 src-table="salarios.detalles_planillas_bonificaciones"
	 dst-table="salarios.funcionarios_bonificaciones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_bonificaciones_administracion" type="relfk"
	 custom-color="#55a038"
	 src-table="salarios.detalles_planillas_bonificaciones"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_bonificaciones_oficinas" type="relfk"
	 custom-color="#13f7b3"
	 src-table="salarios.detalles_planillas_bonificaciones"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_bonificaciones_planillas_bonificaciones" type="relfk"
	 custom-color="#736187"
	 src-table="salarios.detalles_planillas_bonificaciones"
	 dst-table="salarios.planillas_bonificaciones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_descuentos_administracion" type="relfk"
	 custom-color="#a0bbc4"
	 src-table="salarios.detalles_planillas_descuentos"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_descuentos_funcionarios" type="relfk"
	 custom-color="#45981c"
	 src-table="salarios.detalles_planillas_descuentos"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_descuentos_planillas_descuentos" type="relfk"
	 custom-color="#a87d9c"
	 src-table="salarios.detalles_planillas_descuentos"
	 dst-table="salarios.planillas_descuentos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_descuentos_descuentos_aso" type="relfk"
	 custom-color="#182414"
	 src-table="salarios.detalles_planillas_descuentos"
	 dst-table="salarios.descuentos_aso"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_descuentos_descuentos_judiciales" type="relfk"
	 custom-color="#28d259"
	 src-table="salarios.detalles_planillas_descuentos"
	 dst-table="salarios.descuentos_judiciales"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_ra_administracion" type="relfk"
	 custom-color="#d97855"
	 src-table="salarios.detalles_planillas_ra"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_ra_aplicadas_horas_detalle" type="relfk"
	 custom-color="#2cc900"
	 src-table="salarios.detalles_planillas_ra"
	 dst-table="control.aplicadas_horas_detalle"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_ra_funcionarios" type="relfk"
	 custom-color="#da7ad1"
	 src-table="salarios.detalles_planillas_ra"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_ra_planillas_ra" type="relfk"
	 custom-color="#58fd7d"
	 src-table="salarios.detalles_planillas_ra"
	 dst-table="salarios.planillas_ra"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_re_administracion" type="relfk"
	 custom-color="#4173b5"
	 src-table="salarios.detalles_planillas_re"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_re_aplicadas_horas_detalle" type="relfk"
	 custom-color="#ad7375"
	 src-table="salarios.detalles_planillas_re"
	 dst-table="control.aplicadas_horas_detalle"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_re_funcionarios" type="relfk"
	 custom-color="#50553e"
	 src-table="salarios.detalles_planillas_re"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_re_planillas_re" type="relfk"
	 custom-color="#9d7d89"
	 src-table="salarios.detalles_planillas_re"
	 dst-table="salarios.planillas_re"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_salarios_administracion" type="relfk"
	 custom-color="#a62ed8"
	 src-table="salarios.detalles_planillas_salarios"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_salarios_detalles_categorias" type="relfk"
	 custom-color="#e09827"
	 src-table="salarios.detalles_planillas_salarios"
	 dst-table="salarios.detalles_categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_salarios_funcionarios" type="relfk"
	 custom-color="#a2478b"
	 src-table="salarios.detalles_planillas_salarios"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_salarios_oficinas" type="relfk"
	 custom-color="#fa9d41"
	 src-table="salarios.detalles_planillas_salarios"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_salarios_planillas_salarios" type="relfk"
	 custom-color="#977f05"
	 src-table="salarios.detalles_planillas_salarios"
	 dst-table="salarios.planillas_salarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_subsidios_administracion" type="relfk"
	 custom-color="#bb1ac2"
	 src-table="salarios.detalles_planillas_subsidios"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_subsidios_funcionarios_subsidios" type="relfk"
	 custom-color="#812855"
	 src-table="salarios.detalles_planillas_subsidios"
	 dst-table="salarios.funcionarios_subsidios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_subsidios_oficinas" type="relfk"
	 custom-color="#0b856d"
	 src-table="salarios.detalles_planillas_subsidios"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_detalles_planillas_subsidios_planillas_subsidios" type="relfk"
	 custom-color="#8cae4f"
	 src-table="salarios.detalles_planillas_subsidios"
	 dst-table="salarios.planillas_subsidios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_firmantes_salarios_administracion" type="relfk"
	 custom-color="#b86fbf"
	 src-table="salarios.firmantes_salarios"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_aguinaldos_administracion" type="relfk"
	 custom-color="#52042e"
	 src-table="salarios.funcionarios_aguinaldos"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_antiguedades_administracion" type="relfk"
	 custom-color="#e91ed9"
	 src-table="salarios.funcionarios_antiguedades"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_antiguedades_funcionarios" type="relfk"
	 custom-color="#509080"
	 src-table="salarios.funcionarios_antiguedades"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_antiguedades_oficinas" type="relfk"
	 custom-color="#5b24b5"
	 src-table="salarios.funcionarios_antiguedades"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_bonificaciones_gestiones" type="relfk"
	 custom-color="#78b4ef"
	 src-table="salarios.funcionarios_bonificaciones"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_bonificaciones_administracion" type="relfk"
	 custom-color="#4615f2"
	 src-table="salarios.funcionarios_bonificaciones"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_bonificaciones_bonificaciones" type="relfk"
	 custom-color="#c9c3e3"
	 src-table="salarios.funcionarios_bonificaciones"
	 dst-table="salarios.bonificaciones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_bonificaciones_funcionarios" type="relfk"
	 custom-color="#801035"
	 src-table="salarios.funcionarios_bonificaciones"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_bonificaciones_meses" type="relfk"
	 custom-color="#808bda"
	 src-table="salarios.funcionarios_bonificaciones"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_bonificaciones_oficinas" type="relfk"
	 custom-color="#650550"
	 src-table="salarios.funcionarios_bonificaciones"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_categorias_gestiones" type="relfk"
	 custom-color="#0bdd0b"
	 src-table="salarios.funcionarios_categorias"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_categorias_administracion" type="relfk"
	 custom-color="#fa2918"
	 src-table="salarios.funcionarios_categorias"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_categorias_detalles_categorias" type="relfk"
	 custom-color="#c7ae89"
	 src-table="salarios.funcionarios_categorias"
	 dst-table="salarios.detalles_categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_categorias_funcionarios" type="relfk"
	 custom-color="#3946b4"
	 src-table="salarios.funcionarios_categorias"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_gratificaciones_ocasionales_gestiones" type="relfk"
	 custom-color="#97264f"
	 src-table="salarios.funcionarios_gratificaciones_ocasionales"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_gratificaciones_ocasionales_administracion" type="relfk"
	 custom-color="#d764f4"
	 src-table="salarios.funcionarios_gratificaciones_ocasionales"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_gratificaciones_ocasionales_meses" type="relfk"
	 custom-color="#d316f0"
	 src-table="salarios.funcionarios_gratificaciones_ocasionales"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_gratificaciones_ocasionales_oficinas" type="relfk"
	 custom-color="#f500d5"
	 src-table="salarios.funcionarios_gratificaciones_ocasionales"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_gratificaciones_especiales_administracion" type="relfk"
	 custom-color="#296ea5"
	 src-table="salarios.funcionarios_gratificaciones_especiales"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_gratificaciones_especiales_funcionarios" type="relfk"
	 custom-color="#2fd1e3"
	 src-table="salarios.funcionarios_gratificaciones_especiales"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_gratificaciones_especiales_oficinas" type="relfk"
	 custom-color="#cb806a"
	 src-table="salarios.funcionarios_gratificaciones_especiales"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_importes_administracion" type="relfk"
	 custom-color="#bd6ffc"
	 src-table="salarios.funcionarios_importes"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_importes_funcionarios" type="relfk"
	 custom-color="#dc0289"
	 src-table="salarios.funcionarios_importes"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_nombrados_gestiones" type="relfk"
	 custom-color="#cc8322"
	 src-table="salarios.funcionarios_nombrados"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_nombrados_administracion" type="relfk"
	 custom-color="#f0454d"
	 src-table="salarios.funcionarios_nombrados"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_nombrados_funcionarios" type="relfk"
	 custom-color="#648cb3"
	 src-table="salarios.funcionarios_nombrados"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_nombrados_meses" type="relfk"
	 custom-color="#b220dd"
	 src-table="salarios.funcionarios_nombrados"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_profesionales_administracion" type="relfk"
	 custom-color="#8fc7e8"
	 src-table="salarios.funcionarios_profesionales"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_profesionales_funcionarios" type="relfk"
	 custom-color="#bc5b10"
	 src-table="salarios.funcionarios_profesionales"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_profesionales_oficinas" type="relfk"
	 custom-color="#90c35c"
	 src-table="salarios.funcionarios_profesionales"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_recategorizacion_funcionarios_categorias" type="relfk"
	 custom-color="#57ca56"
	 src-table="salarios.funcionarios_recategorizacion"
	 dst-table="salarios.funcionarios_categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_recategorizacion_gestiones" type="relfk"
	 custom-color="#ee6e6f"
	 src-table="salarios.funcionarios_recategorizacion"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_recategorizacion_administracion" type="relfk"
	 custom-color="#3cd8fe"
	 src-table="salarios.funcionarios_recategorizacion"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_recategorizacion_funcionarios" type="relfk"
	 custom-color="#7732e9"
	 src-table="salarios.funcionarios_recategorizacion"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_recategorizacion_meses" type="relfk"
	 custom-color="#cf675f"
	 src-table="salarios.funcionarios_recategorizacion"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_recategorizacion_ascenso_gestiones" type="relfk"
	 custom-color="#b75852"
	 src-table="salarios.funcionarios_recategorizacion_ascenso"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_recategorizacion_ascenso_administracion" type="relfk"
	 custom-color="#deba8b"
	 src-table="salarios.funcionarios_recategorizacion_ascenso"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_recategorizacion_ascenso_funcionarios" type="relfk"
	 custom-color="#d65bce"
	 src-table="salarios.funcionarios_recategorizacion_ascenso"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_recategorizacion_ascenso_meses" type="relfk"
	 custom-color="#62c397"
	 src-table="salarios.funcionarios_recategorizacion_ascenso"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_recategorizacion_ascenso_funcionarios_categori" type="relfk"
	 custom-color="#eea91f"
	 src-table="salarios.funcionarios_recategorizacion_ascenso"
	 dst-table="salarios.funcionarios_categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_representaciones_administracion" type="relfk"
	 custom-color="#4f056b"
	 src-table="salarios.funcionarios_representaciones"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_representaciones_detalles_categorias" type="relfk"
	 custom-color="#565977"
	 src-table="salarios.funcionarios_representaciones"
	 dst-table="salarios.detalles_categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_representaciones_funcionarios" type="relfk"
	 custom-color="#72139f"
	 src-table="salarios.funcionarios_representaciones"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_representaciones_oficinas" type="relfk"
	 custom-color="#295138"
	 src-table="salarios.funcionarios_representaciones"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_representaciones_cambios_funcionarios_represen" type="relfk"
	 custom-color="#57e5de"
	 src-table="salarios.funcionarios_representaciones_cambios"
	 dst-table="salarios.funcionarios_representaciones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_representaciones_cambios_gestiones" type="relfk"
	 custom-color="#45dddf"
	 src-table="salarios.funcionarios_representaciones_cambios"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_representaciones_cambios_administracion" type="relfk"
	 custom-color="#0df8d1"
	 src-table="salarios.funcionarios_representaciones_cambios"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_representaciones_cambios_detalles_categorias" type="relfk"
	 custom-color="#7084d8"
	 src-table="salarios.funcionarios_representaciones_cambios"
	 dst-table="salarios.detalles_categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_representaciones_cambios_meses" type="relfk"
	 custom-color="#f90ab0"
	 src-table="salarios.funcionarios_representaciones_cambios"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_sinaportes_administracion" type="relfk"
	 custom-color="#542c06"
	 src-table="salarios.funcionarios_sinaportes"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_sinaportes_funcionarios" type="relfk"
	 custom-color="#1106eb"
	 src-table="salarios.funcionarios_sinaportes"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_subsidios_gestiones" type="relfk"
	 custom-color="#db98f0"
	 src-table="salarios.funcionarios_subsidios"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_subsidios_administracion" type="relfk"
	 custom-color="#8d6006"
	 src-table="salarios.funcionarios_subsidios"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_subsidios_funcionarios" type="relfk"
	 custom-color="#d782db"
	 src-table="salarios.funcionarios_subsidios"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_subsidios_meses" type="relfk"
	 custom-color="#c0320e"
	 src-table="salarios.funcionarios_subsidios"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_superiores_gestiones" type="relfk"
	 custom-color="#f3fce4"
	 src-table="salarios.funcionarios_superiores"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_superiores_administracion" type="relfk"
	 custom-color="#1e06f1"
	 src-table="salarios.funcionarios_superiores"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_superiores_categorias" type="relfk"
	 custom-color="#771a4d"
	 src-table="salarios.funcionarios_superiores"
	 dst-table="salarios.categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_superiores_funcionarios" type="relfk"
	 custom-color="#0e203a"
	 src-table="salarios.funcionarios_superiores"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_superiores_oficinas" type="relfk"
	 custom-color="#5b598c"
	 src-table="salarios.funcionarios_superiores"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_superiores_dias_trabajados_funcionarios_superi" type="relfk"
	 custom-color="#0ba08f"
	 src-table="salarios.funcionarios_superiores_dias_trabajados"
	 dst-table="salarios.funcionarios_superiores"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_superiores_dias_trabajados_gestiones" type="relfk"
	 custom-color="#cc28b4"
	 src-table="salarios.funcionarios_superiores_dias_trabajados"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_funcionarios_superiores_dias_trabajados_meses" type="relfk"
	 custom-color="#e2194b"
	 src-table="salarios.funcionarios_superiores_dias_trabajados"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_horas_no_compensadas_administracion" type="relfk"
	 custom-color="#713d09"
	 src-table="salarios.horas_no_compensadas"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_horas_no_compensadas_funcionarios" type="relfk"
	 custom-color="#113960"
	 src-table="salarios.horas_no_compensadas"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_judiciales_administracion" type="relfk"
	 custom-color="#197ce3"
	 src-table="salarios.judiciales"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_judiciales_bancos" type="relfk"
	 custom-color="#968f25"
	 src-table="salarios.judiciales"
	 dst-table="salarios.bancos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_judiciales_demandante" type="relfk"
	 custom-color="#b1e731"
	 src-table="salarios.judiciales"
	 dst-table="salarios.demandante"
	 src-required="false" dst-required="false"/>

<relationship name="rel_judiciales_funcionarios" type="relfk"
	 custom-color="#222c4c"
	 src-table="salarios.judiciales"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_judiciales_juzgado" type="relfk"
	 custom-color="#719f9f"
	 src-table="salarios.judiciales"
	 dst-table="salarios.juzgado"
	 src-required="false" dst-required="false"/>

<relationship name="rel_judiciales_tipos_descuentos" type="relfk"
	 custom-color="#34a0ab"
	 src-table="salarios.judiciales"
	 dst-table="salarios.tipos_descuentos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_juzgado_administracion" type="relfk"
	 custom-color="#9d33f6"
	 src-table="salarios.juzgado"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_juzgado_departamentos" type="relfk"
	 custom-color="#f35e8d"
	 src-table="salarios.juzgado"
	 dst-table="legajos.departamentos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_multas_aplicadas_gestiones" type="relfk"
	 custom-color="#b13bcc"
	 src-table="salarios.multas_aplicadas"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_multas_aplicadas_meses" type="relfk"
	 custom-color="#301da9"
	 src-table="salarios.multas_aplicadas"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_multas_aplicadas_administracion" type="relfk"
	 custom-color="#817117"
	 src-table="salarios.multas_aplicadas"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_multas_aplicadas_multas_solicitadas" type="relfk"
	 custom-color="#fe8606"
	 src-table="salarios.multas_aplicadas"
	 dst-table="salarios.multas_solicitadas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_multas_aplicadas_planillas_salarios" type="relfk"
	 custom-color="#19fd84"
	 src-table="salarios.multas_aplicadas"
	 dst-table="salarios.planillas_salarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_multas_solicitadas_gestiones" type="relfk"
	 custom-color="#8d8d81"
	 src-table="salarios.multas_solicitadas"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_multas_solicitadas_administracion" type="relfk"
	 custom-color="#2c607f"
	 src-table="salarios.multas_solicitadas"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_multas_solicitadas_meses" type="relfk"
	 custom-color="#f60cc3"
	 src-table="salarios.multas_solicitadas"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_multas_solicitadas_multas_resolucion" type="relfk"
	 custom-color="#2670cd"
	 src-table="salarios.multas_solicitadas"
	 dst-table="control.multas_resolucion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_pedido_fondo_aguinaldo_gestiones" type="relfk"
	 custom-color="#fab8fd"
	 src-table="salarios.pedido_fondo_aguinaldo"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_pedido_fondo_aguinaldo_planillas_aguinaldos" type="relfk"
	 custom-color="#48f2cd"
	 src-table="salarios.pedido_fondo_aguinaldo"
	 dst-table="salarios.planillas_aguinaldos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_pedido_fondo_aguinaldo_tipos_aguinaldos" type="relfk"
	 custom-color="#c276d1"
	 src-table="salarios.pedido_fondo_aguinaldo"
	 dst-table="salarios.tipos_aguinaldos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_pedido_fondo_aguinaldo_detalle_pedido_fondo_aguinaldo" type="relfk"
	 custom-color="#4f623e"
	 src-table="salarios.pedido_fondo_aguinaldo_detalle"
	 dst-table="salarios.pedido_fondo_aguinaldo"
	 src-required="false" dst-required="false"/>

<relationship name="rel_pedido_fondo_aguinaldo_detalle_oficinas" type="relfk"
	 custom-color="#ebabe6"
	 src-table="salarios.pedido_fondo_aguinaldo_detalle"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_pedidos_fondos_gestiones" type="relfk"
	 custom-color="#34fbda"
	 src-table="salarios.pedidos_fondos"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_pedidos_fondos_meses" type="relfk"
	 custom-color="#d2218d"
	 src-table="salarios.pedidos_fondos"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_pedidos_fondos_tipos_planillas" type="relfk"
	 custom-color="#8e544e"
	 src-table="salarios.pedidos_fondos"
	 dst-table="salarios.tipos_planillas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_pedidos_fondos_detalles_oficinas" type="relfk"
	 custom-color="#3ca06d"
	 src-table="salarios.pedidos_fondos_detalles"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_pedidos_fondos_detalles_pedidos_fondos" type="relfk"
	 custom-color="#e353ba"
	 src-table="salarios.pedidos_fondos_detalles"
	 dst-table="salarios.pedidos_fondos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_aguinaldo_gestiones" type="relfk"
	 custom-color="#1a3ac9"
	 src-table="salarios.planilla_aguinaldo"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_aguinaldo_administracion" type="relfk"
	 custom-color="#30c153"
	 src-table="salarios.planilla_aguinaldo"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_aguinaldo_funcionarios" type="relfk"
	 custom-color="#2414b2"
	 src-table="salarios.planilla_aguinaldo"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_aguinaldo_meses" type="relfk"
	 custom-color="#40d839"
	 src-table="salarios.planilla_aguinaldo"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_diferencia_salarial_gestiones" type="relfk"
	 custom-color="#ca6a96"
	 src-table="salarios.planilla_diferencia_salarial"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_diferencia_salarial_administracion" type="relfk"
	 custom-color="#4b9018"
	 src-table="salarios.planilla_diferencia_salarial"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_diferencia_salarial_meses" type="relfk"
	 custom-color="#c29fb5"
	 src-table="salarios.planilla_diferencia_salarial"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_diferencia_salarial_detalle_planilla_diferencia_sa" type="relfk"
	 custom-color="#aa5623"
	 src-table="salarios.planilla_diferencia_salarial_detalle"
	 dst-table="salarios.planilla_diferencia_salarial"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_diferencia_salarial_detalle_funcionarios_superiore" type="relfk"
	 custom-color="#fdb5a0"
	 src-table="salarios.planilla_diferencia_salarial_detalle"
	 dst-table="salarios.funcionarios_superiores"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_diferencia_salarial_detalle_administracion" type="relfk"
	 custom-color="#9d074d"
	 src-table="salarios.planilla_diferencia_salarial_detalle"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_diferencia_salarial_detalle_funcionarios" type="relfk"
	 custom-color="#aad875"
	 src-table="salarios.planilla_diferencia_salarial_detalle"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_diferencia_salarial_detalle_oficinas" type="relfk"
	 custom-color="#35657f"
	 src-table="salarios.planilla_diferencia_salarial_detalle"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gasto_representacion_gestiones" type="relfk"
	 custom-color="#3120f8"
	 src-table="salarios.planilla_gasto_representacion"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gasto_representacion_administracion" type="relfk"
	 custom-color="#6bc4bf"
	 src-table="salarios.planilla_gasto_representacion"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gasto_representacion_meses" type="relfk"
	 custom-color="#24cf21"
	 src-table="salarios.planilla_gasto_representacion"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gasto_representacion_detalle_administracion" type="relfk"
	 custom-color="#f74c2d"
	 src-table="salarios.planilla_gasto_representacion_detalle"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gasto_representacion_detalle_oficinas" type="relfk"
	 custom-color="#0f9916"
	 src-table="salarios.planilla_gasto_representacion_detalle"
	 dst-table="legajos.oficinas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gasto_representacion_detalle_funcionarios_represen" type="relfk"
	 custom-color="#8907cd"
	 src-table="salarios.planilla_gasto_representacion_detalle"
	 dst-table="salarios.funcionarios_representaciones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gasto_representacion_detalle_planilla_gasto_repres" type="relfk"
	 custom-color="#6ac26d"
	 src-table="salarios.planilla_gasto_representacion_detalle"
	 dst-table="salarios.planilla_gasto_representacion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gasto_representacion_vacantes_administracion" type="relfk"
	 custom-color="#22a841"
	 src-table="salarios.planilla_gasto_representacion_vacantes"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gasto_representacion_vacantes_detalles_categorias" type="relfk"
	 custom-color="#34e7a5"
	 src-table="salarios.planilla_gasto_representacion_vacantes"
	 dst-table="salarios.detalles_categorias"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gasto_representacion_vacantes_planilla_gasto_repre" type="relfk"
	 custom-color="#3671c6"
	 src-table="salarios.planilla_gasto_representacion_vacantes"
	 dst-table="salarios.planilla_gasto_representacion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gratificacion_especial_gestiones" type="relfk"
	 custom-color="#f90ebd"
	 src-table="salarios.planilla_gratificacion_especial"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gratificacion_especial_administracion" type="relfk"
	 custom-color="#346c09"
	 src-table="salarios.planilla_gratificacion_especial"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gratificacion_especial_meses" type="relfk"
	 custom-color="#e7b01d"
	 src-table="salarios.planilla_gratificacion_especial"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gratificacion_ocacional_gestiones" type="relfk"
	 custom-color="#195dfa"
	 src-table="salarios.planilla_gratificacion_ocacional"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gratificacion_ocacional_administracion" type="relfk"
	 custom-color="#0b1fff"
	 src-table="salarios.planilla_gratificacion_ocacional"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_gratificacion_ocacional_meses" type="relfk"
	 custom-color="#f310d0"
	 src-table="salarios.planilla_gratificacion_ocacional"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_profesionales_gestiones" type="relfk"
	 custom-color="#bec4e3"
	 src-table="salarios.planilla_profesionales"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_profesionales_administracion" type="relfk"
	 custom-color="#8a505e"
	 src-table="salarios.planilla_profesionales"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planilla_profesionales_meses" type="relfk"
	 custom-color="#d90cdb"
	 src-table="salarios.planilla_profesionales"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_aguinaldos_administracion" type="relfk"
	 custom-color="#1112d5"
	 src-table="salarios.planillas_aguinaldos"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_antiguedad_gestiones" type="relfk"
	 custom-color="#0080ee"
	 src-table="salarios.planillas_antiguedad"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_antiguedad_administracion" type="relfk"
	 custom-color="#ec8f43"
	 src-table="salarios.planillas_antiguedad"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_antiguedad_meses" type="relfk"
	 custom-color="#b9f330"
	 src-table="salarios.planillas_antiguedad"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_bonificaciones_gestiones" type="relfk"
	 custom-color="#20a916"
	 src-table="salarios.planillas_bonificaciones"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_bonificaciones_administracion" type="relfk"
	 custom-color="#16f900"
	 src-table="salarios.planillas_bonificaciones"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_bonificaciones_meses" type="relfk"
	 custom-color="#af418c"
	 src-table="salarios.planillas_bonificaciones"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_descuentos_planillas_salarios" type="relfk"
	 custom-color="#a46b28"
	 src-table="salarios.planillas_descuentos"
	 dst-table="salarios.planillas_salarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_descuentos_gestiones" type="relfk"
	 custom-color="#88ec5c"
	 src-table="salarios.planillas_descuentos"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_descuentos_administracion" type="relfk"
	 custom-color="#4aa640"
	 src-table="salarios.planillas_descuentos"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_descuentos_meses" type="relfk"
	 custom-color="#8302fa"
	 src-table="salarios.planillas_descuentos"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_descuentos_parametros" type="relfk"
	 custom-color="#1dc6fe"
	 src-table="salarios.planillas_descuentos"
	 dst-table="public.parametros"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_detalles_aguinaldos_administracion" type="relfk"
	 custom-color="#9bbe9f"
	 src-table="salarios.planillas_detalles_aguinaldos"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_detalles_aguinaldos_planillas_aguinaldos" type="relfk"
	 custom-color="#1f643d"
	 src-table="salarios.planillas_detalles_aguinaldos"
	 dst-table="salarios.planillas_aguinaldos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_otras_transferencias_ctes_detalles_planillas_otra" type="relfk"
	 custom-color="#9f4a7a"
	 src-table="salarios.planillas_otras_transferencias_ctes_detalles"
	 dst-table="salarios.planillas_otras_transferencias_ctes"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_otras_transferencias_ctes_detalles_administracion" type="relfk"
	 custom-color="#f9f7f6"
	 src-table="salarios.planillas_otras_transferencias_ctes_detalles"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_otras_transferencias_ctes_administracion" type="relfk"
	 custom-color="#f9acb3"
	 src-table="salarios.planillas_otras_transferencias_ctes"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_ra_gestiones" type="relfk"
	 custom-color="#bf12c7"
	 src-table="salarios.planillas_ra"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_ra_administracion" type="relfk"
	 custom-color="#8134a8"
	 src-table="salarios.planillas_ra"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_ra_meses" type="relfk"
	 custom-color="#9dc07c"
	 src-table="salarios.planillas_ra"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_ra_parametros_calculo_re_ra" type="relfk"
	 custom-color="#265293"
	 src-table="salarios.planillas_ra"
	 dst-table="salarios.parametros_calculo_re_ra"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_re_gestiones" type="relfk"
	 custom-color="#c71e7e"
	 src-table="salarios.planillas_re"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_re_administracion" type="relfk"
	 custom-color="#9adaad"
	 src-table="salarios.planillas_re"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_re_meses" type="relfk"
	 custom-color="#d25e81"
	 src-table="salarios.planillas_re"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_re_parametros_calculo_re_ra" type="relfk"
	 custom-color="#7ef02b"
	 src-table="salarios.planillas_re"
	 dst-table="salarios.parametros_calculo_re_ra"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_salarios_gestiones" type="relfk"
	 custom-color="#d8a6dd"
	 src-table="salarios.planillas_salarios"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_salarios_administracion" type="relfk"
	 custom-color="#b0bc6f"
	 src-table="salarios.planillas_salarios"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_salarios_planillas_salarios_estado" type="relfk"
	 custom-color="#2a166f"
	 src-table="salarios.planillas_salarios"
	 dst-table="salarios.planillas_salarios_estado"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_salarios_meses" type="relfk"
	 custom-color="#fea193"
	 src-table="salarios.planillas_salarios"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_salarios_parametros" type="relfk"
	 custom-color="#192a2f"
	 src-table="salarios.planillas_salarios"
	 dst-table="public.parametros"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_salarios_estado_administracion" type="relfk"
	 custom-color="#4f7fe2"
	 src-table="salarios.planillas_salarios_estado"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_subsidios_gestiones" type="relfk"
	 custom-color="#55e1a6"
	 src-table="salarios.planillas_subsidios"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_subsidios_administracion" type="relfk"
	 custom-color="#a3f8e5"
	 src-table="salarios.planillas_subsidios"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_subsidios_meses" type="relfk"
	 custom-color="#e62521"
	 src-table="salarios.planillas_subsidios"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_planillas_subsidios_parametros" type="relfk"
	 custom-color="#892bb9"
	 src-table="salarios.planillas_subsidios"
	 dst-table="public.parametros"
	 src-required="false" dst-required="false"/>

<relationship name="rel_retiros_voluntarios_planillas_administracion" type="relfk"
	 custom-color="#e9b47b"
	 src-table="salarios.retiros_voluntarios_planillas"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_retiros_voluntarios_planillas_detalles_detalles_planillas_s" type="relfk"
	 custom-color="#89d5bd"
	 src-table="salarios.retiros_voluntarios_planillas_detalles"
	 dst-table="salarios.detalles_planillas_salarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_retiros_voluntarios_planillas_detalles_funcionarios" type="relfk"
	 custom-color="#f3fa54"
	 src-table="salarios.retiros_voluntarios_planillas_detalles"
	 dst-table="legajos.funcionarios"
	 src-required="false" dst-required="false"/>

<relationship name="rel_retiros_voluntarios_planillas_detalles_retiros_voluntarios_" type="relfk"
	 custom-color="#415eeb"
	 src-table="salarios.retiros_voluntarios_planillas_detalles"
	 dst-table="salarios.retiros_voluntarios_planillas"
	 src-required="false" dst-required="false"/>

<relationship name="rel_retiros_voluntarios_planillas_detalles_descuentos_retiros_v" type="relfk"
	 custom-color="#d0db82"
	 src-table="salarios.retiros_voluntarios_planillas_detalles_descuentos"
	 dst-table="salarios.retiros_voluntarios_planillas_detalles"
	 src-required="false" dst-required="false"/>

<relationship name="rel_retiros_voluntarios_planillas_detalles_descuentos_tipos_des" type="relfk"
	 custom-color="#940287"
	 src-table="salarios.retiros_voluntarios_planillas_detalles_descuentos"
	 dst-table="salarios.tipos_descuentos"
	 src-required="false" dst-required="false"/>

<relationship name="rel_retiros_voluntarios_planillas_detalles_remuneraciones_retir" type="relfk"
	 custom-color="#dc1357"
	 src-table="salarios.retiros_voluntarios_planillas_detalles_remuneraciones"
	 dst-table="salarios.retiros_voluntarios_planillas_detalles"
	 src-required="false" dst-required="false"/>

<relationship name="rel_situacion_personal_gestiones" type="relfk"
	 custom-color="#a187ea"
	 src-table="salarios.situacion_personal"
	 dst-table="public.gestiones"
	 src-required="false" dst-required="false"/>

<relationship name="rel_situacion_personal_administracion" type="relfk"
	 custom-color="#c7beef"
	 src-table="salarios.situacion_personal"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_situacion_personal_meses" type="relfk"
	 custom-color="#5ea61c"
	 src-table="salarios.situacion_personal"
	 dst-table="public.meses"
	 src-required="false" dst-required="false"/>

<relationship name="rel_subsidios_administracion" type="relfk"
	 custom-color="#d833e3"
	 src-table="salarios.subsidios"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_tipos_aguinaldos_administracion" type="relfk"
	 custom-color="#974f48"
	 src-table="salarios.tipos_aguinaldos"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<relationship name="rel_tipos_descuentos_administracion" type="relfk"
	 custom-color="#75b1ca"
	 src-table="salarios.tipos_descuentos"
	 dst-table="seguridad.administracion"
	 src-required="false" dst-required="false"/>

<permission>
	<object name="salarios.planillas_salarios" type="table"/>
	<roles names="postgres"/>
	<privileges select="true" delete="true" insert="true" update="true" truncate="true" references="true" trigger="true"/>
</permission>
</dbmodel>
